
MCU_Assignment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002498  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080025a4  080025a4  000125a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080025c8  080025c8  0002003c  2**0
                  CONTENTS
  4 .ARM          00000000  080025c8  080025c8  0002003c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080025c8  080025c8  0002003c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080025c8  080025c8  000125c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080025cc  080025cc  000125cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000003c  20000000  080025d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  2000003c  0800260c  0002003c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e8  0800260c  000200e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000095c5  00000000  00000000  00020065  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ad0  00000000  00000000  0002962a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a90  00000000  00000000  0002b100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000988  00000000  00000000  0002bb90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001718f  00000000  00000000  0002c518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c0c4  00000000  00000000  000436a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008480e  00000000  00000000  0004f76b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d3f79  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002964  00000000  00000000  000d3fcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000003c 	.word	0x2000003c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800258c 	.word	0x0800258c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000040 	.word	0x20000040
 8000148:	0800258c 	.word	0x0800258c

0800014c <fsm_automatic>:
#include "timer.h"
#include "input_reading.h"
//#include "seven_seg.h"

//int counter_1 = 0, counter_2 = 0;
void fsm_automatic() {
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	switch (status) {
 8000150:	4b3e      	ldr	r3, [pc, #248]	; (800024c <fsm_automatic+0x100>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	3301      	adds	r3, #1
 8000156:	2b05      	cmp	r3, #5
 8000158:	d86d      	bhi.n	8000236 <fsm_automatic+0xea>
 800015a:	a201      	add	r2, pc, #4	; (adr r2, 8000160 <fsm_automatic+0x14>)
 800015c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000160:	08000179 	.word	0x08000179
 8000164:	08000181 	.word	0x08000181
 8000168:	0800019f 	.word	0x0800019f
 800016c:	080001c5 	.word	0x080001c5
 8000170:	080001eb 	.word	0x080001eb
 8000174:	08000211 	.word	0x08000211
		case INIT:
			status = MODE1;
 8000178:	4b34      	ldr	r3, [pc, #208]	; (800024c <fsm_automatic+0x100>)
 800017a:	2200      	movs	r2, #0
 800017c:	601a      	str	r2, [r3, #0]
			break;
 800017e:	e063      	b.n	8000248 <fsm_automatic+0xfc>
		case MODE1:
			led_config();
 8000180:	f000 f914 	bl	80003ac <led_config>
//			counter_1 = T_RED;
//			counter_2 = T_GREEN;
//			update7SEG_buffer_auto(counter_1, counter_2);
			setTimer0(T_GREEN*1000);
 8000184:	4b32      	ldr	r3, [pc, #200]	; (8000250 <fsm_automatic+0x104>)
 8000186:	681b      	ldr	r3, [r3, #0]
 8000188:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800018c:	fb02 f303 	mul.w	r3, r2, r3
 8000190:	4618      	mov	r0, r3
 8000192:	f000 fe0d 	bl	8000db0 <setTimer0>
//			setTimer4(1000);
			status = RED_GREEN;
 8000196:	4b2d      	ldr	r3, [pc, #180]	; (800024c <fsm_automatic+0x100>)
 8000198:	2201      	movs	r2, #1
 800019a:	601a      	str	r2, [r3, #0]
			break;
 800019c:	e054      	b.n	8000248 <fsm_automatic+0xfc>
		case RED_GREEN:
			led_config();
 800019e:	f000 f905 	bl	80003ac <led_config>
//				counter_2--;
//				if (counter_2 <= 0) counter_2 = T_AMBER;
//				update7SEG_buffer_auto(counter_1, counter_2);
//				setTimer4(1000);
//			}
			if (timer0_flag == 1) {
 80001a2:	4b2c      	ldr	r3, [pc, #176]	; (8000254 <fsm_automatic+0x108>)
 80001a4:	681b      	ldr	r3, [r3, #0]
 80001a6:	2b01      	cmp	r3, #1
 80001a8:	d147      	bne.n	800023a <fsm_automatic+0xee>
				setTimer0(T_AMBER*1000);
 80001aa:	4b2b      	ldr	r3, [pc, #172]	; (8000258 <fsm_automatic+0x10c>)
 80001ac:	681b      	ldr	r3, [r3, #0]
 80001ae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80001b2:	fb02 f303 	mul.w	r3, r2, r3
 80001b6:	4618      	mov	r0, r3
 80001b8:	f000 fdfa 	bl	8000db0 <setTimer0>
				status = RED_AMBER;
 80001bc:	4b23      	ldr	r3, [pc, #140]	; (800024c <fsm_automatic+0x100>)
 80001be:	2202      	movs	r2, #2
 80001c0:	601a      	str	r2, [r3, #0]
			}
			break;
 80001c2:	e03a      	b.n	800023a <fsm_automatic+0xee>
		case RED_AMBER:
			led_config();
 80001c4:	f000 f8f2 	bl	80003ac <led_config>
//					counter_2 = T_RED;
//				}
//				update7SEG_buffer_auto(counter_1, counter_2);
//				setTimer4(1000);
//			}
			if (timer0_flag == 1) {
 80001c8:	4b22      	ldr	r3, [pc, #136]	; (8000254 <fsm_automatic+0x108>)
 80001ca:	681b      	ldr	r3, [r3, #0]
 80001cc:	2b01      	cmp	r3, #1
 80001ce:	d136      	bne.n	800023e <fsm_automatic+0xf2>
				setTimer0(T_GREEN*1000);
 80001d0:	4b1f      	ldr	r3, [pc, #124]	; (8000250 <fsm_automatic+0x104>)
 80001d2:	681b      	ldr	r3, [r3, #0]
 80001d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80001d8:	fb02 f303 	mul.w	r3, r2, r3
 80001dc:	4618      	mov	r0, r3
 80001de:	f000 fde7 	bl	8000db0 <setTimer0>
				status = GREEN_RED;
 80001e2:	4b1a      	ldr	r3, [pc, #104]	; (800024c <fsm_automatic+0x100>)
 80001e4:	2203      	movs	r2, #3
 80001e6:	601a      	str	r2, [r3, #0]
			}
			break;
 80001e8:	e029      	b.n	800023e <fsm_automatic+0xf2>
		case GREEN_RED:
			led_config();
 80001ea:	f000 f8df 	bl	80003ac <led_config>
//				counter_2--;
//				if (counter_1 <= 0) counter_1 = T_AMBER;
//				update7SEG_buffer_auto(counter_1, counter_2);
//				setTimer4(1000);
//			}
			if (timer0_flag == 1) {
 80001ee:	4b19      	ldr	r3, [pc, #100]	; (8000254 <fsm_automatic+0x108>)
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	2b01      	cmp	r3, #1
 80001f4:	d125      	bne.n	8000242 <fsm_automatic+0xf6>
				setTimer0(T_AMBER*1000);
 80001f6:	4b18      	ldr	r3, [pc, #96]	; (8000258 <fsm_automatic+0x10c>)
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80001fe:	fb02 f303 	mul.w	r3, r2, r3
 8000202:	4618      	mov	r0, r3
 8000204:	f000 fdd4 	bl	8000db0 <setTimer0>
				status = AMBER_RED;
 8000208:	4b10      	ldr	r3, [pc, #64]	; (800024c <fsm_automatic+0x100>)
 800020a:	2204      	movs	r2, #4
 800020c:	601a      	str	r2, [r3, #0]
			}
			break;
 800020e:	e018      	b.n	8000242 <fsm_automatic+0xf6>
		case AMBER_RED:
			led_config();
 8000210:	f000 f8cc 	bl	80003ac <led_config>
//					counter_2 = T_GREEN;
//				}
//				update7SEG_buffer_auto(counter_1, counter_2);
//				setTimer4(1000);
//			}
			if (timer0_flag == 1) {
 8000214:	4b0f      	ldr	r3, [pc, #60]	; (8000254 <fsm_automatic+0x108>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	2b01      	cmp	r3, #1
 800021a:	d114      	bne.n	8000246 <fsm_automatic+0xfa>
				setTimer0(T_GREEN*1000);
 800021c:	4b0c      	ldr	r3, [pc, #48]	; (8000250 <fsm_automatic+0x104>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000224:	fb02 f303 	mul.w	r3, r2, r3
 8000228:	4618      	mov	r0, r3
 800022a:	f000 fdc1 	bl	8000db0 <setTimer0>
				status = RED_GREEN;
 800022e:	4b07      	ldr	r3, [pc, #28]	; (800024c <fsm_automatic+0x100>)
 8000230:	2201      	movs	r2, #1
 8000232:	601a      	str	r2, [r3, #0]
			}
			break;
 8000234:	e007      	b.n	8000246 <fsm_automatic+0xfa>
		default:
			break;
 8000236:	bf00      	nop
 8000238:	e006      	b.n	8000248 <fsm_automatic+0xfc>
			break;
 800023a:	bf00      	nop
 800023c:	e004      	b.n	8000248 <fsm_automatic+0xfc>
			break;
 800023e:	bf00      	nop
 8000240:	e002      	b.n	8000248 <fsm_automatic+0xfc>
			break;
 8000242:	bf00      	nop
 8000244:	e000      	b.n	8000248 <fsm_automatic+0xfc>
			break;
 8000246:	bf00      	nop
	}
}
 8000248:	bf00      	nop
 800024a:	bd80      	pop	{r7, pc}
 800024c:	2000000c 	.word	0x2000000c
 8000250:	20000008 	.word	0x20000008
 8000254:	20000088 	.word	0x20000088
 8000258:	20000004 	.word	0x20000004

0800025c <fsm_red_manual>:
#include "global.h"
#include "fsm_manual.h"
#include "timer.h"
//#include "seven_seg.h"

void fsm_red_manual() {
 800025c:	b580      	push	{r7, lr}
 800025e:	af00      	add	r7, sp, #0
	switch(status) {
 8000260:	4b18      	ldr	r3, [pc, #96]	; (80002c4 <fsm_red_manual+0x68>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	2b07      	cmp	r3, #7
 8000266:	d01b      	beq.n	80002a0 <fsm_red_manual+0x44>
 8000268:	2b07      	cmp	r3, #7
 800026a:	dc24      	bgt.n	80002b6 <fsm_red_manual+0x5a>
 800026c:	2b05      	cmp	r3, #5
 800026e:	d002      	beq.n	8000276 <fsm_red_manual+0x1a>
 8000270:	2b06      	cmp	r3, #6
 8000272:	d00a      	beq.n	800028a <fsm_red_manual+0x2e>
				toggle_red();
				setTimer1(500);
			}
			break;
		default:
			break;
 8000274:	e01f      	b.n	80002b6 <fsm_red_manual+0x5a>
			led_config();
 8000276:	f000 f899 	bl	80003ac <led_config>
			setTimer1(500);
 800027a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800027e:	f000 fdb1 	bl	8000de4 <setTimer1>
			status = AUTO_RED;
 8000282:	4b10      	ldr	r3, [pc, #64]	; (80002c4 <fsm_red_manual+0x68>)
 8000284:	2206      	movs	r2, #6
 8000286:	601a      	str	r2, [r3, #0]
			break;
 8000288:	e01a      	b.n	80002c0 <fsm_red_manual+0x64>
			if (timer1_flag == 1) {
 800028a:	4b0f      	ldr	r3, [pc, #60]	; (80002c8 <fsm_red_manual+0x6c>)
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	2b01      	cmp	r3, #1
 8000290:	d113      	bne.n	80002ba <fsm_red_manual+0x5e>
				toggle_red();
 8000292:	f000 f971 	bl	8000578 <toggle_red>
				setTimer1(500);
 8000296:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800029a:	f000 fda3 	bl	8000de4 <setTimer1>
			break;
 800029e:	e00c      	b.n	80002ba <fsm_red_manual+0x5e>
			if (timer1_flag == 1) {
 80002a0:	4b09      	ldr	r3, [pc, #36]	; (80002c8 <fsm_red_manual+0x6c>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	2b01      	cmp	r3, #1
 80002a6:	d10a      	bne.n	80002be <fsm_red_manual+0x62>
				toggle_red();
 80002a8:	f000 f966 	bl	8000578 <toggle_red>
				setTimer1(500);
 80002ac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80002b0:	f000 fd98 	bl	8000de4 <setTimer1>
			break;
 80002b4:	e003      	b.n	80002be <fsm_red_manual+0x62>
			break;
 80002b6:	bf00      	nop
 80002b8:	e002      	b.n	80002c0 <fsm_red_manual+0x64>
			break;
 80002ba:	bf00      	nop
 80002bc:	e000      	b.n	80002c0 <fsm_red_manual+0x64>
			break;
 80002be:	bf00      	nop
	}
}
 80002c0:	bf00      	nop
 80002c2:	bd80      	pop	{r7, pc}
 80002c4:	2000000c 	.word	0x2000000c
 80002c8:	2000008c 	.word	0x2000008c

080002cc <fsm_amber_manual>:

void fsm_amber_manual() {
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
	switch(status) {
 80002d0:	4b18      	ldr	r3, [pc, #96]	; (8000334 <fsm_amber_manual+0x68>)
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	2b0a      	cmp	r3, #10
 80002d6:	d01b      	beq.n	8000310 <fsm_amber_manual+0x44>
 80002d8:	2b0a      	cmp	r3, #10
 80002da:	dc24      	bgt.n	8000326 <fsm_amber_manual+0x5a>
 80002dc:	2b08      	cmp	r3, #8
 80002de:	d002      	beq.n	80002e6 <fsm_amber_manual+0x1a>
 80002e0:	2b09      	cmp	r3, #9
 80002e2:	d00a      	beq.n	80002fa <fsm_amber_manual+0x2e>
				toggle_amber();
				setTimer1(500);
			}
			break;
		default:
			break;
 80002e4:	e01f      	b.n	8000326 <fsm_amber_manual+0x5a>
			led_config();
 80002e6:	f000 f861 	bl	80003ac <led_config>
			setTimer1(500);
 80002ea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80002ee:	f000 fd79 	bl	8000de4 <setTimer1>
			status = AUTO_AMBER;
 80002f2:	4b10      	ldr	r3, [pc, #64]	; (8000334 <fsm_amber_manual+0x68>)
 80002f4:	2209      	movs	r2, #9
 80002f6:	601a      	str	r2, [r3, #0]
			break;
 80002f8:	e01a      	b.n	8000330 <fsm_amber_manual+0x64>
			if (timer1_flag == 1) {
 80002fa:	4b0f      	ldr	r3, [pc, #60]	; (8000338 <fsm_amber_manual+0x6c>)
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	2b01      	cmp	r3, #1
 8000300:	d113      	bne.n	800032a <fsm_amber_manual+0x5e>
				toggle_amber();
 8000302:	f000 f953 	bl	80005ac <toggle_amber>
				setTimer1(500);
 8000306:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800030a:	f000 fd6b 	bl	8000de4 <setTimer1>
			break;
 800030e:	e00c      	b.n	800032a <fsm_amber_manual+0x5e>
			if (timer1_flag == 1) {
 8000310:	4b09      	ldr	r3, [pc, #36]	; (8000338 <fsm_amber_manual+0x6c>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	2b01      	cmp	r3, #1
 8000316:	d10a      	bne.n	800032e <fsm_amber_manual+0x62>
				toggle_amber();
 8000318:	f000 f948 	bl	80005ac <toggle_amber>
				setTimer1(500);
 800031c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000320:	f000 fd60 	bl	8000de4 <setTimer1>
			break;
 8000324:	e003      	b.n	800032e <fsm_amber_manual+0x62>
			break;
 8000326:	bf00      	nop
 8000328:	e002      	b.n	8000330 <fsm_amber_manual+0x64>
			break;
 800032a:	bf00      	nop
 800032c:	e000      	b.n	8000330 <fsm_amber_manual+0x64>
			break;
 800032e:	bf00      	nop
	}
}
 8000330:	bf00      	nop
 8000332:	bd80      	pop	{r7, pc}
 8000334:	2000000c 	.word	0x2000000c
 8000338:	2000008c 	.word	0x2000008c

0800033c <fsm_green_manual>:

void fsm_green_manual() {
 800033c:	b580      	push	{r7, lr}
 800033e:	af00      	add	r7, sp, #0
	switch(status) {
 8000340:	4b18      	ldr	r3, [pc, #96]	; (80003a4 <fsm_green_manual+0x68>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	2b0d      	cmp	r3, #13
 8000346:	d01b      	beq.n	8000380 <fsm_green_manual+0x44>
 8000348:	2b0d      	cmp	r3, #13
 800034a:	dc24      	bgt.n	8000396 <fsm_green_manual+0x5a>
 800034c:	2b0b      	cmp	r3, #11
 800034e:	d002      	beq.n	8000356 <fsm_green_manual+0x1a>
 8000350:	2b0c      	cmp	r3, #12
 8000352:	d00a      	beq.n	800036a <fsm_green_manual+0x2e>
				toggle_green();
				setTimer1(500);
			}
			break;
		default:
			break;
 8000354:	e01f      	b.n	8000396 <fsm_green_manual+0x5a>
			led_config();
 8000356:	f000 f829 	bl	80003ac <led_config>
			setTimer1(500);
 800035a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800035e:	f000 fd41 	bl	8000de4 <setTimer1>
			status = AUTO_GREEN;
 8000362:	4b10      	ldr	r3, [pc, #64]	; (80003a4 <fsm_green_manual+0x68>)
 8000364:	220c      	movs	r2, #12
 8000366:	601a      	str	r2, [r3, #0]
			break;
 8000368:	e01a      	b.n	80003a0 <fsm_green_manual+0x64>
			if (timer1_flag == 1) {
 800036a:	4b0f      	ldr	r3, [pc, #60]	; (80003a8 <fsm_green_manual+0x6c>)
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	2b01      	cmp	r3, #1
 8000370:	d113      	bne.n	800039a <fsm_green_manual+0x5e>
				toggle_green();
 8000372:	f000 f935 	bl	80005e0 <toggle_green>
				setTimer1(500);
 8000376:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800037a:	f000 fd33 	bl	8000de4 <setTimer1>
			break;
 800037e:	e00c      	b.n	800039a <fsm_green_manual+0x5e>
			if (timer1_flag == 1) {
 8000380:	4b09      	ldr	r3, [pc, #36]	; (80003a8 <fsm_green_manual+0x6c>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	2b01      	cmp	r3, #1
 8000386:	d10a      	bne.n	800039e <fsm_green_manual+0x62>
				toggle_green();
 8000388:	f000 f92a 	bl	80005e0 <toggle_green>
				setTimer1(500);
 800038c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000390:	f000 fd28 	bl	8000de4 <setTimer1>
			break;
 8000394:	e003      	b.n	800039e <fsm_green_manual+0x62>
			break;
 8000396:	bf00      	nop
 8000398:	e002      	b.n	80003a0 <fsm_green_manual+0x64>
			break;
 800039a:	bf00      	nop
 800039c:	e000      	b.n	80003a0 <fsm_green_manual+0x64>
			break;
 800039e:	bf00      	nop
	}
}
 80003a0:	bf00      	nop
 80003a2:	bd80      	pop	{r7, pc}
 80003a4:	2000000c 	.word	0x2000000c
 80003a8:	2000008c 	.word	0x2000008c

080003ac <led_config>:
void on_amber_road_1();
void on_amber_road_2();
void on_green_road_1();
void on_green_road_2();

void led_config() {
 80003ac:	b580      	push	{r7, lr}
 80003ae:	af00      	add	r7, sp, #0
	switch (status) {
 80003b0:	4b27      	ldr	r3, [pc, #156]	; (8000450 <led_config+0xa4>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	2b0b      	cmp	r3, #11
 80003b6:	d848      	bhi.n	800044a <led_config+0x9e>
 80003b8:	a201      	add	r2, pc, #4	; (adr r2, 80003c0 <led_config+0x14>)
 80003ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003be:	bf00      	nop
 80003c0:	080003f1 	.word	0x080003f1
 80003c4:	080003fb 	.word	0x080003fb
 80003c8:	08000405 	.word	0x08000405
 80003cc:	0800040b 	.word	0x0800040b
 80003d0:	08000415 	.word	0x08000415
 80003d4:	0800041b 	.word	0x0800041b
 80003d8:	0800044b 	.word	0x0800044b
 80003dc:	0800044b 	.word	0x0800044b
 80003e0:	0800042b 	.word	0x0800042b
 80003e4:	0800044b 	.word	0x0800044b
 80003e8:	0800044b 	.word	0x0800044b
 80003ec:	0800043b 	.word	0x0800043b
		case MODE1:
			off_all_leds_road_1();
 80003f0:	f000 f832 	bl	8000458 <off_all_leds_road_1>
			off_all_leds_road_2();
 80003f4:	f000 f844 	bl	8000480 <off_all_leds_road_2>
			break;
 80003f8:	e028      	b.n	800044c <led_config+0xa0>
		case RED_GREEN:
			on_red_road_1();
 80003fa:	f000 f851 	bl	80004a0 <on_red_road_1>
			on_green_road_2();
 80003fe:	f000 f8ab 	bl	8000558 <on_green_road_2>
			break;
 8000402:	e023      	b.n	800044c <led_config+0xa0>
		case RED_AMBER:
			on_amber_road_2();
 8000404:	f000 f884 	bl	8000510 <on_amber_road_2>
			break;
 8000408:	e020      	b.n	800044c <led_config+0xa0>
		case GREEN_RED:
			on_green_road_1();
 800040a:	f000 f891 	bl	8000530 <on_green_road_1>
			on_red_road_2();
 800040e:	f000 f85b 	bl	80004c8 <on_red_road_2>
			break;
 8000412:	e01b      	b.n	800044c <led_config+0xa0>
		case AMBER_RED:
			on_amber_road_1();
 8000414:	f000 f868 	bl	80004e8 <on_amber_road_1>
			break;
 8000418:	e018      	b.n	800044c <led_config+0xa0>
		case MODE2:
			on_red_road_1();
 800041a:	f000 f841 	bl	80004a0 <on_red_road_1>
			on_red_road_2();
 800041e:	f000 f853 	bl	80004c8 <on_red_road_2>
			toggle_flag = 0;
 8000422:	4b0c      	ldr	r3, [pc, #48]	; (8000454 <led_config+0xa8>)
 8000424:	2200      	movs	r2, #0
 8000426:	601a      	str	r2, [r3, #0]
			break;
 8000428:	e010      	b.n	800044c <led_config+0xa0>
		case MODE3:
			on_amber_road_1();
 800042a:	f000 f85d 	bl	80004e8 <on_amber_road_1>
			on_amber_road_2();
 800042e:	f000 f86f 	bl	8000510 <on_amber_road_2>
			toggle_flag = 0;
 8000432:	4b08      	ldr	r3, [pc, #32]	; (8000454 <led_config+0xa8>)
 8000434:	2200      	movs	r2, #0
 8000436:	601a      	str	r2, [r3, #0]
			break;
 8000438:	e008      	b.n	800044c <led_config+0xa0>
		case MODE4:
			on_green_road_1();
 800043a:	f000 f879 	bl	8000530 <on_green_road_1>
			on_green_road_2();
 800043e:	f000 f88b 	bl	8000558 <on_green_road_2>
			toggle_flag = 0;
 8000442:	4b04      	ldr	r3, [pc, #16]	; (8000454 <led_config+0xa8>)
 8000444:	2200      	movs	r2, #0
 8000446:	601a      	str	r2, [r3, #0]
			break;
 8000448:	e000      	b.n	800044c <led_config+0xa0>
		default:
			break;
 800044a:	bf00      	nop
	}
}
 800044c:	bf00      	nop
 800044e:	bd80      	pop	{r7, pc}
 8000450:	2000000c 	.word	0x2000000c
 8000454:	20000058 	.word	0x20000058

08000458 <off_all_leds_road_1>:

void off_all_leds_road_1() {
 8000458:	b580      	push	{r7, lr}
 800045a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (D2_LED1_GPIO_Port, D2_LED1_Pin, 0);
 800045c:	2200      	movs	r2, #0
 800045e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000462:	4805      	ldr	r0, [pc, #20]	; (8000478 <off_all_leds_road_1+0x20>)
 8000464:	f001 f873 	bl	800154e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (D3_LED1_GPIO_Port, D3_LED1_Pin, 0);
 8000468:	2200      	movs	r2, #0
 800046a:	2108      	movs	r1, #8
 800046c:	4803      	ldr	r0, [pc, #12]	; (800047c <off_all_leds_road_1+0x24>)
 800046e:	f001 f86e 	bl	800154e <HAL_GPIO_WritePin>
}
 8000472:	bf00      	nop
 8000474:	bd80      	pop	{r7, pc}
 8000476:	bf00      	nop
 8000478:	40010800 	.word	0x40010800
 800047c:	40010c00 	.word	0x40010c00

08000480 <off_all_leds_road_2>:

void off_all_leds_road_2() {
 8000480:	b580      	push	{r7, lr}
 8000482:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (D4_LED2_GPIO_Port, D4_LED2_Pin, 0);
 8000484:	2200      	movs	r2, #0
 8000486:	2120      	movs	r1, #32
 8000488:	4804      	ldr	r0, [pc, #16]	; (800049c <off_all_leds_road_2+0x1c>)
 800048a:	f001 f860 	bl	800154e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (D5_LED2_GPIO_Port, D5_LED2_Pin, 0);
 800048e:	2200      	movs	r2, #0
 8000490:	2110      	movs	r1, #16
 8000492:	4802      	ldr	r0, [pc, #8]	; (800049c <off_all_leds_road_2+0x1c>)
 8000494:	f001 f85b 	bl	800154e <HAL_GPIO_WritePin>
}
 8000498:	bf00      	nop
 800049a:	bd80      	pop	{r7, pc}
 800049c:	40010c00 	.word	0x40010c00

080004a0 <on_red_road_1>:

void on_red_road_1() {
 80004a0:	b580      	push	{r7, lr}
 80004a2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (D2_LED1_GPIO_Port, D2_LED1_Pin, 1);
 80004a4:	2201      	movs	r2, #1
 80004a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004aa:	4805      	ldr	r0, [pc, #20]	; (80004c0 <on_red_road_1+0x20>)
 80004ac:	f001 f84f 	bl	800154e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (D3_LED1_GPIO_Port, D3_LED1_Pin, 0);
 80004b0:	2200      	movs	r2, #0
 80004b2:	2108      	movs	r1, #8
 80004b4:	4803      	ldr	r0, [pc, #12]	; (80004c4 <on_red_road_1+0x24>)
 80004b6:	f001 f84a 	bl	800154e <HAL_GPIO_WritePin>
}
 80004ba:	bf00      	nop
 80004bc:	bd80      	pop	{r7, pc}
 80004be:	bf00      	nop
 80004c0:	40010800 	.word	0x40010800
 80004c4:	40010c00 	.word	0x40010c00

080004c8 <on_red_road_2>:

void on_red_road_2() {
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (D4_LED2_GPIO_Port, D4_LED2_Pin, 1);
 80004cc:	2201      	movs	r2, #1
 80004ce:	2120      	movs	r1, #32
 80004d0:	4804      	ldr	r0, [pc, #16]	; (80004e4 <on_red_road_2+0x1c>)
 80004d2:	f001 f83c 	bl	800154e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (D5_LED2_GPIO_Port, D5_LED2_Pin, 0);
 80004d6:	2200      	movs	r2, #0
 80004d8:	2110      	movs	r1, #16
 80004da:	4802      	ldr	r0, [pc, #8]	; (80004e4 <on_red_road_2+0x1c>)
 80004dc:	f001 f837 	bl	800154e <HAL_GPIO_WritePin>
}
 80004e0:	bf00      	nop
 80004e2:	bd80      	pop	{r7, pc}
 80004e4:	40010c00 	.word	0x40010c00

080004e8 <on_amber_road_1>:

void on_amber_road_1() {
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (D2_LED1_GPIO_Port, D2_LED1_Pin, 1);
 80004ec:	2201      	movs	r2, #1
 80004ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004f2:	4805      	ldr	r0, [pc, #20]	; (8000508 <on_amber_road_1+0x20>)
 80004f4:	f001 f82b 	bl	800154e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (D3_LED1_GPIO_Port, D3_LED1_Pin, 1);
 80004f8:	2201      	movs	r2, #1
 80004fa:	2108      	movs	r1, #8
 80004fc:	4803      	ldr	r0, [pc, #12]	; (800050c <on_amber_road_1+0x24>)
 80004fe:	f001 f826 	bl	800154e <HAL_GPIO_WritePin>
}
 8000502:	bf00      	nop
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	40010800 	.word	0x40010800
 800050c:	40010c00 	.word	0x40010c00

08000510 <on_amber_road_2>:

void on_amber_road_2() {
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (D4_LED2_GPIO_Port, D4_LED2_Pin, 1);
 8000514:	2201      	movs	r2, #1
 8000516:	2120      	movs	r1, #32
 8000518:	4804      	ldr	r0, [pc, #16]	; (800052c <on_amber_road_2+0x1c>)
 800051a:	f001 f818 	bl	800154e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (D5_LED2_GPIO_Port, D5_LED2_Pin, 1);
 800051e:	2201      	movs	r2, #1
 8000520:	2110      	movs	r1, #16
 8000522:	4802      	ldr	r0, [pc, #8]	; (800052c <on_amber_road_2+0x1c>)
 8000524:	f001 f813 	bl	800154e <HAL_GPIO_WritePin>
}
 8000528:	bf00      	nop
 800052a:	bd80      	pop	{r7, pc}
 800052c:	40010c00 	.word	0x40010c00

08000530 <on_green_road_1>:

void on_green_road_1() {
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (D2_LED1_GPIO_Port, D2_LED1_Pin, 0);
 8000534:	2200      	movs	r2, #0
 8000536:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800053a:	4805      	ldr	r0, [pc, #20]	; (8000550 <on_green_road_1+0x20>)
 800053c:	f001 f807 	bl	800154e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (D3_LED1_GPIO_Port, D3_LED1_Pin, 1);
 8000540:	2201      	movs	r2, #1
 8000542:	2108      	movs	r1, #8
 8000544:	4803      	ldr	r0, [pc, #12]	; (8000554 <on_green_road_1+0x24>)
 8000546:	f001 f802 	bl	800154e <HAL_GPIO_WritePin>
}
 800054a:	bf00      	nop
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	40010800 	.word	0x40010800
 8000554:	40010c00 	.word	0x40010c00

08000558 <on_green_road_2>:

void on_green_road_2() {
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (D4_LED2_GPIO_Port, D4_LED2_Pin, 0);
 800055c:	2200      	movs	r2, #0
 800055e:	2120      	movs	r1, #32
 8000560:	4804      	ldr	r0, [pc, #16]	; (8000574 <on_green_road_2+0x1c>)
 8000562:	f000 fff4 	bl	800154e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (D5_LED2_GPIO_Port, D5_LED2_Pin, 1);
 8000566:	2201      	movs	r2, #1
 8000568:	2110      	movs	r1, #16
 800056a:	4802      	ldr	r0, [pc, #8]	; (8000574 <on_green_road_2+0x1c>)
 800056c:	f000 ffef 	bl	800154e <HAL_GPIO_WritePin>
}
 8000570:	bf00      	nop
 8000572:	bd80      	pop	{r7, pc}
 8000574:	40010c00 	.word	0x40010c00

08000578 <toggle_red>:


void toggle_red() {
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
	if (toggle_flag == 0) {
 800057c:	4b0a      	ldr	r3, [pc, #40]	; (80005a8 <toggle_red+0x30>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	2b00      	cmp	r3, #0
 8000582:	d107      	bne.n	8000594 <toggle_red+0x1c>
		on_red_road_1();
 8000584:	f7ff ff8c 	bl	80004a0 <on_red_road_1>
		on_red_road_2();
 8000588:	f7ff ff9e 	bl	80004c8 <on_red_road_2>
		toggle_flag = 1;
 800058c:	4b06      	ldr	r3, [pc, #24]	; (80005a8 <toggle_red+0x30>)
 800058e:	2201      	movs	r2, #1
 8000590:	601a      	str	r2, [r3, #0]
	} else {
		off_all_leds_road_1();
		off_all_leds_road_2();
		toggle_flag = 0;
	}
}
 8000592:	e006      	b.n	80005a2 <toggle_red+0x2a>
		off_all_leds_road_1();
 8000594:	f7ff ff60 	bl	8000458 <off_all_leds_road_1>
		off_all_leds_road_2();
 8000598:	f7ff ff72 	bl	8000480 <off_all_leds_road_2>
		toggle_flag = 0;
 800059c:	4b02      	ldr	r3, [pc, #8]	; (80005a8 <toggle_red+0x30>)
 800059e:	2200      	movs	r2, #0
 80005a0:	601a      	str	r2, [r3, #0]
}
 80005a2:	bf00      	nop
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	20000058 	.word	0x20000058

080005ac <toggle_amber>:

void toggle_amber() {
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
	if (toggle_flag == 0) {
 80005b0:	4b0a      	ldr	r3, [pc, #40]	; (80005dc <toggle_amber+0x30>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d107      	bne.n	80005c8 <toggle_amber+0x1c>
		on_amber_road_1();
 80005b8:	f7ff ff96 	bl	80004e8 <on_amber_road_1>
		on_amber_road_2();
 80005bc:	f7ff ffa8 	bl	8000510 <on_amber_road_2>
		toggle_flag = 1;
 80005c0:	4b06      	ldr	r3, [pc, #24]	; (80005dc <toggle_amber+0x30>)
 80005c2:	2201      	movs	r2, #1
 80005c4:	601a      	str	r2, [r3, #0]
	} else {
		off_all_leds_road_1();
		off_all_leds_road_2();
		toggle_flag = 0;
	}
}
 80005c6:	e006      	b.n	80005d6 <toggle_amber+0x2a>
		off_all_leds_road_1();
 80005c8:	f7ff ff46 	bl	8000458 <off_all_leds_road_1>
		off_all_leds_road_2();
 80005cc:	f7ff ff58 	bl	8000480 <off_all_leds_road_2>
		toggle_flag = 0;
 80005d0:	4b02      	ldr	r3, [pc, #8]	; (80005dc <toggle_amber+0x30>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	601a      	str	r2, [r3, #0]
}
 80005d6:	bf00      	nop
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	20000058 	.word	0x20000058

080005e0 <toggle_green>:

void toggle_green() {
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
	if (toggle_flag == 0) {
 80005e4:	4b0a      	ldr	r3, [pc, #40]	; (8000610 <toggle_green+0x30>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d107      	bne.n	80005fc <toggle_green+0x1c>
		on_green_road_1();
 80005ec:	f7ff ffa0 	bl	8000530 <on_green_road_1>
		on_green_road_2();
 80005f0:	f7ff ffb2 	bl	8000558 <on_green_road_2>
		toggle_flag = 1;
 80005f4:	4b06      	ldr	r3, [pc, #24]	; (8000610 <toggle_green+0x30>)
 80005f6:	2201      	movs	r2, #1
 80005f8:	601a      	str	r2, [r3, #0]
	} else {
		off_all_leds_road_1();
		off_all_leds_road_2();
		toggle_flag = 0;
	}
}
 80005fa:	e006      	b.n	800060a <toggle_green+0x2a>
		off_all_leds_road_1();
 80005fc:	f7ff ff2c 	bl	8000458 <off_all_leds_road_1>
		off_all_leds_road_2();
 8000600:	f7ff ff3e 	bl	8000480 <off_all_leds_road_2>
		toggle_flag = 0;
 8000604:	4b02      	ldr	r3, [pc, #8]	; (8000610 <toggle_green+0x30>)
 8000606:	2200      	movs	r2, #0
 8000608:	601a      	str	r2, [r3, #0]
}
 800060a:	bf00      	nop
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	20000058 	.word	0x20000058

08000614 <fsm_button_processing>:
enum ButtonState{BUTTON_RELEASED, BUTTON_PRESSED, BUTTON_PRESSED_MORE_THAN_1_SECOND};
enum ButtonState button_1_state = BUTTON_PRESSED;
enum ButtonState button_2_state = BUTTON_PRESSED;
enum ButtonState button_3_state = BUTTON_PRESSED;

void fsm_button_processing() {
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
	switch (button_1_state) {
 8000618:	4b9f      	ldr	r3, [pc, #636]	; (8000898 <fsm_button_processing+0x284>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	2b02      	cmp	r3, #2
 800061e:	d040      	beq.n	80006a2 <fsm_button_processing+0x8e>
 8000620:	2b02      	cmp	r3, #2
 8000622:	dc4d      	bgt.n	80006c0 <fsm_button_processing+0xac>
 8000624:	2b00      	cmp	r3, #0
 8000626:	d002      	beq.n	800062e <fsm_button_processing+0x1a>
 8000628:	2b01      	cmp	r3, #1
 800062a:	d026      	beq.n	800067a <fsm_button_processing+0x66>
 800062c:	e048      	b.n	80006c0 <fsm_button_processing+0xac>
		case BUTTON_RELEASED:
			if (is_button_pressed(1)) {
 800062e:	2001      	movs	r0, #1
 8000630:	f000 f9d4 	bl	80009dc <is_button_pressed>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d03d      	beq.n	80006b6 <fsm_button_processing+0xa2>
				button_1_state = BUTTON_PRESSED;
 800063a:	4b97      	ldr	r3, [pc, #604]	; (8000898 <fsm_button_processing+0x284>)
 800063c:	2201      	movs	r2, #1
 800063e:	701a      	strb	r2, [r3, #0]
				if (status == RED_GREEN) 	status = MODE2;
 8000640:	4b96      	ldr	r3, [pc, #600]	; (800089c <fsm_button_processing+0x288>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	2b01      	cmp	r3, #1
 8000646:	d102      	bne.n	800064e <fsm_button_processing+0x3a>
 8000648:	4b94      	ldr	r3, [pc, #592]	; (800089c <fsm_button_processing+0x288>)
 800064a:	2205      	movs	r2, #5
 800064c:	601a      	str	r2, [r3, #0]
				if (status == AUTO_RED) 	status = MODE3;
 800064e:	4b93      	ldr	r3, [pc, #588]	; (800089c <fsm_button_processing+0x288>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	2b06      	cmp	r3, #6
 8000654:	d102      	bne.n	800065c <fsm_button_processing+0x48>
 8000656:	4b91      	ldr	r3, [pc, #580]	; (800089c <fsm_button_processing+0x288>)
 8000658:	2208      	movs	r2, #8
 800065a:	601a      	str	r2, [r3, #0]
				if (status == AUTO_AMBER) 	status = MODE4;
 800065c:	4b8f      	ldr	r3, [pc, #572]	; (800089c <fsm_button_processing+0x288>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	2b09      	cmp	r3, #9
 8000662:	d102      	bne.n	800066a <fsm_button_processing+0x56>
 8000664:	4b8d      	ldr	r3, [pc, #564]	; (800089c <fsm_button_processing+0x288>)
 8000666:	220b      	movs	r2, #11
 8000668:	601a      	str	r2, [r3, #0]
				if (status == AUTO_GREEN) 	status = MODE1;
 800066a:	4b8c      	ldr	r3, [pc, #560]	; (800089c <fsm_button_processing+0x288>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	2b0c      	cmp	r3, #12
 8000670:	d121      	bne.n	80006b6 <fsm_button_processing+0xa2>
 8000672:	4b8a      	ldr	r3, [pc, #552]	; (800089c <fsm_button_processing+0x288>)
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
			}
			break;
 8000678:	e01d      	b.n	80006b6 <fsm_button_processing+0xa2>
		case BUTTON_PRESSED:
			if (!is_button_pressed(1)) {
 800067a:	2001      	movs	r0, #1
 800067c:	f000 f9ae 	bl	80009dc <is_button_pressed>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d103      	bne.n	800068e <fsm_button_processing+0x7a>
				button_1_state = BUTTON_RELEASED;
 8000686:	4b84      	ldr	r3, [pc, #528]	; (8000898 <fsm_button_processing+0x284>)
 8000688:	2200      	movs	r2, #0
 800068a:	701a      	strb	r2, [r3, #0]
			} else {
				if (is_button_pressed_1s(1)) {
					button_1_state = BUTTON_PRESSED_MORE_THAN_1_SECOND;
				}
			}
			break;
 800068c:	e015      	b.n	80006ba <fsm_button_processing+0xa6>
				if (is_button_pressed_1s(1)) {
 800068e:	2001      	movs	r0, #1
 8000690:	f000 f9be 	bl	8000a10 <is_button_pressed_1s>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d00f      	beq.n	80006ba <fsm_button_processing+0xa6>
					button_1_state = BUTTON_PRESSED_MORE_THAN_1_SECOND;
 800069a:	4b7f      	ldr	r3, [pc, #508]	; (8000898 <fsm_button_processing+0x284>)
 800069c:	2202      	movs	r2, #2
 800069e:	701a      	strb	r2, [r3, #0]
			break;
 80006a0:	e00b      	b.n	80006ba <fsm_button_processing+0xa6>
		case BUTTON_PRESSED_MORE_THAN_1_SECOND:
			if (!is_button_pressed(1)) {
 80006a2:	2001      	movs	r0, #1
 80006a4:	f000 f99a 	bl	80009dc <is_button_pressed>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d107      	bne.n	80006be <fsm_button_processing+0xaa>
				button_1_state = BUTTON_RELEASED;
 80006ae:	4b7a      	ldr	r3, [pc, #488]	; (8000898 <fsm_button_processing+0x284>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	701a      	strb	r2, [r3, #0]
			}
			// do nothing, wait for the button to be released
			break;
 80006b4:	e003      	b.n	80006be <fsm_button_processing+0xaa>
			break;
 80006b6:	bf00      	nop
 80006b8:	e002      	b.n	80006c0 <fsm_button_processing+0xac>
			break;
 80006ba:	bf00      	nop
 80006bc:	e000      	b.n	80006c0 <fsm_button_processing+0xac>
			break;
 80006be:	bf00      	nop
	}

	switch (button_2_state) {
 80006c0:	4b77      	ldr	r3, [pc, #476]	; (80008a0 <fsm_button_processing+0x28c>)
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	2b02      	cmp	r3, #2
 80006c6:	d069      	beq.n	800079c <fsm_button_processing+0x188>
 80006c8:	2b02      	cmp	r3, #2
 80006ca:	dc76      	bgt.n	80007ba <fsm_button_processing+0x1a6>
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d002      	beq.n	80006d6 <fsm_button_processing+0xc2>
 80006d0:	2b01      	cmp	r3, #1
 80006d2:	d04f      	beq.n	8000774 <fsm_button_processing+0x160>
 80006d4:	e071      	b.n	80007ba <fsm_button_processing+0x1a6>
		case BUTTON_RELEASED:
			if (is_button_pressed(2)) {
 80006d6:	2002      	movs	r0, #2
 80006d8:	f000 f980 	bl	80009dc <is_button_pressed>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d066      	beq.n	80007b0 <fsm_button_processing+0x19c>
				button_2_state = BUTTON_PRESSED;
 80006e2:	4b6f      	ldr	r3, [pc, #444]	; (80008a0 <fsm_button_processing+0x28c>)
 80006e4:	2201      	movs	r2, #1
 80006e6:	701a      	strb	r2, [r3, #0]
				if (status == AUTO_RED || status == ADJ_RED) {
 80006e8:	4b6c      	ldr	r3, [pc, #432]	; (800089c <fsm_button_processing+0x288>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	2b06      	cmp	r3, #6
 80006ee:	d003      	beq.n	80006f8 <fsm_button_processing+0xe4>
 80006f0:	4b6a      	ldr	r3, [pc, #424]	; (800089c <fsm_button_processing+0x288>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	2b07      	cmp	r3, #7
 80006f6:	d10e      	bne.n	8000716 <fsm_button_processing+0x102>
					status = ADJ_RED;
 80006f8:	4b68      	ldr	r3, [pc, #416]	; (800089c <fsm_button_processing+0x288>)
 80006fa:	2207      	movs	r2, #7
 80006fc:	601a      	str	r2, [r3, #0]
					T_RED++;
 80006fe:	4b69      	ldr	r3, [pc, #420]	; (80008a4 <fsm_button_processing+0x290>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	3301      	adds	r3, #1
 8000704:	4a67      	ldr	r2, [pc, #412]	; (80008a4 <fsm_button_processing+0x290>)
 8000706:	6013      	str	r3, [r2, #0]
					if (T_RED >= 99) T_RED = 1;
 8000708:	4b66      	ldr	r3, [pc, #408]	; (80008a4 <fsm_button_processing+0x290>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	2b62      	cmp	r3, #98	; 0x62
 800070e:	dd02      	ble.n	8000716 <fsm_button_processing+0x102>
 8000710:	4b64      	ldr	r3, [pc, #400]	; (80008a4 <fsm_button_processing+0x290>)
 8000712:	2201      	movs	r2, #1
 8000714:	601a      	str	r2, [r3, #0]
//					update7SEG_buffer_manual(2, T_RED);
				}
				if (status == AUTO_AMBER || status == ADJ_AMBER) {
 8000716:	4b61      	ldr	r3, [pc, #388]	; (800089c <fsm_button_processing+0x288>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	2b09      	cmp	r3, #9
 800071c:	d003      	beq.n	8000726 <fsm_button_processing+0x112>
 800071e:	4b5f      	ldr	r3, [pc, #380]	; (800089c <fsm_button_processing+0x288>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	2b0a      	cmp	r3, #10
 8000724:	d10e      	bne.n	8000744 <fsm_button_processing+0x130>
					status = ADJ_AMBER;
 8000726:	4b5d      	ldr	r3, [pc, #372]	; (800089c <fsm_button_processing+0x288>)
 8000728:	220a      	movs	r2, #10
 800072a:	601a      	str	r2, [r3, #0]
					T_AMBER++;
 800072c:	4b5e      	ldr	r3, [pc, #376]	; (80008a8 <fsm_button_processing+0x294>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	3301      	adds	r3, #1
 8000732:	4a5d      	ldr	r2, [pc, #372]	; (80008a8 <fsm_button_processing+0x294>)
 8000734:	6013      	str	r3, [r2, #0]
					if (T_AMBER >= 5) T_AMBER = 1;
 8000736:	4b5c      	ldr	r3, [pc, #368]	; (80008a8 <fsm_button_processing+0x294>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	2b04      	cmp	r3, #4
 800073c:	dd02      	ble.n	8000744 <fsm_button_processing+0x130>
 800073e:	4b5a      	ldr	r3, [pc, #360]	; (80008a8 <fsm_button_processing+0x294>)
 8000740:	2201      	movs	r2, #1
 8000742:	601a      	str	r2, [r3, #0]
//					update7SEG_buffer_manual(3, T_AMBER);
				}
				if (status == AUTO_GREEN || status == ADJ_GREEN) {
 8000744:	4b55      	ldr	r3, [pc, #340]	; (800089c <fsm_button_processing+0x288>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	2b0c      	cmp	r3, #12
 800074a:	d003      	beq.n	8000754 <fsm_button_processing+0x140>
 800074c:	4b53      	ldr	r3, [pc, #332]	; (800089c <fsm_button_processing+0x288>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	2b0d      	cmp	r3, #13
 8000752:	d12d      	bne.n	80007b0 <fsm_button_processing+0x19c>
					status = ADJ_GREEN;
 8000754:	4b51      	ldr	r3, [pc, #324]	; (800089c <fsm_button_processing+0x288>)
 8000756:	220d      	movs	r2, #13
 8000758:	601a      	str	r2, [r3, #0]
					T_GREEN++;
 800075a:	4b54      	ldr	r3, [pc, #336]	; (80008ac <fsm_button_processing+0x298>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	3301      	adds	r3, #1
 8000760:	4a52      	ldr	r2, [pc, #328]	; (80008ac <fsm_button_processing+0x298>)
 8000762:	6013      	str	r3, [r2, #0]
					if (T_GREEN >= 99) T_GREEN = 1;
 8000764:	4b51      	ldr	r3, [pc, #324]	; (80008ac <fsm_button_processing+0x298>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	2b62      	cmp	r3, #98	; 0x62
 800076a:	dd21      	ble.n	80007b0 <fsm_button_processing+0x19c>
 800076c:	4b4f      	ldr	r3, [pc, #316]	; (80008ac <fsm_button_processing+0x298>)
 800076e:	2201      	movs	r2, #1
 8000770:	601a      	str	r2, [r3, #0]
//					update7SEG_buffer_manual(4, T_GREEN);
				}
			}
			break;
 8000772:	e01d      	b.n	80007b0 <fsm_button_processing+0x19c>
		case BUTTON_PRESSED:
			if (!is_button_pressed(2)) {
 8000774:	2002      	movs	r0, #2
 8000776:	f000 f931 	bl	80009dc <is_button_pressed>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d103      	bne.n	8000788 <fsm_button_processing+0x174>
				button_2_state = BUTTON_RELEASED;
 8000780:	4b47      	ldr	r3, [pc, #284]	; (80008a0 <fsm_button_processing+0x28c>)
 8000782:	2200      	movs	r2, #0
 8000784:	701a      	strb	r2, [r3, #0]
			} else {
				if (is_button_pressed_1s(2)) {
					button_2_state = BUTTON_PRESSED_MORE_THAN_1_SECOND;
				}
			}
			break;
 8000786:	e015      	b.n	80007b4 <fsm_button_processing+0x1a0>
				if (is_button_pressed_1s(2)) {
 8000788:	2002      	movs	r0, #2
 800078a:	f000 f941 	bl	8000a10 <is_button_pressed_1s>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d00f      	beq.n	80007b4 <fsm_button_processing+0x1a0>
					button_2_state = BUTTON_PRESSED_MORE_THAN_1_SECOND;
 8000794:	4b42      	ldr	r3, [pc, #264]	; (80008a0 <fsm_button_processing+0x28c>)
 8000796:	2202      	movs	r2, #2
 8000798:	701a      	strb	r2, [r3, #0]
			break;
 800079a:	e00b      	b.n	80007b4 <fsm_button_processing+0x1a0>
		case BUTTON_PRESSED_MORE_THAN_1_SECOND:
			if (!is_button_pressed(2)) {
 800079c:	2002      	movs	r0, #2
 800079e:	f000 f91d 	bl	80009dc <is_button_pressed>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d107      	bne.n	80007b8 <fsm_button_processing+0x1a4>
				button_2_state = BUTTON_RELEASED;
 80007a8:	4b3d      	ldr	r3, [pc, #244]	; (80008a0 <fsm_button_processing+0x28c>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	701a      	strb	r2, [r3, #0]
			}
			// do nothing, wait for the button to be released
			break;
 80007ae:	e003      	b.n	80007b8 <fsm_button_processing+0x1a4>
			break;
 80007b0:	bf00      	nop
 80007b2:	e002      	b.n	80007ba <fsm_button_processing+0x1a6>
			break;
 80007b4:	bf00      	nop
 80007b6:	e000      	b.n	80007ba <fsm_button_processing+0x1a6>
			break;
 80007b8:	bf00      	nop
	}

	switch (button_3_state) {
 80007ba:	4b3d      	ldr	r3, [pc, #244]	; (80008b0 <fsm_button_processing+0x29c>)
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	2b02      	cmp	r3, #2
 80007c0:	f000 8082 	beq.w	80008c8 <fsm_button_processing+0x2b4>
 80007c4:	2b02      	cmp	r3, #2
 80007c6:	f300 808e 	bgt.w	80008e6 <fsm_button_processing+0x2d2>
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d002      	beq.n	80007d4 <fsm_button_processing+0x1c0>
 80007ce:	2b01      	cmp	r3, #1
 80007d0:	d057      	beq.n	8000882 <fsm_button_processing+0x26e>
				button_3_state = BUTTON_RELEASED;
			}
			// do nothing, wait for the button to be released
			break;
	}
}
 80007d2:	e088      	b.n	80008e6 <fsm_button_processing+0x2d2>
			if (is_button_pressed(3)) {
 80007d4:	2003      	movs	r0, #3
 80007d6:	f000 f901 	bl	80009dc <is_button_pressed>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d07d      	beq.n	80008dc <fsm_button_processing+0x2c8>
				button_3_state = BUTTON_PRESSED;
 80007e0:	4b33      	ldr	r3, [pc, #204]	; (80008b0 <fsm_button_processing+0x29c>)
 80007e2:	2201      	movs	r2, #1
 80007e4:	701a      	strb	r2, [r3, #0]
				if (status == ADJ_RED) {
 80007e6:	4b2d      	ldr	r3, [pc, #180]	; (800089c <fsm_button_processing+0x288>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	2b07      	cmp	r3, #7
 80007ec:	d114      	bne.n	8000818 <fsm_button_processing+0x204>
					status = AUTO_RED;
 80007ee:	4b2b      	ldr	r3, [pc, #172]	; (800089c <fsm_button_processing+0x288>)
 80007f0:	2206      	movs	r2, #6
 80007f2:	601a      	str	r2, [r3, #0]
					if (T_RED <= T_AMBER) T_RED = T_AMBER + 1;
 80007f4:	4b2b      	ldr	r3, [pc, #172]	; (80008a4 <fsm_button_processing+0x290>)
 80007f6:	681a      	ldr	r2, [r3, #0]
 80007f8:	4b2b      	ldr	r3, [pc, #172]	; (80008a8 <fsm_button_processing+0x294>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	429a      	cmp	r2, r3
 80007fe:	dc04      	bgt.n	800080a <fsm_button_processing+0x1f6>
 8000800:	4b29      	ldr	r3, [pc, #164]	; (80008a8 <fsm_button_processing+0x294>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	3301      	adds	r3, #1
 8000806:	4a27      	ldr	r2, [pc, #156]	; (80008a4 <fsm_button_processing+0x290>)
 8000808:	6013      	str	r3, [r2, #0]
					T_GREEN = T_RED - T_AMBER;
 800080a:	4b26      	ldr	r3, [pc, #152]	; (80008a4 <fsm_button_processing+0x290>)
 800080c:	681a      	ldr	r2, [r3, #0]
 800080e:	4b26      	ldr	r3, [pc, #152]	; (80008a8 <fsm_button_processing+0x294>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	1ad3      	subs	r3, r2, r3
 8000814:	4a25      	ldr	r2, [pc, #148]	; (80008ac <fsm_button_processing+0x298>)
 8000816:	6013      	str	r3, [r2, #0]
				if (status == ADJ_AMBER) {
 8000818:	4b20      	ldr	r3, [pc, #128]	; (800089c <fsm_button_processing+0x288>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	2b0a      	cmp	r3, #10
 800081e:	d114      	bne.n	800084a <fsm_button_processing+0x236>
					status = AUTO_AMBER;
 8000820:	4b1e      	ldr	r3, [pc, #120]	; (800089c <fsm_button_processing+0x288>)
 8000822:	2209      	movs	r2, #9
 8000824:	601a      	str	r2, [r3, #0]
					if (T_RED <= T_AMBER) T_RED = T_AMBER + 1;
 8000826:	4b1f      	ldr	r3, [pc, #124]	; (80008a4 <fsm_button_processing+0x290>)
 8000828:	681a      	ldr	r2, [r3, #0]
 800082a:	4b1f      	ldr	r3, [pc, #124]	; (80008a8 <fsm_button_processing+0x294>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	429a      	cmp	r2, r3
 8000830:	dc04      	bgt.n	800083c <fsm_button_processing+0x228>
 8000832:	4b1d      	ldr	r3, [pc, #116]	; (80008a8 <fsm_button_processing+0x294>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	3301      	adds	r3, #1
 8000838:	4a1a      	ldr	r2, [pc, #104]	; (80008a4 <fsm_button_processing+0x290>)
 800083a:	6013      	str	r3, [r2, #0]
					T_GREEN = T_RED - T_AMBER;
 800083c:	4b19      	ldr	r3, [pc, #100]	; (80008a4 <fsm_button_processing+0x290>)
 800083e:	681a      	ldr	r2, [r3, #0]
 8000840:	4b19      	ldr	r3, [pc, #100]	; (80008a8 <fsm_button_processing+0x294>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	1ad3      	subs	r3, r2, r3
 8000846:	4a19      	ldr	r2, [pc, #100]	; (80008ac <fsm_button_processing+0x298>)
 8000848:	6013      	str	r3, [r2, #0]
				if (status == ADJ_GREEN) {
 800084a:	4b14      	ldr	r3, [pc, #80]	; (800089c <fsm_button_processing+0x288>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	2b0d      	cmp	r3, #13
 8000850:	d144      	bne.n	80008dc <fsm_button_processing+0x2c8>
					status = AUTO_GREEN;
 8000852:	4b12      	ldr	r3, [pc, #72]	; (800089c <fsm_button_processing+0x288>)
 8000854:	220c      	movs	r2, #12
 8000856:	601a      	str	r2, [r3, #0]
					if (T_AMBER + T_GREEN >= 99) {
 8000858:	4b13      	ldr	r3, [pc, #76]	; (80008a8 <fsm_button_processing+0x294>)
 800085a:	681a      	ldr	r2, [r3, #0]
 800085c:	4b13      	ldr	r3, [pc, #76]	; (80008ac <fsm_button_processing+0x298>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4413      	add	r3, r2
 8000862:	2b62      	cmp	r3, #98	; 0x62
 8000864:	dd05      	ble.n	8000872 <fsm_button_processing+0x25e>
						T_AMBER = 4;
 8000866:	4b10      	ldr	r3, [pc, #64]	; (80008a8 <fsm_button_processing+0x294>)
 8000868:	2204      	movs	r2, #4
 800086a:	601a      	str	r2, [r3, #0]
						T_GREEN = 95;
 800086c:	4b0f      	ldr	r3, [pc, #60]	; (80008ac <fsm_button_processing+0x298>)
 800086e:	225f      	movs	r2, #95	; 0x5f
 8000870:	601a      	str	r2, [r3, #0]
					T_RED = T_AMBER + T_GREEN;
 8000872:	4b0d      	ldr	r3, [pc, #52]	; (80008a8 <fsm_button_processing+0x294>)
 8000874:	681a      	ldr	r2, [r3, #0]
 8000876:	4b0d      	ldr	r3, [pc, #52]	; (80008ac <fsm_button_processing+0x298>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	4413      	add	r3, r2
 800087c:	4a09      	ldr	r2, [pc, #36]	; (80008a4 <fsm_button_processing+0x290>)
 800087e:	6013      	str	r3, [r2, #0]
			break;
 8000880:	e02c      	b.n	80008dc <fsm_button_processing+0x2c8>
			if (!is_button_pressed(3)) {
 8000882:	2003      	movs	r0, #3
 8000884:	f000 f8aa 	bl	80009dc <is_button_pressed>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d112      	bne.n	80008b4 <fsm_button_processing+0x2a0>
				button_3_state = BUTTON_RELEASED;
 800088e:	4b08      	ldr	r3, [pc, #32]	; (80008b0 <fsm_button_processing+0x29c>)
 8000890:	2200      	movs	r2, #0
 8000892:	701a      	strb	r2, [r3, #0]
			break;
 8000894:	e024      	b.n	80008e0 <fsm_button_processing+0x2cc>
 8000896:	bf00      	nop
 8000898:	20000010 	.word	0x20000010
 800089c:	2000000c 	.word	0x2000000c
 80008a0:	20000011 	.word	0x20000011
 80008a4:	20000000 	.word	0x20000000
 80008a8:	20000004 	.word	0x20000004
 80008ac:	20000008 	.word	0x20000008
 80008b0:	20000012 	.word	0x20000012
				if (is_button_pressed_1s(3)) {
 80008b4:	2003      	movs	r0, #3
 80008b6:	f000 f8ab 	bl	8000a10 <is_button_pressed_1s>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d00f      	beq.n	80008e0 <fsm_button_processing+0x2cc>
					button_3_state = BUTTON_PRESSED_MORE_THAN_1_SECOND;
 80008c0:	4b0a      	ldr	r3, [pc, #40]	; (80008ec <fsm_button_processing+0x2d8>)
 80008c2:	2202      	movs	r2, #2
 80008c4:	701a      	strb	r2, [r3, #0]
			break;
 80008c6:	e00b      	b.n	80008e0 <fsm_button_processing+0x2cc>
			if (!is_button_pressed(3)) {
 80008c8:	2003      	movs	r0, #3
 80008ca:	f000 f887 	bl	80009dc <is_button_pressed>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d107      	bne.n	80008e4 <fsm_button_processing+0x2d0>
				button_3_state = BUTTON_RELEASED;
 80008d4:	4b05      	ldr	r3, [pc, #20]	; (80008ec <fsm_button_processing+0x2d8>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	701a      	strb	r2, [r3, #0]
			break;
 80008da:	e003      	b.n	80008e4 <fsm_button_processing+0x2d0>
			break;
 80008dc:	bf00      	nop
 80008de:	e002      	b.n	80008e6 <fsm_button_processing+0x2d2>
			break;
 80008e0:	bf00      	nop
 80008e2:	e000      	b.n	80008e6 <fsm_button_processing+0x2d2>
			break;
 80008e4:	bf00      	nop
}
 80008e6:	bf00      	nop
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	20000012 	.word	0x20000012

080008f0 <button_reading>:
static uint16_t counterForButtonPress1s[N0_OF_BUTTONS];

static GPIO_TypeDef* button_ports[N0_OF_BUTTONS] = {A0_PedButton_GPIO_Port, A1_Button1_GPIO_Port, A2_Button2_GPIO_Port, A3_Button3_GPIO_Port};
static uint16_t button_pins[N0_OF_BUTTONS] = {A0_PedButton_Pin, A1_Button1_Pin, A2_Button2_Pin, A3_Button3_Pin};

void button_reading(void) {
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
	for (int i = 0; i < N0_OF_BUTTONS; i++) {
 80008f6:	2300      	movs	r3, #0
 80008f8:	607b      	str	r3, [r7, #4]
 80008fa:	e058      	b.n	80009ae <button_reading+0xbe>
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 80008fc:	4a30      	ldr	r2, [pc, #192]	; (80009c0 <button_reading+0xd0>)
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	4413      	add	r3, r2
 8000902:	7819      	ldrb	r1, [r3, #0]
 8000904:	4a2f      	ldr	r2, [pc, #188]	; (80009c4 <button_reading+0xd4>)
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	4413      	add	r3, r2
 800090a:	460a      	mov	r2, r1
 800090c:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(button_ports[i], button_pins[i]);
 800090e:	4a2e      	ldr	r2, [pc, #184]	; (80009c8 <button_reading+0xd8>)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000916:	492d      	ldr	r1, [pc, #180]	; (80009cc <button_reading+0xdc>)
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800091e:	4619      	mov	r1, r3
 8000920:	4610      	mov	r0, r2
 8000922:	f000 fdfd 	bl	8001520 <HAL_GPIO_ReadPin>
 8000926:	4603      	mov	r3, r0
 8000928:	4619      	mov	r1, r3
 800092a:	4a25      	ldr	r2, [pc, #148]	; (80009c0 <button_reading+0xd0>)
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	4413      	add	r3, r2
 8000930:	460a      	mov	r2, r1
 8000932:	701a      	strb	r2, [r3, #0]

		if (debounceButtonBuffer1[i] == debounceButtonBuffer2[i])
 8000934:	4a22      	ldr	r2, [pc, #136]	; (80009c0 <button_reading+0xd0>)
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	4413      	add	r3, r2
 800093a:	781a      	ldrb	r2, [r3, #0]
 800093c:	4921      	ldr	r1, [pc, #132]	; (80009c4 <button_reading+0xd4>)
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	440b      	add	r3, r1
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	429a      	cmp	r2, r3
 8000946:	d108      	bne.n	800095a <button_reading+0x6a>
			buttonBuffer[i] = debounceButtonBuffer1[i];
 8000948:	4a1d      	ldr	r2, [pc, #116]	; (80009c0 <button_reading+0xd0>)
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	4413      	add	r3, r2
 800094e:	7819      	ldrb	r1, [r3, #0]
 8000950:	4a1f      	ldr	r2, [pc, #124]	; (80009d0 <button_reading+0xe0>)
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	4413      	add	r3, r2
 8000956:	460a      	mov	r2, r1
 8000958:	701a      	strb	r2, [r3, #0]

		if (buttonBuffer[i] == BUTTON_IS_PRESSED) {
 800095a:	4a1d      	ldr	r2, [pc, #116]	; (80009d0 <button_reading+0xe0>)
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	4413      	add	r3, r2
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	2b00      	cmp	r3, #0
 8000964:	d116      	bne.n	8000994 <button_reading+0xa4>
			//if a button is pressed, we start counting
			if (counterForButtonPress1s[i] < DURATION_FOR_AUTO_INCREASING) {
 8000966:	4a1b      	ldr	r2, [pc, #108]	; (80009d4 <button_reading+0xe4>)
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800096e:	2b63      	cmp	r3, #99	; 0x63
 8000970:	d80a      	bhi.n	8000988 <button_reading+0x98>
				counterForButtonPress1s[i]++;
 8000972:	4a18      	ldr	r2, [pc, #96]	; (80009d4 <button_reading+0xe4>)
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800097a:	3301      	adds	r3, #1
 800097c:	b299      	uxth	r1, r3
 800097e:	4a15      	ldr	r2, [pc, #84]	; (80009d4 <button_reading+0xe4>)
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000986:	e00f      	b.n	80009a8 <button_reading+0xb8>
			} else {
				//the flag is turned on when 1 second has passed
				//since the button is pressed.
				flagForButtonPress1s[i] = 1;
 8000988:	4a13      	ldr	r2, [pc, #76]	; (80009d8 <button_reading+0xe8>)
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	4413      	add	r3, r2
 800098e:	2201      	movs	r2, #1
 8000990:	701a      	strb	r2, [r3, #0]
 8000992:	e009      	b.n	80009a8 <button_reading+0xb8>
			}
		} else {
			counterForButtonPress1s[i] = 0;
 8000994:	4a0f      	ldr	r2, [pc, #60]	; (80009d4 <button_reading+0xe4>)
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	2100      	movs	r1, #0
 800099a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			flagForButtonPress1s[i] = 0;
 800099e:	4a0e      	ldr	r2, [pc, #56]	; (80009d8 <button_reading+0xe8>)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	4413      	add	r3, r2
 80009a4:	2200      	movs	r2, #0
 80009a6:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < N0_OF_BUTTONS; i++) {
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	3301      	adds	r3, #1
 80009ac:	607b      	str	r3, [r7, #4]
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	2b03      	cmp	r3, #3
 80009b2:	dda3      	ble.n	80008fc <button_reading+0xc>
		}
	}
}
 80009b4:	bf00      	nop
 80009b6:	bf00      	nop
 80009b8:	3708      	adds	r7, #8
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	20000060 	.word	0x20000060
 80009c4:	20000064 	.word	0x20000064
 80009c8:	20000014 	.word	0x20000014
 80009cc:	20000024 	.word	0x20000024
 80009d0:	2000005c 	.word	0x2000005c
 80009d4:	2000006c 	.word	0x2000006c
 80009d8:	20000068 	.word	0x20000068

080009dc <is_button_pressed>:

unsigned char is_button_pressed(uint8_t index){
 80009dc:	b480      	push	{r7}
 80009de:	b083      	sub	sp, #12
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	4603      	mov	r3, r0
 80009e4:	71fb      	strb	r3, [r7, #7]
	if (index >= N0_OF_BUTTONS) return 0;
 80009e6:	79fb      	ldrb	r3, [r7, #7]
 80009e8:	2b03      	cmp	r3, #3
 80009ea:	d901      	bls.n	80009f0 <is_button_pressed+0x14>
 80009ec:	2300      	movs	r3, #0
 80009ee:	e007      	b.n	8000a00 <is_button_pressed+0x24>
	return (buttonBuffer[index] == BUTTON_IS_PRESSED);
 80009f0:	79fb      	ldrb	r3, [r7, #7]
 80009f2:	4a06      	ldr	r2, [pc, #24]	; (8000a0c <is_button_pressed+0x30>)
 80009f4:	5cd3      	ldrb	r3, [r2, r3]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	bf0c      	ite	eq
 80009fa:	2301      	moveq	r3, #1
 80009fc:	2300      	movne	r3, #0
 80009fe:	b2db      	uxtb	r3, r3
}
 8000a00:	4618      	mov	r0, r3
 8000a02:	370c      	adds	r7, #12
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bc80      	pop	{r7}
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	2000005c 	.word	0x2000005c

08000a10 <is_button_pressed_1s>:

unsigned char is_button_pressed_1s(unsigned char index){
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	4603      	mov	r3, r0
 8000a18:	71fb      	strb	r3, [r7, #7]
	if (index >= N0_OF_BUTTONS) return 0;
 8000a1a:	79fb      	ldrb	r3, [r7, #7]
 8000a1c:	2b03      	cmp	r3, #3
 8000a1e:	d901      	bls.n	8000a24 <is_button_pressed_1s+0x14>
 8000a20:	2300      	movs	r3, #0
 8000a22:	e007      	b.n	8000a34 <is_button_pressed_1s+0x24>
	return (flagForButtonPress1s[index] == 1);
 8000a24:	79fb      	ldrb	r3, [r7, #7]
 8000a26:	4a06      	ldr	r2, [pc, #24]	; (8000a40 <is_button_pressed_1s+0x30>)
 8000a28:	5cd3      	ldrb	r3, [r2, r3]
 8000a2a:	2b01      	cmp	r3, #1
 8000a2c:	bf0c      	ite	eq
 8000a2e:	2301      	moveq	r3, #1
 8000a30:	2300      	movne	r3, #0
 8000a32:	b2db      	uxtb	r3, r3
}
 8000a34:	4618      	mov	r0, r3
 8000a36:	370c      	adds	r7, #12
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bc80      	pop	{r7}
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	20000068 	.word	0x20000068

08000a44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a48:	f000 fa76 	bl	8000f38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a4c:	f000 f814 	bl	8000a78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a50:	f000 f8a0 	bl	8000b94 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000a54:	f000 f852 	bl	8000afc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000a58:	4806      	ldr	r0, [pc, #24]	; (8000a74 <main+0x30>)
 8000a5a:	f001 f9bd 	bl	8001dd8 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  fsm_automatic();
 8000a5e:	f7ff fb75 	bl	800014c <fsm_automatic>
	  fsm_red_manual();
 8000a62:	f7ff fbfb 	bl	800025c <fsm_red_manual>
	  fsm_amber_manual();
 8000a66:	f7ff fc31 	bl	80002cc <fsm_amber_manual>
	  fsm_green_manual();
 8000a6a:	f7ff fc67 	bl	800033c <fsm_green_manual>
	  fsm_button_processing();
 8000a6e:	f7ff fdd1 	bl	8000614 <fsm_button_processing>
	  fsm_automatic();
 8000a72:	e7f4      	b.n	8000a5e <main+0x1a>
 8000a74:	2000009c 	.word	0x2000009c

08000a78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b090      	sub	sp, #64	; 0x40
 8000a7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a7e:	f107 0318 	add.w	r3, r7, #24
 8000a82:	2228      	movs	r2, #40	; 0x28
 8000a84:	2100      	movs	r1, #0
 8000a86:	4618      	mov	r0, r3
 8000a88:	f001 fd78 	bl	800257c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a8c:	1d3b      	adds	r3, r7, #4
 8000a8e:	2200      	movs	r2, #0
 8000a90:	601a      	str	r2, [r3, #0]
 8000a92:	605a      	str	r2, [r3, #4]
 8000a94:	609a      	str	r2, [r3, #8]
 8000a96:	60da      	str	r2, [r3, #12]
 8000a98:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a9a:	2302      	movs	r3, #2
 8000a9c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000aa2:	2310      	movs	r3, #16
 8000aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aa6:	2302      	movs	r3, #2
 8000aa8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000aae:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000ab2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ab4:	f107 0318 	add.w	r3, r7, #24
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f000 fd61 	bl	8001580 <HAL_RCC_OscConfig>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000ac4:	f000 f8e0 	bl	8000c88 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ac8:	230f      	movs	r3, #15
 8000aca:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000acc:	2302      	movs	r3, #2
 8000ace:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ad4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ad8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ada:	2300      	movs	r3, #0
 8000adc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ade:	1d3b      	adds	r3, r7, #4
 8000ae0:	2102      	movs	r1, #2
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f000 ffcc 	bl	8001a80 <HAL_RCC_ClockConfig>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000aee:	f000 f8cb 	bl	8000c88 <Error_Handler>
  }
}
 8000af2:	bf00      	nop
 8000af4:	3740      	adds	r7, #64	; 0x40
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
	...

08000afc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b086      	sub	sp, #24
 8000b00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b02:	f107 0308 	add.w	r3, r7, #8
 8000b06:	2200      	movs	r2, #0
 8000b08:	601a      	str	r2, [r3, #0]
 8000b0a:	605a      	str	r2, [r3, #4]
 8000b0c:	609a      	str	r2, [r3, #8]
 8000b0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b10:	463b      	mov	r3, r7
 8000b12:	2200      	movs	r2, #0
 8000b14:	601a      	str	r2, [r3, #0]
 8000b16:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b18:	4b1d      	ldr	r3, [pc, #116]	; (8000b90 <MX_TIM2_Init+0x94>)
 8000b1a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b1e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63999;
 8000b20:	4b1b      	ldr	r3, [pc, #108]	; (8000b90 <MX_TIM2_Init+0x94>)
 8000b22:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8000b26:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b28:	4b19      	ldr	r3, [pc, #100]	; (8000b90 <MX_TIM2_Init+0x94>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000b2e:	4b18      	ldr	r3, [pc, #96]	; (8000b90 <MX_TIM2_Init+0x94>)
 8000b30:	2209      	movs	r2, #9
 8000b32:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b34:	4b16      	ldr	r3, [pc, #88]	; (8000b90 <MX_TIM2_Init+0x94>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b3a:	4b15      	ldr	r3, [pc, #84]	; (8000b90 <MX_TIM2_Init+0x94>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b40:	4813      	ldr	r0, [pc, #76]	; (8000b90 <MX_TIM2_Init+0x94>)
 8000b42:	f001 f8f9 	bl	8001d38 <HAL_TIM_Base_Init>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000b4c:	f000 f89c 	bl	8000c88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b54:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b56:	f107 0308 	add.w	r3, r7, #8
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	480c      	ldr	r0, [pc, #48]	; (8000b90 <MX_TIM2_Init+0x94>)
 8000b5e:	f001 fa95 	bl	800208c <HAL_TIM_ConfigClockSource>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000b68:	f000 f88e 	bl	8000c88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b70:	2300      	movs	r3, #0
 8000b72:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b74:	463b      	mov	r3, r7
 8000b76:	4619      	mov	r1, r3
 8000b78:	4805      	ldr	r0, [pc, #20]	; (8000b90 <MX_TIM2_Init+0x94>)
 8000b7a:	f001 fc6b 	bl	8002454 <HAL_TIMEx_MasterConfigSynchronization>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000b84:	f000 f880 	bl	8000c88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b88:	bf00      	nop
 8000b8a:	3718      	adds	r7, #24
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	2000009c 	.word	0x2000009c

08000b94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b086      	sub	sp, #24
 8000b98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9a:	f107 0308 	add.w	r3, r7, #8
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	601a      	str	r2, [r3, #0]
 8000ba2:	605a      	str	r2, [r3, #4]
 8000ba4:	609a      	str	r2, [r3, #8]
 8000ba6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba8:	4b2e      	ldr	r3, [pc, #184]	; (8000c64 <MX_GPIO_Init+0xd0>)
 8000baa:	699b      	ldr	r3, [r3, #24]
 8000bac:	4a2d      	ldr	r2, [pc, #180]	; (8000c64 <MX_GPIO_Init+0xd0>)
 8000bae:	f043 0304 	orr.w	r3, r3, #4
 8000bb2:	6193      	str	r3, [r2, #24]
 8000bb4:	4b2b      	ldr	r3, [pc, #172]	; (8000c64 <MX_GPIO_Init+0xd0>)
 8000bb6:	699b      	ldr	r3, [r3, #24]
 8000bb8:	f003 0304 	and.w	r3, r3, #4
 8000bbc:	607b      	str	r3, [r7, #4]
 8000bbe:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc0:	4b28      	ldr	r3, [pc, #160]	; (8000c64 <MX_GPIO_Init+0xd0>)
 8000bc2:	699b      	ldr	r3, [r3, #24]
 8000bc4:	4a27      	ldr	r2, [pc, #156]	; (8000c64 <MX_GPIO_Init+0xd0>)
 8000bc6:	f043 0308 	orr.w	r3, r3, #8
 8000bca:	6193      	str	r3, [r2, #24]
 8000bcc:	4b25      	ldr	r3, [pc, #148]	; (8000c64 <MX_GPIO_Init+0xd0>)
 8000bce:	699b      	ldr	r3, [r3, #24]
 8000bd0:	f003 0308 	and.w	r3, r3, #8
 8000bd4:	603b      	str	r3, [r7, #0]
 8000bd6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D13_PedBuzzer_Pin|D12_PedBuzzer_Pin|D7_PedLED_Pin|D2_LED1_Pin, GPIO_PIN_RESET);
 8000bd8:	2200      	movs	r2, #0
 8000bda:	f44f 61ac 	mov.w	r1, #1376	; 0x560
 8000bde:	4822      	ldr	r0, [pc, #136]	; (8000c68 <MX_GPIO_Init+0xd4>)
 8000be0:	f000 fcb5 	bl	800154e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_PedLED_Pin|D3_LED1_Pin|D5_LED2_Pin|D4_LED2_Pin, GPIO_PIN_RESET);
 8000be4:	2200      	movs	r2, #0
 8000be6:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8000bea:	4820      	ldr	r0, [pc, #128]	; (8000c6c <MX_GPIO_Init+0xd8>)
 8000bec:	f000 fcaf 	bl	800154e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_PedButton_Pin A1_Button1_Pin A2_Button2_Pin */
  GPIO_InitStruct.Pin = A0_PedButton_Pin|A1_Button1_Pin|A2_Button2_Pin;
 8000bf0:	2313      	movs	r3, #19
 8000bf2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bfc:	f107 0308 	add.w	r3, r7, #8
 8000c00:	4619      	mov	r1, r3
 8000c02:	4819      	ldr	r0, [pc, #100]	; (8000c68 <MX_GPIO_Init+0xd4>)
 8000c04:	f000 fb08 	bl	8001218 <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_PedBuzzer_Pin D12_PedBuzzer_Pin D7_PedLED_Pin D2_LED1_Pin */
  GPIO_InitStruct.Pin = D13_PedBuzzer_Pin|D12_PedBuzzer_Pin|D7_PedLED_Pin|D2_LED1_Pin;
 8000c08:	f44f 63ac 	mov.w	r3, #1376	; 0x560
 8000c0c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c12:	2300      	movs	r3, #0
 8000c14:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c16:	2302      	movs	r3, #2
 8000c18:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c1a:	f107 0308 	add.w	r3, r7, #8
 8000c1e:	4619      	mov	r1, r3
 8000c20:	4811      	ldr	r0, [pc, #68]	; (8000c68 <MX_GPIO_Init+0xd4>)
 8000c22:	f000 faf9 	bl	8001218 <HAL_GPIO_Init>

  /*Configure GPIO pin : A3_Button3_Pin */
  GPIO_InitStruct.Pin = A3_Button3_Pin;
 8000c26:	2301      	movs	r3, #1
 8000c28:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(A3_Button3_GPIO_Port, &GPIO_InitStruct);
 8000c32:	f107 0308 	add.w	r3, r7, #8
 8000c36:	4619      	mov	r1, r3
 8000c38:	480c      	ldr	r0, [pc, #48]	; (8000c6c <MX_GPIO_Init+0xd8>)
 8000c3a:	f000 faed 	bl	8001218 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_PedLED_Pin D3_LED1_Pin D5_LED2_Pin D4_LED2_Pin */
  GPIO_InitStruct.Pin = D6_PedLED_Pin|D3_LED1_Pin|D5_LED2_Pin|D4_LED2_Pin;
 8000c3e:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8000c42:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c44:	2301      	movs	r3, #1
 8000c46:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4c:	2302      	movs	r3, #2
 8000c4e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c50:	f107 0308 	add.w	r3, r7, #8
 8000c54:	4619      	mov	r1, r3
 8000c56:	4805      	ldr	r0, [pc, #20]	; (8000c6c <MX_GPIO_Init+0xd8>)
 8000c58:	f000 fade 	bl	8001218 <HAL_GPIO_Init>

}
 8000c5c:	bf00      	nop
 8000c5e:	3718      	adds	r7, #24
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	40021000 	.word	0x40021000
 8000c68:	40010800 	.word	0x40010800
 8000c6c:	40010c00 	.word	0x40010c00

08000c70 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim2) {
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
	timer_run();
 8000c78:	f000 f8ce 	bl	8000e18 <timer_run>
	button_reading();
 8000c7c:	f7ff fe38 	bl	80008f0 <button_reading>
}
 8000c80:	bf00      	nop
 8000c82:	3708      	adds	r7, #8
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}

08000c88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c8c:	b672      	cpsid	i
}
 8000c8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c90:	e7fe      	b.n	8000c90 <Error_Handler+0x8>
	...

08000c94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b085      	sub	sp, #20
 8000c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c9a:	4b15      	ldr	r3, [pc, #84]	; (8000cf0 <HAL_MspInit+0x5c>)
 8000c9c:	699b      	ldr	r3, [r3, #24]
 8000c9e:	4a14      	ldr	r2, [pc, #80]	; (8000cf0 <HAL_MspInit+0x5c>)
 8000ca0:	f043 0301 	orr.w	r3, r3, #1
 8000ca4:	6193      	str	r3, [r2, #24]
 8000ca6:	4b12      	ldr	r3, [pc, #72]	; (8000cf0 <HAL_MspInit+0x5c>)
 8000ca8:	699b      	ldr	r3, [r3, #24]
 8000caa:	f003 0301 	and.w	r3, r3, #1
 8000cae:	60bb      	str	r3, [r7, #8]
 8000cb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cb2:	4b0f      	ldr	r3, [pc, #60]	; (8000cf0 <HAL_MspInit+0x5c>)
 8000cb4:	69db      	ldr	r3, [r3, #28]
 8000cb6:	4a0e      	ldr	r2, [pc, #56]	; (8000cf0 <HAL_MspInit+0x5c>)
 8000cb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cbc:	61d3      	str	r3, [r2, #28]
 8000cbe:	4b0c      	ldr	r3, [pc, #48]	; (8000cf0 <HAL_MspInit+0x5c>)
 8000cc0:	69db      	ldr	r3, [r3, #28]
 8000cc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cc6:	607b      	str	r3, [r7, #4]
 8000cc8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000cca:	4b0a      	ldr	r3, [pc, #40]	; (8000cf4 <HAL_MspInit+0x60>)
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	60fb      	str	r3, [r7, #12]
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000cd6:	60fb      	str	r3, [r7, #12]
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000cde:	60fb      	str	r3, [r7, #12]
 8000ce0:	4a04      	ldr	r2, [pc, #16]	; (8000cf4 <HAL_MspInit+0x60>)
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ce6:	bf00      	nop
 8000ce8:	3714      	adds	r7, #20
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bc80      	pop	{r7}
 8000cee:	4770      	bx	lr
 8000cf0:	40021000 	.word	0x40021000
 8000cf4:	40010000 	.word	0x40010000

08000cf8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b084      	sub	sp, #16
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d08:	d113      	bne.n	8000d32 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <HAL_TIM_Base_MspInit+0x44>)
 8000d0c:	69db      	ldr	r3, [r3, #28]
 8000d0e:	4a0b      	ldr	r2, [pc, #44]	; (8000d3c <HAL_TIM_Base_MspInit+0x44>)
 8000d10:	f043 0301 	orr.w	r3, r3, #1
 8000d14:	61d3      	str	r3, [r2, #28]
 8000d16:	4b09      	ldr	r3, [pc, #36]	; (8000d3c <HAL_TIM_Base_MspInit+0x44>)
 8000d18:	69db      	ldr	r3, [r3, #28]
 8000d1a:	f003 0301 	and.w	r3, r3, #1
 8000d1e:	60fb      	str	r3, [r7, #12]
 8000d20:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000d22:	2200      	movs	r2, #0
 8000d24:	2100      	movs	r1, #0
 8000d26:	201c      	movs	r0, #28
 8000d28:	f000 fa3f 	bl	80011aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000d2c:	201c      	movs	r0, #28
 8000d2e:	f000 fa58 	bl	80011e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000d32:	bf00      	nop
 8000d34:	3710      	adds	r7, #16
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	40021000 	.word	0x40021000

08000d40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d44:	e7fe      	b.n	8000d44 <NMI_Handler+0x4>

08000d46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d46:	b480      	push	{r7}
 8000d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d4a:	e7fe      	b.n	8000d4a <HardFault_Handler+0x4>

08000d4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d50:	e7fe      	b.n	8000d50 <MemManage_Handler+0x4>

08000d52 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d52:	b480      	push	{r7}
 8000d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d56:	e7fe      	b.n	8000d56 <BusFault_Handler+0x4>

08000d58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d5c:	e7fe      	b.n	8000d5c <UsageFault_Handler+0x4>

08000d5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d5e:	b480      	push	{r7}
 8000d60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d62:	bf00      	nop
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bc80      	pop	{r7}
 8000d68:	4770      	bx	lr

08000d6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d6a:	b480      	push	{r7}
 8000d6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d6e:	bf00      	nop
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bc80      	pop	{r7}
 8000d74:	4770      	bx	lr

08000d76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d76:	b480      	push	{r7}
 8000d78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d7a:	bf00      	nop
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bc80      	pop	{r7}
 8000d80:	4770      	bx	lr

08000d82 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d86:	f000 f91d 	bl	8000fc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d8a:	bf00      	nop
 8000d8c:	bd80      	pop	{r7, pc}
	...

08000d90 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000d94:	4802      	ldr	r0, [pc, #8]	; (8000da0 <TIM2_IRQHandler+0x10>)
 8000d96:	f001 f871 	bl	8001e7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000d9a:	bf00      	nop
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	2000009c 	.word	0x2000009c

08000da4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000da8:	bf00      	nop
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bc80      	pop	{r7}
 8000dae:	4770      	bx	lr

08000db0 <setTimer0>:

int TIMER_CYCLE = 10;
int timer0_counter = 0, timer1_counter = 0, timer2_counter = 0, timer3_counter = 0, timer4_counter = 0;
int timer0_flag = 0, timer1_flag = 0, timer2_flag = 0, timer3_flag = 0, timer4_flag = 0;;

void setTimer0(int duration) {
 8000db0:	b480      	push	{r7}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
	timer0_counter = duration/TIMER_CYCLE;
 8000db8:	4b07      	ldr	r3, [pc, #28]	; (8000dd8 <setTimer0+0x28>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	687a      	ldr	r2, [r7, #4]
 8000dbe:	fb92 f3f3 	sdiv	r3, r2, r3
 8000dc2:	4a06      	ldr	r2, [pc, #24]	; (8000ddc <setTimer0+0x2c>)
 8000dc4:	6013      	str	r3, [r2, #0]
	timer0_flag = 0;
 8000dc6:	4b06      	ldr	r3, [pc, #24]	; (8000de0 <setTimer0+0x30>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	601a      	str	r2, [r3, #0]
}
 8000dcc:	bf00      	nop
 8000dce:	370c      	adds	r7, #12
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bc80      	pop	{r7}
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	20000030 	.word	0x20000030
 8000ddc:	20000074 	.word	0x20000074
 8000de0:	20000088 	.word	0x20000088

08000de4 <setTimer1>:

void setTimer1(int duration) {
 8000de4:	b480      	push	{r7}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
	timer1_counter = duration/TIMER_CYCLE;
 8000dec:	4b07      	ldr	r3, [pc, #28]	; (8000e0c <setTimer1+0x28>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	687a      	ldr	r2, [r7, #4]
 8000df2:	fb92 f3f3 	sdiv	r3, r2, r3
 8000df6:	4a06      	ldr	r2, [pc, #24]	; (8000e10 <setTimer1+0x2c>)
 8000df8:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8000dfa:	4b06      	ldr	r3, [pc, #24]	; (8000e14 <setTimer1+0x30>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	601a      	str	r2, [r3, #0]
}
 8000e00:	bf00      	nop
 8000e02:	370c      	adds	r7, #12
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bc80      	pop	{r7}
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	20000030 	.word	0x20000030
 8000e10:	20000078 	.word	0x20000078
 8000e14:	2000008c 	.word	0x2000008c

08000e18 <timer_run>:
void setTimer4(int duration) {
	timer4_counter = duration/TIMER_CYCLE;
	timer4_flag = 0;
}

void timer_run() {
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
	if (timer0_counter > 0) {
 8000e1c:	4b29      	ldr	r3, [pc, #164]	; (8000ec4 <timer_run+0xac>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	dd0b      	ble.n	8000e3c <timer_run+0x24>
		timer0_counter--;
 8000e24:	4b27      	ldr	r3, [pc, #156]	; (8000ec4 <timer_run+0xac>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	3b01      	subs	r3, #1
 8000e2a:	4a26      	ldr	r2, [pc, #152]	; (8000ec4 <timer_run+0xac>)
 8000e2c:	6013      	str	r3, [r2, #0]
		if (timer0_counter == 0) timer0_flag = 1;
 8000e2e:	4b25      	ldr	r3, [pc, #148]	; (8000ec4 <timer_run+0xac>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d102      	bne.n	8000e3c <timer_run+0x24>
 8000e36:	4b24      	ldr	r3, [pc, #144]	; (8000ec8 <timer_run+0xb0>)
 8000e38:	2201      	movs	r2, #1
 8000e3a:	601a      	str	r2, [r3, #0]
	}
	if (timer1_counter > 0) {
 8000e3c:	4b23      	ldr	r3, [pc, #140]	; (8000ecc <timer_run+0xb4>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	dd0b      	ble.n	8000e5c <timer_run+0x44>
		timer1_counter--;
 8000e44:	4b21      	ldr	r3, [pc, #132]	; (8000ecc <timer_run+0xb4>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	3b01      	subs	r3, #1
 8000e4a:	4a20      	ldr	r2, [pc, #128]	; (8000ecc <timer_run+0xb4>)
 8000e4c:	6013      	str	r3, [r2, #0]
		if (timer1_counter == 0) timer1_flag = 1;
 8000e4e:	4b1f      	ldr	r3, [pc, #124]	; (8000ecc <timer_run+0xb4>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d102      	bne.n	8000e5c <timer_run+0x44>
 8000e56:	4b1e      	ldr	r3, [pc, #120]	; (8000ed0 <timer_run+0xb8>)
 8000e58:	2201      	movs	r2, #1
 8000e5a:	601a      	str	r2, [r3, #0]
	}
	if (timer2_counter > 0) {
 8000e5c:	4b1d      	ldr	r3, [pc, #116]	; (8000ed4 <timer_run+0xbc>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	dd0b      	ble.n	8000e7c <timer_run+0x64>
		timer2_counter--;
 8000e64:	4b1b      	ldr	r3, [pc, #108]	; (8000ed4 <timer_run+0xbc>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	3b01      	subs	r3, #1
 8000e6a:	4a1a      	ldr	r2, [pc, #104]	; (8000ed4 <timer_run+0xbc>)
 8000e6c:	6013      	str	r3, [r2, #0]
		if (timer2_counter == 0) timer2_flag = 1;
 8000e6e:	4b19      	ldr	r3, [pc, #100]	; (8000ed4 <timer_run+0xbc>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d102      	bne.n	8000e7c <timer_run+0x64>
 8000e76:	4b18      	ldr	r3, [pc, #96]	; (8000ed8 <timer_run+0xc0>)
 8000e78:	2201      	movs	r2, #1
 8000e7a:	601a      	str	r2, [r3, #0]
	}
	if (timer3_counter > 0) {
 8000e7c:	4b17      	ldr	r3, [pc, #92]	; (8000edc <timer_run+0xc4>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	dd0b      	ble.n	8000e9c <timer_run+0x84>
		timer3_counter--;
 8000e84:	4b15      	ldr	r3, [pc, #84]	; (8000edc <timer_run+0xc4>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	3b01      	subs	r3, #1
 8000e8a:	4a14      	ldr	r2, [pc, #80]	; (8000edc <timer_run+0xc4>)
 8000e8c:	6013      	str	r3, [r2, #0]
		if (timer3_counter == 0) timer3_flag = 1;
 8000e8e:	4b13      	ldr	r3, [pc, #76]	; (8000edc <timer_run+0xc4>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d102      	bne.n	8000e9c <timer_run+0x84>
 8000e96:	4b12      	ldr	r3, [pc, #72]	; (8000ee0 <timer_run+0xc8>)
 8000e98:	2201      	movs	r2, #1
 8000e9a:	601a      	str	r2, [r3, #0]
	}
	if (timer4_counter > 0) {
 8000e9c:	4b11      	ldr	r3, [pc, #68]	; (8000ee4 <timer_run+0xcc>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	dd0b      	ble.n	8000ebc <timer_run+0xa4>
		timer4_counter--;
 8000ea4:	4b0f      	ldr	r3, [pc, #60]	; (8000ee4 <timer_run+0xcc>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	3b01      	subs	r3, #1
 8000eaa:	4a0e      	ldr	r2, [pc, #56]	; (8000ee4 <timer_run+0xcc>)
 8000eac:	6013      	str	r3, [r2, #0]
		if (timer4_counter == 0) timer4_flag = 1;
 8000eae:	4b0d      	ldr	r3, [pc, #52]	; (8000ee4 <timer_run+0xcc>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d102      	bne.n	8000ebc <timer_run+0xa4>
 8000eb6:	4b0c      	ldr	r3, [pc, #48]	; (8000ee8 <timer_run+0xd0>)
 8000eb8:	2201      	movs	r2, #1
 8000eba:	601a      	str	r2, [r3, #0]
	}
}
 8000ebc:	bf00      	nop
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bc80      	pop	{r7}
 8000ec2:	4770      	bx	lr
 8000ec4:	20000074 	.word	0x20000074
 8000ec8:	20000088 	.word	0x20000088
 8000ecc:	20000078 	.word	0x20000078
 8000ed0:	2000008c 	.word	0x2000008c
 8000ed4:	2000007c 	.word	0x2000007c
 8000ed8:	20000090 	.word	0x20000090
 8000edc:	20000080 	.word	0x20000080
 8000ee0:	20000094 	.word	0x20000094
 8000ee4:	20000084 	.word	0x20000084
 8000ee8:	20000098 	.word	0x20000098

08000eec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000eec:	f7ff ff5a 	bl	8000da4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ef0:	480b      	ldr	r0, [pc, #44]	; (8000f20 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000ef2:	490c      	ldr	r1, [pc, #48]	; (8000f24 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000ef4:	4a0c      	ldr	r2, [pc, #48]	; (8000f28 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000ef6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ef8:	e002      	b.n	8000f00 <LoopCopyDataInit>

08000efa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000efa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000efc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000efe:	3304      	adds	r3, #4

08000f00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f04:	d3f9      	bcc.n	8000efa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f06:	4a09      	ldr	r2, [pc, #36]	; (8000f2c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000f08:	4c09      	ldr	r4, [pc, #36]	; (8000f30 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f0c:	e001      	b.n	8000f12 <LoopFillZerobss>

08000f0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f10:	3204      	adds	r2, #4

08000f12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f14:	d3fb      	bcc.n	8000f0e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f16:	f001 fb0d 	bl	8002534 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f1a:	f7ff fd93 	bl	8000a44 <main>
  bx lr
 8000f1e:	4770      	bx	lr
  ldr r0, =_sdata
 8000f20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f24:	2000003c 	.word	0x2000003c
  ldr r2, =_sidata
 8000f28:	080025d0 	.word	0x080025d0
  ldr r2, =_sbss
 8000f2c:	2000003c 	.word	0x2000003c
  ldr r4, =_ebss
 8000f30:	200000e8 	.word	0x200000e8

08000f34 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f34:	e7fe      	b.n	8000f34 <ADC1_2_IRQHandler>
	...

08000f38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f3c:	4b08      	ldr	r3, [pc, #32]	; (8000f60 <HAL_Init+0x28>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a07      	ldr	r2, [pc, #28]	; (8000f60 <HAL_Init+0x28>)
 8000f42:	f043 0310 	orr.w	r3, r3, #16
 8000f46:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f48:	2003      	movs	r0, #3
 8000f4a:	f000 f923 	bl	8001194 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f4e:	200f      	movs	r0, #15
 8000f50:	f000 f808 	bl	8000f64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f54:	f7ff fe9e 	bl	8000c94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f58:	2300      	movs	r3, #0
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	40022000 	.word	0x40022000

08000f64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f6c:	4b12      	ldr	r3, [pc, #72]	; (8000fb8 <HAL_InitTick+0x54>)
 8000f6e:	681a      	ldr	r2, [r3, #0]
 8000f70:	4b12      	ldr	r3, [pc, #72]	; (8000fbc <HAL_InitTick+0x58>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	4619      	mov	r1, r3
 8000f76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f82:	4618      	mov	r0, r3
 8000f84:	f000 f93b 	bl	80011fe <HAL_SYSTICK_Config>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	e00e      	b.n	8000fb0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2b0f      	cmp	r3, #15
 8000f96:	d80a      	bhi.n	8000fae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f98:	2200      	movs	r2, #0
 8000f9a:	6879      	ldr	r1, [r7, #4]
 8000f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000fa0:	f000 f903 	bl	80011aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fa4:	4a06      	ldr	r2, [pc, #24]	; (8000fc0 <HAL_InitTick+0x5c>)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000faa:	2300      	movs	r3, #0
 8000fac:	e000      	b.n	8000fb0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fae:	2301      	movs	r3, #1
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	3708      	adds	r7, #8
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	2000002c 	.word	0x2000002c
 8000fbc:	20000038 	.word	0x20000038
 8000fc0:	20000034 	.word	0x20000034

08000fc4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fc8:	4b05      	ldr	r3, [pc, #20]	; (8000fe0 <HAL_IncTick+0x1c>)
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	461a      	mov	r2, r3
 8000fce:	4b05      	ldr	r3, [pc, #20]	; (8000fe4 <HAL_IncTick+0x20>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4413      	add	r3, r2
 8000fd4:	4a03      	ldr	r2, [pc, #12]	; (8000fe4 <HAL_IncTick+0x20>)
 8000fd6:	6013      	str	r3, [r2, #0]
}
 8000fd8:	bf00      	nop
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bc80      	pop	{r7}
 8000fde:	4770      	bx	lr
 8000fe0:	20000038 	.word	0x20000038
 8000fe4:	200000e4 	.word	0x200000e4

08000fe8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  return uwTick;
 8000fec:	4b02      	ldr	r3, [pc, #8]	; (8000ff8 <HAL_GetTick+0x10>)
 8000fee:	681b      	ldr	r3, [r3, #0]
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bc80      	pop	{r7}
 8000ff6:	4770      	bx	lr
 8000ff8:	200000e4 	.word	0x200000e4

08000ffc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b085      	sub	sp, #20
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	f003 0307 	and.w	r3, r3, #7
 800100a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800100c:	4b0c      	ldr	r3, [pc, #48]	; (8001040 <__NVIC_SetPriorityGrouping+0x44>)
 800100e:	68db      	ldr	r3, [r3, #12]
 8001010:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001012:	68ba      	ldr	r2, [r7, #8]
 8001014:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001018:	4013      	ands	r3, r2
 800101a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001024:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001028:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800102c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800102e:	4a04      	ldr	r2, [pc, #16]	; (8001040 <__NVIC_SetPriorityGrouping+0x44>)
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	60d3      	str	r3, [r2, #12]
}
 8001034:	bf00      	nop
 8001036:	3714      	adds	r7, #20
 8001038:	46bd      	mov	sp, r7
 800103a:	bc80      	pop	{r7}
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	e000ed00 	.word	0xe000ed00

08001044 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001048:	4b04      	ldr	r3, [pc, #16]	; (800105c <__NVIC_GetPriorityGrouping+0x18>)
 800104a:	68db      	ldr	r3, [r3, #12]
 800104c:	0a1b      	lsrs	r3, r3, #8
 800104e:	f003 0307 	and.w	r3, r3, #7
}
 8001052:	4618      	mov	r0, r3
 8001054:	46bd      	mov	sp, r7
 8001056:	bc80      	pop	{r7}
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	e000ed00 	.word	0xe000ed00

08001060 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	4603      	mov	r3, r0
 8001068:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800106a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106e:	2b00      	cmp	r3, #0
 8001070:	db0b      	blt.n	800108a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001072:	79fb      	ldrb	r3, [r7, #7]
 8001074:	f003 021f 	and.w	r2, r3, #31
 8001078:	4906      	ldr	r1, [pc, #24]	; (8001094 <__NVIC_EnableIRQ+0x34>)
 800107a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107e:	095b      	lsrs	r3, r3, #5
 8001080:	2001      	movs	r0, #1
 8001082:	fa00 f202 	lsl.w	r2, r0, r2
 8001086:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800108a:	bf00      	nop
 800108c:	370c      	adds	r7, #12
 800108e:	46bd      	mov	sp, r7
 8001090:	bc80      	pop	{r7}
 8001092:	4770      	bx	lr
 8001094:	e000e100 	.word	0xe000e100

08001098 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	4603      	mov	r3, r0
 80010a0:	6039      	str	r1, [r7, #0]
 80010a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	db0a      	blt.n	80010c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	b2da      	uxtb	r2, r3
 80010b0:	490c      	ldr	r1, [pc, #48]	; (80010e4 <__NVIC_SetPriority+0x4c>)
 80010b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b6:	0112      	lsls	r2, r2, #4
 80010b8:	b2d2      	uxtb	r2, r2
 80010ba:	440b      	add	r3, r1
 80010bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010c0:	e00a      	b.n	80010d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	b2da      	uxtb	r2, r3
 80010c6:	4908      	ldr	r1, [pc, #32]	; (80010e8 <__NVIC_SetPriority+0x50>)
 80010c8:	79fb      	ldrb	r3, [r7, #7]
 80010ca:	f003 030f 	and.w	r3, r3, #15
 80010ce:	3b04      	subs	r3, #4
 80010d0:	0112      	lsls	r2, r2, #4
 80010d2:	b2d2      	uxtb	r2, r2
 80010d4:	440b      	add	r3, r1
 80010d6:	761a      	strb	r2, [r3, #24]
}
 80010d8:	bf00      	nop
 80010da:	370c      	adds	r7, #12
 80010dc:	46bd      	mov	sp, r7
 80010de:	bc80      	pop	{r7}
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	e000e100 	.word	0xe000e100
 80010e8:	e000ed00 	.word	0xe000ed00

080010ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b089      	sub	sp, #36	; 0x24
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	60f8      	str	r0, [r7, #12]
 80010f4:	60b9      	str	r1, [r7, #8]
 80010f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	f003 0307 	and.w	r3, r3, #7
 80010fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001100:	69fb      	ldr	r3, [r7, #28]
 8001102:	f1c3 0307 	rsb	r3, r3, #7
 8001106:	2b04      	cmp	r3, #4
 8001108:	bf28      	it	cs
 800110a:	2304      	movcs	r3, #4
 800110c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	3304      	adds	r3, #4
 8001112:	2b06      	cmp	r3, #6
 8001114:	d902      	bls.n	800111c <NVIC_EncodePriority+0x30>
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	3b03      	subs	r3, #3
 800111a:	e000      	b.n	800111e <NVIC_EncodePriority+0x32>
 800111c:	2300      	movs	r3, #0
 800111e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001120:	f04f 32ff 	mov.w	r2, #4294967295
 8001124:	69bb      	ldr	r3, [r7, #24]
 8001126:	fa02 f303 	lsl.w	r3, r2, r3
 800112a:	43da      	mvns	r2, r3
 800112c:	68bb      	ldr	r3, [r7, #8]
 800112e:	401a      	ands	r2, r3
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001134:	f04f 31ff 	mov.w	r1, #4294967295
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	fa01 f303 	lsl.w	r3, r1, r3
 800113e:	43d9      	mvns	r1, r3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001144:	4313      	orrs	r3, r2
         );
}
 8001146:	4618      	mov	r0, r3
 8001148:	3724      	adds	r7, #36	; 0x24
 800114a:	46bd      	mov	sp, r7
 800114c:	bc80      	pop	{r7}
 800114e:	4770      	bx	lr

08001150 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	3b01      	subs	r3, #1
 800115c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001160:	d301      	bcc.n	8001166 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001162:	2301      	movs	r3, #1
 8001164:	e00f      	b.n	8001186 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001166:	4a0a      	ldr	r2, [pc, #40]	; (8001190 <SysTick_Config+0x40>)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	3b01      	subs	r3, #1
 800116c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800116e:	210f      	movs	r1, #15
 8001170:	f04f 30ff 	mov.w	r0, #4294967295
 8001174:	f7ff ff90 	bl	8001098 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001178:	4b05      	ldr	r3, [pc, #20]	; (8001190 <SysTick_Config+0x40>)
 800117a:	2200      	movs	r2, #0
 800117c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800117e:	4b04      	ldr	r3, [pc, #16]	; (8001190 <SysTick_Config+0x40>)
 8001180:	2207      	movs	r2, #7
 8001182:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001184:	2300      	movs	r3, #0
}
 8001186:	4618      	mov	r0, r3
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	e000e010 	.word	0xe000e010

08001194 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800119c:	6878      	ldr	r0, [r7, #4]
 800119e:	f7ff ff2d 	bl	8000ffc <__NVIC_SetPriorityGrouping>
}
 80011a2:	bf00      	nop
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}

080011aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011aa:	b580      	push	{r7, lr}
 80011ac:	b086      	sub	sp, #24
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	4603      	mov	r3, r0
 80011b2:	60b9      	str	r1, [r7, #8]
 80011b4:	607a      	str	r2, [r7, #4]
 80011b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011b8:	2300      	movs	r3, #0
 80011ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011bc:	f7ff ff42 	bl	8001044 <__NVIC_GetPriorityGrouping>
 80011c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011c2:	687a      	ldr	r2, [r7, #4]
 80011c4:	68b9      	ldr	r1, [r7, #8]
 80011c6:	6978      	ldr	r0, [r7, #20]
 80011c8:	f7ff ff90 	bl	80010ec <NVIC_EncodePriority>
 80011cc:	4602      	mov	r2, r0
 80011ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011d2:	4611      	mov	r1, r2
 80011d4:	4618      	mov	r0, r3
 80011d6:	f7ff ff5f 	bl	8001098 <__NVIC_SetPriority>
}
 80011da:	bf00      	nop
 80011dc:	3718      	adds	r7, #24
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}

080011e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011e2:	b580      	push	{r7, lr}
 80011e4:	b082      	sub	sp, #8
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	4603      	mov	r3, r0
 80011ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7ff ff35 	bl	8001060 <__NVIC_EnableIRQ>
}
 80011f6:	bf00      	nop
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}

080011fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011fe:	b580      	push	{r7, lr}
 8001200:	b082      	sub	sp, #8
 8001202:	af00      	add	r7, sp, #0
 8001204:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001206:	6878      	ldr	r0, [r7, #4]
 8001208:	f7ff ffa2 	bl	8001150 <SysTick_Config>
 800120c:	4603      	mov	r3, r0
}
 800120e:	4618      	mov	r0, r3
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
	...

08001218 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001218:	b480      	push	{r7}
 800121a:	b08b      	sub	sp, #44	; 0x2c
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001222:	2300      	movs	r3, #0
 8001224:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001226:	2300      	movs	r3, #0
 8001228:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800122a:	e169      	b.n	8001500 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800122c:	2201      	movs	r2, #1
 800122e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001230:	fa02 f303 	lsl.w	r3, r2, r3
 8001234:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	69fa      	ldr	r2, [r7, #28]
 800123c:	4013      	ands	r3, r2
 800123e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	429a      	cmp	r2, r3
 8001246:	f040 8158 	bne.w	80014fa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	4a9a      	ldr	r2, [pc, #616]	; (80014b8 <HAL_GPIO_Init+0x2a0>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d05e      	beq.n	8001312 <HAL_GPIO_Init+0xfa>
 8001254:	4a98      	ldr	r2, [pc, #608]	; (80014b8 <HAL_GPIO_Init+0x2a0>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d875      	bhi.n	8001346 <HAL_GPIO_Init+0x12e>
 800125a:	4a98      	ldr	r2, [pc, #608]	; (80014bc <HAL_GPIO_Init+0x2a4>)
 800125c:	4293      	cmp	r3, r2
 800125e:	d058      	beq.n	8001312 <HAL_GPIO_Init+0xfa>
 8001260:	4a96      	ldr	r2, [pc, #600]	; (80014bc <HAL_GPIO_Init+0x2a4>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d86f      	bhi.n	8001346 <HAL_GPIO_Init+0x12e>
 8001266:	4a96      	ldr	r2, [pc, #600]	; (80014c0 <HAL_GPIO_Init+0x2a8>)
 8001268:	4293      	cmp	r3, r2
 800126a:	d052      	beq.n	8001312 <HAL_GPIO_Init+0xfa>
 800126c:	4a94      	ldr	r2, [pc, #592]	; (80014c0 <HAL_GPIO_Init+0x2a8>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d869      	bhi.n	8001346 <HAL_GPIO_Init+0x12e>
 8001272:	4a94      	ldr	r2, [pc, #592]	; (80014c4 <HAL_GPIO_Init+0x2ac>)
 8001274:	4293      	cmp	r3, r2
 8001276:	d04c      	beq.n	8001312 <HAL_GPIO_Init+0xfa>
 8001278:	4a92      	ldr	r2, [pc, #584]	; (80014c4 <HAL_GPIO_Init+0x2ac>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d863      	bhi.n	8001346 <HAL_GPIO_Init+0x12e>
 800127e:	4a92      	ldr	r2, [pc, #584]	; (80014c8 <HAL_GPIO_Init+0x2b0>)
 8001280:	4293      	cmp	r3, r2
 8001282:	d046      	beq.n	8001312 <HAL_GPIO_Init+0xfa>
 8001284:	4a90      	ldr	r2, [pc, #576]	; (80014c8 <HAL_GPIO_Init+0x2b0>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d85d      	bhi.n	8001346 <HAL_GPIO_Init+0x12e>
 800128a:	2b12      	cmp	r3, #18
 800128c:	d82a      	bhi.n	80012e4 <HAL_GPIO_Init+0xcc>
 800128e:	2b12      	cmp	r3, #18
 8001290:	d859      	bhi.n	8001346 <HAL_GPIO_Init+0x12e>
 8001292:	a201      	add	r2, pc, #4	; (adr r2, 8001298 <HAL_GPIO_Init+0x80>)
 8001294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001298:	08001313 	.word	0x08001313
 800129c:	080012ed 	.word	0x080012ed
 80012a0:	080012ff 	.word	0x080012ff
 80012a4:	08001341 	.word	0x08001341
 80012a8:	08001347 	.word	0x08001347
 80012ac:	08001347 	.word	0x08001347
 80012b0:	08001347 	.word	0x08001347
 80012b4:	08001347 	.word	0x08001347
 80012b8:	08001347 	.word	0x08001347
 80012bc:	08001347 	.word	0x08001347
 80012c0:	08001347 	.word	0x08001347
 80012c4:	08001347 	.word	0x08001347
 80012c8:	08001347 	.word	0x08001347
 80012cc:	08001347 	.word	0x08001347
 80012d0:	08001347 	.word	0x08001347
 80012d4:	08001347 	.word	0x08001347
 80012d8:	08001347 	.word	0x08001347
 80012dc:	080012f5 	.word	0x080012f5
 80012e0:	08001309 	.word	0x08001309
 80012e4:	4a79      	ldr	r2, [pc, #484]	; (80014cc <HAL_GPIO_Init+0x2b4>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d013      	beq.n	8001312 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80012ea:	e02c      	b.n	8001346 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	623b      	str	r3, [r7, #32]
          break;
 80012f2:	e029      	b.n	8001348 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	3304      	adds	r3, #4
 80012fa:	623b      	str	r3, [r7, #32]
          break;
 80012fc:	e024      	b.n	8001348 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	68db      	ldr	r3, [r3, #12]
 8001302:	3308      	adds	r3, #8
 8001304:	623b      	str	r3, [r7, #32]
          break;
 8001306:	e01f      	b.n	8001348 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	330c      	adds	r3, #12
 800130e:	623b      	str	r3, [r7, #32]
          break;
 8001310:	e01a      	b.n	8001348 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	689b      	ldr	r3, [r3, #8]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d102      	bne.n	8001320 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800131a:	2304      	movs	r3, #4
 800131c:	623b      	str	r3, [r7, #32]
          break;
 800131e:	e013      	b.n	8001348 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	689b      	ldr	r3, [r3, #8]
 8001324:	2b01      	cmp	r3, #1
 8001326:	d105      	bne.n	8001334 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001328:	2308      	movs	r3, #8
 800132a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	69fa      	ldr	r2, [r7, #28]
 8001330:	611a      	str	r2, [r3, #16]
          break;
 8001332:	e009      	b.n	8001348 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001334:	2308      	movs	r3, #8
 8001336:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	69fa      	ldr	r2, [r7, #28]
 800133c:	615a      	str	r2, [r3, #20]
          break;
 800133e:	e003      	b.n	8001348 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001340:	2300      	movs	r3, #0
 8001342:	623b      	str	r3, [r7, #32]
          break;
 8001344:	e000      	b.n	8001348 <HAL_GPIO_Init+0x130>
          break;
 8001346:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001348:	69bb      	ldr	r3, [r7, #24]
 800134a:	2bff      	cmp	r3, #255	; 0xff
 800134c:	d801      	bhi.n	8001352 <HAL_GPIO_Init+0x13a>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	e001      	b.n	8001356 <HAL_GPIO_Init+0x13e>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	3304      	adds	r3, #4
 8001356:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001358:	69bb      	ldr	r3, [r7, #24]
 800135a:	2bff      	cmp	r3, #255	; 0xff
 800135c:	d802      	bhi.n	8001364 <HAL_GPIO_Init+0x14c>
 800135e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001360:	009b      	lsls	r3, r3, #2
 8001362:	e002      	b.n	800136a <HAL_GPIO_Init+0x152>
 8001364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001366:	3b08      	subs	r3, #8
 8001368:	009b      	lsls	r3, r3, #2
 800136a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	210f      	movs	r1, #15
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	fa01 f303 	lsl.w	r3, r1, r3
 8001378:	43db      	mvns	r3, r3
 800137a:	401a      	ands	r2, r3
 800137c:	6a39      	ldr	r1, [r7, #32]
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	fa01 f303 	lsl.w	r3, r1, r3
 8001384:	431a      	orrs	r2, r3
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001392:	2b00      	cmp	r3, #0
 8001394:	f000 80b1 	beq.w	80014fa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001398:	4b4d      	ldr	r3, [pc, #308]	; (80014d0 <HAL_GPIO_Init+0x2b8>)
 800139a:	699b      	ldr	r3, [r3, #24]
 800139c:	4a4c      	ldr	r2, [pc, #304]	; (80014d0 <HAL_GPIO_Init+0x2b8>)
 800139e:	f043 0301 	orr.w	r3, r3, #1
 80013a2:	6193      	str	r3, [r2, #24]
 80013a4:	4b4a      	ldr	r3, [pc, #296]	; (80014d0 <HAL_GPIO_Init+0x2b8>)
 80013a6:	699b      	ldr	r3, [r3, #24]
 80013a8:	f003 0301 	and.w	r3, r3, #1
 80013ac:	60bb      	str	r3, [r7, #8]
 80013ae:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80013b0:	4a48      	ldr	r2, [pc, #288]	; (80014d4 <HAL_GPIO_Init+0x2bc>)
 80013b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b4:	089b      	lsrs	r3, r3, #2
 80013b6:	3302      	adds	r3, #2
 80013b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013bc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80013be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c0:	f003 0303 	and.w	r3, r3, #3
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	220f      	movs	r2, #15
 80013c8:	fa02 f303 	lsl.w	r3, r2, r3
 80013cc:	43db      	mvns	r3, r3
 80013ce:	68fa      	ldr	r2, [r7, #12]
 80013d0:	4013      	ands	r3, r2
 80013d2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	4a40      	ldr	r2, [pc, #256]	; (80014d8 <HAL_GPIO_Init+0x2c0>)
 80013d8:	4293      	cmp	r3, r2
 80013da:	d013      	beq.n	8001404 <HAL_GPIO_Init+0x1ec>
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	4a3f      	ldr	r2, [pc, #252]	; (80014dc <HAL_GPIO_Init+0x2c4>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d00d      	beq.n	8001400 <HAL_GPIO_Init+0x1e8>
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	4a3e      	ldr	r2, [pc, #248]	; (80014e0 <HAL_GPIO_Init+0x2c8>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d007      	beq.n	80013fc <HAL_GPIO_Init+0x1e4>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	4a3d      	ldr	r2, [pc, #244]	; (80014e4 <HAL_GPIO_Init+0x2cc>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d101      	bne.n	80013f8 <HAL_GPIO_Init+0x1e0>
 80013f4:	2303      	movs	r3, #3
 80013f6:	e006      	b.n	8001406 <HAL_GPIO_Init+0x1ee>
 80013f8:	2304      	movs	r3, #4
 80013fa:	e004      	b.n	8001406 <HAL_GPIO_Init+0x1ee>
 80013fc:	2302      	movs	r3, #2
 80013fe:	e002      	b.n	8001406 <HAL_GPIO_Init+0x1ee>
 8001400:	2301      	movs	r3, #1
 8001402:	e000      	b.n	8001406 <HAL_GPIO_Init+0x1ee>
 8001404:	2300      	movs	r3, #0
 8001406:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001408:	f002 0203 	and.w	r2, r2, #3
 800140c:	0092      	lsls	r2, r2, #2
 800140e:	4093      	lsls	r3, r2
 8001410:	68fa      	ldr	r2, [r7, #12]
 8001412:	4313      	orrs	r3, r2
 8001414:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001416:	492f      	ldr	r1, [pc, #188]	; (80014d4 <HAL_GPIO_Init+0x2bc>)
 8001418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800141a:	089b      	lsrs	r3, r3, #2
 800141c:	3302      	adds	r3, #2
 800141e:	68fa      	ldr	r2, [r7, #12]
 8001420:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800142c:	2b00      	cmp	r3, #0
 800142e:	d006      	beq.n	800143e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001430:	4b2d      	ldr	r3, [pc, #180]	; (80014e8 <HAL_GPIO_Init+0x2d0>)
 8001432:	689a      	ldr	r2, [r3, #8]
 8001434:	492c      	ldr	r1, [pc, #176]	; (80014e8 <HAL_GPIO_Init+0x2d0>)
 8001436:	69bb      	ldr	r3, [r7, #24]
 8001438:	4313      	orrs	r3, r2
 800143a:	608b      	str	r3, [r1, #8]
 800143c:	e006      	b.n	800144c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800143e:	4b2a      	ldr	r3, [pc, #168]	; (80014e8 <HAL_GPIO_Init+0x2d0>)
 8001440:	689a      	ldr	r2, [r3, #8]
 8001442:	69bb      	ldr	r3, [r7, #24]
 8001444:	43db      	mvns	r3, r3
 8001446:	4928      	ldr	r1, [pc, #160]	; (80014e8 <HAL_GPIO_Init+0x2d0>)
 8001448:	4013      	ands	r3, r2
 800144a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001454:	2b00      	cmp	r3, #0
 8001456:	d006      	beq.n	8001466 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001458:	4b23      	ldr	r3, [pc, #140]	; (80014e8 <HAL_GPIO_Init+0x2d0>)
 800145a:	68da      	ldr	r2, [r3, #12]
 800145c:	4922      	ldr	r1, [pc, #136]	; (80014e8 <HAL_GPIO_Init+0x2d0>)
 800145e:	69bb      	ldr	r3, [r7, #24]
 8001460:	4313      	orrs	r3, r2
 8001462:	60cb      	str	r3, [r1, #12]
 8001464:	e006      	b.n	8001474 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001466:	4b20      	ldr	r3, [pc, #128]	; (80014e8 <HAL_GPIO_Init+0x2d0>)
 8001468:	68da      	ldr	r2, [r3, #12]
 800146a:	69bb      	ldr	r3, [r7, #24]
 800146c:	43db      	mvns	r3, r3
 800146e:	491e      	ldr	r1, [pc, #120]	; (80014e8 <HAL_GPIO_Init+0x2d0>)
 8001470:	4013      	ands	r3, r2
 8001472:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800147c:	2b00      	cmp	r3, #0
 800147e:	d006      	beq.n	800148e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001480:	4b19      	ldr	r3, [pc, #100]	; (80014e8 <HAL_GPIO_Init+0x2d0>)
 8001482:	685a      	ldr	r2, [r3, #4]
 8001484:	4918      	ldr	r1, [pc, #96]	; (80014e8 <HAL_GPIO_Init+0x2d0>)
 8001486:	69bb      	ldr	r3, [r7, #24]
 8001488:	4313      	orrs	r3, r2
 800148a:	604b      	str	r3, [r1, #4]
 800148c:	e006      	b.n	800149c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800148e:	4b16      	ldr	r3, [pc, #88]	; (80014e8 <HAL_GPIO_Init+0x2d0>)
 8001490:	685a      	ldr	r2, [r3, #4]
 8001492:	69bb      	ldr	r3, [r7, #24]
 8001494:	43db      	mvns	r3, r3
 8001496:	4914      	ldr	r1, [pc, #80]	; (80014e8 <HAL_GPIO_Init+0x2d0>)
 8001498:	4013      	ands	r3, r2
 800149a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d021      	beq.n	80014ec <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80014a8:	4b0f      	ldr	r3, [pc, #60]	; (80014e8 <HAL_GPIO_Init+0x2d0>)
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	490e      	ldr	r1, [pc, #56]	; (80014e8 <HAL_GPIO_Init+0x2d0>)
 80014ae:	69bb      	ldr	r3, [r7, #24]
 80014b0:	4313      	orrs	r3, r2
 80014b2:	600b      	str	r3, [r1, #0]
 80014b4:	e021      	b.n	80014fa <HAL_GPIO_Init+0x2e2>
 80014b6:	bf00      	nop
 80014b8:	10320000 	.word	0x10320000
 80014bc:	10310000 	.word	0x10310000
 80014c0:	10220000 	.word	0x10220000
 80014c4:	10210000 	.word	0x10210000
 80014c8:	10120000 	.word	0x10120000
 80014cc:	10110000 	.word	0x10110000
 80014d0:	40021000 	.word	0x40021000
 80014d4:	40010000 	.word	0x40010000
 80014d8:	40010800 	.word	0x40010800
 80014dc:	40010c00 	.word	0x40010c00
 80014e0:	40011000 	.word	0x40011000
 80014e4:	40011400 	.word	0x40011400
 80014e8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80014ec:	4b0b      	ldr	r3, [pc, #44]	; (800151c <HAL_GPIO_Init+0x304>)
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	69bb      	ldr	r3, [r7, #24]
 80014f2:	43db      	mvns	r3, r3
 80014f4:	4909      	ldr	r1, [pc, #36]	; (800151c <HAL_GPIO_Init+0x304>)
 80014f6:	4013      	ands	r3, r2
 80014f8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80014fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014fc:	3301      	adds	r3, #1
 80014fe:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001506:	fa22 f303 	lsr.w	r3, r2, r3
 800150a:	2b00      	cmp	r3, #0
 800150c:	f47f ae8e 	bne.w	800122c <HAL_GPIO_Init+0x14>
  }
}
 8001510:	bf00      	nop
 8001512:	bf00      	nop
 8001514:	372c      	adds	r7, #44	; 0x2c
 8001516:	46bd      	mov	sp, r7
 8001518:	bc80      	pop	{r7}
 800151a:	4770      	bx	lr
 800151c:	40010400 	.word	0x40010400

08001520 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001520:	b480      	push	{r7}
 8001522:	b085      	sub	sp, #20
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	460b      	mov	r3, r1
 800152a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	689a      	ldr	r2, [r3, #8]
 8001530:	887b      	ldrh	r3, [r7, #2]
 8001532:	4013      	ands	r3, r2
 8001534:	2b00      	cmp	r3, #0
 8001536:	d002      	beq.n	800153e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001538:	2301      	movs	r3, #1
 800153a:	73fb      	strb	r3, [r7, #15]
 800153c:	e001      	b.n	8001542 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800153e:	2300      	movs	r3, #0
 8001540:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001542:	7bfb      	ldrb	r3, [r7, #15]
}
 8001544:	4618      	mov	r0, r3
 8001546:	3714      	adds	r7, #20
 8001548:	46bd      	mov	sp, r7
 800154a:	bc80      	pop	{r7}
 800154c:	4770      	bx	lr

0800154e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800154e:	b480      	push	{r7}
 8001550:	b083      	sub	sp, #12
 8001552:	af00      	add	r7, sp, #0
 8001554:	6078      	str	r0, [r7, #4]
 8001556:	460b      	mov	r3, r1
 8001558:	807b      	strh	r3, [r7, #2]
 800155a:	4613      	mov	r3, r2
 800155c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800155e:	787b      	ldrb	r3, [r7, #1]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d003      	beq.n	800156c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001564:	887a      	ldrh	r2, [r7, #2]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800156a:	e003      	b.n	8001574 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800156c:	887b      	ldrh	r3, [r7, #2]
 800156e:	041a      	lsls	r2, r3, #16
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	611a      	str	r2, [r3, #16]
}
 8001574:	bf00      	nop
 8001576:	370c      	adds	r7, #12
 8001578:	46bd      	mov	sp, r7
 800157a:	bc80      	pop	{r7}
 800157c:	4770      	bx	lr
	...

08001580 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b086      	sub	sp, #24
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d101      	bne.n	8001592 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	e26c      	b.n	8001a6c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f003 0301 	and.w	r3, r3, #1
 800159a:	2b00      	cmp	r3, #0
 800159c:	f000 8087 	beq.w	80016ae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80015a0:	4b92      	ldr	r3, [pc, #584]	; (80017ec <HAL_RCC_OscConfig+0x26c>)
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f003 030c 	and.w	r3, r3, #12
 80015a8:	2b04      	cmp	r3, #4
 80015aa:	d00c      	beq.n	80015c6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80015ac:	4b8f      	ldr	r3, [pc, #572]	; (80017ec <HAL_RCC_OscConfig+0x26c>)
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	f003 030c 	and.w	r3, r3, #12
 80015b4:	2b08      	cmp	r3, #8
 80015b6:	d112      	bne.n	80015de <HAL_RCC_OscConfig+0x5e>
 80015b8:	4b8c      	ldr	r3, [pc, #560]	; (80017ec <HAL_RCC_OscConfig+0x26c>)
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015c4:	d10b      	bne.n	80015de <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015c6:	4b89      	ldr	r3, [pc, #548]	; (80017ec <HAL_RCC_OscConfig+0x26c>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d06c      	beq.n	80016ac <HAL_RCC_OscConfig+0x12c>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d168      	bne.n	80016ac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	e246      	b.n	8001a6c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015e6:	d106      	bne.n	80015f6 <HAL_RCC_OscConfig+0x76>
 80015e8:	4b80      	ldr	r3, [pc, #512]	; (80017ec <HAL_RCC_OscConfig+0x26c>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a7f      	ldr	r2, [pc, #508]	; (80017ec <HAL_RCC_OscConfig+0x26c>)
 80015ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015f2:	6013      	str	r3, [r2, #0]
 80015f4:	e02e      	b.n	8001654 <HAL_RCC_OscConfig+0xd4>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d10c      	bne.n	8001618 <HAL_RCC_OscConfig+0x98>
 80015fe:	4b7b      	ldr	r3, [pc, #492]	; (80017ec <HAL_RCC_OscConfig+0x26c>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a7a      	ldr	r2, [pc, #488]	; (80017ec <HAL_RCC_OscConfig+0x26c>)
 8001604:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001608:	6013      	str	r3, [r2, #0]
 800160a:	4b78      	ldr	r3, [pc, #480]	; (80017ec <HAL_RCC_OscConfig+0x26c>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a77      	ldr	r2, [pc, #476]	; (80017ec <HAL_RCC_OscConfig+0x26c>)
 8001610:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001614:	6013      	str	r3, [r2, #0]
 8001616:	e01d      	b.n	8001654 <HAL_RCC_OscConfig+0xd4>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001620:	d10c      	bne.n	800163c <HAL_RCC_OscConfig+0xbc>
 8001622:	4b72      	ldr	r3, [pc, #456]	; (80017ec <HAL_RCC_OscConfig+0x26c>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a71      	ldr	r2, [pc, #452]	; (80017ec <HAL_RCC_OscConfig+0x26c>)
 8001628:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800162c:	6013      	str	r3, [r2, #0]
 800162e:	4b6f      	ldr	r3, [pc, #444]	; (80017ec <HAL_RCC_OscConfig+0x26c>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a6e      	ldr	r2, [pc, #440]	; (80017ec <HAL_RCC_OscConfig+0x26c>)
 8001634:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001638:	6013      	str	r3, [r2, #0]
 800163a:	e00b      	b.n	8001654 <HAL_RCC_OscConfig+0xd4>
 800163c:	4b6b      	ldr	r3, [pc, #428]	; (80017ec <HAL_RCC_OscConfig+0x26c>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a6a      	ldr	r2, [pc, #424]	; (80017ec <HAL_RCC_OscConfig+0x26c>)
 8001642:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001646:	6013      	str	r3, [r2, #0]
 8001648:	4b68      	ldr	r3, [pc, #416]	; (80017ec <HAL_RCC_OscConfig+0x26c>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a67      	ldr	r2, [pc, #412]	; (80017ec <HAL_RCC_OscConfig+0x26c>)
 800164e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001652:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d013      	beq.n	8001684 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800165c:	f7ff fcc4 	bl	8000fe8 <HAL_GetTick>
 8001660:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001662:	e008      	b.n	8001676 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001664:	f7ff fcc0 	bl	8000fe8 <HAL_GetTick>
 8001668:	4602      	mov	r2, r0
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	2b64      	cmp	r3, #100	; 0x64
 8001670:	d901      	bls.n	8001676 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001672:	2303      	movs	r3, #3
 8001674:	e1fa      	b.n	8001a6c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001676:	4b5d      	ldr	r3, [pc, #372]	; (80017ec <HAL_RCC_OscConfig+0x26c>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800167e:	2b00      	cmp	r3, #0
 8001680:	d0f0      	beq.n	8001664 <HAL_RCC_OscConfig+0xe4>
 8001682:	e014      	b.n	80016ae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001684:	f7ff fcb0 	bl	8000fe8 <HAL_GetTick>
 8001688:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800168a:	e008      	b.n	800169e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800168c:	f7ff fcac 	bl	8000fe8 <HAL_GetTick>
 8001690:	4602      	mov	r2, r0
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	2b64      	cmp	r3, #100	; 0x64
 8001698:	d901      	bls.n	800169e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800169a:	2303      	movs	r3, #3
 800169c:	e1e6      	b.n	8001a6c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800169e:	4b53      	ldr	r3, [pc, #332]	; (80017ec <HAL_RCC_OscConfig+0x26c>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d1f0      	bne.n	800168c <HAL_RCC_OscConfig+0x10c>
 80016aa:	e000      	b.n	80016ae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f003 0302 	and.w	r3, r3, #2
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d063      	beq.n	8001782 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80016ba:	4b4c      	ldr	r3, [pc, #304]	; (80017ec <HAL_RCC_OscConfig+0x26c>)
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	f003 030c 	and.w	r3, r3, #12
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d00b      	beq.n	80016de <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80016c6:	4b49      	ldr	r3, [pc, #292]	; (80017ec <HAL_RCC_OscConfig+0x26c>)
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	f003 030c 	and.w	r3, r3, #12
 80016ce:	2b08      	cmp	r3, #8
 80016d0:	d11c      	bne.n	800170c <HAL_RCC_OscConfig+0x18c>
 80016d2:	4b46      	ldr	r3, [pc, #280]	; (80017ec <HAL_RCC_OscConfig+0x26c>)
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d116      	bne.n	800170c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016de:	4b43      	ldr	r3, [pc, #268]	; (80017ec <HAL_RCC_OscConfig+0x26c>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 0302 	and.w	r3, r3, #2
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d005      	beq.n	80016f6 <HAL_RCC_OscConfig+0x176>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	691b      	ldr	r3, [r3, #16]
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d001      	beq.n	80016f6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e1ba      	b.n	8001a6c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016f6:	4b3d      	ldr	r3, [pc, #244]	; (80017ec <HAL_RCC_OscConfig+0x26c>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	695b      	ldr	r3, [r3, #20]
 8001702:	00db      	lsls	r3, r3, #3
 8001704:	4939      	ldr	r1, [pc, #228]	; (80017ec <HAL_RCC_OscConfig+0x26c>)
 8001706:	4313      	orrs	r3, r2
 8001708:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800170a:	e03a      	b.n	8001782 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	691b      	ldr	r3, [r3, #16]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d020      	beq.n	8001756 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001714:	4b36      	ldr	r3, [pc, #216]	; (80017f0 <HAL_RCC_OscConfig+0x270>)
 8001716:	2201      	movs	r2, #1
 8001718:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800171a:	f7ff fc65 	bl	8000fe8 <HAL_GetTick>
 800171e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001720:	e008      	b.n	8001734 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001722:	f7ff fc61 	bl	8000fe8 <HAL_GetTick>
 8001726:	4602      	mov	r2, r0
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	2b02      	cmp	r3, #2
 800172e:	d901      	bls.n	8001734 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001730:	2303      	movs	r3, #3
 8001732:	e19b      	b.n	8001a6c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001734:	4b2d      	ldr	r3, [pc, #180]	; (80017ec <HAL_RCC_OscConfig+0x26c>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f003 0302 	and.w	r3, r3, #2
 800173c:	2b00      	cmp	r3, #0
 800173e:	d0f0      	beq.n	8001722 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001740:	4b2a      	ldr	r3, [pc, #168]	; (80017ec <HAL_RCC_OscConfig+0x26c>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	695b      	ldr	r3, [r3, #20]
 800174c:	00db      	lsls	r3, r3, #3
 800174e:	4927      	ldr	r1, [pc, #156]	; (80017ec <HAL_RCC_OscConfig+0x26c>)
 8001750:	4313      	orrs	r3, r2
 8001752:	600b      	str	r3, [r1, #0]
 8001754:	e015      	b.n	8001782 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001756:	4b26      	ldr	r3, [pc, #152]	; (80017f0 <HAL_RCC_OscConfig+0x270>)
 8001758:	2200      	movs	r2, #0
 800175a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800175c:	f7ff fc44 	bl	8000fe8 <HAL_GetTick>
 8001760:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001762:	e008      	b.n	8001776 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001764:	f7ff fc40 	bl	8000fe8 <HAL_GetTick>
 8001768:	4602      	mov	r2, r0
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	2b02      	cmp	r3, #2
 8001770:	d901      	bls.n	8001776 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001772:	2303      	movs	r3, #3
 8001774:	e17a      	b.n	8001a6c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001776:	4b1d      	ldr	r3, [pc, #116]	; (80017ec <HAL_RCC_OscConfig+0x26c>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 0302 	and.w	r3, r3, #2
 800177e:	2b00      	cmp	r3, #0
 8001780:	d1f0      	bne.n	8001764 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 0308 	and.w	r3, r3, #8
 800178a:	2b00      	cmp	r3, #0
 800178c:	d03a      	beq.n	8001804 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	699b      	ldr	r3, [r3, #24]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d019      	beq.n	80017ca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001796:	4b17      	ldr	r3, [pc, #92]	; (80017f4 <HAL_RCC_OscConfig+0x274>)
 8001798:	2201      	movs	r2, #1
 800179a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800179c:	f7ff fc24 	bl	8000fe8 <HAL_GetTick>
 80017a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017a2:	e008      	b.n	80017b6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017a4:	f7ff fc20 	bl	8000fe8 <HAL_GetTick>
 80017a8:	4602      	mov	r2, r0
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	2b02      	cmp	r3, #2
 80017b0:	d901      	bls.n	80017b6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80017b2:	2303      	movs	r3, #3
 80017b4:	e15a      	b.n	8001a6c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017b6:	4b0d      	ldr	r3, [pc, #52]	; (80017ec <HAL_RCC_OscConfig+0x26c>)
 80017b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ba:	f003 0302 	and.w	r3, r3, #2
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d0f0      	beq.n	80017a4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80017c2:	2001      	movs	r0, #1
 80017c4:	f000 fa9a 	bl	8001cfc <RCC_Delay>
 80017c8:	e01c      	b.n	8001804 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017ca:	4b0a      	ldr	r3, [pc, #40]	; (80017f4 <HAL_RCC_OscConfig+0x274>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017d0:	f7ff fc0a 	bl	8000fe8 <HAL_GetTick>
 80017d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017d6:	e00f      	b.n	80017f8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017d8:	f7ff fc06 	bl	8000fe8 <HAL_GetTick>
 80017dc:	4602      	mov	r2, r0
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	2b02      	cmp	r3, #2
 80017e4:	d908      	bls.n	80017f8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80017e6:	2303      	movs	r3, #3
 80017e8:	e140      	b.n	8001a6c <HAL_RCC_OscConfig+0x4ec>
 80017ea:	bf00      	nop
 80017ec:	40021000 	.word	0x40021000
 80017f0:	42420000 	.word	0x42420000
 80017f4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017f8:	4b9e      	ldr	r3, [pc, #632]	; (8001a74 <HAL_RCC_OscConfig+0x4f4>)
 80017fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017fc:	f003 0302 	and.w	r3, r3, #2
 8001800:	2b00      	cmp	r3, #0
 8001802:	d1e9      	bne.n	80017d8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f003 0304 	and.w	r3, r3, #4
 800180c:	2b00      	cmp	r3, #0
 800180e:	f000 80a6 	beq.w	800195e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001812:	2300      	movs	r3, #0
 8001814:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001816:	4b97      	ldr	r3, [pc, #604]	; (8001a74 <HAL_RCC_OscConfig+0x4f4>)
 8001818:	69db      	ldr	r3, [r3, #28]
 800181a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800181e:	2b00      	cmp	r3, #0
 8001820:	d10d      	bne.n	800183e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001822:	4b94      	ldr	r3, [pc, #592]	; (8001a74 <HAL_RCC_OscConfig+0x4f4>)
 8001824:	69db      	ldr	r3, [r3, #28]
 8001826:	4a93      	ldr	r2, [pc, #588]	; (8001a74 <HAL_RCC_OscConfig+0x4f4>)
 8001828:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800182c:	61d3      	str	r3, [r2, #28]
 800182e:	4b91      	ldr	r3, [pc, #580]	; (8001a74 <HAL_RCC_OscConfig+0x4f4>)
 8001830:	69db      	ldr	r3, [r3, #28]
 8001832:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001836:	60bb      	str	r3, [r7, #8]
 8001838:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800183a:	2301      	movs	r3, #1
 800183c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800183e:	4b8e      	ldr	r3, [pc, #568]	; (8001a78 <HAL_RCC_OscConfig+0x4f8>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001846:	2b00      	cmp	r3, #0
 8001848:	d118      	bne.n	800187c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800184a:	4b8b      	ldr	r3, [pc, #556]	; (8001a78 <HAL_RCC_OscConfig+0x4f8>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a8a      	ldr	r2, [pc, #552]	; (8001a78 <HAL_RCC_OscConfig+0x4f8>)
 8001850:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001854:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001856:	f7ff fbc7 	bl	8000fe8 <HAL_GetTick>
 800185a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800185c:	e008      	b.n	8001870 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800185e:	f7ff fbc3 	bl	8000fe8 <HAL_GetTick>
 8001862:	4602      	mov	r2, r0
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	1ad3      	subs	r3, r2, r3
 8001868:	2b64      	cmp	r3, #100	; 0x64
 800186a:	d901      	bls.n	8001870 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800186c:	2303      	movs	r3, #3
 800186e:	e0fd      	b.n	8001a6c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001870:	4b81      	ldr	r3, [pc, #516]	; (8001a78 <HAL_RCC_OscConfig+0x4f8>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001878:	2b00      	cmp	r3, #0
 800187a:	d0f0      	beq.n	800185e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	2b01      	cmp	r3, #1
 8001882:	d106      	bne.n	8001892 <HAL_RCC_OscConfig+0x312>
 8001884:	4b7b      	ldr	r3, [pc, #492]	; (8001a74 <HAL_RCC_OscConfig+0x4f4>)
 8001886:	6a1b      	ldr	r3, [r3, #32]
 8001888:	4a7a      	ldr	r2, [pc, #488]	; (8001a74 <HAL_RCC_OscConfig+0x4f4>)
 800188a:	f043 0301 	orr.w	r3, r3, #1
 800188e:	6213      	str	r3, [r2, #32]
 8001890:	e02d      	b.n	80018ee <HAL_RCC_OscConfig+0x36e>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	68db      	ldr	r3, [r3, #12]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d10c      	bne.n	80018b4 <HAL_RCC_OscConfig+0x334>
 800189a:	4b76      	ldr	r3, [pc, #472]	; (8001a74 <HAL_RCC_OscConfig+0x4f4>)
 800189c:	6a1b      	ldr	r3, [r3, #32]
 800189e:	4a75      	ldr	r2, [pc, #468]	; (8001a74 <HAL_RCC_OscConfig+0x4f4>)
 80018a0:	f023 0301 	bic.w	r3, r3, #1
 80018a4:	6213      	str	r3, [r2, #32]
 80018a6:	4b73      	ldr	r3, [pc, #460]	; (8001a74 <HAL_RCC_OscConfig+0x4f4>)
 80018a8:	6a1b      	ldr	r3, [r3, #32]
 80018aa:	4a72      	ldr	r2, [pc, #456]	; (8001a74 <HAL_RCC_OscConfig+0x4f4>)
 80018ac:	f023 0304 	bic.w	r3, r3, #4
 80018b0:	6213      	str	r3, [r2, #32]
 80018b2:	e01c      	b.n	80018ee <HAL_RCC_OscConfig+0x36e>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	2b05      	cmp	r3, #5
 80018ba:	d10c      	bne.n	80018d6 <HAL_RCC_OscConfig+0x356>
 80018bc:	4b6d      	ldr	r3, [pc, #436]	; (8001a74 <HAL_RCC_OscConfig+0x4f4>)
 80018be:	6a1b      	ldr	r3, [r3, #32]
 80018c0:	4a6c      	ldr	r2, [pc, #432]	; (8001a74 <HAL_RCC_OscConfig+0x4f4>)
 80018c2:	f043 0304 	orr.w	r3, r3, #4
 80018c6:	6213      	str	r3, [r2, #32]
 80018c8:	4b6a      	ldr	r3, [pc, #424]	; (8001a74 <HAL_RCC_OscConfig+0x4f4>)
 80018ca:	6a1b      	ldr	r3, [r3, #32]
 80018cc:	4a69      	ldr	r2, [pc, #420]	; (8001a74 <HAL_RCC_OscConfig+0x4f4>)
 80018ce:	f043 0301 	orr.w	r3, r3, #1
 80018d2:	6213      	str	r3, [r2, #32]
 80018d4:	e00b      	b.n	80018ee <HAL_RCC_OscConfig+0x36e>
 80018d6:	4b67      	ldr	r3, [pc, #412]	; (8001a74 <HAL_RCC_OscConfig+0x4f4>)
 80018d8:	6a1b      	ldr	r3, [r3, #32]
 80018da:	4a66      	ldr	r2, [pc, #408]	; (8001a74 <HAL_RCC_OscConfig+0x4f4>)
 80018dc:	f023 0301 	bic.w	r3, r3, #1
 80018e0:	6213      	str	r3, [r2, #32]
 80018e2:	4b64      	ldr	r3, [pc, #400]	; (8001a74 <HAL_RCC_OscConfig+0x4f4>)
 80018e4:	6a1b      	ldr	r3, [r3, #32]
 80018e6:	4a63      	ldr	r2, [pc, #396]	; (8001a74 <HAL_RCC_OscConfig+0x4f4>)
 80018e8:	f023 0304 	bic.w	r3, r3, #4
 80018ec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	68db      	ldr	r3, [r3, #12]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d015      	beq.n	8001922 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018f6:	f7ff fb77 	bl	8000fe8 <HAL_GetTick>
 80018fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018fc:	e00a      	b.n	8001914 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018fe:	f7ff fb73 	bl	8000fe8 <HAL_GetTick>
 8001902:	4602      	mov	r2, r0
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	1ad3      	subs	r3, r2, r3
 8001908:	f241 3288 	movw	r2, #5000	; 0x1388
 800190c:	4293      	cmp	r3, r2
 800190e:	d901      	bls.n	8001914 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001910:	2303      	movs	r3, #3
 8001912:	e0ab      	b.n	8001a6c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001914:	4b57      	ldr	r3, [pc, #348]	; (8001a74 <HAL_RCC_OscConfig+0x4f4>)
 8001916:	6a1b      	ldr	r3, [r3, #32]
 8001918:	f003 0302 	and.w	r3, r3, #2
 800191c:	2b00      	cmp	r3, #0
 800191e:	d0ee      	beq.n	80018fe <HAL_RCC_OscConfig+0x37e>
 8001920:	e014      	b.n	800194c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001922:	f7ff fb61 	bl	8000fe8 <HAL_GetTick>
 8001926:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001928:	e00a      	b.n	8001940 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800192a:	f7ff fb5d 	bl	8000fe8 <HAL_GetTick>
 800192e:	4602      	mov	r2, r0
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	1ad3      	subs	r3, r2, r3
 8001934:	f241 3288 	movw	r2, #5000	; 0x1388
 8001938:	4293      	cmp	r3, r2
 800193a:	d901      	bls.n	8001940 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800193c:	2303      	movs	r3, #3
 800193e:	e095      	b.n	8001a6c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001940:	4b4c      	ldr	r3, [pc, #304]	; (8001a74 <HAL_RCC_OscConfig+0x4f4>)
 8001942:	6a1b      	ldr	r3, [r3, #32]
 8001944:	f003 0302 	and.w	r3, r3, #2
 8001948:	2b00      	cmp	r3, #0
 800194a:	d1ee      	bne.n	800192a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800194c:	7dfb      	ldrb	r3, [r7, #23]
 800194e:	2b01      	cmp	r3, #1
 8001950:	d105      	bne.n	800195e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001952:	4b48      	ldr	r3, [pc, #288]	; (8001a74 <HAL_RCC_OscConfig+0x4f4>)
 8001954:	69db      	ldr	r3, [r3, #28]
 8001956:	4a47      	ldr	r2, [pc, #284]	; (8001a74 <HAL_RCC_OscConfig+0x4f4>)
 8001958:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800195c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	69db      	ldr	r3, [r3, #28]
 8001962:	2b00      	cmp	r3, #0
 8001964:	f000 8081 	beq.w	8001a6a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001968:	4b42      	ldr	r3, [pc, #264]	; (8001a74 <HAL_RCC_OscConfig+0x4f4>)
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f003 030c 	and.w	r3, r3, #12
 8001970:	2b08      	cmp	r3, #8
 8001972:	d061      	beq.n	8001a38 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	69db      	ldr	r3, [r3, #28]
 8001978:	2b02      	cmp	r3, #2
 800197a:	d146      	bne.n	8001a0a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800197c:	4b3f      	ldr	r3, [pc, #252]	; (8001a7c <HAL_RCC_OscConfig+0x4fc>)
 800197e:	2200      	movs	r2, #0
 8001980:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001982:	f7ff fb31 	bl	8000fe8 <HAL_GetTick>
 8001986:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001988:	e008      	b.n	800199c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800198a:	f7ff fb2d 	bl	8000fe8 <HAL_GetTick>
 800198e:	4602      	mov	r2, r0
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	1ad3      	subs	r3, r2, r3
 8001994:	2b02      	cmp	r3, #2
 8001996:	d901      	bls.n	800199c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001998:	2303      	movs	r3, #3
 800199a:	e067      	b.n	8001a6c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800199c:	4b35      	ldr	r3, [pc, #212]	; (8001a74 <HAL_RCC_OscConfig+0x4f4>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d1f0      	bne.n	800198a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6a1b      	ldr	r3, [r3, #32]
 80019ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019b0:	d108      	bne.n	80019c4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80019b2:	4b30      	ldr	r3, [pc, #192]	; (8001a74 <HAL_RCC_OscConfig+0x4f4>)
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	492d      	ldr	r1, [pc, #180]	; (8001a74 <HAL_RCC_OscConfig+0x4f4>)
 80019c0:	4313      	orrs	r3, r2
 80019c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019c4:	4b2b      	ldr	r3, [pc, #172]	; (8001a74 <HAL_RCC_OscConfig+0x4f4>)
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6a19      	ldr	r1, [r3, #32]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d4:	430b      	orrs	r3, r1
 80019d6:	4927      	ldr	r1, [pc, #156]	; (8001a74 <HAL_RCC_OscConfig+0x4f4>)
 80019d8:	4313      	orrs	r3, r2
 80019da:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019dc:	4b27      	ldr	r3, [pc, #156]	; (8001a7c <HAL_RCC_OscConfig+0x4fc>)
 80019de:	2201      	movs	r2, #1
 80019e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019e2:	f7ff fb01 	bl	8000fe8 <HAL_GetTick>
 80019e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019e8:	e008      	b.n	80019fc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019ea:	f7ff fafd 	bl	8000fe8 <HAL_GetTick>
 80019ee:	4602      	mov	r2, r0
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	1ad3      	subs	r3, r2, r3
 80019f4:	2b02      	cmp	r3, #2
 80019f6:	d901      	bls.n	80019fc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80019f8:	2303      	movs	r3, #3
 80019fa:	e037      	b.n	8001a6c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019fc:	4b1d      	ldr	r3, [pc, #116]	; (8001a74 <HAL_RCC_OscConfig+0x4f4>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d0f0      	beq.n	80019ea <HAL_RCC_OscConfig+0x46a>
 8001a08:	e02f      	b.n	8001a6a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a0a:	4b1c      	ldr	r3, [pc, #112]	; (8001a7c <HAL_RCC_OscConfig+0x4fc>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a10:	f7ff faea 	bl	8000fe8 <HAL_GetTick>
 8001a14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a16:	e008      	b.n	8001a2a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a18:	f7ff fae6 	bl	8000fe8 <HAL_GetTick>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	2b02      	cmp	r3, #2
 8001a24:	d901      	bls.n	8001a2a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001a26:	2303      	movs	r3, #3
 8001a28:	e020      	b.n	8001a6c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a2a:	4b12      	ldr	r3, [pc, #72]	; (8001a74 <HAL_RCC_OscConfig+0x4f4>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d1f0      	bne.n	8001a18 <HAL_RCC_OscConfig+0x498>
 8001a36:	e018      	b.n	8001a6a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	69db      	ldr	r3, [r3, #28]
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d101      	bne.n	8001a44 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	e013      	b.n	8001a6c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a44:	4b0b      	ldr	r3, [pc, #44]	; (8001a74 <HAL_RCC_OscConfig+0x4f4>)
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6a1b      	ldr	r3, [r3, #32]
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d106      	bne.n	8001a66 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a62:	429a      	cmp	r2, r3
 8001a64:	d001      	beq.n	8001a6a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e000      	b.n	8001a6c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001a6a:	2300      	movs	r3, #0
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3718      	adds	r7, #24
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	40021000 	.word	0x40021000
 8001a78:	40007000 	.word	0x40007000
 8001a7c:	42420060 	.word	0x42420060

08001a80 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d101      	bne.n	8001a94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	e0d0      	b.n	8001c36 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a94:	4b6a      	ldr	r3, [pc, #424]	; (8001c40 <HAL_RCC_ClockConfig+0x1c0>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 0307 	and.w	r3, r3, #7
 8001a9c:	683a      	ldr	r2, [r7, #0]
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	d910      	bls.n	8001ac4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aa2:	4b67      	ldr	r3, [pc, #412]	; (8001c40 <HAL_RCC_ClockConfig+0x1c0>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f023 0207 	bic.w	r2, r3, #7
 8001aaa:	4965      	ldr	r1, [pc, #404]	; (8001c40 <HAL_RCC_ClockConfig+0x1c0>)
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ab2:	4b63      	ldr	r3, [pc, #396]	; (8001c40 <HAL_RCC_ClockConfig+0x1c0>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 0307 	and.w	r3, r3, #7
 8001aba:	683a      	ldr	r2, [r7, #0]
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d001      	beq.n	8001ac4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e0b8      	b.n	8001c36 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 0302 	and.w	r3, r3, #2
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d020      	beq.n	8001b12 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 0304 	and.w	r3, r3, #4
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d005      	beq.n	8001ae8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001adc:	4b59      	ldr	r3, [pc, #356]	; (8001c44 <HAL_RCC_ClockConfig+0x1c4>)
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	4a58      	ldr	r2, [pc, #352]	; (8001c44 <HAL_RCC_ClockConfig+0x1c4>)
 8001ae2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001ae6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f003 0308 	and.w	r3, r3, #8
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d005      	beq.n	8001b00 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001af4:	4b53      	ldr	r3, [pc, #332]	; (8001c44 <HAL_RCC_ClockConfig+0x1c4>)
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	4a52      	ldr	r2, [pc, #328]	; (8001c44 <HAL_RCC_ClockConfig+0x1c4>)
 8001afa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001afe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b00:	4b50      	ldr	r3, [pc, #320]	; (8001c44 <HAL_RCC_ClockConfig+0x1c4>)
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	494d      	ldr	r1, [pc, #308]	; (8001c44 <HAL_RCC_ClockConfig+0x1c4>)
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 0301 	and.w	r3, r3, #1
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d040      	beq.n	8001ba0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d107      	bne.n	8001b36 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b26:	4b47      	ldr	r3, [pc, #284]	; (8001c44 <HAL_RCC_ClockConfig+0x1c4>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d115      	bne.n	8001b5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e07f      	b.n	8001c36 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	2b02      	cmp	r3, #2
 8001b3c:	d107      	bne.n	8001b4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b3e:	4b41      	ldr	r3, [pc, #260]	; (8001c44 <HAL_RCC_ClockConfig+0x1c4>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d109      	bne.n	8001b5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e073      	b.n	8001c36 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b4e:	4b3d      	ldr	r3, [pc, #244]	; (8001c44 <HAL_RCC_ClockConfig+0x1c4>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0302 	and.w	r3, r3, #2
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d101      	bne.n	8001b5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e06b      	b.n	8001c36 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b5e:	4b39      	ldr	r3, [pc, #228]	; (8001c44 <HAL_RCC_ClockConfig+0x1c4>)
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	f023 0203 	bic.w	r2, r3, #3
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	4936      	ldr	r1, [pc, #216]	; (8001c44 <HAL_RCC_ClockConfig+0x1c4>)
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b70:	f7ff fa3a 	bl	8000fe8 <HAL_GetTick>
 8001b74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b76:	e00a      	b.n	8001b8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b78:	f7ff fa36 	bl	8000fe8 <HAL_GetTick>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d901      	bls.n	8001b8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	e053      	b.n	8001c36 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b8e:	4b2d      	ldr	r3, [pc, #180]	; (8001c44 <HAL_RCC_ClockConfig+0x1c4>)
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	f003 020c 	and.w	r2, r3, #12
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d1eb      	bne.n	8001b78 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ba0:	4b27      	ldr	r3, [pc, #156]	; (8001c40 <HAL_RCC_ClockConfig+0x1c0>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 0307 	and.w	r3, r3, #7
 8001ba8:	683a      	ldr	r2, [r7, #0]
 8001baa:	429a      	cmp	r2, r3
 8001bac:	d210      	bcs.n	8001bd0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bae:	4b24      	ldr	r3, [pc, #144]	; (8001c40 <HAL_RCC_ClockConfig+0x1c0>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f023 0207 	bic.w	r2, r3, #7
 8001bb6:	4922      	ldr	r1, [pc, #136]	; (8001c40 <HAL_RCC_ClockConfig+0x1c0>)
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bbe:	4b20      	ldr	r3, [pc, #128]	; (8001c40 <HAL_RCC_ClockConfig+0x1c0>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 0307 	and.w	r3, r3, #7
 8001bc6:	683a      	ldr	r2, [r7, #0]
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d001      	beq.n	8001bd0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e032      	b.n	8001c36 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 0304 	and.w	r3, r3, #4
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d008      	beq.n	8001bee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bdc:	4b19      	ldr	r3, [pc, #100]	; (8001c44 <HAL_RCC_ClockConfig+0x1c4>)
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	4916      	ldr	r1, [pc, #88]	; (8001c44 <HAL_RCC_ClockConfig+0x1c4>)
 8001bea:	4313      	orrs	r3, r2
 8001bec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 0308 	and.w	r3, r3, #8
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d009      	beq.n	8001c0e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001bfa:	4b12      	ldr	r3, [pc, #72]	; (8001c44 <HAL_RCC_ClockConfig+0x1c4>)
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	691b      	ldr	r3, [r3, #16]
 8001c06:	00db      	lsls	r3, r3, #3
 8001c08:	490e      	ldr	r1, [pc, #56]	; (8001c44 <HAL_RCC_ClockConfig+0x1c4>)
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c0e:	f000 f821 	bl	8001c54 <HAL_RCC_GetSysClockFreq>
 8001c12:	4602      	mov	r2, r0
 8001c14:	4b0b      	ldr	r3, [pc, #44]	; (8001c44 <HAL_RCC_ClockConfig+0x1c4>)
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	091b      	lsrs	r3, r3, #4
 8001c1a:	f003 030f 	and.w	r3, r3, #15
 8001c1e:	490a      	ldr	r1, [pc, #40]	; (8001c48 <HAL_RCC_ClockConfig+0x1c8>)
 8001c20:	5ccb      	ldrb	r3, [r1, r3]
 8001c22:	fa22 f303 	lsr.w	r3, r2, r3
 8001c26:	4a09      	ldr	r2, [pc, #36]	; (8001c4c <HAL_RCC_ClockConfig+0x1cc>)
 8001c28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001c2a:	4b09      	ldr	r3, [pc, #36]	; (8001c50 <HAL_RCC_ClockConfig+0x1d0>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f7ff f998 	bl	8000f64 <HAL_InitTick>

  return HAL_OK;
 8001c34:	2300      	movs	r3, #0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3710      	adds	r7, #16
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	40022000 	.word	0x40022000
 8001c44:	40021000 	.word	0x40021000
 8001c48:	080025a4 	.word	0x080025a4
 8001c4c:	2000002c 	.word	0x2000002c
 8001c50:	20000034 	.word	0x20000034

08001c54 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b087      	sub	sp, #28
 8001c58:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	60fb      	str	r3, [r7, #12]
 8001c5e:	2300      	movs	r3, #0
 8001c60:	60bb      	str	r3, [r7, #8]
 8001c62:	2300      	movs	r3, #0
 8001c64:	617b      	str	r3, [r7, #20]
 8001c66:	2300      	movs	r3, #0
 8001c68:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001c6e:	4b1e      	ldr	r3, [pc, #120]	; (8001ce8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	f003 030c 	and.w	r3, r3, #12
 8001c7a:	2b04      	cmp	r3, #4
 8001c7c:	d002      	beq.n	8001c84 <HAL_RCC_GetSysClockFreq+0x30>
 8001c7e:	2b08      	cmp	r3, #8
 8001c80:	d003      	beq.n	8001c8a <HAL_RCC_GetSysClockFreq+0x36>
 8001c82:	e027      	b.n	8001cd4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c84:	4b19      	ldr	r3, [pc, #100]	; (8001cec <HAL_RCC_GetSysClockFreq+0x98>)
 8001c86:	613b      	str	r3, [r7, #16]
      break;
 8001c88:	e027      	b.n	8001cda <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	0c9b      	lsrs	r3, r3, #18
 8001c8e:	f003 030f 	and.w	r3, r3, #15
 8001c92:	4a17      	ldr	r2, [pc, #92]	; (8001cf0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001c94:	5cd3      	ldrb	r3, [r2, r3]
 8001c96:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d010      	beq.n	8001cc4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001ca2:	4b11      	ldr	r3, [pc, #68]	; (8001ce8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	0c5b      	lsrs	r3, r3, #17
 8001ca8:	f003 0301 	and.w	r3, r3, #1
 8001cac:	4a11      	ldr	r2, [pc, #68]	; (8001cf4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001cae:	5cd3      	ldrb	r3, [r2, r3]
 8001cb0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4a0d      	ldr	r2, [pc, #52]	; (8001cec <HAL_RCC_GetSysClockFreq+0x98>)
 8001cb6:	fb02 f203 	mul.w	r2, r2, r3
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cc0:	617b      	str	r3, [r7, #20]
 8001cc2:	e004      	b.n	8001cce <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	4a0c      	ldr	r2, [pc, #48]	; (8001cf8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001cc8:	fb02 f303 	mul.w	r3, r2, r3
 8001ccc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	613b      	str	r3, [r7, #16]
      break;
 8001cd2:	e002      	b.n	8001cda <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001cd4:	4b05      	ldr	r3, [pc, #20]	; (8001cec <HAL_RCC_GetSysClockFreq+0x98>)
 8001cd6:	613b      	str	r3, [r7, #16]
      break;
 8001cd8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cda:	693b      	ldr	r3, [r7, #16]
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	371c      	adds	r7, #28
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bc80      	pop	{r7}
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop
 8001ce8:	40021000 	.word	0x40021000
 8001cec:	007a1200 	.word	0x007a1200
 8001cf0:	080025b4 	.word	0x080025b4
 8001cf4:	080025c4 	.word	0x080025c4
 8001cf8:	003d0900 	.word	0x003d0900

08001cfc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b085      	sub	sp, #20
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001d04:	4b0a      	ldr	r3, [pc, #40]	; (8001d30 <RCC_Delay+0x34>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a0a      	ldr	r2, [pc, #40]	; (8001d34 <RCC_Delay+0x38>)
 8001d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d0e:	0a5b      	lsrs	r3, r3, #9
 8001d10:	687a      	ldr	r2, [r7, #4]
 8001d12:	fb02 f303 	mul.w	r3, r2, r3
 8001d16:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001d18:	bf00      	nop
  }
  while (Delay --);
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	1e5a      	subs	r2, r3, #1
 8001d1e:	60fa      	str	r2, [r7, #12]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d1f9      	bne.n	8001d18 <RCC_Delay+0x1c>
}
 8001d24:	bf00      	nop
 8001d26:	bf00      	nop
 8001d28:	3714      	adds	r7, #20
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bc80      	pop	{r7}
 8001d2e:	4770      	bx	lr
 8001d30:	2000002c 	.word	0x2000002c
 8001d34:	10624dd3 	.word	0x10624dd3

08001d38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d101      	bne.n	8001d4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e041      	b.n	8001dce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d106      	bne.n	8001d64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f7fe ffca 	bl	8000cf8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2202      	movs	r2, #2
 8001d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	3304      	adds	r3, #4
 8001d74:	4619      	mov	r1, r3
 8001d76:	4610      	mov	r0, r2
 8001d78:	f000 fa74 	bl	8002264 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2201      	movs	r2, #1
 8001d80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2201      	movs	r2, #1
 8001d88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2201      	movs	r2, #1
 8001d90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2201      	movs	r2, #1
 8001d98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2201      	movs	r2, #1
 8001da0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2201      	movs	r2, #1
 8001da8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2201      	movs	r2, #1
 8001db0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2201      	movs	r2, #1
 8001db8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001dcc:	2300      	movs	r3, #0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3708      	adds	r7, #8
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
	...

08001dd8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b085      	sub	sp, #20
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d001      	beq.n	8001df0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	e03a      	b.n	8001e66 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2202      	movs	r2, #2
 8001df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	68da      	ldr	r2, [r3, #12]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f042 0201 	orr.w	r2, r2, #1
 8001e06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a18      	ldr	r2, [pc, #96]	; (8001e70 <HAL_TIM_Base_Start_IT+0x98>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d00e      	beq.n	8001e30 <HAL_TIM_Base_Start_IT+0x58>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e1a:	d009      	beq.n	8001e30 <HAL_TIM_Base_Start_IT+0x58>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a14      	ldr	r2, [pc, #80]	; (8001e74 <HAL_TIM_Base_Start_IT+0x9c>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d004      	beq.n	8001e30 <HAL_TIM_Base_Start_IT+0x58>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a13      	ldr	r2, [pc, #76]	; (8001e78 <HAL_TIM_Base_Start_IT+0xa0>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d111      	bne.n	8001e54 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	f003 0307 	and.w	r3, r3, #7
 8001e3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	2b06      	cmp	r3, #6
 8001e40:	d010      	beq.n	8001e64 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f042 0201 	orr.w	r2, r2, #1
 8001e50:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e52:	e007      	b.n	8001e64 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f042 0201 	orr.w	r2, r2, #1
 8001e62:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e64:	2300      	movs	r3, #0
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3714      	adds	r7, #20
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bc80      	pop	{r7}
 8001e6e:	4770      	bx	lr
 8001e70:	40012c00 	.word	0x40012c00
 8001e74:	40000400 	.word	0x40000400
 8001e78:	40000800 	.word	0x40000800

08001e7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	691b      	ldr	r3, [r3, #16]
 8001e8a:	f003 0302 	and.w	r3, r3, #2
 8001e8e:	2b02      	cmp	r3, #2
 8001e90:	d122      	bne.n	8001ed8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	f003 0302 	and.w	r3, r3, #2
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	d11b      	bne.n	8001ed8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f06f 0202 	mvn.w	r2, #2
 8001ea8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2201      	movs	r2, #1
 8001eae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	699b      	ldr	r3, [r3, #24]
 8001eb6:	f003 0303 	and.w	r3, r3, #3
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d003      	beq.n	8001ec6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f000 f9b4 	bl	800222c <HAL_TIM_IC_CaptureCallback>
 8001ec4:	e005      	b.n	8001ed2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f000 f9a7 	bl	800221a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ecc:	6878      	ldr	r0, [r7, #4]
 8001ece:	f000 f9b6 	bl	800223e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	691b      	ldr	r3, [r3, #16]
 8001ede:	f003 0304 	and.w	r3, r3, #4
 8001ee2:	2b04      	cmp	r3, #4
 8001ee4:	d122      	bne.n	8001f2c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	f003 0304 	and.w	r3, r3, #4
 8001ef0:	2b04      	cmp	r3, #4
 8001ef2:	d11b      	bne.n	8001f2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f06f 0204 	mvn.w	r2, #4
 8001efc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2202      	movs	r2, #2
 8001f02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	699b      	ldr	r3, [r3, #24]
 8001f0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d003      	beq.n	8001f1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f000 f98a 	bl	800222c <HAL_TIM_IC_CaptureCallback>
 8001f18:	e005      	b.n	8001f26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f000 f97d 	bl	800221a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f000 f98c 	bl	800223e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	691b      	ldr	r3, [r3, #16]
 8001f32:	f003 0308 	and.w	r3, r3, #8
 8001f36:	2b08      	cmp	r3, #8
 8001f38:	d122      	bne.n	8001f80 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	f003 0308 	and.w	r3, r3, #8
 8001f44:	2b08      	cmp	r3, #8
 8001f46:	d11b      	bne.n	8001f80 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f06f 0208 	mvn.w	r2, #8
 8001f50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2204      	movs	r2, #4
 8001f56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	69db      	ldr	r3, [r3, #28]
 8001f5e:	f003 0303 	and.w	r3, r3, #3
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d003      	beq.n	8001f6e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	f000 f960 	bl	800222c <HAL_TIM_IC_CaptureCallback>
 8001f6c:	e005      	b.n	8001f7a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f000 f953 	bl	800221a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f000 f962 	bl	800223e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	691b      	ldr	r3, [r3, #16]
 8001f86:	f003 0310 	and.w	r3, r3, #16
 8001f8a:	2b10      	cmp	r3, #16
 8001f8c:	d122      	bne.n	8001fd4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	f003 0310 	and.w	r3, r3, #16
 8001f98:	2b10      	cmp	r3, #16
 8001f9a:	d11b      	bne.n	8001fd4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f06f 0210 	mvn.w	r2, #16
 8001fa4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2208      	movs	r2, #8
 8001faa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	69db      	ldr	r3, [r3, #28]
 8001fb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d003      	beq.n	8001fc2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f000 f936 	bl	800222c <HAL_TIM_IC_CaptureCallback>
 8001fc0:	e005      	b.n	8001fce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f000 f929 	bl	800221a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f000 f938 	bl	800223e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	691b      	ldr	r3, [r3, #16]
 8001fda:	f003 0301 	and.w	r3, r3, #1
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d10e      	bne.n	8002000 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	f003 0301 	and.w	r3, r3, #1
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d107      	bne.n	8002000 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f06f 0201 	mvn.w	r2, #1
 8001ff8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f7fe fe38 	bl	8000c70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	691b      	ldr	r3, [r3, #16]
 8002006:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800200a:	2b80      	cmp	r3, #128	; 0x80
 800200c:	d10e      	bne.n	800202c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002018:	2b80      	cmp	r3, #128	; 0x80
 800201a:	d107      	bne.n	800202c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002024:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f000 fa7b 	bl	8002522 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	691b      	ldr	r3, [r3, #16]
 8002032:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002036:	2b40      	cmp	r3, #64	; 0x40
 8002038:	d10e      	bne.n	8002058 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002044:	2b40      	cmp	r3, #64	; 0x40
 8002046:	d107      	bne.n	8002058 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002050:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f000 f8fc 	bl	8002250 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	691b      	ldr	r3, [r3, #16]
 800205e:	f003 0320 	and.w	r3, r3, #32
 8002062:	2b20      	cmp	r3, #32
 8002064:	d10e      	bne.n	8002084 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	f003 0320 	and.w	r3, r3, #32
 8002070:	2b20      	cmp	r3, #32
 8002072:	d107      	bne.n	8002084 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f06f 0220 	mvn.w	r2, #32
 800207c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f000 fa46 	bl	8002510 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002084:	bf00      	nop
 8002086:	3708      	adds	r7, #8
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}

0800208c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b084      	sub	sp, #16
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002096:	2300      	movs	r3, #0
 8002098:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d101      	bne.n	80020a8 <HAL_TIM_ConfigClockSource+0x1c>
 80020a4:	2302      	movs	r3, #2
 80020a6:	e0b4      	b.n	8002212 <HAL_TIM_ConfigClockSource+0x186>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2201      	movs	r2, #1
 80020ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2202      	movs	r2, #2
 80020b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80020c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80020ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	68ba      	ldr	r2, [r7, #8]
 80020d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020e0:	d03e      	beq.n	8002160 <HAL_TIM_ConfigClockSource+0xd4>
 80020e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020e6:	f200 8087 	bhi.w	80021f8 <HAL_TIM_ConfigClockSource+0x16c>
 80020ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020ee:	f000 8086 	beq.w	80021fe <HAL_TIM_ConfigClockSource+0x172>
 80020f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020f6:	d87f      	bhi.n	80021f8 <HAL_TIM_ConfigClockSource+0x16c>
 80020f8:	2b70      	cmp	r3, #112	; 0x70
 80020fa:	d01a      	beq.n	8002132 <HAL_TIM_ConfigClockSource+0xa6>
 80020fc:	2b70      	cmp	r3, #112	; 0x70
 80020fe:	d87b      	bhi.n	80021f8 <HAL_TIM_ConfigClockSource+0x16c>
 8002100:	2b60      	cmp	r3, #96	; 0x60
 8002102:	d050      	beq.n	80021a6 <HAL_TIM_ConfigClockSource+0x11a>
 8002104:	2b60      	cmp	r3, #96	; 0x60
 8002106:	d877      	bhi.n	80021f8 <HAL_TIM_ConfigClockSource+0x16c>
 8002108:	2b50      	cmp	r3, #80	; 0x50
 800210a:	d03c      	beq.n	8002186 <HAL_TIM_ConfigClockSource+0xfa>
 800210c:	2b50      	cmp	r3, #80	; 0x50
 800210e:	d873      	bhi.n	80021f8 <HAL_TIM_ConfigClockSource+0x16c>
 8002110:	2b40      	cmp	r3, #64	; 0x40
 8002112:	d058      	beq.n	80021c6 <HAL_TIM_ConfigClockSource+0x13a>
 8002114:	2b40      	cmp	r3, #64	; 0x40
 8002116:	d86f      	bhi.n	80021f8 <HAL_TIM_ConfigClockSource+0x16c>
 8002118:	2b30      	cmp	r3, #48	; 0x30
 800211a:	d064      	beq.n	80021e6 <HAL_TIM_ConfigClockSource+0x15a>
 800211c:	2b30      	cmp	r3, #48	; 0x30
 800211e:	d86b      	bhi.n	80021f8 <HAL_TIM_ConfigClockSource+0x16c>
 8002120:	2b20      	cmp	r3, #32
 8002122:	d060      	beq.n	80021e6 <HAL_TIM_ConfigClockSource+0x15a>
 8002124:	2b20      	cmp	r3, #32
 8002126:	d867      	bhi.n	80021f8 <HAL_TIM_ConfigClockSource+0x16c>
 8002128:	2b00      	cmp	r3, #0
 800212a:	d05c      	beq.n	80021e6 <HAL_TIM_ConfigClockSource+0x15a>
 800212c:	2b10      	cmp	r3, #16
 800212e:	d05a      	beq.n	80021e6 <HAL_TIM_ConfigClockSource+0x15a>
 8002130:	e062      	b.n	80021f8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6818      	ldr	r0, [r3, #0]
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	6899      	ldr	r1, [r3, #8]
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	685a      	ldr	r2, [r3, #4]
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	68db      	ldr	r3, [r3, #12]
 8002142:	f000 f968 	bl	8002416 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002154:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	68ba      	ldr	r2, [r7, #8]
 800215c:	609a      	str	r2, [r3, #8]
      break;
 800215e:	e04f      	b.n	8002200 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6818      	ldr	r0, [r3, #0]
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	6899      	ldr	r1, [r3, #8]
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	685a      	ldr	r2, [r3, #4]
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	f000 f951 	bl	8002416 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	689a      	ldr	r2, [r3, #8]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002182:	609a      	str	r2, [r3, #8]
      break;
 8002184:	e03c      	b.n	8002200 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6818      	ldr	r0, [r3, #0]
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	6859      	ldr	r1, [r3, #4]
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	68db      	ldr	r3, [r3, #12]
 8002192:	461a      	mov	r2, r3
 8002194:	f000 f8c8 	bl	8002328 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	2150      	movs	r1, #80	; 0x50
 800219e:	4618      	mov	r0, r3
 80021a0:	f000 f91f 	bl	80023e2 <TIM_ITRx_SetConfig>
      break;
 80021a4:	e02c      	b.n	8002200 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6818      	ldr	r0, [r3, #0]
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	6859      	ldr	r1, [r3, #4]
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	68db      	ldr	r3, [r3, #12]
 80021b2:	461a      	mov	r2, r3
 80021b4:	f000 f8e6 	bl	8002384 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	2160      	movs	r1, #96	; 0x60
 80021be:	4618      	mov	r0, r3
 80021c0:	f000 f90f 	bl	80023e2 <TIM_ITRx_SetConfig>
      break;
 80021c4:	e01c      	b.n	8002200 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6818      	ldr	r0, [r3, #0]
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	6859      	ldr	r1, [r3, #4]
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	68db      	ldr	r3, [r3, #12]
 80021d2:	461a      	mov	r2, r3
 80021d4:	f000 f8a8 	bl	8002328 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	2140      	movs	r1, #64	; 0x40
 80021de:	4618      	mov	r0, r3
 80021e0:	f000 f8ff 	bl	80023e2 <TIM_ITRx_SetConfig>
      break;
 80021e4:	e00c      	b.n	8002200 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4619      	mov	r1, r3
 80021f0:	4610      	mov	r0, r2
 80021f2:	f000 f8f6 	bl	80023e2 <TIM_ITRx_SetConfig>
      break;
 80021f6:	e003      	b.n	8002200 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	73fb      	strb	r3, [r7, #15]
      break;
 80021fc:	e000      	b.n	8002200 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80021fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2201      	movs	r2, #1
 8002204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2200      	movs	r2, #0
 800220c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002210:	7bfb      	ldrb	r3, [r7, #15]
}
 8002212:	4618      	mov	r0, r3
 8002214:	3710      	adds	r7, #16
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}

0800221a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800221a:	b480      	push	{r7}
 800221c:	b083      	sub	sp, #12
 800221e:	af00      	add	r7, sp, #0
 8002220:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002222:	bf00      	nop
 8002224:	370c      	adds	r7, #12
 8002226:	46bd      	mov	sp, r7
 8002228:	bc80      	pop	{r7}
 800222a:	4770      	bx	lr

0800222c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002234:	bf00      	nop
 8002236:	370c      	adds	r7, #12
 8002238:	46bd      	mov	sp, r7
 800223a:	bc80      	pop	{r7}
 800223c:	4770      	bx	lr

0800223e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800223e:	b480      	push	{r7}
 8002240:	b083      	sub	sp, #12
 8002242:	af00      	add	r7, sp, #0
 8002244:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002246:	bf00      	nop
 8002248:	370c      	adds	r7, #12
 800224a:	46bd      	mov	sp, r7
 800224c:	bc80      	pop	{r7}
 800224e:	4770      	bx	lr

08002250 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002250:	b480      	push	{r7}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002258:	bf00      	nop
 800225a:	370c      	adds	r7, #12
 800225c:	46bd      	mov	sp, r7
 800225e:	bc80      	pop	{r7}
 8002260:	4770      	bx	lr
	...

08002264 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002264:	b480      	push	{r7}
 8002266:	b085      	sub	sp, #20
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	4a29      	ldr	r2, [pc, #164]	; (800231c <TIM_Base_SetConfig+0xb8>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d00b      	beq.n	8002294 <TIM_Base_SetConfig+0x30>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002282:	d007      	beq.n	8002294 <TIM_Base_SetConfig+0x30>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	4a26      	ldr	r2, [pc, #152]	; (8002320 <TIM_Base_SetConfig+0xbc>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d003      	beq.n	8002294 <TIM_Base_SetConfig+0x30>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	4a25      	ldr	r2, [pc, #148]	; (8002324 <TIM_Base_SetConfig+0xc0>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d108      	bne.n	80022a6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800229a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	68fa      	ldr	r2, [r7, #12]
 80022a2:	4313      	orrs	r3, r2
 80022a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4a1c      	ldr	r2, [pc, #112]	; (800231c <TIM_Base_SetConfig+0xb8>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d00b      	beq.n	80022c6 <TIM_Base_SetConfig+0x62>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022b4:	d007      	beq.n	80022c6 <TIM_Base_SetConfig+0x62>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4a19      	ldr	r2, [pc, #100]	; (8002320 <TIM_Base_SetConfig+0xbc>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d003      	beq.n	80022c6 <TIM_Base_SetConfig+0x62>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4a18      	ldr	r2, [pc, #96]	; (8002324 <TIM_Base_SetConfig+0xc0>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d108      	bne.n	80022d8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	68db      	ldr	r3, [r3, #12]
 80022d2:	68fa      	ldr	r2, [r7, #12]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	695b      	ldr	r3, [r3, #20]
 80022e2:	4313      	orrs	r3, r2
 80022e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	68fa      	ldr	r2, [r7, #12]
 80022ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	689a      	ldr	r2, [r3, #8]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	4a07      	ldr	r2, [pc, #28]	; (800231c <TIM_Base_SetConfig+0xb8>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d103      	bne.n	800230c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	691a      	ldr	r2, [r3, #16]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2201      	movs	r2, #1
 8002310:	615a      	str	r2, [r3, #20]
}
 8002312:	bf00      	nop
 8002314:	3714      	adds	r7, #20
 8002316:	46bd      	mov	sp, r7
 8002318:	bc80      	pop	{r7}
 800231a:	4770      	bx	lr
 800231c:	40012c00 	.word	0x40012c00
 8002320:	40000400 	.word	0x40000400
 8002324:	40000800 	.word	0x40000800

08002328 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002328:	b480      	push	{r7}
 800232a:	b087      	sub	sp, #28
 800232c:	af00      	add	r7, sp, #0
 800232e:	60f8      	str	r0, [r7, #12]
 8002330:	60b9      	str	r1, [r7, #8]
 8002332:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	6a1b      	ldr	r3, [r3, #32]
 8002338:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	6a1b      	ldr	r3, [r3, #32]
 800233e:	f023 0201 	bic.w	r2, r3, #1
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	699b      	ldr	r3, [r3, #24]
 800234a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002352:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	011b      	lsls	r3, r3, #4
 8002358:	693a      	ldr	r2, [r7, #16]
 800235a:	4313      	orrs	r3, r2
 800235c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	f023 030a 	bic.w	r3, r3, #10
 8002364:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002366:	697a      	ldr	r2, [r7, #20]
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	4313      	orrs	r3, r2
 800236c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	693a      	ldr	r2, [r7, #16]
 8002372:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	697a      	ldr	r2, [r7, #20]
 8002378:	621a      	str	r2, [r3, #32]
}
 800237a:	bf00      	nop
 800237c:	371c      	adds	r7, #28
 800237e:	46bd      	mov	sp, r7
 8002380:	bc80      	pop	{r7}
 8002382:	4770      	bx	lr

08002384 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002384:	b480      	push	{r7}
 8002386:	b087      	sub	sp, #28
 8002388:	af00      	add	r7, sp, #0
 800238a:	60f8      	str	r0, [r7, #12]
 800238c:	60b9      	str	r1, [r7, #8]
 800238e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	6a1b      	ldr	r3, [r3, #32]
 8002394:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	6a1b      	ldr	r3, [r3, #32]
 800239a:	f023 0210 	bic.w	r2, r3, #16
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	699b      	ldr	r3, [r3, #24]
 80023a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80023ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	031b      	lsls	r3, r3, #12
 80023b4:	693a      	ldr	r2, [r7, #16]
 80023b6:	4313      	orrs	r3, r2
 80023b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80023c0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	011b      	lsls	r3, r3, #4
 80023c6:	697a      	ldr	r2, [r7, #20]
 80023c8:	4313      	orrs	r3, r2
 80023ca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	693a      	ldr	r2, [r7, #16]
 80023d0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	697a      	ldr	r2, [r7, #20]
 80023d6:	621a      	str	r2, [r3, #32]
}
 80023d8:	bf00      	nop
 80023da:	371c      	adds	r7, #28
 80023dc:	46bd      	mov	sp, r7
 80023de:	bc80      	pop	{r7}
 80023e0:	4770      	bx	lr

080023e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80023e2:	b480      	push	{r7}
 80023e4:	b085      	sub	sp, #20
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	6078      	str	r0, [r7, #4]
 80023ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80023fa:	683a      	ldr	r2, [r7, #0]
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	4313      	orrs	r3, r2
 8002400:	f043 0307 	orr.w	r3, r3, #7
 8002404:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	68fa      	ldr	r2, [r7, #12]
 800240a:	609a      	str	r2, [r3, #8]
}
 800240c:	bf00      	nop
 800240e:	3714      	adds	r7, #20
 8002410:	46bd      	mov	sp, r7
 8002412:	bc80      	pop	{r7}
 8002414:	4770      	bx	lr

08002416 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002416:	b480      	push	{r7}
 8002418:	b087      	sub	sp, #28
 800241a:	af00      	add	r7, sp, #0
 800241c:	60f8      	str	r0, [r7, #12]
 800241e:	60b9      	str	r1, [r7, #8]
 8002420:	607a      	str	r2, [r7, #4]
 8002422:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002430:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	021a      	lsls	r2, r3, #8
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	431a      	orrs	r2, r3
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	4313      	orrs	r3, r2
 800243e:	697a      	ldr	r2, [r7, #20]
 8002440:	4313      	orrs	r3, r2
 8002442:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	697a      	ldr	r2, [r7, #20]
 8002448:	609a      	str	r2, [r3, #8]
}
 800244a:	bf00      	nop
 800244c:	371c      	adds	r7, #28
 800244e:	46bd      	mov	sp, r7
 8002450:	bc80      	pop	{r7}
 8002452:	4770      	bx	lr

08002454 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002454:	b480      	push	{r7}
 8002456:	b085      	sub	sp, #20
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002464:	2b01      	cmp	r3, #1
 8002466:	d101      	bne.n	800246c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002468:	2302      	movs	r3, #2
 800246a:	e046      	b.n	80024fa <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2201      	movs	r2, #1
 8002470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2202      	movs	r2, #2
 8002478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002492:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	68fa      	ldr	r2, [r7, #12]
 800249a:	4313      	orrs	r3, r2
 800249c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	68fa      	ldr	r2, [r7, #12]
 80024a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a16      	ldr	r2, [pc, #88]	; (8002504 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d00e      	beq.n	80024ce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024b8:	d009      	beq.n	80024ce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a12      	ldr	r2, [pc, #72]	; (8002508 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d004      	beq.n	80024ce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a10      	ldr	r2, [pc, #64]	; (800250c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d10c      	bne.n	80024e8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80024d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	68ba      	ldr	r2, [r7, #8]
 80024dc:	4313      	orrs	r3, r2
 80024de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	68ba      	ldr	r2, [r7, #8]
 80024e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2201      	movs	r2, #1
 80024ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2200      	movs	r2, #0
 80024f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80024f8:	2300      	movs	r3, #0
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3714      	adds	r7, #20
 80024fe:	46bd      	mov	sp, r7
 8002500:	bc80      	pop	{r7}
 8002502:	4770      	bx	lr
 8002504:	40012c00 	.word	0x40012c00
 8002508:	40000400 	.word	0x40000400
 800250c:	40000800 	.word	0x40000800

08002510 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002518:	bf00      	nop
 800251a:	370c      	adds	r7, #12
 800251c:	46bd      	mov	sp, r7
 800251e:	bc80      	pop	{r7}
 8002520:	4770      	bx	lr

08002522 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002522:	b480      	push	{r7}
 8002524:	b083      	sub	sp, #12
 8002526:	af00      	add	r7, sp, #0
 8002528:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800252a:	bf00      	nop
 800252c:	370c      	adds	r7, #12
 800252e:	46bd      	mov	sp, r7
 8002530:	bc80      	pop	{r7}
 8002532:	4770      	bx	lr

08002534 <__libc_init_array>:
 8002534:	b570      	push	{r4, r5, r6, lr}
 8002536:	2600      	movs	r6, #0
 8002538:	4d0c      	ldr	r5, [pc, #48]	; (800256c <__libc_init_array+0x38>)
 800253a:	4c0d      	ldr	r4, [pc, #52]	; (8002570 <__libc_init_array+0x3c>)
 800253c:	1b64      	subs	r4, r4, r5
 800253e:	10a4      	asrs	r4, r4, #2
 8002540:	42a6      	cmp	r6, r4
 8002542:	d109      	bne.n	8002558 <__libc_init_array+0x24>
 8002544:	f000 f822 	bl	800258c <_init>
 8002548:	2600      	movs	r6, #0
 800254a:	4d0a      	ldr	r5, [pc, #40]	; (8002574 <__libc_init_array+0x40>)
 800254c:	4c0a      	ldr	r4, [pc, #40]	; (8002578 <__libc_init_array+0x44>)
 800254e:	1b64      	subs	r4, r4, r5
 8002550:	10a4      	asrs	r4, r4, #2
 8002552:	42a6      	cmp	r6, r4
 8002554:	d105      	bne.n	8002562 <__libc_init_array+0x2e>
 8002556:	bd70      	pop	{r4, r5, r6, pc}
 8002558:	f855 3b04 	ldr.w	r3, [r5], #4
 800255c:	4798      	blx	r3
 800255e:	3601      	adds	r6, #1
 8002560:	e7ee      	b.n	8002540 <__libc_init_array+0xc>
 8002562:	f855 3b04 	ldr.w	r3, [r5], #4
 8002566:	4798      	blx	r3
 8002568:	3601      	adds	r6, #1
 800256a:	e7f2      	b.n	8002552 <__libc_init_array+0x1e>
 800256c:	080025c8 	.word	0x080025c8
 8002570:	080025c8 	.word	0x080025c8
 8002574:	080025c8 	.word	0x080025c8
 8002578:	080025cc 	.word	0x080025cc

0800257c <memset>:
 800257c:	4603      	mov	r3, r0
 800257e:	4402      	add	r2, r0
 8002580:	4293      	cmp	r3, r2
 8002582:	d100      	bne.n	8002586 <memset+0xa>
 8002584:	4770      	bx	lr
 8002586:	f803 1b01 	strb.w	r1, [r3], #1
 800258a:	e7f9      	b.n	8002580 <memset+0x4>

0800258c <_init>:
 800258c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800258e:	bf00      	nop
 8002590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002592:	bc08      	pop	{r3}
 8002594:	469e      	mov	lr, r3
 8002596:	4770      	bx	lr

08002598 <_fini>:
 8002598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800259a:	bf00      	nop
 800259c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800259e:	bc08      	pop	{r3}
 80025a0:	469e      	mov	lr, r3
 80025a2:	4770      	bx	lr
