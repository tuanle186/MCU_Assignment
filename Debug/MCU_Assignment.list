
MCU_Assignment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000051f8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  08005304  08005304  00015304  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800540c  0800540c  000200ac  2**0
                  CONTENTS
  4 .ARM          00000000  0800540c  0800540c  000200ac  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800540c  0800540c  000200ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800540c  0800540c  0001540c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005410  08005410  00015410  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ac  20000000  08005414  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000248  200000ac  080054c0  000200ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002f4  080054c0  000202f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011d52  00000000  00000000  000200d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a04  00000000  00000000  00031e27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e38  00000000  00000000  00034830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d10  00000000  00000000  00035668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001848c  00000000  00000000  00036378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012a78  00000000  00000000  0004e804  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b6d5  00000000  00000000  0006127c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ec951  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c98  00000000  00000000  000ec9a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000ac 	.word	0x200000ac
 8000128:	00000000 	.word	0x00000000
 800012c:	080052ec 	.word	0x080052ec

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000b0 	.word	0x200000b0
 8000148:	080052ec 	.word	0x080052ec

0800014c <fsm_automatic>:
#include "input_reading.h"
#include "uart.h"

int t_road_1 = 0, t_road_2 = 0;

void fsm_automatic() {
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	switch (status) {
 8000150:	4b8e      	ldr	r3, [pc, #568]	; (800038c <fsm_automatic+0x240>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	3301      	adds	r3, #1
 8000156:	2b05      	cmp	r3, #5
 8000158:	f200 810d 	bhi.w	8000376 <fsm_automatic+0x22a>
 800015c:	a201      	add	r2, pc, #4	; (adr r2, 8000164 <fsm_automatic+0x18>)
 800015e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000162:	bf00      	nop
 8000164:	0800017d 	.word	0x0800017d
 8000168:	08000185 	.word	0x08000185
 800016c:	080001d3 	.word	0x080001d3
 8000170:	08000261 	.word	0x08000261
 8000174:	080002c1 	.word	0x080002c1
 8000178:	08000311 	.word	0x08000311
		case INIT:
			status = MODE1;
 800017c:	4b83      	ldr	r3, [pc, #524]	; (800038c <fsm_automatic+0x240>)
 800017e:	2200      	movs	r2, #0
 8000180:	601a      	str	r2, [r3, #0]
			break;
 8000182:	e101      	b.n	8000388 <fsm_automatic+0x23c>
		case MODE1:
			led_config();
 8000184:	f000 f9e8 	bl	8000558 <led_config>
			t_road_1 = T_RED;
 8000188:	4b81      	ldr	r3, [pc, #516]	; (8000390 <fsm_automatic+0x244>)
 800018a:	681b      	ldr	r3, [r3, #0]
 800018c:	4a81      	ldr	r2, [pc, #516]	; (8000394 <fsm_automatic+0x248>)
 800018e:	6013      	str	r3, [r2, #0]
			t_road_2 = T_GREEN;
 8000190:	4b81      	ldr	r3, [pc, #516]	; (8000398 <fsm_automatic+0x24c>)
 8000192:	681b      	ldr	r3, [r3, #0]
 8000194:	4a81      	ldr	r2, [pc, #516]	; (800039c <fsm_automatic+0x250>)
 8000196:	6013      	str	r3, [r2, #0]
			HAL_UART_Transmit(&huart2, "!_____MODE1_____#\n\r", 20, 50);
 8000198:	2332      	movs	r3, #50	; 0x32
 800019a:	2214      	movs	r2, #20
 800019c:	4980      	ldr	r1, [pc, #512]	; (80003a0 <fsm_automatic+0x254>)
 800019e:	4881      	ldr	r0, [pc, #516]	; (80003a4 <fsm_automatic+0x258>)
 80001a0:	f003 fe64 	bl	8003e6c <HAL_UART_Transmit>
			disp_time_uart(t_road_1, t_road_2);
 80001a4:	4b7b      	ldr	r3, [pc, #492]	; (8000394 <fsm_automatic+0x248>)
 80001a6:	681b      	ldr	r3, [r3, #0]
 80001a8:	4a7c      	ldr	r2, [pc, #496]	; (800039c <fsm_automatic+0x250>)
 80001aa:	6812      	ldr	r2, [r2, #0]
 80001ac:	4611      	mov	r1, r2
 80001ae:	4618      	mov	r0, r3
 80001b0:	f001 fe58 	bl	8001e64 <disp_time_uart>
			setTimer4(1000);
 80001b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001b8:	f001 fd22 	bl	8001c00 <setTimer4>
			buzzer_period=400;
 80001bc:	4b7a      	ldr	r3, [pc, #488]	; (80003a8 <fsm_automatic+0x25c>)
 80001be:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80001c2:	601a      	str	r2, [r3, #0]
			volume = 15;
 80001c4:	4b79      	ldr	r3, [pc, #484]	; (80003ac <fsm_automatic+0x260>)
 80001c6:	220f      	movs	r2, #15
 80001c8:	601a      	str	r2, [r3, #0]
			status = RED_GREEN;
 80001ca:	4b70      	ldr	r3, [pc, #448]	; (800038c <fsm_automatic+0x240>)
 80001cc:	2201      	movs	r2, #1
 80001ce:	601a      	str	r2, [r3, #0]
			break;
 80001d0:	e0da      	b.n	8000388 <fsm_automatic+0x23c>
		case RED_GREEN:
			led_config();
 80001d2:	f000 f9c1 	bl	8000558 <led_config>
			if (timer4_flag == 1) {
 80001d6:	4b76      	ldr	r3, [pc, #472]	; (80003b0 <fsm_automatic+0x264>)
 80001d8:	681b      	ldr	r3, [r3, #0]
 80001da:	2b01      	cmp	r3, #1
 80001dc:	f040 80cd 	bne.w	800037a <fsm_automatic+0x22e>
				t_road_1--;
 80001e0:	4b6c      	ldr	r3, [pc, #432]	; (8000394 <fsm_automatic+0x248>)
 80001e2:	681b      	ldr	r3, [r3, #0]
 80001e4:	3b01      	subs	r3, #1
 80001e6:	4a6b      	ldr	r2, [pc, #428]	; (8000394 <fsm_automatic+0x248>)
 80001e8:	6013      	str	r3, [r2, #0]
				t_road_2--;
 80001ea:	4b6c      	ldr	r3, [pc, #432]	; (800039c <fsm_automatic+0x250>)
 80001ec:	681b      	ldr	r3, [r3, #0]
 80001ee:	3b01      	subs	r3, #1
 80001f0:	4a6a      	ldr	r2, [pc, #424]	; (800039c <fsm_automatic+0x250>)
 80001f2:	6013      	str	r3, [r2, #0]
				T_CHECK = t_road_2;
 80001f4:	4b69      	ldr	r3, [pc, #420]	; (800039c <fsm_automatic+0x250>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	4a6e      	ldr	r2, [pc, #440]	; (80003b4 <fsm_automatic+0x268>)
 80001fa:	6013      	str	r3, [r2, #0]
				if (t_road_2 <= 0) { // next state pre-setup
 80001fc:	4b67      	ldr	r3, [pc, #412]	; (800039c <fsm_automatic+0x250>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	2b00      	cmp	r3, #0
 8000202:	dc0c      	bgt.n	800021e <fsm_automatic+0xd2>
					t_road_2 = T_AMBER;
 8000204:	4b6c      	ldr	r3, [pc, #432]	; (80003b8 <fsm_automatic+0x26c>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	4a64      	ldr	r2, [pc, #400]	; (800039c <fsm_automatic+0x250>)
 800020a:	6013      	str	r3, [r2, #0]
					buzzer_period = 75;
 800020c:	4b66      	ldr	r3, [pc, #408]	; (80003a8 <fsm_automatic+0x25c>)
 800020e:	224b      	movs	r2, #75	; 0x4b
 8000210:	601a      	str	r2, [r3, #0]
					volume = 100;
 8000212:	4b66      	ldr	r3, [pc, #408]	; (80003ac <fsm_automatic+0x260>)
 8000214:	2264      	movs	r2, #100	; 0x64
 8000216:	601a      	str	r2, [r3, #0]
					status = RED_AMBER; // Change state
 8000218:	4b5c      	ldr	r3, [pc, #368]	; (800038c <fsm_automatic+0x240>)
 800021a:	2202      	movs	r2, #2
 800021c:	601a      	str	r2, [r3, #0]
				}
				if (T_CHECK <= T_GREEN/2 && T_CHECK > 0) { // next state pre-setup
 800021e:	4b5e      	ldr	r3, [pc, #376]	; (8000398 <fsm_automatic+0x24c>)
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	0fda      	lsrs	r2, r3, #31
 8000224:	4413      	add	r3, r2
 8000226:	105b      	asrs	r3, r3, #1
 8000228:	461a      	mov	r2, r3
 800022a:	4b62      	ldr	r3, [pc, #392]	; (80003b4 <fsm_automatic+0x268>)
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	429a      	cmp	r2, r3
 8000230:	db09      	blt.n	8000246 <fsm_automatic+0xfa>
 8000232:	4b60      	ldr	r3, [pc, #384]	; (80003b4 <fsm_automatic+0x268>)
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	2b00      	cmp	r3, #0
 8000238:	dd05      	ble.n	8000246 <fsm_automatic+0xfa>
					buzzer_period = 200;
 800023a:	4b5b      	ldr	r3, [pc, #364]	; (80003a8 <fsm_automatic+0x25c>)
 800023c:	22c8      	movs	r2, #200	; 0xc8
 800023e:	601a      	str	r2, [r3, #0]
					volume = 50;
 8000240:	4b5a      	ldr	r3, [pc, #360]	; (80003ac <fsm_automatic+0x260>)
 8000242:	2232      	movs	r2, #50	; 0x32
 8000244:	601a      	str	r2, [r3, #0]
				}
				disp_time_uart(t_road_1, t_road_2);
 8000246:	4b53      	ldr	r3, [pc, #332]	; (8000394 <fsm_automatic+0x248>)
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	4a54      	ldr	r2, [pc, #336]	; (800039c <fsm_automatic+0x250>)
 800024c:	6812      	ldr	r2, [r2, #0]
 800024e:	4611      	mov	r1, r2
 8000250:	4618      	mov	r0, r3
 8000252:	f001 fe07 	bl	8001e64 <disp_time_uart>
				setTimer4(1000);
 8000256:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800025a:	f001 fcd1 	bl	8001c00 <setTimer4>
			}
			break;
 800025e:	e08c      	b.n	800037a <fsm_automatic+0x22e>
		case RED_AMBER:
			led_config();
 8000260:	f000 f97a 	bl	8000558 <led_config>
			if (timer4_flag == 1) {
 8000264:	4b52      	ldr	r3, [pc, #328]	; (80003b0 <fsm_automatic+0x264>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	2b01      	cmp	r3, #1
 800026a:	f040 8088 	bne.w	800037e <fsm_automatic+0x232>
				t_road_1--;
 800026e:	4b49      	ldr	r3, [pc, #292]	; (8000394 <fsm_automatic+0x248>)
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	3b01      	subs	r3, #1
 8000274:	4a47      	ldr	r2, [pc, #284]	; (8000394 <fsm_automatic+0x248>)
 8000276:	6013      	str	r3, [r2, #0]
				t_road_2--;
 8000278:	4b48      	ldr	r3, [pc, #288]	; (800039c <fsm_automatic+0x250>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	3b01      	subs	r3, #1
 800027e:	4a47      	ldr	r2, [pc, #284]	; (800039c <fsm_automatic+0x250>)
 8000280:	6013      	str	r3, [r2, #0]
				if (t_road_1 <= 0) { // next state pre-setup
 8000282:	4b44      	ldr	r3, [pc, #272]	; (8000394 <fsm_automatic+0x248>)
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	2b00      	cmp	r3, #0
 8000288:	dc0d      	bgt.n	80002a6 <fsm_automatic+0x15a>
					t_road_1 = T_GREEN;
 800028a:	4b43      	ldr	r3, [pc, #268]	; (8000398 <fsm_automatic+0x24c>)
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	4a41      	ldr	r2, [pc, #260]	; (8000394 <fsm_automatic+0x248>)
 8000290:	6013      	str	r3, [r2, #0]
					t_road_2 = T_RED;
 8000292:	4b3f      	ldr	r3, [pc, #252]	; (8000390 <fsm_automatic+0x244>)
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	4a41      	ldr	r2, [pc, #260]	; (800039c <fsm_automatic+0x250>)
 8000298:	6013      	str	r3, [r2, #0]
					status = GREEN_RED; // Change state
 800029a:	4b3c      	ldr	r3, [pc, #240]	; (800038c <fsm_automatic+0x240>)
 800029c:	2203      	movs	r2, #3
 800029e:	601a      	str	r2, [r3, #0]
					curr_ped_status=PED_OFF;
 80002a0:	4b46      	ldr	r3, [pc, #280]	; (80003bc <fsm_automatic+0x270>)
 80002a2:	2201      	movs	r2, #1
 80002a4:	701a      	strb	r2, [r3, #0]
				}
				disp_time_uart(t_road_1, t_road_2);
 80002a6:	4b3b      	ldr	r3, [pc, #236]	; (8000394 <fsm_automatic+0x248>)
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	4a3c      	ldr	r2, [pc, #240]	; (800039c <fsm_automatic+0x250>)
 80002ac:	6812      	ldr	r2, [r2, #0]
 80002ae:	4611      	mov	r1, r2
 80002b0:	4618      	mov	r0, r3
 80002b2:	f001 fdd7 	bl	8001e64 <disp_time_uart>
				setTimer4(1000);
 80002b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002ba:	f001 fca1 	bl	8001c00 <setTimer4>
			}
			break;
 80002be:	e05e      	b.n	800037e <fsm_automatic+0x232>
		case GREEN_RED:
			led_config();
 80002c0:	f000 f94a 	bl	8000558 <led_config>
			if (timer4_flag == 1) {
 80002c4:	4b3a      	ldr	r3, [pc, #232]	; (80003b0 <fsm_automatic+0x264>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	2b01      	cmp	r3, #1
 80002ca:	d15a      	bne.n	8000382 <fsm_automatic+0x236>
				t_road_1--;
 80002cc:	4b31      	ldr	r3, [pc, #196]	; (8000394 <fsm_automatic+0x248>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	3b01      	subs	r3, #1
 80002d2:	4a30      	ldr	r2, [pc, #192]	; (8000394 <fsm_automatic+0x248>)
 80002d4:	6013      	str	r3, [r2, #0]
				t_road_2--;
 80002d6:	4b31      	ldr	r3, [pc, #196]	; (800039c <fsm_automatic+0x250>)
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	3b01      	subs	r3, #1
 80002dc:	4a2f      	ldr	r2, [pc, #188]	; (800039c <fsm_automatic+0x250>)
 80002de:	6013      	str	r3, [r2, #0]
				if (t_road_1 <= 0) { // next state pre-setup
 80002e0:	4b2c      	ldr	r3, [pc, #176]	; (8000394 <fsm_automatic+0x248>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	dc06      	bgt.n	80002f6 <fsm_automatic+0x1aa>
					t_road_1 = T_AMBER;
 80002e8:	4b33      	ldr	r3, [pc, #204]	; (80003b8 <fsm_automatic+0x26c>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	4a29      	ldr	r2, [pc, #164]	; (8000394 <fsm_automatic+0x248>)
 80002ee:	6013      	str	r3, [r2, #0]
					status = AMBER_RED; // Change state
 80002f0:	4b26      	ldr	r3, [pc, #152]	; (800038c <fsm_automatic+0x240>)
 80002f2:	2204      	movs	r2, #4
 80002f4:	601a      	str	r2, [r3, #0]
				}
				disp_time_uart(t_road_1, t_road_2);
 80002f6:	4b27      	ldr	r3, [pc, #156]	; (8000394 <fsm_automatic+0x248>)
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	4a28      	ldr	r2, [pc, #160]	; (800039c <fsm_automatic+0x250>)
 80002fc:	6812      	ldr	r2, [r2, #0]
 80002fe:	4611      	mov	r1, r2
 8000300:	4618      	mov	r0, r3
 8000302:	f001 fdaf 	bl	8001e64 <disp_time_uart>
				setTimer4(1000);
 8000306:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800030a:	f001 fc79 	bl	8001c00 <setTimer4>
			}
			break;
 800030e:	e038      	b.n	8000382 <fsm_automatic+0x236>
		case AMBER_RED:
			led_config();
 8000310:	f000 f922 	bl	8000558 <led_config>
			if (timer4_flag == 1) {
 8000314:	4b26      	ldr	r3, [pc, #152]	; (80003b0 <fsm_automatic+0x264>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	2b01      	cmp	r3, #1
 800031a:	d134      	bne.n	8000386 <fsm_automatic+0x23a>
				t_road_1--;
 800031c:	4b1d      	ldr	r3, [pc, #116]	; (8000394 <fsm_automatic+0x248>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	3b01      	subs	r3, #1
 8000322:	4a1c      	ldr	r2, [pc, #112]	; (8000394 <fsm_automatic+0x248>)
 8000324:	6013      	str	r3, [r2, #0]
				t_road_2--;
 8000326:	4b1d      	ldr	r3, [pc, #116]	; (800039c <fsm_automatic+0x250>)
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	3b01      	subs	r3, #1
 800032c:	4a1b      	ldr	r2, [pc, #108]	; (800039c <fsm_automatic+0x250>)
 800032e:	6013      	str	r3, [r2, #0]
				if (t_road_1 <= 0) { // next state pre-setup
 8000330:	4b18      	ldr	r3, [pc, #96]	; (8000394 <fsm_automatic+0x248>)
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	2b00      	cmp	r3, #0
 8000336:	dc11      	bgt.n	800035c <fsm_automatic+0x210>
					t_road_1 = T_RED;
 8000338:	4b15      	ldr	r3, [pc, #84]	; (8000390 <fsm_automatic+0x244>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	4a15      	ldr	r2, [pc, #84]	; (8000394 <fsm_automatic+0x248>)
 800033e:	6013      	str	r3, [r2, #0]
					t_road_2 = T_GREEN;
 8000340:	4b15      	ldr	r3, [pc, #84]	; (8000398 <fsm_automatic+0x24c>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	4a15      	ldr	r2, [pc, #84]	; (800039c <fsm_automatic+0x250>)
 8000346:	6013      	str	r3, [r2, #0]
					buzzer_period=500;
 8000348:	4b17      	ldr	r3, [pc, #92]	; (80003a8 <fsm_automatic+0x25c>)
 800034a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800034e:	601a      	str	r2, [r3, #0]
					volume = 20;
 8000350:	4b16      	ldr	r3, [pc, #88]	; (80003ac <fsm_automatic+0x260>)
 8000352:	2214      	movs	r2, #20
 8000354:	601a      	str	r2, [r3, #0]
					status = RED_GREEN; // Change state
 8000356:	4b0d      	ldr	r3, [pc, #52]	; (800038c <fsm_automatic+0x240>)
 8000358:	2201      	movs	r2, #1
 800035a:	601a      	str	r2, [r3, #0]
				}
				disp_time_uart(t_road_1, t_road_2);
 800035c:	4b0d      	ldr	r3, [pc, #52]	; (8000394 <fsm_automatic+0x248>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	4a0e      	ldr	r2, [pc, #56]	; (800039c <fsm_automatic+0x250>)
 8000362:	6812      	ldr	r2, [r2, #0]
 8000364:	4611      	mov	r1, r2
 8000366:	4618      	mov	r0, r3
 8000368:	f001 fd7c 	bl	8001e64 <disp_time_uart>
				setTimer4(1000);
 800036c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000370:	f001 fc46 	bl	8001c00 <setTimer4>
			}
			break;
 8000374:	e007      	b.n	8000386 <fsm_automatic+0x23a>
		default:
			break;
 8000376:	bf00      	nop
 8000378:	e006      	b.n	8000388 <fsm_automatic+0x23c>
			break;
 800037a:	bf00      	nop
 800037c:	e004      	b.n	8000388 <fsm_automatic+0x23c>
			break;
 800037e:	bf00      	nop
 8000380:	e002      	b.n	8000388 <fsm_automatic+0x23c>
			break;
 8000382:	bf00      	nop
 8000384:	e000      	b.n	8000388 <fsm_automatic+0x23c>
			break;
 8000386:	bf00      	nop
	}
}
 8000388:	bf00      	nop
 800038a:	bd80      	pop	{r7, pc}
 800038c:	2000000c 	.word	0x2000000c
 8000390:	20000000 	.word	0x20000000
 8000394:	200000c8 	.word	0x200000c8
 8000398:	20000008 	.word	0x20000008
 800039c:	200000cc 	.word	0x200000cc
 80003a0:	08005304 	.word	0x08005304
 80003a4:	20000294 	.word	0x20000294
 80003a8:	20000014 	.word	0x20000014
 80003ac:	20000018 	.word	0x20000018
 80003b0:	200001f0 	.word	0x200001f0
 80003b4:	200000d0 	.word	0x200000d0
 80003b8:	20000004 	.word	0x20000004
 80003bc:	20000010 	.word	0x20000010

080003c0 <fsm_red_manual>:
#include "global.h"
#include "fsm_manual.h"
#include "timer.h"
#include "uart.h"

void fsm_red_manual() {
 80003c0:	b580      	push	{r7, lr}
 80003c2:	af00      	add	r7, sp, #0
	switch(status) {
 80003c4:	4b1c      	ldr	r3, [pc, #112]	; (8000438 <fsm_red_manual+0x78>)
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	2b07      	cmp	r3, #7
 80003ca:	d023      	beq.n	8000414 <fsm_red_manual+0x54>
 80003cc:	2b07      	cmp	r3, #7
 80003ce:	dc2c      	bgt.n	800042a <fsm_red_manual+0x6a>
 80003d0:	2b05      	cmp	r3, #5
 80003d2:	d002      	beq.n	80003da <fsm_red_manual+0x1a>
 80003d4:	2b06      	cmp	r3, #6
 80003d6:	d012      	beq.n	80003fe <fsm_red_manual+0x3e>
				toggle_red();
				setTimer1(500);
			}
			break;
		default:
			break;
 80003d8:	e027      	b.n	800042a <fsm_red_manual+0x6a>
			led_config();
 80003da:	f000 f8bd 	bl	8000558 <led_config>
			setTimer1(500);
 80003de:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80003e2:	f001 fbf3 	bl	8001bcc <setTimer1>
			HAL_UART_Transmit(&huart2, "!_____MODE2_____#\n\r", 20, 50);
 80003e6:	2332      	movs	r3, #50	; 0x32
 80003e8:	2214      	movs	r2, #20
 80003ea:	4914      	ldr	r1, [pc, #80]	; (800043c <fsm_red_manual+0x7c>)
 80003ec:	4814      	ldr	r0, [pc, #80]	; (8000440 <fsm_red_manual+0x80>)
 80003ee:	f003 fd3d 	bl	8003e6c <HAL_UART_Transmit>
			disp_t_red_uart();
 80003f2:	f001 fccb 	bl	8001d8c <disp_t_red_uart>
			status = AUTO_RED;
 80003f6:	4b10      	ldr	r3, [pc, #64]	; (8000438 <fsm_red_manual+0x78>)
 80003f8:	2206      	movs	r2, #6
 80003fa:	601a      	str	r2, [r3, #0]
			break;
 80003fc:	e01a      	b.n	8000434 <fsm_red_manual+0x74>
			if (timer1_flag == 1) {
 80003fe:	4b11      	ldr	r3, [pc, #68]	; (8000444 <fsm_red_manual+0x84>)
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	2b01      	cmp	r3, #1
 8000404:	d113      	bne.n	800042e <fsm_red_manual+0x6e>
				toggle_red();
 8000406:	f000 f9f9 	bl	80007fc <toggle_red>
				setTimer1(500);
 800040a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800040e:	f001 fbdd 	bl	8001bcc <setTimer1>
			break;
 8000412:	e00c      	b.n	800042e <fsm_red_manual+0x6e>
			if (timer1_flag == 1) {
 8000414:	4b0b      	ldr	r3, [pc, #44]	; (8000444 <fsm_red_manual+0x84>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	2b01      	cmp	r3, #1
 800041a:	d10a      	bne.n	8000432 <fsm_red_manual+0x72>
				toggle_red();
 800041c:	f000 f9ee 	bl	80007fc <toggle_red>
				setTimer1(500);
 8000420:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000424:	f001 fbd2 	bl	8001bcc <setTimer1>
			break;
 8000428:	e003      	b.n	8000432 <fsm_red_manual+0x72>
			break;
 800042a:	bf00      	nop
 800042c:	e002      	b.n	8000434 <fsm_red_manual+0x74>
			break;
 800042e:	bf00      	nop
 8000430:	e000      	b.n	8000434 <fsm_red_manual+0x74>
			break;
 8000432:	bf00      	nop
	}
}
 8000434:	bf00      	nop
 8000436:	bd80      	pop	{r7, pc}
 8000438:	2000000c 	.word	0x2000000c
 800043c:	08005318 	.word	0x08005318
 8000440:	20000294 	.word	0x20000294
 8000444:	200001e4 	.word	0x200001e4

08000448 <fsm_amber_manual>:

void fsm_amber_manual() {
 8000448:	b580      	push	{r7, lr}
 800044a:	af00      	add	r7, sp, #0
	switch(status) {
 800044c:	4b1c      	ldr	r3, [pc, #112]	; (80004c0 <fsm_amber_manual+0x78>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	2b0a      	cmp	r3, #10
 8000452:	d023      	beq.n	800049c <fsm_amber_manual+0x54>
 8000454:	2b0a      	cmp	r3, #10
 8000456:	dc2c      	bgt.n	80004b2 <fsm_amber_manual+0x6a>
 8000458:	2b08      	cmp	r3, #8
 800045a:	d002      	beq.n	8000462 <fsm_amber_manual+0x1a>
 800045c:	2b09      	cmp	r3, #9
 800045e:	d012      	beq.n	8000486 <fsm_amber_manual+0x3e>
				toggle_amber();
				setTimer1(500);
			}
			break;
		default:
			break;
 8000460:	e027      	b.n	80004b2 <fsm_amber_manual+0x6a>
			led_config();
 8000462:	f000 f879 	bl	8000558 <led_config>
			setTimer1(500);
 8000466:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800046a:	f001 fbaf 	bl	8001bcc <setTimer1>
			HAL_UART_Transmit(&huart2, "!_____MODE3_____#\n\r", 20, 50);
 800046e:	2332      	movs	r3, #50	; 0x32
 8000470:	2214      	movs	r2, #20
 8000472:	4914      	ldr	r1, [pc, #80]	; (80004c4 <fsm_amber_manual+0x7c>)
 8000474:	4814      	ldr	r0, [pc, #80]	; (80004c8 <fsm_amber_manual+0x80>)
 8000476:	f003 fcf9 	bl	8003e6c <HAL_UART_Transmit>
			disp_t_amber_uart();
 800047a:	f001 fcab 	bl	8001dd4 <disp_t_amber_uart>
			status = AUTO_AMBER;
 800047e:	4b10      	ldr	r3, [pc, #64]	; (80004c0 <fsm_amber_manual+0x78>)
 8000480:	2209      	movs	r2, #9
 8000482:	601a      	str	r2, [r3, #0]
			break;
 8000484:	e01a      	b.n	80004bc <fsm_amber_manual+0x74>
			if (timer1_flag == 1) {
 8000486:	4b11      	ldr	r3, [pc, #68]	; (80004cc <fsm_amber_manual+0x84>)
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	2b01      	cmp	r3, #1
 800048c:	d113      	bne.n	80004b6 <fsm_amber_manual+0x6e>
				toggle_amber();
 800048e:	f000 f9cf 	bl	8000830 <toggle_amber>
				setTimer1(500);
 8000492:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000496:	f001 fb99 	bl	8001bcc <setTimer1>
			break;
 800049a:	e00c      	b.n	80004b6 <fsm_amber_manual+0x6e>
			if (timer1_flag == 1) {
 800049c:	4b0b      	ldr	r3, [pc, #44]	; (80004cc <fsm_amber_manual+0x84>)
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	2b01      	cmp	r3, #1
 80004a2:	d10a      	bne.n	80004ba <fsm_amber_manual+0x72>
				toggle_amber();
 80004a4:	f000 f9c4 	bl	8000830 <toggle_amber>
				setTimer1(500);
 80004a8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004ac:	f001 fb8e 	bl	8001bcc <setTimer1>
			break;
 80004b0:	e003      	b.n	80004ba <fsm_amber_manual+0x72>
			break;
 80004b2:	bf00      	nop
 80004b4:	e002      	b.n	80004bc <fsm_amber_manual+0x74>
			break;
 80004b6:	bf00      	nop
 80004b8:	e000      	b.n	80004bc <fsm_amber_manual+0x74>
			break;
 80004ba:	bf00      	nop
	}
}
 80004bc:	bf00      	nop
 80004be:	bd80      	pop	{r7, pc}
 80004c0:	2000000c 	.word	0x2000000c
 80004c4:	0800532c 	.word	0x0800532c
 80004c8:	20000294 	.word	0x20000294
 80004cc:	200001e4 	.word	0x200001e4

080004d0 <fsm_green_manual>:

void fsm_green_manual() {
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
	switch(status) {
 80004d4:	4b1c      	ldr	r3, [pc, #112]	; (8000548 <fsm_green_manual+0x78>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	2b0d      	cmp	r3, #13
 80004da:	d023      	beq.n	8000524 <fsm_green_manual+0x54>
 80004dc:	2b0d      	cmp	r3, #13
 80004de:	dc2c      	bgt.n	800053a <fsm_green_manual+0x6a>
 80004e0:	2b0b      	cmp	r3, #11
 80004e2:	d002      	beq.n	80004ea <fsm_green_manual+0x1a>
 80004e4:	2b0c      	cmp	r3, #12
 80004e6:	d012      	beq.n	800050e <fsm_green_manual+0x3e>
				toggle_green();
				setTimer1(500);
			}
			break;
		default:
			break;
 80004e8:	e027      	b.n	800053a <fsm_green_manual+0x6a>
			led_config();
 80004ea:	f000 f835 	bl	8000558 <led_config>
			setTimer1(500);
 80004ee:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004f2:	f001 fb6b 	bl	8001bcc <setTimer1>
			HAL_UART_Transmit(&huart2, "!_____MODE4_____#\n\r", 20, 50);
 80004f6:	2332      	movs	r3, #50	; 0x32
 80004f8:	2214      	movs	r2, #20
 80004fa:	4914      	ldr	r1, [pc, #80]	; (800054c <fsm_green_manual+0x7c>)
 80004fc:	4814      	ldr	r0, [pc, #80]	; (8000550 <fsm_green_manual+0x80>)
 80004fe:	f003 fcb5 	bl	8003e6c <HAL_UART_Transmit>
			disp_t_green_uart();
 8000502:	f001 fc8b 	bl	8001e1c <disp_t_green_uart>
			status = AUTO_GREEN;
 8000506:	4b10      	ldr	r3, [pc, #64]	; (8000548 <fsm_green_manual+0x78>)
 8000508:	220c      	movs	r2, #12
 800050a:	601a      	str	r2, [r3, #0]
			break;
 800050c:	e01a      	b.n	8000544 <fsm_green_manual+0x74>
			if (timer1_flag == 1) {
 800050e:	4b11      	ldr	r3, [pc, #68]	; (8000554 <fsm_green_manual+0x84>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	2b01      	cmp	r3, #1
 8000514:	d113      	bne.n	800053e <fsm_green_manual+0x6e>
				toggle_green();
 8000516:	f000 f9a5 	bl	8000864 <toggle_green>
				setTimer1(500);
 800051a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800051e:	f001 fb55 	bl	8001bcc <setTimer1>
			break;
 8000522:	e00c      	b.n	800053e <fsm_green_manual+0x6e>
			if (timer1_flag == 1) {
 8000524:	4b0b      	ldr	r3, [pc, #44]	; (8000554 <fsm_green_manual+0x84>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	2b01      	cmp	r3, #1
 800052a:	d10a      	bne.n	8000542 <fsm_green_manual+0x72>
				toggle_green();
 800052c:	f000 f99a 	bl	8000864 <toggle_green>
				setTimer1(500);
 8000530:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000534:	f001 fb4a 	bl	8001bcc <setTimer1>
			break;
 8000538:	e003      	b.n	8000542 <fsm_green_manual+0x72>
			break;
 800053a:	bf00      	nop
 800053c:	e002      	b.n	8000544 <fsm_green_manual+0x74>
			break;
 800053e:	bf00      	nop
 8000540:	e000      	b.n	8000544 <fsm_green_manual+0x74>
			break;
 8000542:	bf00      	nop
	}
}
 8000544:	bf00      	nop
 8000546:	bd80      	pop	{r7, pc}
 8000548:	2000000c 	.word	0x2000000c
 800054c:	08005340 	.word	0x08005340
 8000550:	20000294 	.word	0x20000294
 8000554:	200001e4 	.word	0x200001e4

08000558 <led_config>:
void on_red_pedestrian();
void on_green_pedestrian();

void set_buzzer();

void led_config() {
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
	pedestrian_buzzer_config();
 800055c:	f000 f9d8 	bl	8000910 <pedestrian_buzzer_config>
	pedestrian_led_config();
 8000560:	f000 f856 	bl	8000610 <pedestrian_led_config>
	switch (status) {
 8000564:	4b28      	ldr	r3, [pc, #160]	; (8000608 <led_config+0xb0>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	2b0b      	cmp	r3, #11
 800056a:	d84a      	bhi.n	8000602 <led_config+0xaa>
 800056c:	a201      	add	r2, pc, #4	; (adr r2, 8000574 <led_config+0x1c>)
 800056e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000572:	bf00      	nop
 8000574:	080005a5 	.word	0x080005a5
 8000578:	080005b3 	.word	0x080005b3
 800057c:	080005bd 	.word	0x080005bd
 8000580:	080005c3 	.word	0x080005c3
 8000584:	080005cd 	.word	0x080005cd
 8000588:	080005d3 	.word	0x080005d3
 800058c:	08000603 	.word	0x08000603
 8000590:	08000603 	.word	0x08000603
 8000594:	080005e3 	.word	0x080005e3
 8000598:	08000603 	.word	0x08000603
 800059c:	08000603 	.word	0x08000603
 80005a0:	080005f3 	.word	0x080005f3
		case MODE1:
			off_all_leds_road_1();
 80005a4:	f000 f89a 	bl	80006dc <off_all_leds_road_1>
			off_all_leds_road_2();
 80005a8:	f000 f8ac 	bl	8000704 <off_all_leds_road_2>
			off_pedestrian();
 80005ac:	f000 f974 	bl	8000898 <off_pedestrian>
			break;
 80005b0:	e028      	b.n	8000604 <led_config+0xac>
		case RED_GREEN:
			on_red_road_1();
 80005b2:	f000 f8b7 	bl	8000724 <on_red_road_1>
			on_green_road_2();
 80005b6:	f000 f911 	bl	80007dc <on_green_road_2>

			break;
 80005ba:	e023      	b.n	8000604 <led_config+0xac>
		case RED_AMBER:
			on_amber_road_2();
 80005bc:	f000 f8ea 	bl	8000794 <on_amber_road_2>
			break;
 80005c0:	e020      	b.n	8000604 <led_config+0xac>
		case GREEN_RED:
			on_green_road_1();
 80005c2:	f000 f8f7 	bl	80007b4 <on_green_road_1>
			on_red_road_2();
 80005c6:	f000 f8c1 	bl	800074c <on_red_road_2>
			break;
 80005ca:	e01b      	b.n	8000604 <led_config+0xac>
		case AMBER_RED:
			on_amber_road_1();
 80005cc:	f000 f8ce 	bl	800076c <on_amber_road_1>
			break;
 80005d0:	e018      	b.n	8000604 <led_config+0xac>
		case MODE2:
			on_red_road_1();
 80005d2:	f000 f8a7 	bl	8000724 <on_red_road_1>
			on_red_road_2();
 80005d6:	f000 f8b9 	bl	800074c <on_red_road_2>
			toggle_flag = 0;
 80005da:	4b0c      	ldr	r3, [pc, #48]	; (800060c <led_config+0xb4>)
 80005dc:	2200      	movs	r2, #0
 80005de:	601a      	str	r2, [r3, #0]
			break;
 80005e0:	e010      	b.n	8000604 <led_config+0xac>
		case MODE3:
			on_amber_road_1();
 80005e2:	f000 f8c3 	bl	800076c <on_amber_road_1>
			on_amber_road_2();
 80005e6:	f000 f8d5 	bl	8000794 <on_amber_road_2>
			toggle_flag = 0;
 80005ea:	4b08      	ldr	r3, [pc, #32]	; (800060c <led_config+0xb4>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	601a      	str	r2, [r3, #0]
			break;
 80005f0:	e008      	b.n	8000604 <led_config+0xac>
		case MODE4:
			on_green_road_1();
 80005f2:	f000 f8df 	bl	80007b4 <on_green_road_1>
			on_green_road_2();
 80005f6:	f000 f8f1 	bl	80007dc <on_green_road_2>
			toggle_flag = 0;
 80005fa:	4b04      	ldr	r3, [pc, #16]	; (800060c <led_config+0xb4>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	601a      	str	r2, [r3, #0]
			break;
 8000600:	e000      	b.n	8000604 <led_config+0xac>
		default:
			break;
 8000602:	bf00      	nop
	}
}
 8000604:	bf00      	nop
 8000606:	bd80      	pop	{r7, pc}
 8000608:	2000000c 	.word	0x2000000c
 800060c:	200000d4 	.word	0x200000d4

08000610 <pedestrian_led_config>:
void pedestrian_led_config(){
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
	switch (status) {
 8000614:	4b2f      	ldr	r3, [pc, #188]	; (80006d4 <pedestrian_led_config+0xc4>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	2b0b      	cmp	r3, #11
 800061a:	d858      	bhi.n	80006ce <pedestrian_led_config+0xbe>
 800061c:	a201      	add	r2, pc, #4	; (adr r2, 8000624 <pedestrian_led_config+0x14>)
 800061e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000622:	bf00      	nop
 8000624:	08000655 	.word	0x08000655
 8000628:	0800065b 	.word	0x0800065b
 800062c:	0800066f 	.word	0x0800066f
 8000630:	08000683 	.word	0x08000683
 8000634:	08000697 	.word	0x08000697
 8000638:	080006ab 	.word	0x080006ab
 800063c:	080006cf 	.word	0x080006cf
 8000640:	080006cf 	.word	0x080006cf
 8000644:	080006b7 	.word	0x080006b7
 8000648:	080006cf 	.word	0x080006cf
 800064c:	080006cf 	.word	0x080006cf
 8000650:	080006c3 	.word	0x080006c3
			case MODE1:
				off_pedestrian();
 8000654:	f000 f920 	bl	8000898 <off_pedestrian>
				break;
 8000658:	e03a      	b.n	80006d0 <pedestrian_led_config+0xc0>
			case RED_GREEN:
				if(curr_ped_status==PED_ON){
 800065a:	4b1f      	ldr	r3, [pc, #124]	; (80006d8 <pedestrian_led_config+0xc8>)
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	2b00      	cmp	r3, #0
 8000660:	d102      	bne.n	8000668 <pedestrian_led_config+0x58>
					on_green_pedestrian();
 8000662:	f000 f941 	bl	80008e8 <on_green_pedestrian>
					break;
 8000666:	e033      	b.n	80006d0 <pedestrian_led_config+0xc0>
				}
				off_pedestrian();
 8000668:	f000 f916 	bl	8000898 <off_pedestrian>
				break;
 800066c:	e030      	b.n	80006d0 <pedestrian_led_config+0xc0>
			case RED_AMBER:
				if(curr_ped_status==PED_ON){
 800066e:	4b1a      	ldr	r3, [pc, #104]	; (80006d8 <pedestrian_led_config+0xc8>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	2b00      	cmp	r3, #0
 8000674:	d102      	bne.n	800067c <pedestrian_led_config+0x6c>
					on_green_pedestrian();
 8000676:	f000 f937 	bl	80008e8 <on_green_pedestrian>
					break;
 800067a:	e029      	b.n	80006d0 <pedestrian_led_config+0xc0>
				}
				off_pedestrian();
 800067c:	f000 f90c 	bl	8000898 <off_pedestrian>
				break;
 8000680:	e026      	b.n	80006d0 <pedestrian_led_config+0xc0>
			case GREEN_RED:
				if(curr_ped_status==PED_ON){
 8000682:	4b15      	ldr	r3, [pc, #84]	; (80006d8 <pedestrian_led_config+0xc8>)
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	2b00      	cmp	r3, #0
 8000688:	d102      	bne.n	8000690 <pedestrian_led_config+0x80>
					on_red_pedestrian();
 800068a:	f000 f919 	bl	80008c0 <on_red_pedestrian>
					break;
 800068e:	e01f      	b.n	80006d0 <pedestrian_led_config+0xc0>
				}
				off_pedestrian();
 8000690:	f000 f902 	bl	8000898 <off_pedestrian>
				break;
 8000694:	e01c      	b.n	80006d0 <pedestrian_led_config+0xc0>
			case AMBER_RED:
				if(curr_ped_status==PED_ON){
 8000696:	4b10      	ldr	r3, [pc, #64]	; (80006d8 <pedestrian_led_config+0xc8>)
 8000698:	781b      	ldrb	r3, [r3, #0]
 800069a:	2b00      	cmp	r3, #0
 800069c:	d102      	bne.n	80006a4 <pedestrian_led_config+0x94>
					on_red_pedestrian();
 800069e:	f000 f90f 	bl	80008c0 <on_red_pedestrian>
					break;
 80006a2:	e015      	b.n	80006d0 <pedestrian_led_config+0xc0>
				}
				off_pedestrian();
 80006a4:	f000 f8f8 	bl	8000898 <off_pedestrian>
				break;
 80006a8:	e012      	b.n	80006d0 <pedestrian_led_config+0xc0>
			case MODE2:
				curr_ped_status=PED_OFF;
 80006aa:	4b0b      	ldr	r3, [pc, #44]	; (80006d8 <pedestrian_led_config+0xc8>)
 80006ac:	2201      	movs	r2, #1
 80006ae:	701a      	strb	r2, [r3, #0]
				off_pedestrian();
 80006b0:	f000 f8f2 	bl	8000898 <off_pedestrian>
				break;
 80006b4:	e00c      	b.n	80006d0 <pedestrian_led_config+0xc0>
			case MODE3:
				curr_ped_status=PED_OFF;
 80006b6:	4b08      	ldr	r3, [pc, #32]	; (80006d8 <pedestrian_led_config+0xc8>)
 80006b8:	2201      	movs	r2, #1
 80006ba:	701a      	strb	r2, [r3, #0]
				off_pedestrian();
 80006bc:	f000 f8ec 	bl	8000898 <off_pedestrian>
				break;
 80006c0:	e006      	b.n	80006d0 <pedestrian_led_config+0xc0>
			case MODE4:
				curr_ped_status=PED_OFF;
 80006c2:	4b05      	ldr	r3, [pc, #20]	; (80006d8 <pedestrian_led_config+0xc8>)
 80006c4:	2201      	movs	r2, #1
 80006c6:	701a      	strb	r2, [r3, #0]
				off_pedestrian();
 80006c8:	f000 f8e6 	bl	8000898 <off_pedestrian>
				break;
 80006cc:	e000      	b.n	80006d0 <pedestrian_led_config+0xc0>
			default:
				break;
 80006ce:	bf00      	nop
		}
}
 80006d0:	bf00      	nop
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	2000000c 	.word	0x2000000c
 80006d8:	20000010 	.word	0x20000010

080006dc <off_all_leds_road_1>:
void off_all_leds_road_1() {
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (D2_LED1_GPIO_Port, D2_LED1_Pin, 0);
 80006e0:	2200      	movs	r2, #0
 80006e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006e6:	4805      	ldr	r0, [pc, #20]	; (80006fc <off_all_leds_road_1+0x20>)
 80006e8:	f001 ffe3 	bl	80026b2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (D3_LED1_GPIO_Port, D3_LED1_Pin, 0);
 80006ec:	2200      	movs	r2, #0
 80006ee:	2108      	movs	r1, #8
 80006f0:	4803      	ldr	r0, [pc, #12]	; (8000700 <off_all_leds_road_1+0x24>)
 80006f2:	f001 ffde 	bl	80026b2 <HAL_GPIO_WritePin>
}
 80006f6:	bf00      	nop
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	40010800 	.word	0x40010800
 8000700:	40010c00 	.word	0x40010c00

08000704 <off_all_leds_road_2>:

void off_all_leds_road_2() {
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (D4_LED2_GPIO_Port, D4_LED2_Pin, 0);
 8000708:	2200      	movs	r2, #0
 800070a:	2120      	movs	r1, #32
 800070c:	4804      	ldr	r0, [pc, #16]	; (8000720 <off_all_leds_road_2+0x1c>)
 800070e:	f001 ffd0 	bl	80026b2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (D5_LED2_GPIO_Port, D5_LED2_Pin, 0);
 8000712:	2200      	movs	r2, #0
 8000714:	2110      	movs	r1, #16
 8000716:	4802      	ldr	r0, [pc, #8]	; (8000720 <off_all_leds_road_2+0x1c>)
 8000718:	f001 ffcb 	bl	80026b2 <HAL_GPIO_WritePin>
}
 800071c:	bf00      	nop
 800071e:	bd80      	pop	{r7, pc}
 8000720:	40010c00 	.word	0x40010c00

08000724 <on_red_road_1>:

void on_red_road_1() {
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (D2_LED1_GPIO_Port, D2_LED1_Pin, 1);
 8000728:	2201      	movs	r2, #1
 800072a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800072e:	4805      	ldr	r0, [pc, #20]	; (8000744 <on_red_road_1+0x20>)
 8000730:	f001 ffbf 	bl	80026b2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (D3_LED1_GPIO_Port, D3_LED1_Pin, 0);
 8000734:	2200      	movs	r2, #0
 8000736:	2108      	movs	r1, #8
 8000738:	4803      	ldr	r0, [pc, #12]	; (8000748 <on_red_road_1+0x24>)
 800073a:	f001 ffba 	bl	80026b2 <HAL_GPIO_WritePin>
}
 800073e:	bf00      	nop
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	40010800 	.word	0x40010800
 8000748:	40010c00 	.word	0x40010c00

0800074c <on_red_road_2>:

void on_red_road_2() {
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (D4_LED2_GPIO_Port, D4_LED2_Pin, 1);
 8000750:	2201      	movs	r2, #1
 8000752:	2120      	movs	r1, #32
 8000754:	4804      	ldr	r0, [pc, #16]	; (8000768 <on_red_road_2+0x1c>)
 8000756:	f001 ffac 	bl	80026b2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (D5_LED2_GPIO_Port, D5_LED2_Pin, 0);
 800075a:	2200      	movs	r2, #0
 800075c:	2110      	movs	r1, #16
 800075e:	4802      	ldr	r0, [pc, #8]	; (8000768 <on_red_road_2+0x1c>)
 8000760:	f001 ffa7 	bl	80026b2 <HAL_GPIO_WritePin>
}
 8000764:	bf00      	nop
 8000766:	bd80      	pop	{r7, pc}
 8000768:	40010c00 	.word	0x40010c00

0800076c <on_amber_road_1>:

void on_amber_road_1() {
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (D2_LED1_GPIO_Port, D2_LED1_Pin, 1);
 8000770:	2201      	movs	r2, #1
 8000772:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000776:	4805      	ldr	r0, [pc, #20]	; (800078c <on_amber_road_1+0x20>)
 8000778:	f001 ff9b 	bl	80026b2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (D3_LED1_GPIO_Port, D3_LED1_Pin, 1);
 800077c:	2201      	movs	r2, #1
 800077e:	2108      	movs	r1, #8
 8000780:	4803      	ldr	r0, [pc, #12]	; (8000790 <on_amber_road_1+0x24>)
 8000782:	f001 ff96 	bl	80026b2 <HAL_GPIO_WritePin>
}
 8000786:	bf00      	nop
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	40010800 	.word	0x40010800
 8000790:	40010c00 	.word	0x40010c00

08000794 <on_amber_road_2>:

void on_amber_road_2() {
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (D4_LED2_GPIO_Port, D4_LED2_Pin, 1);
 8000798:	2201      	movs	r2, #1
 800079a:	2120      	movs	r1, #32
 800079c:	4804      	ldr	r0, [pc, #16]	; (80007b0 <on_amber_road_2+0x1c>)
 800079e:	f001 ff88 	bl	80026b2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (D5_LED2_GPIO_Port, D5_LED2_Pin, 1);
 80007a2:	2201      	movs	r2, #1
 80007a4:	2110      	movs	r1, #16
 80007a6:	4802      	ldr	r0, [pc, #8]	; (80007b0 <on_amber_road_2+0x1c>)
 80007a8:	f001 ff83 	bl	80026b2 <HAL_GPIO_WritePin>
}
 80007ac:	bf00      	nop
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	40010c00 	.word	0x40010c00

080007b4 <on_green_road_1>:

void on_green_road_1() {
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (D2_LED1_GPIO_Port, D2_LED1_Pin, 0);
 80007b8:	2200      	movs	r2, #0
 80007ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007be:	4805      	ldr	r0, [pc, #20]	; (80007d4 <on_green_road_1+0x20>)
 80007c0:	f001 ff77 	bl	80026b2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (D3_LED1_GPIO_Port, D3_LED1_Pin, 1);
 80007c4:	2201      	movs	r2, #1
 80007c6:	2108      	movs	r1, #8
 80007c8:	4803      	ldr	r0, [pc, #12]	; (80007d8 <on_green_road_1+0x24>)
 80007ca:	f001 ff72 	bl	80026b2 <HAL_GPIO_WritePin>
}
 80007ce:	bf00      	nop
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	40010800 	.word	0x40010800
 80007d8:	40010c00 	.word	0x40010c00

080007dc <on_green_road_2>:

void on_green_road_2() {
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (D4_LED2_GPIO_Port, D4_LED2_Pin, 0);
 80007e0:	2200      	movs	r2, #0
 80007e2:	2120      	movs	r1, #32
 80007e4:	4804      	ldr	r0, [pc, #16]	; (80007f8 <on_green_road_2+0x1c>)
 80007e6:	f001 ff64 	bl	80026b2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (D5_LED2_GPIO_Port, D5_LED2_Pin, 1);
 80007ea:	2201      	movs	r2, #1
 80007ec:	2110      	movs	r1, #16
 80007ee:	4802      	ldr	r0, [pc, #8]	; (80007f8 <on_green_road_2+0x1c>)
 80007f0:	f001 ff5f 	bl	80026b2 <HAL_GPIO_WritePin>
}
 80007f4:	bf00      	nop
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	40010c00 	.word	0x40010c00

080007fc <toggle_red>:


void toggle_red() {
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
	if (toggle_flag == 0) {
 8000800:	4b0a      	ldr	r3, [pc, #40]	; (800082c <toggle_red+0x30>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	2b00      	cmp	r3, #0
 8000806:	d107      	bne.n	8000818 <toggle_red+0x1c>
		on_red_road_1();
 8000808:	f7ff ff8c 	bl	8000724 <on_red_road_1>
		on_red_road_2();
 800080c:	f7ff ff9e 	bl	800074c <on_red_road_2>
		toggle_flag = 1;
 8000810:	4b06      	ldr	r3, [pc, #24]	; (800082c <toggle_red+0x30>)
 8000812:	2201      	movs	r2, #1
 8000814:	601a      	str	r2, [r3, #0]
	} else {
		off_all_leds_road_1();
		off_all_leds_road_2();
		toggle_flag = 0;
	}
}
 8000816:	e006      	b.n	8000826 <toggle_red+0x2a>
		off_all_leds_road_1();
 8000818:	f7ff ff60 	bl	80006dc <off_all_leds_road_1>
		off_all_leds_road_2();
 800081c:	f7ff ff72 	bl	8000704 <off_all_leds_road_2>
		toggle_flag = 0;
 8000820:	4b02      	ldr	r3, [pc, #8]	; (800082c <toggle_red+0x30>)
 8000822:	2200      	movs	r2, #0
 8000824:	601a      	str	r2, [r3, #0]
}
 8000826:	bf00      	nop
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	200000d4 	.word	0x200000d4

08000830 <toggle_amber>:

void toggle_amber() {
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
	if (toggle_flag == 0) {
 8000834:	4b0a      	ldr	r3, [pc, #40]	; (8000860 <toggle_amber+0x30>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	2b00      	cmp	r3, #0
 800083a:	d107      	bne.n	800084c <toggle_amber+0x1c>
		on_amber_road_1();
 800083c:	f7ff ff96 	bl	800076c <on_amber_road_1>
		on_amber_road_2();
 8000840:	f7ff ffa8 	bl	8000794 <on_amber_road_2>
		toggle_flag = 1;
 8000844:	4b06      	ldr	r3, [pc, #24]	; (8000860 <toggle_amber+0x30>)
 8000846:	2201      	movs	r2, #1
 8000848:	601a      	str	r2, [r3, #0]
	} else {
		off_all_leds_road_1();
		off_all_leds_road_2();
		toggle_flag = 0;
	}
}
 800084a:	e006      	b.n	800085a <toggle_amber+0x2a>
		off_all_leds_road_1();
 800084c:	f7ff ff46 	bl	80006dc <off_all_leds_road_1>
		off_all_leds_road_2();
 8000850:	f7ff ff58 	bl	8000704 <off_all_leds_road_2>
		toggle_flag = 0;
 8000854:	4b02      	ldr	r3, [pc, #8]	; (8000860 <toggle_amber+0x30>)
 8000856:	2200      	movs	r2, #0
 8000858:	601a      	str	r2, [r3, #0]
}
 800085a:	bf00      	nop
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	200000d4 	.word	0x200000d4

08000864 <toggle_green>:

void toggle_green() {
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
	if (toggle_flag == 0) {
 8000868:	4b0a      	ldr	r3, [pc, #40]	; (8000894 <toggle_green+0x30>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	2b00      	cmp	r3, #0
 800086e:	d107      	bne.n	8000880 <toggle_green+0x1c>
		on_green_road_1();
 8000870:	f7ff ffa0 	bl	80007b4 <on_green_road_1>
		on_green_road_2();
 8000874:	f7ff ffb2 	bl	80007dc <on_green_road_2>
		toggle_flag = 1;
 8000878:	4b06      	ldr	r3, [pc, #24]	; (8000894 <toggle_green+0x30>)
 800087a:	2201      	movs	r2, #1
 800087c:	601a      	str	r2, [r3, #0]
	} else {
		off_all_leds_road_1();
		off_all_leds_road_2();
		toggle_flag = 0;
	}
}
 800087e:	e006      	b.n	800088e <toggle_green+0x2a>
		off_all_leds_road_1();
 8000880:	f7ff ff2c 	bl	80006dc <off_all_leds_road_1>
		off_all_leds_road_2();
 8000884:	f7ff ff3e 	bl	8000704 <off_all_leds_road_2>
		toggle_flag = 0;
 8000888:	4b02      	ldr	r3, [pc, #8]	; (8000894 <toggle_green+0x30>)
 800088a:	2200      	movs	r2, #0
 800088c:	601a      	str	r2, [r3, #0]
}
 800088e:	bf00      	nop
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	200000d4 	.word	0x200000d4

08000898 <off_pedestrian>:

void off_pedestrian(){
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (D6_PedLED_GPIO_Port, D6_PedLED_Pin, 0);
 800089c:	2200      	movs	r2, #0
 800089e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008a2:	4805      	ldr	r0, [pc, #20]	; (80008b8 <off_pedestrian+0x20>)
 80008a4:	f001 ff05 	bl	80026b2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (D7_PedLED_GPIO_Port, D7_PedLED_Pin, 0);
 80008a8:	2200      	movs	r2, #0
 80008aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008ae:	4803      	ldr	r0, [pc, #12]	; (80008bc <off_pedestrian+0x24>)
 80008b0:	f001 feff 	bl	80026b2 <HAL_GPIO_WritePin>
}
 80008b4:	bf00      	nop
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	40010c00 	.word	0x40010c00
 80008bc:	40010800 	.word	0x40010800

080008c0 <on_red_pedestrian>:
void on_red_pedestrian(){
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (D6_PedLED_GPIO_Port, D6_PedLED_Pin, 1);
 80008c4:	2201      	movs	r2, #1
 80008c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008ca:	4805      	ldr	r0, [pc, #20]	; (80008e0 <on_red_pedestrian+0x20>)
 80008cc:	f001 fef1 	bl	80026b2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (D7_PedLED_GPIO_Port, D7_PedLED_Pin, 0);
 80008d0:	2200      	movs	r2, #0
 80008d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008d6:	4803      	ldr	r0, [pc, #12]	; (80008e4 <on_red_pedestrian+0x24>)
 80008d8:	f001 feeb 	bl	80026b2 <HAL_GPIO_WritePin>
}
 80008dc:	bf00      	nop
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	40010c00 	.word	0x40010c00
 80008e4:	40010800 	.word	0x40010800

080008e8 <on_green_pedestrian>:
void on_green_pedestrian(){
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (D6_PedLED_GPIO_Port, D6_PedLED_Pin, 0);
 80008ec:	2200      	movs	r2, #0
 80008ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008f2:	4805      	ldr	r0, [pc, #20]	; (8000908 <on_green_pedestrian+0x20>)
 80008f4:	f001 fedd 	bl	80026b2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (D7_PedLED_GPIO_Port, D7_PedLED_Pin, 1);
 80008f8:	2201      	movs	r2, #1
 80008fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008fe:	4803      	ldr	r0, [pc, #12]	; (800090c <on_green_pedestrian+0x24>)
 8000900:	f001 fed7 	bl	80026b2 <HAL_GPIO_WritePin>
}
 8000904:	bf00      	nop
 8000906:	bd80      	pop	{r7, pc}
 8000908:	40010c00 	.word	0x40010c00
 800090c:	40010800 	.word	0x40010800

08000910 <pedestrian_buzzer_config>:

void pedestrian_buzzer_config(){
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
	switch (status) {
 8000914:	4b34      	ldr	r3, [pc, #208]	; (80009e8 <pedestrian_buzzer_config+0xd8>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	2b0b      	cmp	r3, #11
 800091a:	d862      	bhi.n	80009e2 <pedestrian_buzzer_config+0xd2>
 800091c:	a201      	add	r2, pc, #4	; (adr r2, 8000924 <pedestrian_buzzer_config+0x14>)
 800091e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000922:	bf00      	nop
 8000924:	08000955 	.word	0x08000955
 8000928:	0800095d 	.word	0x0800095d
 800092c:	08000973 	.word	0x08000973
 8000930:	08000989 	.word	0x08000989
 8000934:	080009a1 	.word	0x080009a1
 8000938:	080009b9 	.word	0x080009b9
 800093c:	080009e3 	.word	0x080009e3
 8000940:	080009e3 	.word	0x080009e3
 8000944:	080009c7 	.word	0x080009c7
 8000948:	080009e3 	.word	0x080009e3
 800094c:	080009e3 	.word	0x080009e3
 8000950:	080009d5 	.word	0x080009d5
			case MODE1:
				buzzer(0);
 8000954:	2000      	movs	r0, #0
 8000956:	f000 fb01 	bl	8000f5c <buzzer>
				break;
 800095a:	e043      	b.n	80009e4 <pedestrian_buzzer_config+0xd4>
			case RED_GREEN:
				if(curr_ped_status==PED_ON){
 800095c:	4b23      	ldr	r3, [pc, #140]	; (80009ec <pedestrian_buzzer_config+0xdc>)
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	2b00      	cmp	r3, #0
 8000962:	d102      	bne.n	800096a <pedestrian_buzzer_config+0x5a>
					set_buzzer();
 8000964:	f000 f844 	bl	80009f0 <set_buzzer>
					break;
 8000968:	e03c      	b.n	80009e4 <pedestrian_buzzer_config+0xd4>
				}
				buzzer(0);
 800096a:	2000      	movs	r0, #0
 800096c:	f000 faf6 	bl	8000f5c <buzzer>
				break;
 8000970:	e038      	b.n	80009e4 <pedestrian_buzzer_config+0xd4>
			case RED_AMBER:
				if(curr_ped_status==PED_ON){
 8000972:	4b1e      	ldr	r3, [pc, #120]	; (80009ec <pedestrian_buzzer_config+0xdc>)
 8000974:	781b      	ldrb	r3, [r3, #0]
 8000976:	2b00      	cmp	r3, #0
 8000978:	d102      	bne.n	8000980 <pedestrian_buzzer_config+0x70>
					set_buzzer();
 800097a:	f000 f839 	bl	80009f0 <set_buzzer>
					break;
 800097e:	e031      	b.n	80009e4 <pedestrian_buzzer_config+0xd4>
				}
				buzzer(0);
 8000980:	2000      	movs	r0, #0
 8000982:	f000 faeb 	bl	8000f5c <buzzer>
				break;
 8000986:	e02d      	b.n	80009e4 <pedestrian_buzzer_config+0xd4>
			case GREEN_RED:
				if(curr_ped_status==PED_ON){
 8000988:	4b18      	ldr	r3, [pc, #96]	; (80009ec <pedestrian_buzzer_config+0xdc>)
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	2b00      	cmp	r3, #0
 800098e:	d103      	bne.n	8000998 <pedestrian_buzzer_config+0x88>
					buzzer(0);
 8000990:	2000      	movs	r0, #0
 8000992:	f000 fae3 	bl	8000f5c <buzzer>
					break;
 8000996:	e025      	b.n	80009e4 <pedestrian_buzzer_config+0xd4>
				}
				buzzer(0);
 8000998:	2000      	movs	r0, #0
 800099a:	f000 fadf 	bl	8000f5c <buzzer>
				break;
 800099e:	e021      	b.n	80009e4 <pedestrian_buzzer_config+0xd4>
			case AMBER_RED:
				if(curr_ped_status==PED_ON){
 80009a0:	4b12      	ldr	r3, [pc, #72]	; (80009ec <pedestrian_buzzer_config+0xdc>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d103      	bne.n	80009b0 <pedestrian_buzzer_config+0xa0>
					buzzer(0);
 80009a8:	2000      	movs	r0, #0
 80009aa:	f000 fad7 	bl	8000f5c <buzzer>
					break;
 80009ae:	e019      	b.n	80009e4 <pedestrian_buzzer_config+0xd4>
				}
				buzzer(0);
 80009b0:	2000      	movs	r0, #0
 80009b2:	f000 fad3 	bl	8000f5c <buzzer>
				break;
 80009b6:	e015      	b.n	80009e4 <pedestrian_buzzer_config+0xd4>
			case MODE2:
				curr_ped_status=PED_OFF;
 80009b8:	4b0c      	ldr	r3, [pc, #48]	; (80009ec <pedestrian_buzzer_config+0xdc>)
 80009ba:	2201      	movs	r2, #1
 80009bc:	701a      	strb	r2, [r3, #0]
				buzzer(0);
 80009be:	2000      	movs	r0, #0
 80009c0:	f000 facc 	bl	8000f5c <buzzer>
				break;
 80009c4:	e00e      	b.n	80009e4 <pedestrian_buzzer_config+0xd4>
			case MODE3:
				curr_ped_status=PED_OFF;
 80009c6:	4b09      	ldr	r3, [pc, #36]	; (80009ec <pedestrian_buzzer_config+0xdc>)
 80009c8:	2201      	movs	r2, #1
 80009ca:	701a      	strb	r2, [r3, #0]
				buzzer(0);
 80009cc:	2000      	movs	r0, #0
 80009ce:	f000 fac5 	bl	8000f5c <buzzer>
				break;
 80009d2:	e007      	b.n	80009e4 <pedestrian_buzzer_config+0xd4>
			case MODE4:
				curr_ped_status=PED_OFF;
 80009d4:	4b05      	ldr	r3, [pc, #20]	; (80009ec <pedestrian_buzzer_config+0xdc>)
 80009d6:	2201      	movs	r2, #1
 80009d8:	701a      	strb	r2, [r3, #0]
				buzzer(0);
 80009da:	2000      	movs	r0, #0
 80009dc:	f000 fabe 	bl	8000f5c <buzzer>
				break;
 80009e0:	e000      	b.n	80009e4 <pedestrian_buzzer_config+0xd4>
			default:
				break;
 80009e2:	bf00      	nop
		}
}
 80009e4:	bf00      	nop
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	2000000c 	.word	0x2000000c
 80009ec:	20000010 	.word	0x20000010

080009f0 <set_buzzer>:


void set_buzzer(){
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
//	setTimer6(500);
	if (timer6_flag == 1){
 80009f4:	4b0e      	ldr	r3, [pc, #56]	; (8000a30 <set_buzzer+0x40>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	2b01      	cmp	r3, #1
 80009fa:	d117      	bne.n	8000a2c <set_buzzer+0x3c>
		setTimer6(buzzer_period);
 80009fc:	4b0d      	ldr	r3, [pc, #52]	; (8000a34 <set_buzzer+0x44>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4618      	mov	r0, r3
 8000a02:	f001 f917 	bl	8001c34 <setTimer6>
		if (buzzer_flag == 0){
 8000a06:	4b0c      	ldr	r3, [pc, #48]	; (8000a38 <set_buzzer+0x48>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d108      	bne.n	8000a20 <set_buzzer+0x30>
			buzzer(volume);
 8000a0e:	4b0b      	ldr	r3, [pc, #44]	; (8000a3c <set_buzzer+0x4c>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	4618      	mov	r0, r3
 8000a14:	f000 faa2 	bl	8000f5c <buzzer>
			buzzer_flag = 1;
 8000a18:	4b07      	ldr	r3, [pc, #28]	; (8000a38 <set_buzzer+0x48>)
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	601a      	str	r2, [r3, #0]
		}else {
			buzzer(0);
			buzzer_flag = 0;
		}
	}
}
 8000a1e:	e005      	b.n	8000a2c <set_buzzer+0x3c>
			buzzer(0);
 8000a20:	2000      	movs	r0, #0
 8000a22:	f000 fa9b 	bl	8000f5c <buzzer>
			buzzer_flag = 0;
 8000a26:	4b04      	ldr	r3, [pc, #16]	; (8000a38 <set_buzzer+0x48>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	601a      	str	r2, [r3, #0]
}
 8000a2c:	bf00      	nop
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	200001f8 	.word	0x200001f8
 8000a34:	20000014 	.word	0x20000014
 8000a38:	200000d8 	.word	0x200000d8
 8000a3c:	20000018 	.word	0x20000018

08000a40 <fsm_button_processing>:
enum ButtonState button_0_state = BUTTON_PRESSED;
enum ButtonState button_1_state = BUTTON_PRESSED;
enum ButtonState button_2_state = BUTTON_PRESSED;
enum ButtonState button_3_state = BUTTON_PRESSED;

void fsm_button_processing() {
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
/*	if(timer5_flag==1){
		timer5_flag=0;
		curr_ped_status=PED_OFF;
	}*/
	switch (button_0_state) {
 8000a44:	4b9b      	ldr	r3, [pc, #620]	; (8000cb4 <fsm_button_processing+0x274>)
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	2b02      	cmp	r3, #2
 8000a4a:	d03f      	beq.n	8000acc <fsm_button_processing+0x8c>
 8000a4c:	2b02      	cmp	r3, #2
 8000a4e:	dc4c      	bgt.n	8000aea <fsm_button_processing+0xaa>
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d002      	beq.n	8000a5a <fsm_button_processing+0x1a>
 8000a54:	2b01      	cmp	r3, #1
 8000a56:	d025      	beq.n	8000aa4 <fsm_button_processing+0x64>
 8000a58:	e047      	b.n	8000aea <fsm_button_processing+0xaa>
			case BUTTON_RELEASED:
				if (is_button_pressed(0)) {
 8000a5a:	2000      	movs	r0, #0
 8000a5c:	f000 fa4a 	bl	8000ef4 <is_button_pressed>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d03c      	beq.n	8000ae0 <fsm_button_processing+0xa0>
					button_0_state = BUTTON_PRESSED;
 8000a66:	4b93      	ldr	r3, [pc, #588]	; (8000cb4 <fsm_button_processing+0x274>)
 8000a68:	2201      	movs	r2, #1
 8000a6a:	701a      	strb	r2, [r3, #0]
					if(curr_ped_status==PED_OFF&&(status==MODE1||status==RED_GREEN||status==RED_AMBER||status==GREEN_RED||status==AMBER_RED)){
 8000a6c:	4b92      	ldr	r3, [pc, #584]	; (8000cb8 <fsm_button_processing+0x278>)
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	2b01      	cmp	r3, #1
 8000a72:	d135      	bne.n	8000ae0 <fsm_button_processing+0xa0>
 8000a74:	4b91      	ldr	r3, [pc, #580]	; (8000cbc <fsm_button_processing+0x27c>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d00f      	beq.n	8000a9c <fsm_button_processing+0x5c>
 8000a7c:	4b8f      	ldr	r3, [pc, #572]	; (8000cbc <fsm_button_processing+0x27c>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	2b01      	cmp	r3, #1
 8000a82:	d00b      	beq.n	8000a9c <fsm_button_processing+0x5c>
 8000a84:	4b8d      	ldr	r3, [pc, #564]	; (8000cbc <fsm_button_processing+0x27c>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	2b02      	cmp	r3, #2
 8000a8a:	d007      	beq.n	8000a9c <fsm_button_processing+0x5c>
 8000a8c:	4b8b      	ldr	r3, [pc, #556]	; (8000cbc <fsm_button_processing+0x27c>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	2b03      	cmp	r3, #3
 8000a92:	d003      	beq.n	8000a9c <fsm_button_processing+0x5c>
 8000a94:	4b89      	ldr	r3, [pc, #548]	; (8000cbc <fsm_button_processing+0x27c>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	2b04      	cmp	r3, #4
 8000a9a:	d121      	bne.n	8000ae0 <fsm_button_processing+0xa0>
						curr_ped_status=PED_ON;
 8000a9c:	4b86      	ldr	r3, [pc, #536]	; (8000cb8 <fsm_button_processing+0x278>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	701a      	strb	r2, [r3, #0]
						//setTimer5(10*1000);
					}
				}
				break;
 8000aa2:	e01d      	b.n	8000ae0 <fsm_button_processing+0xa0>
			case BUTTON_PRESSED:
				if (!is_button_pressed(0)) {
 8000aa4:	2000      	movs	r0, #0
 8000aa6:	f000 fa25 	bl	8000ef4 <is_button_pressed>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d103      	bne.n	8000ab8 <fsm_button_processing+0x78>
					button_0_state = BUTTON_RELEASED;
 8000ab0:	4b80      	ldr	r3, [pc, #512]	; (8000cb4 <fsm_button_processing+0x274>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	701a      	strb	r2, [r3, #0]
				} else {
					if (is_button_pressed_1s(0)) {
						button_0_state = BUTTON_PRESSED_MORE_THAN_1_SECOND;
					}
				}
				break;
 8000ab6:	e015      	b.n	8000ae4 <fsm_button_processing+0xa4>
					if (is_button_pressed_1s(0)) {
 8000ab8:	2000      	movs	r0, #0
 8000aba:	f000 fa35 	bl	8000f28 <is_button_pressed_1s>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d00f      	beq.n	8000ae4 <fsm_button_processing+0xa4>
						button_0_state = BUTTON_PRESSED_MORE_THAN_1_SECOND;
 8000ac4:	4b7b      	ldr	r3, [pc, #492]	; (8000cb4 <fsm_button_processing+0x274>)
 8000ac6:	2202      	movs	r2, #2
 8000ac8:	701a      	strb	r2, [r3, #0]
				break;
 8000aca:	e00b      	b.n	8000ae4 <fsm_button_processing+0xa4>
			case BUTTON_PRESSED_MORE_THAN_1_SECOND:
				if (!is_button_pressed(0)) {
 8000acc:	2000      	movs	r0, #0
 8000ace:	f000 fa11 	bl	8000ef4 <is_button_pressed>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d107      	bne.n	8000ae8 <fsm_button_processing+0xa8>
					button_0_state = BUTTON_RELEASED;
 8000ad8:	4b76      	ldr	r3, [pc, #472]	; (8000cb4 <fsm_button_processing+0x274>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	701a      	strb	r2, [r3, #0]
				}
				// do nothing, wait for the button to be released
				break;
 8000ade:	e003      	b.n	8000ae8 <fsm_button_processing+0xa8>
				break;
 8000ae0:	bf00      	nop
 8000ae2:	e002      	b.n	8000aea <fsm_button_processing+0xaa>
				break;
 8000ae4:	bf00      	nop
 8000ae6:	e000      	b.n	8000aea <fsm_button_processing+0xaa>
				break;
 8000ae8:	bf00      	nop
		}
	switch (button_1_state) {
 8000aea:	4b75      	ldr	r3, [pc, #468]	; (8000cc0 <fsm_button_processing+0x280>)
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	2b02      	cmp	r3, #2
 8000af0:	d040      	beq.n	8000b74 <fsm_button_processing+0x134>
 8000af2:	2b02      	cmp	r3, #2
 8000af4:	dc4d      	bgt.n	8000b92 <fsm_button_processing+0x152>
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d002      	beq.n	8000b00 <fsm_button_processing+0xc0>
 8000afa:	2b01      	cmp	r3, #1
 8000afc:	d026      	beq.n	8000b4c <fsm_button_processing+0x10c>
 8000afe:	e048      	b.n	8000b92 <fsm_button_processing+0x152>
		case BUTTON_RELEASED:
			if (is_button_pressed(1)) {
 8000b00:	2001      	movs	r0, #1
 8000b02:	f000 f9f7 	bl	8000ef4 <is_button_pressed>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d03d      	beq.n	8000b88 <fsm_button_processing+0x148>
				button_1_state = BUTTON_PRESSED;
 8000b0c:	4b6c      	ldr	r3, [pc, #432]	; (8000cc0 <fsm_button_processing+0x280>)
 8000b0e:	2201      	movs	r2, #1
 8000b10:	701a      	strb	r2, [r3, #0]
				if (status == RED_GREEN)	status = MODE2;
 8000b12:	4b6a      	ldr	r3, [pc, #424]	; (8000cbc <fsm_button_processing+0x27c>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	2b01      	cmp	r3, #1
 8000b18:	d102      	bne.n	8000b20 <fsm_button_processing+0xe0>
 8000b1a:	4b68      	ldr	r3, [pc, #416]	; (8000cbc <fsm_button_processing+0x27c>)
 8000b1c:	2205      	movs	r2, #5
 8000b1e:	601a      	str	r2, [r3, #0]
				if (status == AUTO_RED) 	status = MODE3;
 8000b20:	4b66      	ldr	r3, [pc, #408]	; (8000cbc <fsm_button_processing+0x27c>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	2b06      	cmp	r3, #6
 8000b26:	d102      	bne.n	8000b2e <fsm_button_processing+0xee>
 8000b28:	4b64      	ldr	r3, [pc, #400]	; (8000cbc <fsm_button_processing+0x27c>)
 8000b2a:	2208      	movs	r2, #8
 8000b2c:	601a      	str	r2, [r3, #0]
				if (status == AUTO_AMBER) 	status = MODE4;
 8000b2e:	4b63      	ldr	r3, [pc, #396]	; (8000cbc <fsm_button_processing+0x27c>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	2b09      	cmp	r3, #9
 8000b34:	d102      	bne.n	8000b3c <fsm_button_processing+0xfc>
 8000b36:	4b61      	ldr	r3, [pc, #388]	; (8000cbc <fsm_button_processing+0x27c>)
 8000b38:	220b      	movs	r2, #11
 8000b3a:	601a      	str	r2, [r3, #0]
				if (status == AUTO_GREEN) 	status = MODE1;
 8000b3c:	4b5f      	ldr	r3, [pc, #380]	; (8000cbc <fsm_button_processing+0x27c>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	2b0c      	cmp	r3, #12
 8000b42:	d121      	bne.n	8000b88 <fsm_button_processing+0x148>
 8000b44:	4b5d      	ldr	r3, [pc, #372]	; (8000cbc <fsm_button_processing+0x27c>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	601a      	str	r2, [r3, #0]
			}
			break;
 8000b4a:	e01d      	b.n	8000b88 <fsm_button_processing+0x148>
		case BUTTON_PRESSED:
			if (!is_button_pressed(1)) {
 8000b4c:	2001      	movs	r0, #1
 8000b4e:	f000 f9d1 	bl	8000ef4 <is_button_pressed>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d103      	bne.n	8000b60 <fsm_button_processing+0x120>
				button_1_state = BUTTON_RELEASED;
 8000b58:	4b59      	ldr	r3, [pc, #356]	; (8000cc0 <fsm_button_processing+0x280>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	701a      	strb	r2, [r3, #0]
			} else {
				if (is_button_pressed_1s(1)) {
					button_1_state = BUTTON_PRESSED_MORE_THAN_1_SECOND;
				}
			}
			break;
 8000b5e:	e015      	b.n	8000b8c <fsm_button_processing+0x14c>
				if (is_button_pressed_1s(1)) {
 8000b60:	2001      	movs	r0, #1
 8000b62:	f000 f9e1 	bl	8000f28 <is_button_pressed_1s>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d00f      	beq.n	8000b8c <fsm_button_processing+0x14c>
					button_1_state = BUTTON_PRESSED_MORE_THAN_1_SECOND;
 8000b6c:	4b54      	ldr	r3, [pc, #336]	; (8000cc0 <fsm_button_processing+0x280>)
 8000b6e:	2202      	movs	r2, #2
 8000b70:	701a      	strb	r2, [r3, #0]
			break;
 8000b72:	e00b      	b.n	8000b8c <fsm_button_processing+0x14c>
		case BUTTON_PRESSED_MORE_THAN_1_SECOND:
			if (!is_button_pressed(1)) {
 8000b74:	2001      	movs	r0, #1
 8000b76:	f000 f9bd 	bl	8000ef4 <is_button_pressed>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d107      	bne.n	8000b90 <fsm_button_processing+0x150>
				button_1_state = BUTTON_RELEASED;
 8000b80:	4b4f      	ldr	r3, [pc, #316]	; (8000cc0 <fsm_button_processing+0x280>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	701a      	strb	r2, [r3, #0]
			}
			// do nothing, wait for the button to be released
			break;
 8000b86:	e003      	b.n	8000b90 <fsm_button_processing+0x150>
			break;
 8000b88:	bf00      	nop
 8000b8a:	e002      	b.n	8000b92 <fsm_button_processing+0x152>
			break;
 8000b8c:	bf00      	nop
 8000b8e:	e000      	b.n	8000b92 <fsm_button_processing+0x152>
			break;
 8000b90:	bf00      	nop
	}

	switch (button_2_state) {
 8000b92:	4b4c      	ldr	r3, [pc, #304]	; (8000cc4 <fsm_button_processing+0x284>)
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	2b02      	cmp	r3, #2
 8000b98:	d06f      	beq.n	8000c7a <fsm_button_processing+0x23a>
 8000b9a:	2b02      	cmp	r3, #2
 8000b9c:	dc7c      	bgt.n	8000c98 <fsm_button_processing+0x258>
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d002      	beq.n	8000ba8 <fsm_button_processing+0x168>
 8000ba2:	2b01      	cmp	r3, #1
 8000ba4:	d055      	beq.n	8000c52 <fsm_button_processing+0x212>
 8000ba6:	e077      	b.n	8000c98 <fsm_button_processing+0x258>
		case BUTTON_RELEASED:
			if (is_button_pressed(2)) {
 8000ba8:	2002      	movs	r0, #2
 8000baa:	f000 f9a3 	bl	8000ef4 <is_button_pressed>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d06c      	beq.n	8000c8e <fsm_button_processing+0x24e>
				button_2_state = BUTTON_PRESSED;
 8000bb4:	4b43      	ldr	r3, [pc, #268]	; (8000cc4 <fsm_button_processing+0x284>)
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	701a      	strb	r2, [r3, #0]
				if (status == AUTO_RED || status == ADJ_RED) {
 8000bba:	4b40      	ldr	r3, [pc, #256]	; (8000cbc <fsm_button_processing+0x27c>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	2b06      	cmp	r3, #6
 8000bc0:	d003      	beq.n	8000bca <fsm_button_processing+0x18a>
 8000bc2:	4b3e      	ldr	r3, [pc, #248]	; (8000cbc <fsm_button_processing+0x27c>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	2b07      	cmp	r3, #7
 8000bc8:	d110      	bne.n	8000bec <fsm_button_processing+0x1ac>
					status = ADJ_RED;
 8000bca:	4b3c      	ldr	r3, [pc, #240]	; (8000cbc <fsm_button_processing+0x27c>)
 8000bcc:	2207      	movs	r2, #7
 8000bce:	601a      	str	r2, [r3, #0]
					T_RED++;
 8000bd0:	4b3d      	ldr	r3, [pc, #244]	; (8000cc8 <fsm_button_processing+0x288>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	3301      	adds	r3, #1
 8000bd6:	4a3c      	ldr	r2, [pc, #240]	; (8000cc8 <fsm_button_processing+0x288>)
 8000bd8:	6013      	str	r3, [r2, #0]
					if (T_RED >= 99) T_RED = 1;
 8000bda:	4b3b      	ldr	r3, [pc, #236]	; (8000cc8 <fsm_button_processing+0x288>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	2b62      	cmp	r3, #98	; 0x62
 8000be0:	dd02      	ble.n	8000be8 <fsm_button_processing+0x1a8>
 8000be2:	4b39      	ldr	r3, [pc, #228]	; (8000cc8 <fsm_button_processing+0x288>)
 8000be4:	2201      	movs	r2, #1
 8000be6:	601a      	str	r2, [r3, #0]
					disp_t_red_uart();
 8000be8:	f001 f8d0 	bl	8001d8c <disp_t_red_uart>
				}
				if (status == AUTO_AMBER || status == ADJ_AMBER) {
 8000bec:	4b33      	ldr	r3, [pc, #204]	; (8000cbc <fsm_button_processing+0x27c>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	2b09      	cmp	r3, #9
 8000bf2:	d003      	beq.n	8000bfc <fsm_button_processing+0x1bc>
 8000bf4:	4b31      	ldr	r3, [pc, #196]	; (8000cbc <fsm_button_processing+0x27c>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	2b0a      	cmp	r3, #10
 8000bfa:	d110      	bne.n	8000c1e <fsm_button_processing+0x1de>
					status = ADJ_AMBER;
 8000bfc:	4b2f      	ldr	r3, [pc, #188]	; (8000cbc <fsm_button_processing+0x27c>)
 8000bfe:	220a      	movs	r2, #10
 8000c00:	601a      	str	r2, [r3, #0]
					T_AMBER++;
 8000c02:	4b32      	ldr	r3, [pc, #200]	; (8000ccc <fsm_button_processing+0x28c>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	3301      	adds	r3, #1
 8000c08:	4a30      	ldr	r2, [pc, #192]	; (8000ccc <fsm_button_processing+0x28c>)
 8000c0a:	6013      	str	r3, [r2, #0]
					if (T_AMBER >= 5) T_AMBER = 1;
 8000c0c:	4b2f      	ldr	r3, [pc, #188]	; (8000ccc <fsm_button_processing+0x28c>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	2b04      	cmp	r3, #4
 8000c12:	dd02      	ble.n	8000c1a <fsm_button_processing+0x1da>
 8000c14:	4b2d      	ldr	r3, [pc, #180]	; (8000ccc <fsm_button_processing+0x28c>)
 8000c16:	2201      	movs	r2, #1
 8000c18:	601a      	str	r2, [r3, #0]
					disp_t_amber_uart();
 8000c1a:	f001 f8db 	bl	8001dd4 <disp_t_amber_uart>
				}
				if (status == AUTO_GREEN || status == ADJ_GREEN) {
 8000c1e:	4b27      	ldr	r3, [pc, #156]	; (8000cbc <fsm_button_processing+0x27c>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	2b0c      	cmp	r3, #12
 8000c24:	d003      	beq.n	8000c2e <fsm_button_processing+0x1ee>
 8000c26:	4b25      	ldr	r3, [pc, #148]	; (8000cbc <fsm_button_processing+0x27c>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	2b0d      	cmp	r3, #13
 8000c2c:	d12f      	bne.n	8000c8e <fsm_button_processing+0x24e>
					status = ADJ_GREEN;
 8000c2e:	4b23      	ldr	r3, [pc, #140]	; (8000cbc <fsm_button_processing+0x27c>)
 8000c30:	220d      	movs	r2, #13
 8000c32:	601a      	str	r2, [r3, #0]
					T_GREEN++;
 8000c34:	4b26      	ldr	r3, [pc, #152]	; (8000cd0 <fsm_button_processing+0x290>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	3301      	adds	r3, #1
 8000c3a:	4a25      	ldr	r2, [pc, #148]	; (8000cd0 <fsm_button_processing+0x290>)
 8000c3c:	6013      	str	r3, [r2, #0]
					if (T_GREEN >= 99) T_GREEN = 1;
 8000c3e:	4b24      	ldr	r3, [pc, #144]	; (8000cd0 <fsm_button_processing+0x290>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	2b62      	cmp	r3, #98	; 0x62
 8000c44:	dd02      	ble.n	8000c4c <fsm_button_processing+0x20c>
 8000c46:	4b22      	ldr	r3, [pc, #136]	; (8000cd0 <fsm_button_processing+0x290>)
 8000c48:	2201      	movs	r2, #1
 8000c4a:	601a      	str	r2, [r3, #0]
					disp_t_green_uart();
 8000c4c:	f001 f8e6 	bl	8001e1c <disp_t_green_uart>
				}
			}
			break;
 8000c50:	e01d      	b.n	8000c8e <fsm_button_processing+0x24e>
		case BUTTON_PRESSED:
			if (!is_button_pressed(2)) {
 8000c52:	2002      	movs	r0, #2
 8000c54:	f000 f94e 	bl	8000ef4 <is_button_pressed>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d103      	bne.n	8000c66 <fsm_button_processing+0x226>
				button_2_state = BUTTON_RELEASED;
 8000c5e:	4b19      	ldr	r3, [pc, #100]	; (8000cc4 <fsm_button_processing+0x284>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	701a      	strb	r2, [r3, #0]
			} else {
				if (is_button_pressed_1s(2)) {
					button_2_state = BUTTON_PRESSED_MORE_THAN_1_SECOND;
				}
			}
			break;
 8000c64:	e015      	b.n	8000c92 <fsm_button_processing+0x252>
				if (is_button_pressed_1s(2)) {
 8000c66:	2002      	movs	r0, #2
 8000c68:	f000 f95e 	bl	8000f28 <is_button_pressed_1s>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d00f      	beq.n	8000c92 <fsm_button_processing+0x252>
					button_2_state = BUTTON_PRESSED_MORE_THAN_1_SECOND;
 8000c72:	4b14      	ldr	r3, [pc, #80]	; (8000cc4 <fsm_button_processing+0x284>)
 8000c74:	2202      	movs	r2, #2
 8000c76:	701a      	strb	r2, [r3, #0]
			break;
 8000c78:	e00b      	b.n	8000c92 <fsm_button_processing+0x252>
		case BUTTON_PRESSED_MORE_THAN_1_SECOND:
			if (!is_button_pressed(2)) {
 8000c7a:	2002      	movs	r0, #2
 8000c7c:	f000 f93a 	bl	8000ef4 <is_button_pressed>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d107      	bne.n	8000c96 <fsm_button_processing+0x256>
				button_2_state = BUTTON_RELEASED;
 8000c86:	4b0f      	ldr	r3, [pc, #60]	; (8000cc4 <fsm_button_processing+0x284>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	701a      	strb	r2, [r3, #0]
			}
			// do nothing, wait for the button to be released
			break;
 8000c8c:	e003      	b.n	8000c96 <fsm_button_processing+0x256>
			break;
 8000c8e:	bf00      	nop
 8000c90:	e002      	b.n	8000c98 <fsm_button_processing+0x258>
			break;
 8000c92:	bf00      	nop
 8000c94:	e000      	b.n	8000c98 <fsm_button_processing+0x258>
			break;
 8000c96:	bf00      	nop
	}

	switch (button_3_state) {
 8000c98:	4b0e      	ldr	r3, [pc, #56]	; (8000cd4 <fsm_button_processing+0x294>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	2b02      	cmp	r3, #2
 8000c9e:	f000 8092 	beq.w	8000dc6 <fsm_button_processing+0x386>
 8000ca2:	2b02      	cmp	r3, #2
 8000ca4:	f300 809e 	bgt.w	8000de4 <fsm_button_processing+0x3a4>
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d015      	beq.n	8000cd8 <fsm_button_processing+0x298>
 8000cac:	2b01      	cmp	r3, #1
 8000cae:	d076      	beq.n	8000d9e <fsm_button_processing+0x35e>
				button_3_state = BUTTON_RELEASED;
			}
			// do nothing, wait for the button to be released
			break;
	}
}
 8000cb0:	e098      	b.n	8000de4 <fsm_button_processing+0x3a4>
 8000cb2:	bf00      	nop
 8000cb4:	2000001c 	.word	0x2000001c
 8000cb8:	20000010 	.word	0x20000010
 8000cbc:	2000000c 	.word	0x2000000c
 8000cc0:	2000001d 	.word	0x2000001d
 8000cc4:	2000001e 	.word	0x2000001e
 8000cc8:	20000000 	.word	0x20000000
 8000ccc:	20000004 	.word	0x20000004
 8000cd0:	20000008 	.word	0x20000008
 8000cd4:	2000001f 	.word	0x2000001f
			if (is_button_pressed(3)) {
 8000cd8:	2003      	movs	r0, #3
 8000cda:	f000 f90b 	bl	8000ef4 <is_button_pressed>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d07a      	beq.n	8000dda <fsm_button_processing+0x39a>
				button_3_state = BUTTON_PRESSED;
 8000ce4:	4b40      	ldr	r3, [pc, #256]	; (8000de8 <fsm_button_processing+0x3a8>)
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	701a      	strb	r2, [r3, #0]
				if (status == ADJ_RED) {
 8000cea:	4b40      	ldr	r3, [pc, #256]	; (8000dec <fsm_button_processing+0x3ac>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	2b07      	cmp	r3, #7
 8000cf0:	d114      	bne.n	8000d1c <fsm_button_processing+0x2dc>
					status = AUTO_RED;
 8000cf2:	4b3e      	ldr	r3, [pc, #248]	; (8000dec <fsm_button_processing+0x3ac>)
 8000cf4:	2206      	movs	r2, #6
 8000cf6:	601a      	str	r2, [r3, #0]
					if (T_RED <= T_AMBER) T_RED = T_AMBER + 1;
 8000cf8:	4b3d      	ldr	r3, [pc, #244]	; (8000df0 <fsm_button_processing+0x3b0>)
 8000cfa:	681a      	ldr	r2, [r3, #0]
 8000cfc:	4b3d      	ldr	r3, [pc, #244]	; (8000df4 <fsm_button_processing+0x3b4>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	429a      	cmp	r2, r3
 8000d02:	dc04      	bgt.n	8000d0e <fsm_button_processing+0x2ce>
 8000d04:	4b3b      	ldr	r3, [pc, #236]	; (8000df4 <fsm_button_processing+0x3b4>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	3301      	adds	r3, #1
 8000d0a:	4a39      	ldr	r2, [pc, #228]	; (8000df0 <fsm_button_processing+0x3b0>)
 8000d0c:	6013      	str	r3, [r2, #0]
					T_GREEN = T_RED - T_AMBER;
 8000d0e:	4b38      	ldr	r3, [pc, #224]	; (8000df0 <fsm_button_processing+0x3b0>)
 8000d10:	681a      	ldr	r2, [r3, #0]
 8000d12:	4b38      	ldr	r3, [pc, #224]	; (8000df4 <fsm_button_processing+0x3b4>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	1ad3      	subs	r3, r2, r3
 8000d18:	4a37      	ldr	r2, [pc, #220]	; (8000df8 <fsm_button_processing+0x3b8>)
 8000d1a:	6013      	str	r3, [r2, #0]
				if (status == ADJ_AMBER) {
 8000d1c:	4b33      	ldr	r3, [pc, #204]	; (8000dec <fsm_button_processing+0x3ac>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	2b0a      	cmp	r3, #10
 8000d22:	d114      	bne.n	8000d4e <fsm_button_processing+0x30e>
					status = AUTO_AMBER;
 8000d24:	4b31      	ldr	r3, [pc, #196]	; (8000dec <fsm_button_processing+0x3ac>)
 8000d26:	2209      	movs	r2, #9
 8000d28:	601a      	str	r2, [r3, #0]
					if (T_RED <= T_AMBER) T_RED = T_AMBER + 1;
 8000d2a:	4b31      	ldr	r3, [pc, #196]	; (8000df0 <fsm_button_processing+0x3b0>)
 8000d2c:	681a      	ldr	r2, [r3, #0]
 8000d2e:	4b31      	ldr	r3, [pc, #196]	; (8000df4 <fsm_button_processing+0x3b4>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	429a      	cmp	r2, r3
 8000d34:	dc04      	bgt.n	8000d40 <fsm_button_processing+0x300>
 8000d36:	4b2f      	ldr	r3, [pc, #188]	; (8000df4 <fsm_button_processing+0x3b4>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	3301      	adds	r3, #1
 8000d3c:	4a2c      	ldr	r2, [pc, #176]	; (8000df0 <fsm_button_processing+0x3b0>)
 8000d3e:	6013      	str	r3, [r2, #0]
					T_GREEN = T_RED - T_AMBER;
 8000d40:	4b2b      	ldr	r3, [pc, #172]	; (8000df0 <fsm_button_processing+0x3b0>)
 8000d42:	681a      	ldr	r2, [r3, #0]
 8000d44:	4b2b      	ldr	r3, [pc, #172]	; (8000df4 <fsm_button_processing+0x3b4>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	1ad3      	subs	r3, r2, r3
 8000d4a:	4a2b      	ldr	r2, [pc, #172]	; (8000df8 <fsm_button_processing+0x3b8>)
 8000d4c:	6013      	str	r3, [r2, #0]
				if (status == ADJ_GREEN) {
 8000d4e:	4b27      	ldr	r3, [pc, #156]	; (8000dec <fsm_button_processing+0x3ac>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	2b0d      	cmp	r3, #13
 8000d54:	d116      	bne.n	8000d84 <fsm_button_processing+0x344>
					status = AUTO_GREEN;
 8000d56:	4b25      	ldr	r3, [pc, #148]	; (8000dec <fsm_button_processing+0x3ac>)
 8000d58:	220c      	movs	r2, #12
 8000d5a:	601a      	str	r2, [r3, #0]
					if (T_AMBER + T_GREEN >= 99) {
 8000d5c:	4b25      	ldr	r3, [pc, #148]	; (8000df4 <fsm_button_processing+0x3b4>)
 8000d5e:	681a      	ldr	r2, [r3, #0]
 8000d60:	4b25      	ldr	r3, [pc, #148]	; (8000df8 <fsm_button_processing+0x3b8>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4413      	add	r3, r2
 8000d66:	2b62      	cmp	r3, #98	; 0x62
 8000d68:	dd05      	ble.n	8000d76 <fsm_button_processing+0x336>
						T_AMBER = 4;
 8000d6a:	4b22      	ldr	r3, [pc, #136]	; (8000df4 <fsm_button_processing+0x3b4>)
 8000d6c:	2204      	movs	r2, #4
 8000d6e:	601a      	str	r2, [r3, #0]
						T_GREEN = 95;
 8000d70:	4b21      	ldr	r3, [pc, #132]	; (8000df8 <fsm_button_processing+0x3b8>)
 8000d72:	225f      	movs	r2, #95	; 0x5f
 8000d74:	601a      	str	r2, [r3, #0]
					T_RED = T_AMBER + T_GREEN;
 8000d76:	4b1f      	ldr	r3, [pc, #124]	; (8000df4 <fsm_button_processing+0x3b4>)
 8000d78:	681a      	ldr	r2, [r3, #0]
 8000d7a:	4b1f      	ldr	r3, [pc, #124]	; (8000df8 <fsm_button_processing+0x3b8>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	4413      	add	r3, r2
 8000d80:	4a1b      	ldr	r2, [pc, #108]	; (8000df0 <fsm_button_processing+0x3b0>)
 8000d82:	6013      	str	r3, [r2, #0]
				HAL_UART_Transmit(&huart2, "!SAVED#\n\r", 11, 50);
 8000d84:	2332      	movs	r3, #50	; 0x32
 8000d86:	220b      	movs	r2, #11
 8000d88:	491c      	ldr	r1, [pc, #112]	; (8000dfc <fsm_button_processing+0x3bc>)
 8000d8a:	481d      	ldr	r0, [pc, #116]	; (8000e00 <fsm_button_processing+0x3c0>)
 8000d8c:	f003 f86e 	bl	8003e6c <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart2, "\n\r", 4, 50);
 8000d90:	2332      	movs	r3, #50	; 0x32
 8000d92:	2204      	movs	r2, #4
 8000d94:	491b      	ldr	r1, [pc, #108]	; (8000e04 <fsm_button_processing+0x3c4>)
 8000d96:	481a      	ldr	r0, [pc, #104]	; (8000e00 <fsm_button_processing+0x3c0>)
 8000d98:	f003 f868 	bl	8003e6c <HAL_UART_Transmit>
			break;
 8000d9c:	e01d      	b.n	8000dda <fsm_button_processing+0x39a>
			if (!is_button_pressed(3)) {
 8000d9e:	2003      	movs	r0, #3
 8000da0:	f000 f8a8 	bl	8000ef4 <is_button_pressed>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d103      	bne.n	8000db2 <fsm_button_processing+0x372>
				button_3_state = BUTTON_RELEASED;
 8000daa:	4b0f      	ldr	r3, [pc, #60]	; (8000de8 <fsm_button_processing+0x3a8>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	701a      	strb	r2, [r3, #0]
			break;
 8000db0:	e015      	b.n	8000dde <fsm_button_processing+0x39e>
				if (is_button_pressed_1s(3)) {
 8000db2:	2003      	movs	r0, #3
 8000db4:	f000 f8b8 	bl	8000f28 <is_button_pressed_1s>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d00f      	beq.n	8000dde <fsm_button_processing+0x39e>
					button_3_state = BUTTON_PRESSED_MORE_THAN_1_SECOND;
 8000dbe:	4b0a      	ldr	r3, [pc, #40]	; (8000de8 <fsm_button_processing+0x3a8>)
 8000dc0:	2202      	movs	r2, #2
 8000dc2:	701a      	strb	r2, [r3, #0]
			break;
 8000dc4:	e00b      	b.n	8000dde <fsm_button_processing+0x39e>
			if (!is_button_pressed(3)) {
 8000dc6:	2003      	movs	r0, #3
 8000dc8:	f000 f894 	bl	8000ef4 <is_button_pressed>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d107      	bne.n	8000de2 <fsm_button_processing+0x3a2>
				button_3_state = BUTTON_RELEASED;
 8000dd2:	4b05      	ldr	r3, [pc, #20]	; (8000de8 <fsm_button_processing+0x3a8>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	701a      	strb	r2, [r3, #0]
			break;
 8000dd8:	e003      	b.n	8000de2 <fsm_button_processing+0x3a2>
			break;
 8000dda:	bf00      	nop
 8000ddc:	e002      	b.n	8000de4 <fsm_button_processing+0x3a4>
			break;
 8000dde:	bf00      	nop
 8000de0:	e000      	b.n	8000de4 <fsm_button_processing+0x3a4>
			break;
 8000de2:	bf00      	nop
}
 8000de4:	bf00      	nop
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	2000001f 	.word	0x2000001f
 8000dec:	2000000c 	.word	0x2000000c
 8000df0:	20000000 	.word	0x20000000
 8000df4:	20000004 	.word	0x20000004
 8000df8:	20000008 	.word	0x20000008
 8000dfc:	08005354 	.word	0x08005354
 8000e00:	20000294 	.word	0x20000294
 8000e04:	08005360 	.word	0x08005360

08000e08 <button_reading>:
static uint16_t counterForButtonPress1s[N0_OF_BUTTONS];

static GPIO_TypeDef* button_ports[N0_OF_BUTTONS] = {A0_PedButton_GPIO_Port, A1_Button1_GPIO_Port, A2_Button2_GPIO_Port, A3_Button3_GPIO_Port};
static uint16_t button_pins[N0_OF_BUTTONS] = {A0_PedButton_Pin, A1_Button1_Pin, A2_Button2_Pin, A3_Button3_Pin};

void button_reading(void) {
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
	for (int i = 0; i < N0_OF_BUTTONS; i++) {
 8000e0e:	2300      	movs	r3, #0
 8000e10:	607b      	str	r3, [r7, #4]
 8000e12:	e058      	b.n	8000ec6 <button_reading+0xbe>
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 8000e14:	4a30      	ldr	r2, [pc, #192]	; (8000ed8 <button_reading+0xd0>)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	4413      	add	r3, r2
 8000e1a:	7819      	ldrb	r1, [r3, #0]
 8000e1c:	4a2f      	ldr	r2, [pc, #188]	; (8000edc <button_reading+0xd4>)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4413      	add	r3, r2
 8000e22:	460a      	mov	r2, r1
 8000e24:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(button_ports[i], button_pins[i]);
 8000e26:	4a2e      	ldr	r2, [pc, #184]	; (8000ee0 <button_reading+0xd8>)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000e2e:	492d      	ldr	r1, [pc, #180]	; (8000ee4 <button_reading+0xdc>)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000e36:	4619      	mov	r1, r3
 8000e38:	4610      	mov	r0, r2
 8000e3a:	f001 fc23 	bl	8002684 <HAL_GPIO_ReadPin>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	4619      	mov	r1, r3
 8000e42:	4a25      	ldr	r2, [pc, #148]	; (8000ed8 <button_reading+0xd0>)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	4413      	add	r3, r2
 8000e48:	460a      	mov	r2, r1
 8000e4a:	701a      	strb	r2, [r3, #0]

		if (debounceButtonBuffer1[i] == debounceButtonBuffer2[i])
 8000e4c:	4a22      	ldr	r2, [pc, #136]	; (8000ed8 <button_reading+0xd0>)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4413      	add	r3, r2
 8000e52:	781a      	ldrb	r2, [r3, #0]
 8000e54:	4921      	ldr	r1, [pc, #132]	; (8000edc <button_reading+0xd4>)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	440b      	add	r3, r1
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	429a      	cmp	r2, r3
 8000e5e:	d108      	bne.n	8000e72 <button_reading+0x6a>
			buttonBuffer[i] = debounceButtonBuffer1[i];
 8000e60:	4a1d      	ldr	r2, [pc, #116]	; (8000ed8 <button_reading+0xd0>)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	4413      	add	r3, r2
 8000e66:	7819      	ldrb	r1, [r3, #0]
 8000e68:	4a1f      	ldr	r2, [pc, #124]	; (8000ee8 <button_reading+0xe0>)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	4413      	add	r3, r2
 8000e6e:	460a      	mov	r2, r1
 8000e70:	701a      	strb	r2, [r3, #0]

		if (buttonBuffer[i] == BUTTON_IS_PRESSED) {
 8000e72:	4a1d      	ldr	r2, [pc, #116]	; (8000ee8 <button_reading+0xe0>)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	4413      	add	r3, r2
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d116      	bne.n	8000eac <button_reading+0xa4>
			//if a button is pressed, we start counting
			if (counterForButtonPress1s[i] < DURATION_FOR_AUTO_INCREASING) {
 8000e7e:	4a1b      	ldr	r2, [pc, #108]	; (8000eec <button_reading+0xe4>)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e86:	2b63      	cmp	r3, #99	; 0x63
 8000e88:	d80a      	bhi.n	8000ea0 <button_reading+0x98>
				counterForButtonPress1s[i]++;
 8000e8a:	4a18      	ldr	r2, [pc, #96]	; (8000eec <button_reading+0xe4>)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e92:	3301      	adds	r3, #1
 8000e94:	b299      	uxth	r1, r3
 8000e96:	4a15      	ldr	r2, [pc, #84]	; (8000eec <button_reading+0xe4>)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000e9e:	e00f      	b.n	8000ec0 <button_reading+0xb8>
			} else {
				//the flag is turned on when 1 second has passed
				//since the button is pressed.
				flagForButtonPress1s[i] = 1;
 8000ea0:	4a13      	ldr	r2, [pc, #76]	; (8000ef0 <button_reading+0xe8>)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	4413      	add	r3, r2
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	701a      	strb	r2, [r3, #0]
 8000eaa:	e009      	b.n	8000ec0 <button_reading+0xb8>
			}
		} else {
			counterForButtonPress1s[i] = 0;
 8000eac:	4a0f      	ldr	r2, [pc, #60]	; (8000eec <button_reading+0xe4>)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			flagForButtonPress1s[i] = 0;
 8000eb6:	4a0e      	ldr	r2, [pc, #56]	; (8000ef0 <button_reading+0xe8>)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	4413      	add	r3, r2
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < N0_OF_BUTTONS; i++) {
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	3301      	adds	r3, #1
 8000ec4:	607b      	str	r3, [r7, #4]
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2b03      	cmp	r3, #3
 8000eca:	dda3      	ble.n	8000e14 <button_reading+0xc>
		}
	}
}
 8000ecc:	bf00      	nop
 8000ece:	bf00      	nop
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	200000e0 	.word	0x200000e0
 8000edc:	200000e4 	.word	0x200000e4
 8000ee0:	20000020 	.word	0x20000020
 8000ee4:	20000030 	.word	0x20000030
 8000ee8:	200000dc 	.word	0x200000dc
 8000eec:	200000ec 	.word	0x200000ec
 8000ef0:	200000e8 	.word	0x200000e8

08000ef4 <is_button_pressed>:

unsigned char is_button_pressed(uint8_t index){
 8000ef4:	b480      	push	{r7}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	4603      	mov	r3, r0
 8000efc:	71fb      	strb	r3, [r7, #7]
	if (index >= N0_OF_BUTTONS) return 0;
 8000efe:	79fb      	ldrb	r3, [r7, #7]
 8000f00:	2b03      	cmp	r3, #3
 8000f02:	d901      	bls.n	8000f08 <is_button_pressed+0x14>
 8000f04:	2300      	movs	r3, #0
 8000f06:	e007      	b.n	8000f18 <is_button_pressed+0x24>
	return (buttonBuffer[index] == BUTTON_IS_PRESSED);
 8000f08:	79fb      	ldrb	r3, [r7, #7]
 8000f0a:	4a06      	ldr	r2, [pc, #24]	; (8000f24 <is_button_pressed+0x30>)
 8000f0c:	5cd3      	ldrb	r3, [r2, r3]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	bf0c      	ite	eq
 8000f12:	2301      	moveq	r3, #1
 8000f14:	2300      	movne	r3, #0
 8000f16:	b2db      	uxtb	r3, r3
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	370c      	adds	r7, #12
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bc80      	pop	{r7}
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	200000dc 	.word	0x200000dc

08000f28 <is_button_pressed_1s>:

unsigned char is_button_pressed_1s(unsigned char index){
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	4603      	mov	r3, r0
 8000f30:	71fb      	strb	r3, [r7, #7]
	if (index >= N0_OF_BUTTONS) return 0;
 8000f32:	79fb      	ldrb	r3, [r7, #7]
 8000f34:	2b03      	cmp	r3, #3
 8000f36:	d901      	bls.n	8000f3c <is_button_pressed_1s+0x14>
 8000f38:	2300      	movs	r3, #0
 8000f3a:	e007      	b.n	8000f4c <is_button_pressed_1s+0x24>
	return (flagForButtonPress1s[index] == 1);
 8000f3c:	79fb      	ldrb	r3, [r7, #7]
 8000f3e:	4a06      	ldr	r2, [pc, #24]	; (8000f58 <is_button_pressed_1s+0x30>)
 8000f40:	5cd3      	ldrb	r3, [r2, r3]
 8000f42:	2b01      	cmp	r3, #1
 8000f44:	bf0c      	ite	eq
 8000f46:	2301      	moveq	r3, #1
 8000f48:	2300      	movne	r3, #0
 8000f4a:	b2db      	uxtb	r3, r3
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	370c      	adds	r7, #12
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bc80      	pop	{r7}
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	200000e8 	.word	0x200000e8

08000f5c <buzzer>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void buzzer(int vol){
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, vol);
 8000f64:	4b04      	ldr	r3, [pc, #16]	; (8000f78 <buzzer+0x1c>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	687a      	ldr	r2, [r7, #4]
 8000f6a:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000f6c:	bf00      	nop
 8000f6e:	370c      	adds	r7, #12
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bc80      	pop	{r7}
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	20000204 	.word	0x20000204

08000f7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f80:	f000 ffda 	bl	8001f38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f84:	f000 f84e 	bl	8001024 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f88:	f000 f978 	bl	800127c <MX_GPIO_Init>
  MX_TIM2_Init();
 8000f8c:	f000 f88a 	bl	80010a4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000f90:	f000 f8d4 	bl	800113c <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000f94:	f000 f948 	bl	8001228 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000f98:	4819      	ldr	r0, [pc, #100]	; (8001000 <main+0x84>)
 8000f9a:	f002 f801 	bl	8002fa0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8000f9e:	4819      	ldr	r0, [pc, #100]	; (8001004 <main+0x88>)
 8000fa0:	f001 fffe 	bl	8002fa0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	4817      	ldr	r0, [pc, #92]	; (8001004 <main+0x88>)
 8000fa8:	f002 f8a4 	bl	80030f4 <HAL_TIM_PWM_Start>

  setTimer6(500);
 8000fac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000fb0:	f000 fe40 	bl	8001c34 <setTimer6>
  SCH_Add_Task(timer_run, 0, 1);
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	2100      	movs	r1, #0
 8000fb8:	4813      	ldr	r0, [pc, #76]	; (8001008 <main+0x8c>)
 8000fba:	f000 fa05 	bl	80013c8 <SCH_Add_Task>
  SCH_Add_Task(button_reading, 0, 1);
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	4812      	ldr	r0, [pc, #72]	; (800100c <main+0x90>)
 8000fc4:	f000 fa00 	bl	80013c8 <SCH_Add_Task>
  SCH_Add_Task(fsm_automatic, 0, 1);
 8000fc8:	2201      	movs	r2, #1
 8000fca:	2100      	movs	r1, #0
 8000fcc:	4810      	ldr	r0, [pc, #64]	; (8001010 <main+0x94>)
 8000fce:	f000 f9fb 	bl	80013c8 <SCH_Add_Task>
  SCH_Add_Task(fsm_red_manual, 0, 1);
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	480f      	ldr	r0, [pc, #60]	; (8001014 <main+0x98>)
 8000fd8:	f000 f9f6 	bl	80013c8 <SCH_Add_Task>
  SCH_Add_Task(fsm_amber_manual, 0, 1);
 8000fdc:	2201      	movs	r2, #1
 8000fde:	2100      	movs	r1, #0
 8000fe0:	480d      	ldr	r0, [pc, #52]	; (8001018 <main+0x9c>)
 8000fe2:	f000 f9f1 	bl	80013c8 <SCH_Add_Task>
  SCH_Add_Task(fsm_green_manual, 0, 1);
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	2100      	movs	r1, #0
 8000fea:	480c      	ldr	r0, [pc, #48]	; (800101c <main+0xa0>)
 8000fec:	f000 f9ec 	bl	80013c8 <SCH_Add_Task>
  SCH_Add_Task(fsm_button_processing, 0, 1);
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	480a      	ldr	r0, [pc, #40]	; (8001020 <main+0xa4>)
 8000ff6:	f000 f9e7 	bl	80013c8 <SCH_Add_Task>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  SCH_Dispatch_Tasks();
 8000ffa:	f000 fc2f 	bl	800185c <SCH_Dispatch_Tasks>
 8000ffe:	e7fc      	b.n	8000ffa <main+0x7e>
 8001000:	2000024c 	.word	0x2000024c
 8001004:	20000204 	.word	0x20000204
 8001008:	08001c69 	.word	0x08001c69
 800100c:	08000e09 	.word	0x08000e09
 8001010:	0800014d 	.word	0x0800014d
 8001014:	080003c1 	.word	0x080003c1
 8001018:	08000449 	.word	0x08000449
 800101c:	080004d1 	.word	0x080004d1
 8001020:	08000a41 	.word	0x08000a41

08001024 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b090      	sub	sp, #64	; 0x40
 8001028:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800102a:	f107 0318 	add.w	r3, r7, #24
 800102e:	2228      	movs	r2, #40	; 0x28
 8001030:	2100      	movs	r1, #0
 8001032:	4618      	mov	r0, r3
 8001034:	f003 fd18 	bl	8004a68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001038:	1d3b      	adds	r3, r7, #4
 800103a:	2200      	movs	r2, #0
 800103c:	601a      	str	r2, [r3, #0]
 800103e:	605a      	str	r2, [r3, #4]
 8001040:	609a      	str	r2, [r3, #8]
 8001042:	60da      	str	r2, [r3, #12]
 8001044:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001046:	2302      	movs	r3, #2
 8001048:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800104a:	2301      	movs	r3, #1
 800104c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800104e:	2310      	movs	r3, #16
 8001050:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001052:	2302      	movs	r3, #2
 8001054:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001056:	2300      	movs	r3, #0
 8001058:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 800105a:	2300      	movs	r3, #0
 800105c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800105e:	f107 0318 	add.w	r3, r7, #24
 8001062:	4618      	mov	r0, r3
 8001064:	f001 fb3e 	bl	80026e4 <HAL_RCC_OscConfig>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <SystemClock_Config+0x4e>
  {
    Error_Handler();
 800106e:	f000 f97d 	bl	800136c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001072:	230f      	movs	r3, #15
 8001074:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001076:	2302      	movs	r3, #2
 8001078:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800107a:	2300      	movs	r3, #0
 800107c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800107e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001082:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001084:	2300      	movs	r3, #0
 8001086:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001088:	1d3b      	adds	r3, r7, #4
 800108a:	2100      	movs	r1, #0
 800108c:	4618      	mov	r0, r3
 800108e:	f001 fda9 	bl	8002be4 <HAL_RCC_ClockConfig>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8001098:	f000 f968 	bl	800136c <Error_Handler>
  }
}
 800109c:	bf00      	nop
 800109e:	3740      	adds	r7, #64	; 0x40
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b086      	sub	sp, #24
 80010a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010aa:	f107 0308 	add.w	r3, r7, #8
 80010ae:	2200      	movs	r2, #0
 80010b0:	601a      	str	r2, [r3, #0]
 80010b2:	605a      	str	r2, [r3, #4]
 80010b4:	609a      	str	r2, [r3, #8]
 80010b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010b8:	463b      	mov	r3, r7
 80010ba:	2200      	movs	r2, #0
 80010bc:	601a      	str	r2, [r3, #0]
 80010be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010c0:	4b1d      	ldr	r3, [pc, #116]	; (8001138 <MX_TIM2_Init+0x94>)
 80010c2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010c6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80010c8:	4b1b      	ldr	r3, [pc, #108]	; (8001138 <MX_TIM2_Init+0x94>)
 80010ca:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80010ce:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010d0:	4b19      	ldr	r3, [pc, #100]	; (8001138 <MX_TIM2_Init+0x94>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80010d6:	4b18      	ldr	r3, [pc, #96]	; (8001138 <MX_TIM2_Init+0x94>)
 80010d8:	2209      	movs	r2, #9
 80010da:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010dc:	4b16      	ldr	r3, [pc, #88]	; (8001138 <MX_TIM2_Init+0x94>)
 80010de:	2200      	movs	r2, #0
 80010e0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010e2:	4b15      	ldr	r3, [pc, #84]	; (8001138 <MX_TIM2_Init+0x94>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010e8:	4813      	ldr	r0, [pc, #76]	; (8001138 <MX_TIM2_Init+0x94>)
 80010ea:	f001 ff09 	bl	8002f00 <HAL_TIM_Base_Init>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80010f4:	f000 f93a 	bl	800136c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010fc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010fe:	f107 0308 	add.w	r3, r7, #8
 8001102:	4619      	mov	r1, r3
 8001104:	480c      	ldr	r0, [pc, #48]	; (8001138 <MX_TIM2_Init+0x94>)
 8001106:	f002 fa61 	bl	80035cc <HAL_TIM_ConfigClockSource>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001110:	f000 f92c 	bl	800136c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001114:	2300      	movs	r3, #0
 8001116:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001118:	2300      	movs	r3, #0
 800111a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800111c:	463b      	mov	r3, r7
 800111e:	4619      	mov	r1, r3
 8001120:	4805      	ldr	r0, [pc, #20]	; (8001138 <MX_TIM2_Init+0x94>)
 8001122:	f002 fde3 	bl	8003cec <HAL_TIMEx_MasterConfigSynchronization>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800112c:	f000 f91e 	bl	800136c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001130:	bf00      	nop
 8001132:	3718      	adds	r7, #24
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	2000024c 	.word	0x2000024c

0800113c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b08e      	sub	sp, #56	; 0x38
 8001140:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001142:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001146:	2200      	movs	r2, #0
 8001148:	601a      	str	r2, [r3, #0]
 800114a:	605a      	str	r2, [r3, #4]
 800114c:	609a      	str	r2, [r3, #8]
 800114e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001150:	f107 0320 	add.w	r3, r7, #32
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800115a:	1d3b      	adds	r3, r7, #4
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	605a      	str	r2, [r3, #4]
 8001162:	609a      	str	r2, [r3, #8]
 8001164:	60da      	str	r2, [r3, #12]
 8001166:	611a      	str	r2, [r3, #16]
 8001168:	615a      	str	r2, [r3, #20]
 800116a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800116c:	4b2c      	ldr	r3, [pc, #176]	; (8001220 <MX_TIM3_Init+0xe4>)
 800116e:	4a2d      	ldr	r2, [pc, #180]	; (8001224 <MX_TIM3_Init+0xe8>)
 8001170:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7999;
 8001172:	4b2b      	ldr	r3, [pc, #172]	; (8001220 <MX_TIM3_Init+0xe4>)
 8001174:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001178:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800117a:	4b29      	ldr	r3, [pc, #164]	; (8001220 <MX_TIM3_Init+0xe4>)
 800117c:	2200      	movs	r2, #0
 800117e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9;
 8001180:	4b27      	ldr	r3, [pc, #156]	; (8001220 <MX_TIM3_Init+0xe4>)
 8001182:	2209      	movs	r2, #9
 8001184:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001186:	4b26      	ldr	r3, [pc, #152]	; (8001220 <MX_TIM3_Init+0xe4>)
 8001188:	2200      	movs	r2, #0
 800118a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800118c:	4b24      	ldr	r3, [pc, #144]	; (8001220 <MX_TIM3_Init+0xe4>)
 800118e:	2200      	movs	r2, #0
 8001190:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001192:	4823      	ldr	r0, [pc, #140]	; (8001220 <MX_TIM3_Init+0xe4>)
 8001194:	f001 feb4 	bl	8002f00 <HAL_TIM_Base_Init>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800119e:	f000 f8e5 	bl	800136c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011a6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80011a8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011ac:	4619      	mov	r1, r3
 80011ae:	481c      	ldr	r0, [pc, #112]	; (8001220 <MX_TIM3_Init+0xe4>)
 80011b0:	f002 fa0c 	bl	80035cc <HAL_TIM_ConfigClockSource>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80011ba:	f000 f8d7 	bl	800136c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80011be:	4818      	ldr	r0, [pc, #96]	; (8001220 <MX_TIM3_Init+0xe4>)
 80011c0:	f001 ff40 	bl	8003044 <HAL_TIM_PWM_Init>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80011ca:	f000 f8cf 	bl	800136c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011ce:	2300      	movs	r3, #0
 80011d0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011d2:	2300      	movs	r3, #0
 80011d4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011d6:	f107 0320 	add.w	r3, r7, #32
 80011da:	4619      	mov	r1, r3
 80011dc:	4810      	ldr	r0, [pc, #64]	; (8001220 <MX_TIM3_Init+0xe4>)
 80011de:	f002 fd85 	bl	8003cec <HAL_TIMEx_MasterConfigSynchronization>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80011e8:	f000 f8c0 	bl	800136c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011ec:	2360      	movs	r3, #96	; 0x60
 80011ee:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80011f0:	2300      	movs	r3, #0
 80011f2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011f4:	2300      	movs	r3, #0
 80011f6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011f8:	2300      	movs	r3, #0
 80011fa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011fc:	1d3b      	adds	r3, r7, #4
 80011fe:	2200      	movs	r2, #0
 8001200:	4619      	mov	r1, r3
 8001202:	4807      	ldr	r0, [pc, #28]	; (8001220 <MX_TIM3_Init+0xe4>)
 8001204:	f002 f920 	bl	8003448 <HAL_TIM_PWM_ConfigChannel>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800120e:	f000 f8ad 	bl	800136c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001212:	4803      	ldr	r0, [pc, #12]	; (8001220 <MX_TIM3_Init+0xe4>)
 8001214:	f000 fbd4 	bl	80019c0 <HAL_TIM_MspPostInit>

}
 8001218:	bf00      	nop
 800121a:	3738      	adds	r7, #56	; 0x38
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	20000204 	.word	0x20000204
 8001224:	40000400 	.word	0x40000400

08001228 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800122c:	4b11      	ldr	r3, [pc, #68]	; (8001274 <MX_USART2_UART_Init+0x4c>)
 800122e:	4a12      	ldr	r2, [pc, #72]	; (8001278 <MX_USART2_UART_Init+0x50>)
 8001230:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001232:	4b10      	ldr	r3, [pc, #64]	; (8001274 <MX_USART2_UART_Init+0x4c>)
 8001234:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001238:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800123a:	4b0e      	ldr	r3, [pc, #56]	; (8001274 <MX_USART2_UART_Init+0x4c>)
 800123c:	2200      	movs	r2, #0
 800123e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001240:	4b0c      	ldr	r3, [pc, #48]	; (8001274 <MX_USART2_UART_Init+0x4c>)
 8001242:	2200      	movs	r2, #0
 8001244:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001246:	4b0b      	ldr	r3, [pc, #44]	; (8001274 <MX_USART2_UART_Init+0x4c>)
 8001248:	2200      	movs	r2, #0
 800124a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800124c:	4b09      	ldr	r3, [pc, #36]	; (8001274 <MX_USART2_UART_Init+0x4c>)
 800124e:	220c      	movs	r2, #12
 8001250:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001252:	4b08      	ldr	r3, [pc, #32]	; (8001274 <MX_USART2_UART_Init+0x4c>)
 8001254:	2200      	movs	r2, #0
 8001256:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001258:	4b06      	ldr	r3, [pc, #24]	; (8001274 <MX_USART2_UART_Init+0x4c>)
 800125a:	2200      	movs	r2, #0
 800125c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800125e:	4805      	ldr	r0, [pc, #20]	; (8001274 <MX_USART2_UART_Init+0x4c>)
 8001260:	f002 fdb4 	bl	8003dcc <HAL_UART_Init>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800126a:	f000 f87f 	bl	800136c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800126e:	bf00      	nop
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	20000294 	.word	0x20000294
 8001278:	40004400 	.word	0x40004400

0800127c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b086      	sub	sp, #24
 8001280:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001282:	f107 0308 	add.w	r3, r7, #8
 8001286:	2200      	movs	r2, #0
 8001288:	601a      	str	r2, [r3, #0]
 800128a:	605a      	str	r2, [r3, #4]
 800128c:	609a      	str	r2, [r3, #8]
 800128e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001290:	4b2e      	ldr	r3, [pc, #184]	; (800134c <MX_GPIO_Init+0xd0>)
 8001292:	699b      	ldr	r3, [r3, #24]
 8001294:	4a2d      	ldr	r2, [pc, #180]	; (800134c <MX_GPIO_Init+0xd0>)
 8001296:	f043 0304 	orr.w	r3, r3, #4
 800129a:	6193      	str	r3, [r2, #24]
 800129c:	4b2b      	ldr	r3, [pc, #172]	; (800134c <MX_GPIO_Init+0xd0>)
 800129e:	699b      	ldr	r3, [r3, #24]
 80012a0:	f003 0304 	and.w	r3, r3, #4
 80012a4:	607b      	str	r3, [r7, #4]
 80012a6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012a8:	4b28      	ldr	r3, [pc, #160]	; (800134c <MX_GPIO_Init+0xd0>)
 80012aa:	699b      	ldr	r3, [r3, #24]
 80012ac:	4a27      	ldr	r2, [pc, #156]	; (800134c <MX_GPIO_Init+0xd0>)
 80012ae:	f043 0308 	orr.w	r3, r3, #8
 80012b2:	6193      	str	r3, [r2, #24]
 80012b4:	4b25      	ldr	r3, [pc, #148]	; (800134c <MX_GPIO_Init+0xd0>)
 80012b6:	699b      	ldr	r3, [r3, #24]
 80012b8:	f003 0308 	and.w	r3, r3, #8
 80012bc:	603b      	str	r3, [r7, #0]
 80012be:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_PedLED_Pin|D3_LED1_Pin|D5_LED2_Pin|D4_LED2_Pin, GPIO_PIN_RESET);
 80012c0:	2200      	movs	r2, #0
 80012c2:	f44f 6187 	mov.w	r1, #1080	; 0x438
 80012c6:	4822      	ldr	r0, [pc, #136]	; (8001350 <MX_GPIO_Init+0xd4>)
 80012c8:	f001 f9f3 	bl	80026b2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D7_PedLED_Pin|D2_LED1_Pin, GPIO_PIN_RESET);
 80012cc:	2200      	movs	r2, #0
 80012ce:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 80012d2:	4820      	ldr	r0, [pc, #128]	; (8001354 <MX_GPIO_Init+0xd8>)
 80012d4:	f001 f9ed 	bl	80026b2 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_PedButton_Pin A1_Button1_Pin A2_Button2_Pin */
  GPIO_InitStruct.Pin = A0_PedButton_Pin|A1_Button1_Pin|A2_Button2_Pin;
 80012d8:	2313      	movs	r3, #19
 80012da:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012dc:	2300      	movs	r3, #0
 80012de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e0:	2300      	movs	r3, #0
 80012e2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e4:	f107 0308 	add.w	r3, r7, #8
 80012e8:	4619      	mov	r1, r3
 80012ea:	481a      	ldr	r0, [pc, #104]	; (8001354 <MX_GPIO_Init+0xd8>)
 80012ec:	f001 f846 	bl	800237c <HAL_GPIO_Init>

  /*Configure GPIO pin : A3_Button3_Pin */
  GPIO_InitStruct.Pin = A3_Button3_Pin;
 80012f0:	2301      	movs	r3, #1
 80012f2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012f4:	2300      	movs	r3, #0
 80012f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f8:	2300      	movs	r3, #0
 80012fa:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(A3_Button3_GPIO_Port, &GPIO_InitStruct);
 80012fc:	f107 0308 	add.w	r3, r7, #8
 8001300:	4619      	mov	r1, r3
 8001302:	4813      	ldr	r0, [pc, #76]	; (8001350 <MX_GPIO_Init+0xd4>)
 8001304:	f001 f83a 	bl	800237c <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_PedLED_Pin D3_LED1_Pin D5_LED2_Pin D4_LED2_Pin */
  GPIO_InitStruct.Pin = D6_PedLED_Pin|D3_LED1_Pin|D5_LED2_Pin|D4_LED2_Pin;
 8001308:	f44f 6387 	mov.w	r3, #1080	; 0x438
 800130c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800130e:	2301      	movs	r3, #1
 8001310:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001312:	2300      	movs	r3, #0
 8001314:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001316:	2302      	movs	r3, #2
 8001318:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800131a:	f107 0308 	add.w	r3, r7, #8
 800131e:	4619      	mov	r1, r3
 8001320:	480b      	ldr	r0, [pc, #44]	; (8001350 <MX_GPIO_Init+0xd4>)
 8001322:	f001 f82b 	bl	800237c <HAL_GPIO_Init>

  /*Configure GPIO pins : D7_PedLED_Pin D2_LED1_Pin */
  GPIO_InitStruct.Pin = D7_PedLED_Pin|D2_LED1_Pin;
 8001326:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 800132a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800132c:	2301      	movs	r3, #1
 800132e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001330:	2300      	movs	r3, #0
 8001332:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001334:	2302      	movs	r3, #2
 8001336:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001338:	f107 0308 	add.w	r3, r7, #8
 800133c:	4619      	mov	r1, r3
 800133e:	4805      	ldr	r0, [pc, #20]	; (8001354 <MX_GPIO_Init+0xd8>)
 8001340:	f001 f81c 	bl	800237c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001344:	bf00      	nop
 8001346:	3718      	adds	r7, #24
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	40021000 	.word	0x40021000
 8001350:	40010c00 	.word	0x40010c00
 8001354:	40010800 	.word	0x40010800

08001358 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim2) {
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
	SCH_Update();
 8001360:	f000 f80a 	bl	8001378 <SCH_Update>
}
 8001364:	bf00      	nop
 8001366:	3708      	adds	r7, #8
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}

0800136c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001370:	b672      	cpsid	i
}
 8001372:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001374:	e7fe      	b.n	8001374 <Error_Handler+0x8>
	...

08001378 <SCH_Update>:

        SCH_tasks_G[i].TaskID = -1;
    }
}

void SCH_Update(void) {
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
	count_SCH_Update++;
 800137c:	4b10      	ldr	r3, [pc, #64]	; (80013c0 <SCH_Update+0x48>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	3301      	adds	r3, #1
 8001382:	4a0f      	ldr	r2, [pc, #60]	; (80013c0 <SCH_Update+0x48>)
 8001384:	6013      	str	r3, [r2, #0]
	if (SCH_tasks_G[0].pTask && SCH_tasks_G[0].RunMe == 0) {
 8001386:	4b0f      	ldr	r3, [pc, #60]	; (80013c4 <SCH_Update+0x4c>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d013      	beq.n	80013b6 <SCH_Update+0x3e>
 800138e:	4b0d      	ldr	r3, [pc, #52]	; (80013c4 <SCH_Update+0x4c>)
 8001390:	7b1b      	ldrb	r3, [r3, #12]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d10f      	bne.n	80013b6 <SCH_Update+0x3e>
		if(SCH_tasks_G[0].Delay > 0){
 8001396:	4b0b      	ldr	r3, [pc, #44]	; (80013c4 <SCH_Update+0x4c>)
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d004      	beq.n	80013a8 <SCH_Update+0x30>
			SCH_tasks_G[0].Delay -= 1;
 800139e:	4b09      	ldr	r3, [pc, #36]	; (80013c4 <SCH_Update+0x4c>)
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	3b01      	subs	r3, #1
 80013a4:	4a07      	ldr	r2, [pc, #28]	; (80013c4 <SCH_Update+0x4c>)
 80013a6:	6053      	str	r3, [r2, #4]
		}
		if (SCH_tasks_G[0].Delay == 0) {
 80013a8:	4b06      	ldr	r3, [pc, #24]	; (80013c4 <SCH_Update+0x4c>)
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d102      	bne.n	80013b6 <SCH_Update+0x3e>
			SCH_tasks_G[0].RunMe = 1;
 80013b0:	4b04      	ldr	r3, [pc, #16]	; (80013c4 <SCH_Update+0x4c>)
 80013b2:	2201      	movs	r2, #1
 80013b4:	731a      	strb	r2, [r3, #12]
		}
	}
}
 80013b6:	bf00      	nop
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bc80      	pop	{r7}
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	200001c0 	.word	0x200001c0
 80013c4:	200000f4 	.word	0x200000f4

080013c8 <SCH_Add_Task>:

uint32_t SCH_Add_Task(void (* pFunction)(), uint32_t DELAY, uint32_t PERIOD){
 80013c8:	b590      	push	{r4, r7, lr}
 80013ca:	b089      	sub	sp, #36	; 0x24
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	60f8      	str	r0, [r7, #12]
 80013d0:	60b9      	str	r1, [r7, #8]
 80013d2:	607a      	str	r2, [r7, #4]
	uint8_t newTaskIndex = 0;
 80013d4:	2300      	movs	r3, #0
 80013d6:	77fb      	strb	r3, [r7, #31]
	uint32_t sumDelay = 0;
 80013d8:	2300      	movs	r3, #0
 80013da:	61bb      	str	r3, [r7, #24]
	uint32_t newDelay = 0;
 80013dc:	2300      	movs	r3, #0
 80013de:	613b      	str	r3, [r7, #16]

	for (newTaskIndex = 0; newTaskIndex < SCH_MAX_TASKS; newTaskIndex++) {
 80013e0:	2300      	movs	r3, #0
 80013e2:	77fb      	strb	r3, [r7, #31]
 80013e4:	e133      	b.n	800164e <SCH_Add_Task+0x286>
		sumDelay = sumDelay + SCH_tasks_G[newTaskIndex].Delay;
 80013e6:	7ffa      	ldrb	r2, [r7, #31]
 80013e8:	49a1      	ldr	r1, [pc, #644]	; (8001670 <SCH_Add_Task+0x2a8>)
 80013ea:	4613      	mov	r3, r2
 80013ec:	009b      	lsls	r3, r3, #2
 80013ee:	4413      	add	r3, r2
 80013f0:	009b      	lsls	r3, r3, #2
 80013f2:	440b      	add	r3, r1
 80013f4:	3304      	adds	r3, #4
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	4413      	add	r3, r2
 80013fc:	61bb      	str	r3, [r7, #24]
		if (sumDelay > DELAY) {
 80013fe:	69ba      	ldr	r2, [r7, #24]
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	429a      	cmp	r2, r3
 8001404:	f240 80c1 	bls.w	800158a <SCH_Add_Task+0x1c2>
			newDelay = DELAY - (sumDelay - SCH_tasks_G[newTaskIndex].Delay);
 8001408:	7ffa      	ldrb	r2, [r7, #31]
 800140a:	4999      	ldr	r1, [pc, #612]	; (8001670 <SCH_Add_Task+0x2a8>)
 800140c:	4613      	mov	r3, r2
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	4413      	add	r3, r2
 8001412:	009b      	lsls	r3, r3, #2
 8001414:	440b      	add	r3, r1
 8001416:	3304      	adds	r3, #4
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	69bb      	ldr	r3, [r7, #24]
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	68ba      	ldr	r2, [r7, #8]
 8001420:	4413      	add	r3, r2
 8001422:	613b      	str	r3, [r7, #16]
			SCH_tasks_G[newTaskIndex].Delay = sumDelay - DELAY;
 8001424:	7ffa      	ldrb	r2, [r7, #31]
 8001426:	69b9      	ldr	r1, [r7, #24]
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	1ac9      	subs	r1, r1, r3
 800142c:	4890      	ldr	r0, [pc, #576]	; (8001670 <SCH_Add_Task+0x2a8>)
 800142e:	4613      	mov	r3, r2
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	4413      	add	r3, r2
 8001434:	009b      	lsls	r3, r3, #2
 8001436:	4403      	add	r3, r0
 8001438:	3304      	adds	r3, #4
 800143a:	6019      	str	r1, [r3, #0]
			for(uint8_t i = SCH_MAX_TASKS - 1; i > newTaskIndex; i --){
 800143c:	2309      	movs	r3, #9
 800143e:	75fb      	strb	r3, [r7, #23]
 8001440:	e04c      	b.n	80014dc <SCH_Add_Task+0x114>
				SCH_tasks_G[i].pTask = SCH_tasks_G[i - 1].pTask;
 8001442:	7dfb      	ldrb	r3, [r7, #23]
 8001444:	1e59      	subs	r1, r3, #1
 8001446:	7dfa      	ldrb	r2, [r7, #23]
 8001448:	4889      	ldr	r0, [pc, #548]	; (8001670 <SCH_Add_Task+0x2a8>)
 800144a:	460b      	mov	r3, r1
 800144c:	009b      	lsls	r3, r3, #2
 800144e:	440b      	add	r3, r1
 8001450:	009b      	lsls	r3, r3, #2
 8001452:	4403      	add	r3, r0
 8001454:	6819      	ldr	r1, [r3, #0]
 8001456:	4886      	ldr	r0, [pc, #536]	; (8001670 <SCH_Add_Task+0x2a8>)
 8001458:	4613      	mov	r3, r2
 800145a:	009b      	lsls	r3, r3, #2
 800145c:	4413      	add	r3, r2
 800145e:	009b      	lsls	r3, r3, #2
 8001460:	4403      	add	r3, r0
 8001462:	6019      	str	r1, [r3, #0]
				SCH_tasks_G[i].Period = SCH_tasks_G[i - 1].Period;
 8001464:	7dfb      	ldrb	r3, [r7, #23]
 8001466:	1e59      	subs	r1, r3, #1
 8001468:	7dfa      	ldrb	r2, [r7, #23]
 800146a:	4881      	ldr	r0, [pc, #516]	; (8001670 <SCH_Add_Task+0x2a8>)
 800146c:	460b      	mov	r3, r1
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	440b      	add	r3, r1
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	4403      	add	r3, r0
 8001476:	3308      	adds	r3, #8
 8001478:	6819      	ldr	r1, [r3, #0]
 800147a:	487d      	ldr	r0, [pc, #500]	; (8001670 <SCH_Add_Task+0x2a8>)
 800147c:	4613      	mov	r3, r2
 800147e:	009b      	lsls	r3, r3, #2
 8001480:	4413      	add	r3, r2
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	4403      	add	r3, r0
 8001486:	3308      	adds	r3, #8
 8001488:	6019      	str	r1, [r3, #0]
				SCH_tasks_G[i].Delay = SCH_tasks_G[i - 1].Delay;
 800148a:	7dfb      	ldrb	r3, [r7, #23]
 800148c:	1e59      	subs	r1, r3, #1
 800148e:	7dfa      	ldrb	r2, [r7, #23]
 8001490:	4877      	ldr	r0, [pc, #476]	; (8001670 <SCH_Add_Task+0x2a8>)
 8001492:	460b      	mov	r3, r1
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	440b      	add	r3, r1
 8001498:	009b      	lsls	r3, r3, #2
 800149a:	4403      	add	r3, r0
 800149c:	3304      	adds	r3, #4
 800149e:	6819      	ldr	r1, [r3, #0]
 80014a0:	4873      	ldr	r0, [pc, #460]	; (8001670 <SCH_Add_Task+0x2a8>)
 80014a2:	4613      	mov	r3, r2
 80014a4:	009b      	lsls	r3, r3, #2
 80014a6:	4413      	add	r3, r2
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	4403      	add	r3, r0
 80014ac:	3304      	adds	r3, #4
 80014ae:	6019      	str	r1, [r3, #0]
				SCH_tasks_G[i].TaskID = SCH_tasks_G[i - 1].TaskID;
 80014b0:	7dfb      	ldrb	r3, [r7, #23]
 80014b2:	1e59      	subs	r1, r3, #1
 80014b4:	7dfa      	ldrb	r2, [r7, #23]
 80014b6:	486e      	ldr	r0, [pc, #440]	; (8001670 <SCH_Add_Task+0x2a8>)
 80014b8:	460b      	mov	r3, r1
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	440b      	add	r3, r1
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	4403      	add	r3, r0
 80014c2:	3310      	adds	r3, #16
 80014c4:	6819      	ldr	r1, [r3, #0]
 80014c6:	486a      	ldr	r0, [pc, #424]	; (8001670 <SCH_Add_Task+0x2a8>)
 80014c8:	4613      	mov	r3, r2
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	4413      	add	r3, r2
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	4403      	add	r3, r0
 80014d2:	3310      	adds	r3, #16
 80014d4:	6019      	str	r1, [r3, #0]
			for(uint8_t i = SCH_MAX_TASKS - 1; i > newTaskIndex; i --){
 80014d6:	7dfb      	ldrb	r3, [r7, #23]
 80014d8:	3b01      	subs	r3, #1
 80014da:	75fb      	strb	r3, [r7, #23]
 80014dc:	7dfa      	ldrb	r2, [r7, #23]
 80014de:	7ffb      	ldrb	r3, [r7, #31]
 80014e0:	429a      	cmp	r2, r3
 80014e2:	d8ae      	bhi.n	8001442 <SCH_Add_Task+0x7a>
			}
			SCH_tasks_G[newTaskIndex].pTask = pFunction;
 80014e4:	7ffa      	ldrb	r2, [r7, #31]
 80014e6:	4962      	ldr	r1, [pc, #392]	; (8001670 <SCH_Add_Task+0x2a8>)
 80014e8:	4613      	mov	r3, r2
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	4413      	add	r3, r2
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	440b      	add	r3, r1
 80014f2:	68fa      	ldr	r2, [r7, #12]
 80014f4:	601a      	str	r2, [r3, #0]
			SCH_tasks_G[newTaskIndex].Delay = newDelay;
 80014f6:	7ffa      	ldrb	r2, [r7, #31]
 80014f8:	495d      	ldr	r1, [pc, #372]	; (8001670 <SCH_Add_Task+0x2a8>)
 80014fa:	4613      	mov	r3, r2
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	4413      	add	r3, r2
 8001500:	009b      	lsls	r3, r3, #2
 8001502:	440b      	add	r3, r1
 8001504:	3304      	adds	r3, #4
 8001506:	693a      	ldr	r2, [r7, #16]
 8001508:	601a      	str	r2, [r3, #0]
			SCH_tasks_G[newTaskIndex].Period = PERIOD;
 800150a:	7ffa      	ldrb	r2, [r7, #31]
 800150c:	4958      	ldr	r1, [pc, #352]	; (8001670 <SCH_Add_Task+0x2a8>)
 800150e:	4613      	mov	r3, r2
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	4413      	add	r3, r2
 8001514:	009b      	lsls	r3, r3, #2
 8001516:	440b      	add	r3, r1
 8001518:	3308      	adds	r3, #8
 800151a:	687a      	ldr	r2, [r7, #4]
 800151c:	601a      	str	r2, [r3, #0]
			if (SCH_tasks_G[newTaskIndex].Delay == 0) {
 800151e:	7ffa      	ldrb	r2, [r7, #31]
 8001520:	4953      	ldr	r1, [pc, #332]	; (8001670 <SCH_Add_Task+0x2a8>)
 8001522:	4613      	mov	r3, r2
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	4413      	add	r3, r2
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	440b      	add	r3, r1
 800152c:	3304      	adds	r3, #4
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d10a      	bne.n	800154a <SCH_Add_Task+0x182>
				SCH_tasks_G[newTaskIndex].RunMe = 1;
 8001534:	7ffa      	ldrb	r2, [r7, #31]
 8001536:	494e      	ldr	r1, [pc, #312]	; (8001670 <SCH_Add_Task+0x2a8>)
 8001538:	4613      	mov	r3, r2
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	4413      	add	r3, r2
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	440b      	add	r3, r1
 8001542:	330c      	adds	r3, #12
 8001544:	2201      	movs	r2, #1
 8001546:	701a      	strb	r2, [r3, #0]
 8001548:	e009      	b.n	800155e <SCH_Add_Task+0x196>
			} else {
				SCH_tasks_G[newTaskIndex].RunMe = 0;
 800154a:	7ffa      	ldrb	r2, [r7, #31]
 800154c:	4948      	ldr	r1, [pc, #288]	; (8001670 <SCH_Add_Task+0x2a8>)
 800154e:	4613      	mov	r3, r2
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	4413      	add	r3, r2
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	440b      	add	r3, r1
 8001558:	330c      	adds	r3, #12
 800155a:	2200      	movs	r2, #0
 800155c:	701a      	strb	r2, [r3, #0]
			}
			SCH_tasks_G[newTaskIndex].TaskID = Get_New_Task_ID();
 800155e:	7ffc      	ldrb	r4, [r7, #31]
 8001560:	f000 f9a4 	bl	80018ac <Get_New_Task_ID>
 8001564:	4602      	mov	r2, r0
 8001566:	4942      	ldr	r1, [pc, #264]	; (8001670 <SCH_Add_Task+0x2a8>)
 8001568:	4623      	mov	r3, r4
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	4423      	add	r3, r4
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	440b      	add	r3, r1
 8001572:	3310      	adds	r3, #16
 8001574:	601a      	str	r2, [r3, #0]
			return SCH_tasks_G[newTaskIndex].TaskID;
 8001576:	7ffa      	ldrb	r2, [r7, #31]
 8001578:	493d      	ldr	r1, [pc, #244]	; (8001670 <SCH_Add_Task+0x2a8>)
 800157a:	4613      	mov	r3, r2
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	4413      	add	r3, r2
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	440b      	add	r3, r1
 8001584:	3310      	adds	r3, #16
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	e06e      	b.n	8001668 <SCH_Add_Task+0x2a0>
		} else {
			if(SCH_tasks_G[newTaskIndex].pTask == 0x0000){
 800158a:	7ffa      	ldrb	r2, [r7, #31]
 800158c:	4938      	ldr	r1, [pc, #224]	; (8001670 <SCH_Add_Task+0x2a8>)
 800158e:	4613      	mov	r3, r2
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	4413      	add	r3, r2
 8001594:	009b      	lsls	r3, r3, #2
 8001596:	440b      	add	r3, r1
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d154      	bne.n	8001648 <SCH_Add_Task+0x280>
				SCH_tasks_G[newTaskIndex].pTask = pFunction;
 800159e:	7ffa      	ldrb	r2, [r7, #31]
 80015a0:	4933      	ldr	r1, [pc, #204]	; (8001670 <SCH_Add_Task+0x2a8>)
 80015a2:	4613      	mov	r3, r2
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	4413      	add	r3, r2
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	440b      	add	r3, r1
 80015ac:	68fa      	ldr	r2, [r7, #12]
 80015ae:	601a      	str	r2, [r3, #0]
				SCH_tasks_G[newTaskIndex].Delay = DELAY - sumDelay;
 80015b0:	7ffa      	ldrb	r2, [r7, #31]
 80015b2:	68b9      	ldr	r1, [r7, #8]
 80015b4:	69bb      	ldr	r3, [r7, #24]
 80015b6:	1ac9      	subs	r1, r1, r3
 80015b8:	482d      	ldr	r0, [pc, #180]	; (8001670 <SCH_Add_Task+0x2a8>)
 80015ba:	4613      	mov	r3, r2
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	4413      	add	r3, r2
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	4403      	add	r3, r0
 80015c4:	3304      	adds	r3, #4
 80015c6:	6019      	str	r1, [r3, #0]
				SCH_tasks_G[newTaskIndex].Period = PERIOD;
 80015c8:	7ffa      	ldrb	r2, [r7, #31]
 80015ca:	4929      	ldr	r1, [pc, #164]	; (8001670 <SCH_Add_Task+0x2a8>)
 80015cc:	4613      	mov	r3, r2
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	4413      	add	r3, r2
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	440b      	add	r3, r1
 80015d6:	3308      	adds	r3, #8
 80015d8:	687a      	ldr	r2, [r7, #4]
 80015da:	601a      	str	r2, [r3, #0]
				if(SCH_tasks_G[newTaskIndex].Delay == 0){
 80015dc:	7ffa      	ldrb	r2, [r7, #31]
 80015de:	4924      	ldr	r1, [pc, #144]	; (8001670 <SCH_Add_Task+0x2a8>)
 80015e0:	4613      	mov	r3, r2
 80015e2:	009b      	lsls	r3, r3, #2
 80015e4:	4413      	add	r3, r2
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	440b      	add	r3, r1
 80015ea:	3304      	adds	r3, #4
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d10a      	bne.n	8001608 <SCH_Add_Task+0x240>
					SCH_tasks_G[newTaskIndex].RunMe = 1;
 80015f2:	7ffa      	ldrb	r2, [r7, #31]
 80015f4:	491e      	ldr	r1, [pc, #120]	; (8001670 <SCH_Add_Task+0x2a8>)
 80015f6:	4613      	mov	r3, r2
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	4413      	add	r3, r2
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	440b      	add	r3, r1
 8001600:	330c      	adds	r3, #12
 8001602:	2201      	movs	r2, #1
 8001604:	701a      	strb	r2, [r3, #0]
 8001606:	e009      	b.n	800161c <SCH_Add_Task+0x254>
				} else {
					SCH_tasks_G[newTaskIndex].RunMe = 0;
 8001608:	7ffa      	ldrb	r2, [r7, #31]
 800160a:	4919      	ldr	r1, [pc, #100]	; (8001670 <SCH_Add_Task+0x2a8>)
 800160c:	4613      	mov	r3, r2
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	4413      	add	r3, r2
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	440b      	add	r3, r1
 8001616:	330c      	adds	r3, #12
 8001618:	2200      	movs	r2, #0
 800161a:	701a      	strb	r2, [r3, #0]
				}
				SCH_tasks_G[newTaskIndex].TaskID = Get_New_Task_ID();
 800161c:	7ffc      	ldrb	r4, [r7, #31]
 800161e:	f000 f945 	bl	80018ac <Get_New_Task_ID>
 8001622:	4602      	mov	r2, r0
 8001624:	4912      	ldr	r1, [pc, #72]	; (8001670 <SCH_Add_Task+0x2a8>)
 8001626:	4623      	mov	r3, r4
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	4423      	add	r3, r4
 800162c:	009b      	lsls	r3, r3, #2
 800162e:	440b      	add	r3, r1
 8001630:	3310      	adds	r3, #16
 8001632:	601a      	str	r2, [r3, #0]
				return SCH_tasks_G[newTaskIndex].TaskID;
 8001634:	7ffa      	ldrb	r2, [r7, #31]
 8001636:	490e      	ldr	r1, [pc, #56]	; (8001670 <SCH_Add_Task+0x2a8>)
 8001638:	4613      	mov	r3, r2
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	4413      	add	r3, r2
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	440b      	add	r3, r1
 8001642:	3310      	adds	r3, #16
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	e00f      	b.n	8001668 <SCH_Add_Task+0x2a0>
	for (newTaskIndex = 0; newTaskIndex < SCH_MAX_TASKS; newTaskIndex++) {
 8001648:	7ffb      	ldrb	r3, [r7, #31]
 800164a:	3301      	adds	r3, #1
 800164c:	77fb      	strb	r3, [r7, #31]
 800164e:	7ffb      	ldrb	r3, [r7, #31]
 8001650:	2b09      	cmp	r3, #9
 8001652:	f67f aec8 	bls.w	80013e6 <SCH_Add_Task+0x1e>
			}
		}
	}
	return SCH_tasks_G[newTaskIndex].TaskID;
 8001656:	7ffa      	ldrb	r2, [r7, #31]
 8001658:	4905      	ldr	r1, [pc, #20]	; (8001670 <SCH_Add_Task+0x2a8>)
 800165a:	4613      	mov	r3, r2
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	4413      	add	r3, r2
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	440b      	add	r3, r1
 8001664:	3310      	adds	r3, #16
 8001666:	681b      	ldr	r3, [r3, #0]
}
 8001668:	4618      	mov	r0, r3
 800166a:	3724      	adds	r7, #36	; 0x24
 800166c:	46bd      	mov	sp, r7
 800166e:	bd90      	pop	{r4, r7, pc}
 8001670:	200000f4 	.word	0x200000f4

08001674 <SCH_Delete_Task>:

uint8_t SCH_Delete_Task(uint32_t taskID){
 8001674:	b480      	push	{r7}
 8001676:	b085      	sub	sp, #20
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
	uint8_t Return_code  = 0;
 800167c:	2300      	movs	r3, #0
 800167e:	737b      	strb	r3, [r7, #13]
	uint8_t taskIndex;
	uint8_t j;
	if(taskID != NO_TASK_ID){
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2b00      	cmp	r3, #0
 8001684:	f000 80e2 	beq.w	800184c <SCH_Delete_Task+0x1d8>
		for(taskIndex = 0; taskIndex < SCH_MAX_TASKS; taskIndex ++){
 8001688:	2300      	movs	r3, #0
 800168a:	73fb      	strb	r3, [r7, #15]
 800168c:	e0da      	b.n	8001844 <SCH_Delete_Task+0x1d0>
			if(SCH_tasks_G[taskIndex].TaskID == taskID){
 800168e:	7bfa      	ldrb	r2, [r7, #15]
 8001690:	4971      	ldr	r1, [pc, #452]	; (8001858 <SCH_Delete_Task+0x1e4>)
 8001692:	4613      	mov	r3, r2
 8001694:	009b      	lsls	r3, r3, #2
 8001696:	4413      	add	r3, r2
 8001698:	009b      	lsls	r3, r3, #2
 800169a:	440b      	add	r3, r1
 800169c:	3310      	adds	r3, #16
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	687a      	ldr	r2, [r7, #4]
 80016a2:	429a      	cmp	r2, r3
 80016a4:	f040 80cb 	bne.w	800183e <SCH_Delete_Task+0x1ca>
				Return_code = 1;
 80016a8:	2301      	movs	r3, #1
 80016aa:	737b      	strb	r3, [r7, #13]
				if(taskIndex != 0 && taskIndex < SCH_MAX_TASKS - 1){
 80016ac:	7bfb      	ldrb	r3, [r7, #15]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d02b      	beq.n	800170a <SCH_Delete_Task+0x96>
 80016b2:	7bfb      	ldrb	r3, [r7, #15]
 80016b4:	2b08      	cmp	r3, #8
 80016b6:	d828      	bhi.n	800170a <SCH_Delete_Task+0x96>
					if(SCH_tasks_G[taskIndex+1].pTask != 0x0000){
 80016b8:	7bfb      	ldrb	r3, [r7, #15]
 80016ba:	1c5a      	adds	r2, r3, #1
 80016bc:	4966      	ldr	r1, [pc, #408]	; (8001858 <SCH_Delete_Task+0x1e4>)
 80016be:	4613      	mov	r3, r2
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	4413      	add	r3, r2
 80016c4:	009b      	lsls	r3, r3, #2
 80016c6:	440b      	add	r3, r1
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d01d      	beq.n	800170a <SCH_Delete_Task+0x96>
						SCH_tasks_G[taskIndex+1].Delay += SCH_tasks_G[taskIndex].Delay;
 80016ce:	7bfb      	ldrb	r3, [r7, #15]
 80016d0:	1c5a      	adds	r2, r3, #1
 80016d2:	4961      	ldr	r1, [pc, #388]	; (8001858 <SCH_Delete_Task+0x1e4>)
 80016d4:	4613      	mov	r3, r2
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	4413      	add	r3, r2
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	440b      	add	r3, r1
 80016de:	3304      	adds	r3, #4
 80016e0:	6819      	ldr	r1, [r3, #0]
 80016e2:	7bfa      	ldrb	r2, [r7, #15]
 80016e4:	485c      	ldr	r0, [pc, #368]	; (8001858 <SCH_Delete_Task+0x1e4>)
 80016e6:	4613      	mov	r3, r2
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	4413      	add	r3, r2
 80016ec:	009b      	lsls	r3, r3, #2
 80016ee:	4403      	add	r3, r0
 80016f0:	3304      	adds	r3, #4
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	7bfa      	ldrb	r2, [r7, #15]
 80016f6:	3201      	adds	r2, #1
 80016f8:	4419      	add	r1, r3
 80016fa:	4857      	ldr	r0, [pc, #348]	; (8001858 <SCH_Delete_Task+0x1e4>)
 80016fc:	4613      	mov	r3, r2
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	4413      	add	r3, r2
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	4403      	add	r3, r0
 8001706:	3304      	adds	r3, #4
 8001708:	6019      	str	r1, [r3, #0]
					}
				}

				for( j = taskIndex; j < SCH_MAX_TASKS - 1; j ++){
 800170a:	7bfb      	ldrb	r3, [r7, #15]
 800170c:	73bb      	strb	r3, [r7, #14]
 800170e:	e060      	b.n	80017d2 <SCH_Delete_Task+0x15e>
					SCH_tasks_G[j].pTask = SCH_tasks_G[j+1].pTask;
 8001710:	7bbb      	ldrb	r3, [r7, #14]
 8001712:	1c59      	adds	r1, r3, #1
 8001714:	7bba      	ldrb	r2, [r7, #14]
 8001716:	4850      	ldr	r0, [pc, #320]	; (8001858 <SCH_Delete_Task+0x1e4>)
 8001718:	460b      	mov	r3, r1
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	440b      	add	r3, r1
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	4403      	add	r3, r0
 8001722:	6819      	ldr	r1, [r3, #0]
 8001724:	484c      	ldr	r0, [pc, #304]	; (8001858 <SCH_Delete_Task+0x1e4>)
 8001726:	4613      	mov	r3, r2
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	4413      	add	r3, r2
 800172c:	009b      	lsls	r3, r3, #2
 800172e:	4403      	add	r3, r0
 8001730:	6019      	str	r1, [r3, #0]
					SCH_tasks_G[j].Period = SCH_tasks_G[j+1].Period;
 8001732:	7bbb      	ldrb	r3, [r7, #14]
 8001734:	1c59      	adds	r1, r3, #1
 8001736:	7bba      	ldrb	r2, [r7, #14]
 8001738:	4847      	ldr	r0, [pc, #284]	; (8001858 <SCH_Delete_Task+0x1e4>)
 800173a:	460b      	mov	r3, r1
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	440b      	add	r3, r1
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	4403      	add	r3, r0
 8001744:	3308      	adds	r3, #8
 8001746:	6819      	ldr	r1, [r3, #0]
 8001748:	4843      	ldr	r0, [pc, #268]	; (8001858 <SCH_Delete_Task+0x1e4>)
 800174a:	4613      	mov	r3, r2
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	4413      	add	r3, r2
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	4403      	add	r3, r0
 8001754:	3308      	adds	r3, #8
 8001756:	6019      	str	r1, [r3, #0]
					SCH_tasks_G[j].Delay = SCH_tasks_G[j+1].Delay;
 8001758:	7bbb      	ldrb	r3, [r7, #14]
 800175a:	1c59      	adds	r1, r3, #1
 800175c:	7bba      	ldrb	r2, [r7, #14]
 800175e:	483e      	ldr	r0, [pc, #248]	; (8001858 <SCH_Delete_Task+0x1e4>)
 8001760:	460b      	mov	r3, r1
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	440b      	add	r3, r1
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	4403      	add	r3, r0
 800176a:	3304      	adds	r3, #4
 800176c:	6819      	ldr	r1, [r3, #0]
 800176e:	483a      	ldr	r0, [pc, #232]	; (8001858 <SCH_Delete_Task+0x1e4>)
 8001770:	4613      	mov	r3, r2
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	4413      	add	r3, r2
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	4403      	add	r3, r0
 800177a:	3304      	adds	r3, #4
 800177c:	6019      	str	r1, [r3, #0]
					SCH_tasks_G[j].RunMe = SCH_tasks_G[j+1].RunMe;
 800177e:	7bbb      	ldrb	r3, [r7, #14]
 8001780:	1c59      	adds	r1, r3, #1
 8001782:	7bba      	ldrb	r2, [r7, #14]
 8001784:	4834      	ldr	r0, [pc, #208]	; (8001858 <SCH_Delete_Task+0x1e4>)
 8001786:	460b      	mov	r3, r1
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	440b      	add	r3, r1
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	4403      	add	r3, r0
 8001790:	330c      	adds	r3, #12
 8001792:	7818      	ldrb	r0, [r3, #0]
 8001794:	4930      	ldr	r1, [pc, #192]	; (8001858 <SCH_Delete_Task+0x1e4>)
 8001796:	4613      	mov	r3, r2
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	4413      	add	r3, r2
 800179c:	009b      	lsls	r3, r3, #2
 800179e:	440b      	add	r3, r1
 80017a0:	330c      	adds	r3, #12
 80017a2:	4602      	mov	r2, r0
 80017a4:	701a      	strb	r2, [r3, #0]
					SCH_tasks_G[j].TaskID = SCH_tasks_G[j+1].TaskID;
 80017a6:	7bbb      	ldrb	r3, [r7, #14]
 80017a8:	1c59      	adds	r1, r3, #1
 80017aa:	7bba      	ldrb	r2, [r7, #14]
 80017ac:	482a      	ldr	r0, [pc, #168]	; (8001858 <SCH_Delete_Task+0x1e4>)
 80017ae:	460b      	mov	r3, r1
 80017b0:	009b      	lsls	r3, r3, #2
 80017b2:	440b      	add	r3, r1
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	4403      	add	r3, r0
 80017b8:	3310      	adds	r3, #16
 80017ba:	6819      	ldr	r1, [r3, #0]
 80017bc:	4826      	ldr	r0, [pc, #152]	; (8001858 <SCH_Delete_Task+0x1e4>)
 80017be:	4613      	mov	r3, r2
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	4413      	add	r3, r2
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	4403      	add	r3, r0
 80017c8:	3310      	adds	r3, #16
 80017ca:	6019      	str	r1, [r3, #0]
				for( j = taskIndex; j < SCH_MAX_TASKS - 1; j ++){
 80017cc:	7bbb      	ldrb	r3, [r7, #14]
 80017ce:	3301      	adds	r3, #1
 80017d0:	73bb      	strb	r3, [r7, #14]
 80017d2:	7bbb      	ldrb	r3, [r7, #14]
 80017d4:	2b08      	cmp	r3, #8
 80017d6:	d99b      	bls.n	8001710 <SCH_Delete_Task+0x9c>
				}
				SCH_tasks_G[j].pTask = 0;
 80017d8:	7bba      	ldrb	r2, [r7, #14]
 80017da:	491f      	ldr	r1, [pc, #124]	; (8001858 <SCH_Delete_Task+0x1e4>)
 80017dc:	4613      	mov	r3, r2
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	4413      	add	r3, r2
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	440b      	add	r3, r1
 80017e6:	2200      	movs	r2, #0
 80017e8:	601a      	str	r2, [r3, #0]
				SCH_tasks_G[j].Period = 0;
 80017ea:	7bba      	ldrb	r2, [r7, #14]
 80017ec:	491a      	ldr	r1, [pc, #104]	; (8001858 <SCH_Delete_Task+0x1e4>)
 80017ee:	4613      	mov	r3, r2
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	4413      	add	r3, r2
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	440b      	add	r3, r1
 80017f8:	3308      	adds	r3, #8
 80017fa:	2200      	movs	r2, #0
 80017fc:	601a      	str	r2, [r3, #0]
				SCH_tasks_G[j].Delay = 0;
 80017fe:	7bba      	ldrb	r2, [r7, #14]
 8001800:	4915      	ldr	r1, [pc, #84]	; (8001858 <SCH_Delete_Task+0x1e4>)
 8001802:	4613      	mov	r3, r2
 8001804:	009b      	lsls	r3, r3, #2
 8001806:	4413      	add	r3, r2
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	440b      	add	r3, r1
 800180c:	3304      	adds	r3, #4
 800180e:	2200      	movs	r2, #0
 8001810:	601a      	str	r2, [r3, #0]
				SCH_tasks_G[j].RunMe = 0;
 8001812:	7bba      	ldrb	r2, [r7, #14]
 8001814:	4910      	ldr	r1, [pc, #64]	; (8001858 <SCH_Delete_Task+0x1e4>)
 8001816:	4613      	mov	r3, r2
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	4413      	add	r3, r2
 800181c:	009b      	lsls	r3, r3, #2
 800181e:	440b      	add	r3, r1
 8001820:	330c      	adds	r3, #12
 8001822:	2200      	movs	r2, #0
 8001824:	701a      	strb	r2, [r3, #0]
				SCH_tasks_G[j].TaskID = 0;
 8001826:	7bba      	ldrb	r2, [r7, #14]
 8001828:	490b      	ldr	r1, [pc, #44]	; (8001858 <SCH_Delete_Task+0x1e4>)
 800182a:	4613      	mov	r3, r2
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	4413      	add	r3, r2
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	440b      	add	r3, r1
 8001834:	3310      	adds	r3, #16
 8001836:	2200      	movs	r2, #0
 8001838:	601a      	str	r2, [r3, #0]
				return Return_code;
 800183a:	7b7b      	ldrb	r3, [r7, #13]
 800183c:	e007      	b.n	800184e <SCH_Delete_Task+0x1da>
		for(taskIndex = 0; taskIndex < SCH_MAX_TASKS; taskIndex ++){
 800183e:	7bfb      	ldrb	r3, [r7, #15]
 8001840:	3301      	adds	r3, #1
 8001842:	73fb      	strb	r3, [r7, #15]
 8001844:	7bfb      	ldrb	r3, [r7, #15]
 8001846:	2b09      	cmp	r3, #9
 8001848:	f67f af21 	bls.w	800168e <SCH_Delete_Task+0x1a>
			}
		}
	}
	return Return_code;
 800184c:	7b7b      	ldrb	r3, [r7, #13]
}
 800184e:	4618      	mov	r0, r3
 8001850:	3714      	adds	r7, #20
 8001852:	46bd      	mov	sp, r7
 8001854:	bc80      	pop	{r7}
 8001856:	4770      	bx	lr
 8001858:	200000f4 	.word	0x200000f4

0800185c <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks(void){
 800185c:	b5b0      	push	{r4, r5, r7, lr}
 800185e:	b086      	sub	sp, #24
 8001860:	af00      	add	r7, sp, #0
	if(SCH_tasks_G[0].RunMe > 0) {
 8001862:	4b11      	ldr	r3, [pc, #68]	; (80018a8 <SCH_Dispatch_Tasks+0x4c>)
 8001864:	7b1b      	ldrb	r3, [r3, #12]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d019      	beq.n	800189e <SCH_Dispatch_Tasks+0x42>
		(*SCH_tasks_G[0].pTask)();
 800186a:	4b0f      	ldr	r3, [pc, #60]	; (80018a8 <SCH_Dispatch_Tasks+0x4c>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4798      	blx	r3
		SCH_tasks_G[0].RunMe = 0;
 8001870:	4b0d      	ldr	r3, [pc, #52]	; (80018a8 <SCH_Dispatch_Tasks+0x4c>)
 8001872:	2200      	movs	r2, #0
 8001874:	731a      	strb	r2, [r3, #12]
		sTask temtask = SCH_tasks_G[0];
 8001876:	4b0c      	ldr	r3, [pc, #48]	; (80018a8 <SCH_Dispatch_Tasks+0x4c>)
 8001878:	1d3c      	adds	r4, r7, #4
 800187a:	461d      	mov	r5, r3
 800187c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800187e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001880:	682b      	ldr	r3, [r5, #0]
 8001882:	6023      	str	r3, [r4, #0]
		SCH_Delete_Task(temtask.TaskID);
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	4618      	mov	r0, r3
 8001888:	f7ff fef4 	bl	8001674 <SCH_Delete_Task>
		if (temtask.Period != 0) {
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d005      	beq.n	800189e <SCH_Dispatch_Tasks+0x42>
			SCH_Add_Task(temtask.pTask, temtask.Period, temtask.Period);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	68f9      	ldr	r1, [r7, #12]
 8001896:	68fa      	ldr	r2, [r7, #12]
 8001898:	4618      	mov	r0, r3
 800189a:	f7ff fd95 	bl	80013c8 <SCH_Add_Task>
		}
	}
}
 800189e:	bf00      	nop
 80018a0:	3718      	adds	r7, #24
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bdb0      	pop	{r4, r5, r7, pc}
 80018a6:	bf00      	nop
 80018a8:	200000f4 	.word	0x200000f4

080018ac <Get_New_Task_ID>:

static uint32_t Get_New_Task_ID(void){
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
	newTaskID++;
 80018b0:	4b09      	ldr	r3, [pc, #36]	; (80018d8 <Get_New_Task_ID+0x2c>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	3301      	adds	r3, #1
 80018b6:	4a08      	ldr	r2, [pc, #32]	; (80018d8 <Get_New_Task_ID+0x2c>)
 80018b8:	6013      	str	r3, [r2, #0]
	if(newTaskID == NO_TASK_ID){
 80018ba:	4b07      	ldr	r3, [pc, #28]	; (80018d8 <Get_New_Task_ID+0x2c>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d104      	bne.n	80018cc <Get_New_Task_ID+0x20>
		newTaskID++;
 80018c2:	4b05      	ldr	r3, [pc, #20]	; (80018d8 <Get_New_Task_ID+0x2c>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	3301      	adds	r3, #1
 80018c8:	4a03      	ldr	r2, [pc, #12]	; (80018d8 <Get_New_Task_ID+0x2c>)
 80018ca:	6013      	str	r3, [r2, #0]
	}
	return newTaskID;
 80018cc:	4b02      	ldr	r3, [pc, #8]	; (80018d8 <Get_New_Task_ID+0x2c>)
 80018ce:	681b      	ldr	r3, [r3, #0]
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bc80      	pop	{r7}
 80018d6:	4770      	bx	lr
 80018d8:	200001bc 	.word	0x200001bc

080018dc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	b085      	sub	sp, #20
 80018e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80018e2:	4b15      	ldr	r3, [pc, #84]	; (8001938 <HAL_MspInit+0x5c>)
 80018e4:	699b      	ldr	r3, [r3, #24]
 80018e6:	4a14      	ldr	r2, [pc, #80]	; (8001938 <HAL_MspInit+0x5c>)
 80018e8:	f043 0301 	orr.w	r3, r3, #1
 80018ec:	6193      	str	r3, [r2, #24]
 80018ee:	4b12      	ldr	r3, [pc, #72]	; (8001938 <HAL_MspInit+0x5c>)
 80018f0:	699b      	ldr	r3, [r3, #24]
 80018f2:	f003 0301 	and.w	r3, r3, #1
 80018f6:	60bb      	str	r3, [r7, #8]
 80018f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018fa:	4b0f      	ldr	r3, [pc, #60]	; (8001938 <HAL_MspInit+0x5c>)
 80018fc:	69db      	ldr	r3, [r3, #28]
 80018fe:	4a0e      	ldr	r2, [pc, #56]	; (8001938 <HAL_MspInit+0x5c>)
 8001900:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001904:	61d3      	str	r3, [r2, #28]
 8001906:	4b0c      	ldr	r3, [pc, #48]	; (8001938 <HAL_MspInit+0x5c>)
 8001908:	69db      	ldr	r3, [r3, #28]
 800190a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800190e:	607b      	str	r3, [r7, #4]
 8001910:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001912:	4b0a      	ldr	r3, [pc, #40]	; (800193c <HAL_MspInit+0x60>)
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	60fb      	str	r3, [r7, #12]
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800191e:	60fb      	str	r3, [r7, #12]
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001926:	60fb      	str	r3, [r7, #12]
 8001928:	4a04      	ldr	r2, [pc, #16]	; (800193c <HAL_MspInit+0x60>)
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800192e:	bf00      	nop
 8001930:	3714      	adds	r7, #20
 8001932:	46bd      	mov	sp, r7
 8001934:	bc80      	pop	{r7}
 8001936:	4770      	bx	lr
 8001938:	40021000 	.word	0x40021000
 800193c:	40010000 	.word	0x40010000

08001940 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001950:	d114      	bne.n	800197c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001952:	4b19      	ldr	r3, [pc, #100]	; (80019b8 <HAL_TIM_Base_MspInit+0x78>)
 8001954:	69db      	ldr	r3, [r3, #28]
 8001956:	4a18      	ldr	r2, [pc, #96]	; (80019b8 <HAL_TIM_Base_MspInit+0x78>)
 8001958:	f043 0301 	orr.w	r3, r3, #1
 800195c:	61d3      	str	r3, [r2, #28]
 800195e:	4b16      	ldr	r3, [pc, #88]	; (80019b8 <HAL_TIM_Base_MspInit+0x78>)
 8001960:	69db      	ldr	r3, [r3, #28]
 8001962:	f003 0301 	and.w	r3, r3, #1
 8001966:	60fb      	str	r3, [r7, #12]
 8001968:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800196a:	2200      	movs	r2, #0
 800196c:	2100      	movs	r1, #0
 800196e:	201c      	movs	r0, #28
 8001970:	f000 fc1b 	bl	80021aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001974:	201c      	movs	r0, #28
 8001976:	f000 fc34 	bl	80021e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800197a:	e018      	b.n	80019ae <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a0e      	ldr	r2, [pc, #56]	; (80019bc <HAL_TIM_Base_MspInit+0x7c>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d113      	bne.n	80019ae <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001986:	4b0c      	ldr	r3, [pc, #48]	; (80019b8 <HAL_TIM_Base_MspInit+0x78>)
 8001988:	69db      	ldr	r3, [r3, #28]
 800198a:	4a0b      	ldr	r2, [pc, #44]	; (80019b8 <HAL_TIM_Base_MspInit+0x78>)
 800198c:	f043 0302 	orr.w	r3, r3, #2
 8001990:	61d3      	str	r3, [r2, #28]
 8001992:	4b09      	ldr	r3, [pc, #36]	; (80019b8 <HAL_TIM_Base_MspInit+0x78>)
 8001994:	69db      	ldr	r3, [r3, #28]
 8001996:	f003 0302 	and.w	r3, r3, #2
 800199a:	60bb      	str	r3, [r7, #8]
 800199c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800199e:	2200      	movs	r2, #0
 80019a0:	2100      	movs	r1, #0
 80019a2:	201d      	movs	r0, #29
 80019a4:	f000 fc01 	bl	80021aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80019a8:	201d      	movs	r0, #29
 80019aa:	f000 fc1a 	bl	80021e2 <HAL_NVIC_EnableIRQ>
}
 80019ae:	bf00      	nop
 80019b0:	3710      	adds	r7, #16
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	40021000 	.word	0x40021000
 80019bc:	40000400 	.word	0x40000400

080019c0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b088      	sub	sp, #32
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c8:	f107 0310 	add.w	r3, r7, #16
 80019cc:	2200      	movs	r2, #0
 80019ce:	601a      	str	r2, [r3, #0]
 80019d0:	605a      	str	r2, [r3, #4]
 80019d2:	609a      	str	r2, [r3, #8]
 80019d4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a0f      	ldr	r2, [pc, #60]	; (8001a18 <HAL_TIM_MspPostInit+0x58>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d117      	bne.n	8001a10 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019e0:	4b0e      	ldr	r3, [pc, #56]	; (8001a1c <HAL_TIM_MspPostInit+0x5c>)
 80019e2:	699b      	ldr	r3, [r3, #24]
 80019e4:	4a0d      	ldr	r2, [pc, #52]	; (8001a1c <HAL_TIM_MspPostInit+0x5c>)
 80019e6:	f043 0304 	orr.w	r3, r3, #4
 80019ea:	6193      	str	r3, [r2, #24]
 80019ec:	4b0b      	ldr	r3, [pc, #44]	; (8001a1c <HAL_TIM_MspPostInit+0x5c>)
 80019ee:	699b      	ldr	r3, [r3, #24]
 80019f0:	f003 0304 	and.w	r3, r3, #4
 80019f4:	60fb      	str	r3, [r7, #12]
 80019f6:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80019f8:	2340      	movs	r3, #64	; 0x40
 80019fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019fc:	2302      	movs	r3, #2
 80019fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a00:	2302      	movs	r3, #2
 8001a02:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a04:	f107 0310 	add.w	r3, r7, #16
 8001a08:	4619      	mov	r1, r3
 8001a0a:	4805      	ldr	r0, [pc, #20]	; (8001a20 <HAL_TIM_MspPostInit+0x60>)
 8001a0c:	f000 fcb6 	bl	800237c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001a10:	bf00      	nop
 8001a12:	3720      	adds	r7, #32
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	40000400 	.word	0x40000400
 8001a1c:	40021000 	.word	0x40021000
 8001a20:	40010800 	.word	0x40010800

08001a24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b088      	sub	sp, #32
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a2c:	f107 0310 	add.w	r3, r7, #16
 8001a30:	2200      	movs	r2, #0
 8001a32:	601a      	str	r2, [r3, #0]
 8001a34:	605a      	str	r2, [r3, #4]
 8001a36:	609a      	str	r2, [r3, #8]
 8001a38:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a1f      	ldr	r2, [pc, #124]	; (8001abc <HAL_UART_MspInit+0x98>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d137      	bne.n	8001ab4 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a44:	4b1e      	ldr	r3, [pc, #120]	; (8001ac0 <HAL_UART_MspInit+0x9c>)
 8001a46:	69db      	ldr	r3, [r3, #28]
 8001a48:	4a1d      	ldr	r2, [pc, #116]	; (8001ac0 <HAL_UART_MspInit+0x9c>)
 8001a4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a4e:	61d3      	str	r3, [r2, #28]
 8001a50:	4b1b      	ldr	r3, [pc, #108]	; (8001ac0 <HAL_UART_MspInit+0x9c>)
 8001a52:	69db      	ldr	r3, [r3, #28]
 8001a54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a58:	60fb      	str	r3, [r7, #12]
 8001a5a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a5c:	4b18      	ldr	r3, [pc, #96]	; (8001ac0 <HAL_UART_MspInit+0x9c>)
 8001a5e:	699b      	ldr	r3, [r3, #24]
 8001a60:	4a17      	ldr	r2, [pc, #92]	; (8001ac0 <HAL_UART_MspInit+0x9c>)
 8001a62:	f043 0304 	orr.w	r3, r3, #4
 8001a66:	6193      	str	r3, [r2, #24]
 8001a68:	4b15      	ldr	r3, [pc, #84]	; (8001ac0 <HAL_UART_MspInit+0x9c>)
 8001a6a:	699b      	ldr	r3, [r3, #24]
 8001a6c:	f003 0304 	and.w	r3, r3, #4
 8001a70:	60bb      	str	r3, [r7, #8]
 8001a72:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001a74:	2304      	movs	r3, #4
 8001a76:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a78:	2302      	movs	r3, #2
 8001a7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a80:	f107 0310 	add.w	r3, r7, #16
 8001a84:	4619      	mov	r1, r3
 8001a86:	480f      	ldr	r0, [pc, #60]	; (8001ac4 <HAL_UART_MspInit+0xa0>)
 8001a88:	f000 fc78 	bl	800237c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001a8c:	2308      	movs	r3, #8
 8001a8e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a90:	2300      	movs	r3, #0
 8001a92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a94:	2300      	movs	r3, #0
 8001a96:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a98:	f107 0310 	add.w	r3, r7, #16
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	4809      	ldr	r0, [pc, #36]	; (8001ac4 <HAL_UART_MspInit+0xa0>)
 8001aa0:	f000 fc6c 	bl	800237c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	2100      	movs	r1, #0
 8001aa8:	2026      	movs	r0, #38	; 0x26
 8001aaa:	f000 fb7e 	bl	80021aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001aae:	2026      	movs	r0, #38	; 0x26
 8001ab0:	f000 fb97 	bl	80021e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001ab4:	bf00      	nop
 8001ab6:	3720      	adds	r7, #32
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	40004400 	.word	0x40004400
 8001ac0:	40021000 	.word	0x40021000
 8001ac4:	40010800 	.word	0x40010800

08001ac8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001acc:	e7fe      	b.n	8001acc <NMI_Handler+0x4>

08001ace <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ace:	b480      	push	{r7}
 8001ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ad2:	e7fe      	b.n	8001ad2 <HardFault_Handler+0x4>

08001ad4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ad8:	e7fe      	b.n	8001ad8 <MemManage_Handler+0x4>

08001ada <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ada:	b480      	push	{r7}
 8001adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ade:	e7fe      	b.n	8001ade <BusFault_Handler+0x4>

08001ae0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ae4:	e7fe      	b.n	8001ae4 <UsageFault_Handler+0x4>

08001ae6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ae6:	b480      	push	{r7}
 8001ae8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001aea:	bf00      	nop
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bc80      	pop	{r7}
 8001af0:	4770      	bx	lr

08001af2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001af2:	b480      	push	{r7}
 8001af4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001af6:	bf00      	nop
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bc80      	pop	{r7}
 8001afc:	4770      	bx	lr

08001afe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001afe:	b480      	push	{r7}
 8001b00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b02:	bf00      	nop
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bc80      	pop	{r7}
 8001b08:	4770      	bx	lr

08001b0a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b0e:	f000 fa59 	bl	8001fc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b12:	bf00      	nop
 8001b14:	bd80      	pop	{r7, pc}
	...

08001b18 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b1c:	4802      	ldr	r0, [pc, #8]	; (8001b28 <TIM2_IRQHandler+0x10>)
 8001b1e:	f001 fb8b 	bl	8003238 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b22:	bf00      	nop
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	2000024c 	.word	0x2000024c

08001b2c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001b30:	4802      	ldr	r0, [pc, #8]	; (8001b3c <TIM3_IRQHandler+0x10>)
 8001b32:	f001 fb81 	bl	8003238 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001b36:	bf00      	nop
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	20000204 	.word	0x20000204

08001b40 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001b44:	4802      	ldr	r0, [pc, #8]	; (8001b50 <USART2_IRQHandler+0x10>)
 8001b46:	f002 fa15 	bl	8003f74 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001b4a:	bf00      	nop
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	20000294 	.word	0x20000294

08001b54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b086      	sub	sp, #24
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b5c:	4a14      	ldr	r2, [pc, #80]	; (8001bb0 <_sbrk+0x5c>)
 8001b5e:	4b15      	ldr	r3, [pc, #84]	; (8001bb4 <_sbrk+0x60>)
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b68:	4b13      	ldr	r3, [pc, #76]	; (8001bb8 <_sbrk+0x64>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d102      	bne.n	8001b76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b70:	4b11      	ldr	r3, [pc, #68]	; (8001bb8 <_sbrk+0x64>)
 8001b72:	4a12      	ldr	r2, [pc, #72]	; (8001bbc <_sbrk+0x68>)
 8001b74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b76:	4b10      	ldr	r3, [pc, #64]	; (8001bb8 <_sbrk+0x64>)
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4413      	add	r3, r2
 8001b7e:	693a      	ldr	r2, [r7, #16]
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d207      	bcs.n	8001b94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b84:	f002 ff46 	bl	8004a14 <__errno>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	220c      	movs	r2, #12
 8001b8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b8e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b92:	e009      	b.n	8001ba8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b94:	4b08      	ldr	r3, [pc, #32]	; (8001bb8 <_sbrk+0x64>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b9a:	4b07      	ldr	r3, [pc, #28]	; (8001bb8 <_sbrk+0x64>)
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4413      	add	r3, r2
 8001ba2:	4a05      	ldr	r2, [pc, #20]	; (8001bb8 <_sbrk+0x64>)
 8001ba4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3718      	adds	r7, #24
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	20005000 	.word	0x20005000
 8001bb4:	00000400 	.word	0x00000400
 8001bb8:	200001c4 	.word	0x200001c4
 8001bbc:	200002f8 	.word	0x200002f8

08001bc0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bc4:	bf00      	nop
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bc80      	pop	{r7}
 8001bca:	4770      	bx	lr

08001bcc <setTimer1>:
void setTimer0(int duration) {
	timer0_counter = duration/TIMER_CYCLE;
	timer0_flag = 0;
}

void setTimer1(int duration) {
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
	timer1_counter = duration/TIMER_CYCLE;
 8001bd4:	4b07      	ldr	r3, [pc, #28]	; (8001bf4 <setTimer1+0x28>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	687a      	ldr	r2, [r7, #4]
 8001bda:	fb92 f3f3 	sdiv	r3, r2, r3
 8001bde:	4a06      	ldr	r2, [pc, #24]	; (8001bf8 <setTimer1+0x2c>)
 8001be0:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8001be2:	4b06      	ldr	r3, [pc, #24]	; (8001bfc <setTimer1+0x30>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	601a      	str	r2, [r3, #0]
}
 8001be8:	bf00      	nop
 8001bea:	370c      	adds	r7, #12
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bc80      	pop	{r7}
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	2000003c 	.word	0x2000003c
 8001bf8:	200001cc 	.word	0x200001cc
 8001bfc:	200001e4 	.word	0x200001e4

08001c00 <setTimer4>:
void setTimer3(int duration) {
	timer3_counter = duration/TIMER_CYCLE;
	timer3_flag = 0;
}

void setTimer4(int duration) {
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
	timer4_counter = duration/TIMER_CYCLE;
 8001c08:	4b07      	ldr	r3, [pc, #28]	; (8001c28 <setTimer4+0x28>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	687a      	ldr	r2, [r7, #4]
 8001c0e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001c12:	4a06      	ldr	r2, [pc, #24]	; (8001c2c <setTimer4+0x2c>)
 8001c14:	6013      	str	r3, [r2, #0]
	timer4_flag = 0;
 8001c16:	4b06      	ldr	r3, [pc, #24]	; (8001c30 <setTimer4+0x30>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	601a      	str	r2, [r3, #0]
}
 8001c1c:	bf00      	nop
 8001c1e:	370c      	adds	r7, #12
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bc80      	pop	{r7}
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	2000003c 	.word	0x2000003c
 8001c2c:	200002dc 	.word	0x200002dc
 8001c30:	200001f0 	.word	0x200001f0

08001c34 <setTimer6>:
void setTimer5(int duration) {
	timer5_counter = duration/TIMER_CYCLE;
	timer5_flag = 0;
}

void setTimer6(int duration) {
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
	timer6_counter = duration/TIMER_CYCLE;
 8001c3c:	4b07      	ldr	r3, [pc, #28]	; (8001c5c <setTimer6+0x28>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	687a      	ldr	r2, [r7, #4]
 8001c42:	fb92 f3f3 	sdiv	r3, r2, r3
 8001c46:	4a06      	ldr	r2, [pc, #24]	; (8001c60 <setTimer6+0x2c>)
 8001c48:	6013      	str	r3, [r2, #0]
	timer6_flag = 0;
 8001c4a:	4b06      	ldr	r3, [pc, #24]	; (8001c64 <setTimer6+0x30>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	601a      	str	r2, [r3, #0]
}
 8001c50:	bf00      	nop
 8001c52:	370c      	adds	r7, #12
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bc80      	pop	{r7}
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	2000003c 	.word	0x2000003c
 8001c60:	200001dc 	.word	0x200001dc
 8001c64:	200001f8 	.word	0x200001f8

08001c68 <timer_run>:

void timer_run() {
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
	if (timer0_counter > 0) {
 8001c6c:	4b39      	ldr	r3, [pc, #228]	; (8001d54 <timer_run+0xec>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	dd0b      	ble.n	8001c8c <timer_run+0x24>
		timer0_counter--;
 8001c74:	4b37      	ldr	r3, [pc, #220]	; (8001d54 <timer_run+0xec>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	3b01      	subs	r3, #1
 8001c7a:	4a36      	ldr	r2, [pc, #216]	; (8001d54 <timer_run+0xec>)
 8001c7c:	6013      	str	r3, [r2, #0]
		if (timer0_counter == 0) timer0_flag = 1;
 8001c7e:	4b35      	ldr	r3, [pc, #212]	; (8001d54 <timer_run+0xec>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d102      	bne.n	8001c8c <timer_run+0x24>
 8001c86:	4b34      	ldr	r3, [pc, #208]	; (8001d58 <timer_run+0xf0>)
 8001c88:	2201      	movs	r2, #1
 8001c8a:	601a      	str	r2, [r3, #0]
	}
	if (timer1_counter > 0) {
 8001c8c:	4b33      	ldr	r3, [pc, #204]	; (8001d5c <timer_run+0xf4>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	dd0b      	ble.n	8001cac <timer_run+0x44>
		timer1_counter--;
 8001c94:	4b31      	ldr	r3, [pc, #196]	; (8001d5c <timer_run+0xf4>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	3b01      	subs	r3, #1
 8001c9a:	4a30      	ldr	r2, [pc, #192]	; (8001d5c <timer_run+0xf4>)
 8001c9c:	6013      	str	r3, [r2, #0]
		if (timer1_counter == 0) timer1_flag = 1;
 8001c9e:	4b2f      	ldr	r3, [pc, #188]	; (8001d5c <timer_run+0xf4>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d102      	bne.n	8001cac <timer_run+0x44>
 8001ca6:	4b2e      	ldr	r3, [pc, #184]	; (8001d60 <timer_run+0xf8>)
 8001ca8:	2201      	movs	r2, #1
 8001caa:	601a      	str	r2, [r3, #0]
	}
	if (timer2_counter > 0) {
 8001cac:	4b2d      	ldr	r3, [pc, #180]	; (8001d64 <timer_run+0xfc>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	dd0b      	ble.n	8001ccc <timer_run+0x64>
		timer2_counter--;
 8001cb4:	4b2b      	ldr	r3, [pc, #172]	; (8001d64 <timer_run+0xfc>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	3b01      	subs	r3, #1
 8001cba:	4a2a      	ldr	r2, [pc, #168]	; (8001d64 <timer_run+0xfc>)
 8001cbc:	6013      	str	r3, [r2, #0]
		if (timer2_counter == 0) timer2_flag = 1;
 8001cbe:	4b29      	ldr	r3, [pc, #164]	; (8001d64 <timer_run+0xfc>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d102      	bne.n	8001ccc <timer_run+0x64>
 8001cc6:	4b28      	ldr	r3, [pc, #160]	; (8001d68 <timer_run+0x100>)
 8001cc8:	2201      	movs	r2, #1
 8001cca:	601a      	str	r2, [r3, #0]
	}
	if (timer3_counter > 0) {
 8001ccc:	4b27      	ldr	r3, [pc, #156]	; (8001d6c <timer_run+0x104>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	dd0b      	ble.n	8001cec <timer_run+0x84>
		timer3_counter--;
 8001cd4:	4b25      	ldr	r3, [pc, #148]	; (8001d6c <timer_run+0x104>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	3b01      	subs	r3, #1
 8001cda:	4a24      	ldr	r2, [pc, #144]	; (8001d6c <timer_run+0x104>)
 8001cdc:	6013      	str	r3, [r2, #0]
		if (timer3_counter == 0) timer3_flag = 1;
 8001cde:	4b23      	ldr	r3, [pc, #140]	; (8001d6c <timer_run+0x104>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d102      	bne.n	8001cec <timer_run+0x84>
 8001ce6:	4b22      	ldr	r3, [pc, #136]	; (8001d70 <timer_run+0x108>)
 8001ce8:	2201      	movs	r2, #1
 8001cea:	601a      	str	r2, [r3, #0]
	}
	if (timer4_counter > 0) {
 8001cec:	4b21      	ldr	r3, [pc, #132]	; (8001d74 <timer_run+0x10c>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	dd0b      	ble.n	8001d0c <timer_run+0xa4>
		timer4_counter--;
 8001cf4:	4b1f      	ldr	r3, [pc, #124]	; (8001d74 <timer_run+0x10c>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	3b01      	subs	r3, #1
 8001cfa:	4a1e      	ldr	r2, [pc, #120]	; (8001d74 <timer_run+0x10c>)
 8001cfc:	6013      	str	r3, [r2, #0]
		if (timer4_counter == 0) timer4_flag = 1;
 8001cfe:	4b1d      	ldr	r3, [pc, #116]	; (8001d74 <timer_run+0x10c>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d102      	bne.n	8001d0c <timer_run+0xa4>
 8001d06:	4b1c      	ldr	r3, [pc, #112]	; (8001d78 <timer_run+0x110>)
 8001d08:	2201      	movs	r2, #1
 8001d0a:	601a      	str	r2, [r3, #0]
	}
	if (timer5_counter > 0) {
 8001d0c:	4b1b      	ldr	r3, [pc, #108]	; (8001d7c <timer_run+0x114>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	dd0b      	ble.n	8001d2c <timer_run+0xc4>
		timer5_counter--;
 8001d14:	4b19      	ldr	r3, [pc, #100]	; (8001d7c <timer_run+0x114>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	3b01      	subs	r3, #1
 8001d1a:	4a18      	ldr	r2, [pc, #96]	; (8001d7c <timer_run+0x114>)
 8001d1c:	6013      	str	r3, [r2, #0]
		if (timer5_counter == 0) timer5_flag = 1;
 8001d1e:	4b17      	ldr	r3, [pc, #92]	; (8001d7c <timer_run+0x114>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d102      	bne.n	8001d2c <timer_run+0xc4>
 8001d26:	4b16      	ldr	r3, [pc, #88]	; (8001d80 <timer_run+0x118>)
 8001d28:	2201      	movs	r2, #1
 8001d2a:	601a      	str	r2, [r3, #0]
	}
	if (timer6_counter > 0) {
 8001d2c:	4b15      	ldr	r3, [pc, #84]	; (8001d84 <timer_run+0x11c>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	dd0b      	ble.n	8001d4c <timer_run+0xe4>
		timer6_counter--;
 8001d34:	4b13      	ldr	r3, [pc, #76]	; (8001d84 <timer_run+0x11c>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	3b01      	subs	r3, #1
 8001d3a:	4a12      	ldr	r2, [pc, #72]	; (8001d84 <timer_run+0x11c>)
 8001d3c:	6013      	str	r3, [r2, #0]
		if (timer6_counter == 0) timer6_flag = 1;
 8001d3e:	4b11      	ldr	r3, [pc, #68]	; (8001d84 <timer_run+0x11c>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d102      	bne.n	8001d4c <timer_run+0xe4>
 8001d46:	4b10      	ldr	r3, [pc, #64]	; (8001d88 <timer_run+0x120>)
 8001d48:	2201      	movs	r2, #1
 8001d4a:	601a      	str	r2, [r3, #0]
	}
}
 8001d4c:	bf00      	nop
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bc80      	pop	{r7}
 8001d52:	4770      	bx	lr
 8001d54:	200001c8 	.word	0x200001c8
 8001d58:	200001e0 	.word	0x200001e0
 8001d5c:	200001cc 	.word	0x200001cc
 8001d60:	200001e4 	.word	0x200001e4
 8001d64:	200001d0 	.word	0x200001d0
 8001d68:	200001e8 	.word	0x200001e8
 8001d6c:	200001d4 	.word	0x200001d4
 8001d70:	200001ec 	.word	0x200001ec
 8001d74:	200002dc 	.word	0x200002dc
 8001d78:	200001f0 	.word	0x200001f0
 8001d7c:	200001d8 	.word	0x200001d8
 8001d80:	200001f4 	.word	0x200001f4
 8001d84:	200001dc 	.word	0x200001dc
 8001d88:	200001f8 	.word	0x200001f8

08001d8c <disp_t_red_uart>:
#include "string.h"
#include "stdio.h"
#include "input_reading.h"
#include "input_processing.h"

void disp_t_red_uart() {
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart2, "!T_RED = ", 11, 50);
 8001d92:	2332      	movs	r3, #50	; 0x32
 8001d94:	220b      	movs	r2, #11
 8001d96:	490b      	ldr	r1, [pc, #44]	; (8001dc4 <disp_t_red_uart+0x38>)
 8001d98:	480b      	ldr	r0, [pc, #44]	; (8001dc8 <disp_t_red_uart+0x3c>)
 8001d9a:	f002 f867 	bl	8003e6c <HAL_UART_Transmit>
	char buffer[16];
	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, sprintf(buffer, "%d\n\r", T_RED), 50);
 8001d9e:	4b0b      	ldr	r3, [pc, #44]	; (8001dcc <disp_t_red_uart+0x40>)
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	463b      	mov	r3, r7
 8001da4:	490a      	ldr	r1, [pc, #40]	; (8001dd0 <disp_t_red_uart+0x44>)
 8001da6:	4618      	mov	r0, r3
 8001da8:	f002 fe66 	bl	8004a78 <siprintf>
 8001dac:	4603      	mov	r3, r0
 8001dae:	b29a      	uxth	r2, r3
 8001db0:	4639      	mov	r1, r7
 8001db2:	2332      	movs	r3, #50	; 0x32
 8001db4:	4804      	ldr	r0, [pc, #16]	; (8001dc8 <disp_t_red_uart+0x3c>)
 8001db6:	f002 f859 	bl	8003e6c <HAL_UART_Transmit>
}
 8001dba:	bf00      	nop
 8001dbc:	3710      	adds	r7, #16
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	08005364 	.word	0x08005364
 8001dc8:	20000294 	.word	0x20000294
 8001dcc:	20000000 	.word	0x20000000
 8001dd0:	08005370 	.word	0x08005370

08001dd4 <disp_t_amber_uart>:

void disp_t_amber_uart() {
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart2, "!T_AMBER = ", 11, 50);
 8001dda:	2332      	movs	r3, #50	; 0x32
 8001ddc:	220b      	movs	r2, #11
 8001dde:	490b      	ldr	r1, [pc, #44]	; (8001e0c <disp_t_amber_uart+0x38>)
 8001de0:	480b      	ldr	r0, [pc, #44]	; (8001e10 <disp_t_amber_uart+0x3c>)
 8001de2:	f002 f843 	bl	8003e6c <HAL_UART_Transmit>
	char buffer[16];
		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, sprintf(buffer, "%d\n\r", T_AMBER), 50);
 8001de6:	4b0b      	ldr	r3, [pc, #44]	; (8001e14 <disp_t_amber_uart+0x40>)
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	463b      	mov	r3, r7
 8001dec:	490a      	ldr	r1, [pc, #40]	; (8001e18 <disp_t_amber_uart+0x44>)
 8001dee:	4618      	mov	r0, r3
 8001df0:	f002 fe42 	bl	8004a78 <siprintf>
 8001df4:	4603      	mov	r3, r0
 8001df6:	b29a      	uxth	r2, r3
 8001df8:	4639      	mov	r1, r7
 8001dfa:	2332      	movs	r3, #50	; 0x32
 8001dfc:	4804      	ldr	r0, [pc, #16]	; (8001e10 <disp_t_amber_uart+0x3c>)
 8001dfe:	f002 f835 	bl	8003e6c <HAL_UART_Transmit>
}
 8001e02:	bf00      	nop
 8001e04:	3710      	adds	r7, #16
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	08005378 	.word	0x08005378
 8001e10:	20000294 	.word	0x20000294
 8001e14:	20000004 	.word	0x20000004
 8001e18:	08005370 	.word	0x08005370

08001e1c <disp_t_green_uart>:

void disp_t_green_uart() {
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b084      	sub	sp, #16
 8001e20:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart2, "!T_GREEN = ", 11, 50);
 8001e22:	2332      	movs	r3, #50	; 0x32
 8001e24:	220b      	movs	r2, #11
 8001e26:	490b      	ldr	r1, [pc, #44]	; (8001e54 <disp_t_green_uart+0x38>)
 8001e28:	480b      	ldr	r0, [pc, #44]	; (8001e58 <disp_t_green_uart+0x3c>)
 8001e2a:	f002 f81f 	bl	8003e6c <HAL_UART_Transmit>
	char buffer[16];
		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, sprintf(buffer, "%d\n\r", T_GREEN), 50);
 8001e2e:	4b0b      	ldr	r3, [pc, #44]	; (8001e5c <disp_t_green_uart+0x40>)
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	463b      	mov	r3, r7
 8001e34:	490a      	ldr	r1, [pc, #40]	; (8001e60 <disp_t_green_uart+0x44>)
 8001e36:	4618      	mov	r0, r3
 8001e38:	f002 fe1e 	bl	8004a78 <siprintf>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	b29a      	uxth	r2, r3
 8001e40:	4639      	mov	r1, r7
 8001e42:	2332      	movs	r3, #50	; 0x32
 8001e44:	4804      	ldr	r0, [pc, #16]	; (8001e58 <disp_t_green_uart+0x3c>)
 8001e46:	f002 f811 	bl	8003e6c <HAL_UART_Transmit>
}
 8001e4a:	bf00      	nop
 8001e4c:	3710      	adds	r7, #16
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	08005384 	.word	0x08005384
 8001e58:	20000294 	.word	0x20000294
 8001e5c:	20000008 	.word	0x20000008
 8001e60:	08005370 	.word	0x08005370

08001e64 <disp_time_uart>:

void disp_time_uart(int t_road_1, int t_road_2) {
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b086      	sub	sp, #24
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	6039      	str	r1, [r7, #0]
	char buffer[16];
	HAL_UART_Transmit(&huart2, "!T_ROAD_1= ", 12, 50);
 8001e6e:	2332      	movs	r3, #50	; 0x32
 8001e70:	220c      	movs	r2, #12
 8001e72:	4919      	ldr	r1, [pc, #100]	; (8001ed8 <disp_time_uart+0x74>)
 8001e74:	4819      	ldr	r0, [pc, #100]	; (8001edc <disp_time_uart+0x78>)
 8001e76:	f001 fff9 	bl	8003e6c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, sprintf(buffer, "%d\n\r", t_road_1), 50);
 8001e7a:	f107 0308 	add.w	r3, r7, #8
 8001e7e:	687a      	ldr	r2, [r7, #4]
 8001e80:	4917      	ldr	r1, [pc, #92]	; (8001ee0 <disp_time_uart+0x7c>)
 8001e82:	4618      	mov	r0, r3
 8001e84:	f002 fdf8 	bl	8004a78 <siprintf>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	b29a      	uxth	r2, r3
 8001e8c:	f107 0108 	add.w	r1, r7, #8
 8001e90:	2332      	movs	r3, #50	; 0x32
 8001e92:	4812      	ldr	r0, [pc, #72]	; (8001edc <disp_time_uart+0x78>)
 8001e94:	f001 ffea 	bl	8003e6c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, "!T_ROAD_2= ", 12, 50);
 8001e98:	2332      	movs	r3, #50	; 0x32
 8001e9a:	220c      	movs	r2, #12
 8001e9c:	4911      	ldr	r1, [pc, #68]	; (8001ee4 <disp_time_uart+0x80>)
 8001e9e:	480f      	ldr	r0, [pc, #60]	; (8001edc <disp_time_uart+0x78>)
 8001ea0:	f001 ffe4 	bl	8003e6c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, sprintf(buffer, "%d\n\r", t_road_2), 50);
 8001ea4:	f107 0308 	add.w	r3, r7, #8
 8001ea8:	683a      	ldr	r2, [r7, #0]
 8001eaa:	490d      	ldr	r1, [pc, #52]	; (8001ee0 <disp_time_uart+0x7c>)
 8001eac:	4618      	mov	r0, r3
 8001eae:	f002 fde3 	bl	8004a78 <siprintf>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	b29a      	uxth	r2, r3
 8001eb6:	f107 0108 	add.w	r1, r7, #8
 8001eba:	2332      	movs	r3, #50	; 0x32
 8001ebc:	4807      	ldr	r0, [pc, #28]	; (8001edc <disp_time_uart+0x78>)
 8001ebe:	f001 ffd5 	bl	8003e6c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, "\n", 2, 50);
 8001ec2:	2332      	movs	r3, #50	; 0x32
 8001ec4:	2202      	movs	r2, #2
 8001ec6:	4908      	ldr	r1, [pc, #32]	; (8001ee8 <disp_time_uart+0x84>)
 8001ec8:	4804      	ldr	r0, [pc, #16]	; (8001edc <disp_time_uart+0x78>)
 8001eca:	f001 ffcf 	bl	8003e6c <HAL_UART_Transmit>
}
 8001ece:	bf00      	nop
 8001ed0:	3718      	adds	r7, #24
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	08005390 	.word	0x08005390
 8001edc:	20000294 	.word	0x20000294
 8001ee0:	08005370 	.word	0x08005370
 8001ee4:	0800539c 	.word	0x0800539c
 8001ee8:	080053a8 	.word	0x080053a8

08001eec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001eec:	f7ff fe68 	bl	8001bc0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ef0:	480b      	ldr	r0, [pc, #44]	; (8001f20 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001ef2:	490c      	ldr	r1, [pc, #48]	; (8001f24 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001ef4:	4a0c      	ldr	r2, [pc, #48]	; (8001f28 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001ef6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ef8:	e002      	b.n	8001f00 <LoopCopyDataInit>

08001efa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001efa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001efc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001efe:	3304      	adds	r3, #4

08001f00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f04:	d3f9      	bcc.n	8001efa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f06:	4a09      	ldr	r2, [pc, #36]	; (8001f2c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001f08:	4c09      	ldr	r4, [pc, #36]	; (8001f30 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f0c:	e001      	b.n	8001f12 <LoopFillZerobss>

08001f0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f10:	3204      	adds	r2, #4

08001f12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f14:	d3fb      	bcc.n	8001f0e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f16:	f002 fd83 	bl	8004a20 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001f1a:	f7ff f82f 	bl	8000f7c <main>
  bx lr
 8001f1e:	4770      	bx	lr
  ldr r0, =_sdata
 8001f20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f24:	200000ac 	.word	0x200000ac
  ldr r2, =_sidata
 8001f28:	08005414 	.word	0x08005414
  ldr r2, =_sbss
 8001f2c:	200000ac 	.word	0x200000ac
  ldr r4, =_ebss
 8001f30:	200002f4 	.word	0x200002f4

08001f34 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f34:	e7fe      	b.n	8001f34 <ADC1_2_IRQHandler>
	...

08001f38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f3c:	4b08      	ldr	r3, [pc, #32]	; (8001f60 <HAL_Init+0x28>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a07      	ldr	r2, [pc, #28]	; (8001f60 <HAL_Init+0x28>)
 8001f42:	f043 0310 	orr.w	r3, r3, #16
 8001f46:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f48:	2003      	movs	r0, #3
 8001f4a:	f000 f923 	bl	8002194 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f4e:	200f      	movs	r0, #15
 8001f50:	f000 f808 	bl	8001f64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f54:	f7ff fcc2 	bl	80018dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f58:	2300      	movs	r3, #0
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	40022000 	.word	0x40022000

08001f64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f6c:	4b12      	ldr	r3, [pc, #72]	; (8001fb8 <HAL_InitTick+0x54>)
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	4b12      	ldr	r3, [pc, #72]	; (8001fbc <HAL_InitTick+0x58>)
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	4619      	mov	r1, r3
 8001f76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f82:	4618      	mov	r0, r3
 8001f84:	f000 f93b 	bl	80021fe <HAL_SYSTICK_Config>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d001      	beq.n	8001f92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e00e      	b.n	8001fb0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2b0f      	cmp	r3, #15
 8001f96:	d80a      	bhi.n	8001fae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f98:	2200      	movs	r2, #0
 8001f9a:	6879      	ldr	r1, [r7, #4]
 8001f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001fa0:	f000 f903 	bl	80021aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fa4:	4a06      	ldr	r2, [pc, #24]	; (8001fc0 <HAL_InitTick+0x5c>)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001faa:	2300      	movs	r3, #0
 8001fac:	e000      	b.n	8001fb0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3708      	adds	r7, #8
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	20000038 	.word	0x20000038
 8001fbc:	20000044 	.word	0x20000044
 8001fc0:	20000040 	.word	0x20000040

08001fc4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fc8:	4b05      	ldr	r3, [pc, #20]	; (8001fe0 <HAL_IncTick+0x1c>)
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	461a      	mov	r2, r3
 8001fce:	4b05      	ldr	r3, [pc, #20]	; (8001fe4 <HAL_IncTick+0x20>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4413      	add	r3, r2
 8001fd4:	4a03      	ldr	r2, [pc, #12]	; (8001fe4 <HAL_IncTick+0x20>)
 8001fd6:	6013      	str	r3, [r2, #0]
}
 8001fd8:	bf00      	nop
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bc80      	pop	{r7}
 8001fde:	4770      	bx	lr
 8001fe0:	20000044 	.word	0x20000044
 8001fe4:	200002e0 	.word	0x200002e0

08001fe8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
  return uwTick;
 8001fec:	4b02      	ldr	r3, [pc, #8]	; (8001ff8 <HAL_GetTick+0x10>)
 8001fee:	681b      	ldr	r3, [r3, #0]
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bc80      	pop	{r7}
 8001ff6:	4770      	bx	lr
 8001ff8:	200002e0 	.word	0x200002e0

08001ffc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b085      	sub	sp, #20
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	f003 0307 	and.w	r3, r3, #7
 800200a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800200c:	4b0c      	ldr	r3, [pc, #48]	; (8002040 <__NVIC_SetPriorityGrouping+0x44>)
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002012:	68ba      	ldr	r2, [r7, #8]
 8002014:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002018:	4013      	ands	r3, r2
 800201a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002024:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002028:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800202c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800202e:	4a04      	ldr	r2, [pc, #16]	; (8002040 <__NVIC_SetPriorityGrouping+0x44>)
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	60d3      	str	r3, [r2, #12]
}
 8002034:	bf00      	nop
 8002036:	3714      	adds	r7, #20
 8002038:	46bd      	mov	sp, r7
 800203a:	bc80      	pop	{r7}
 800203c:	4770      	bx	lr
 800203e:	bf00      	nop
 8002040:	e000ed00 	.word	0xe000ed00

08002044 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002048:	4b04      	ldr	r3, [pc, #16]	; (800205c <__NVIC_GetPriorityGrouping+0x18>)
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	0a1b      	lsrs	r3, r3, #8
 800204e:	f003 0307 	and.w	r3, r3, #7
}
 8002052:	4618      	mov	r0, r3
 8002054:	46bd      	mov	sp, r7
 8002056:	bc80      	pop	{r7}
 8002058:	4770      	bx	lr
 800205a:	bf00      	nop
 800205c:	e000ed00 	.word	0xe000ed00

08002060 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	4603      	mov	r3, r0
 8002068:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800206a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800206e:	2b00      	cmp	r3, #0
 8002070:	db0b      	blt.n	800208a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002072:	79fb      	ldrb	r3, [r7, #7]
 8002074:	f003 021f 	and.w	r2, r3, #31
 8002078:	4906      	ldr	r1, [pc, #24]	; (8002094 <__NVIC_EnableIRQ+0x34>)
 800207a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800207e:	095b      	lsrs	r3, r3, #5
 8002080:	2001      	movs	r0, #1
 8002082:	fa00 f202 	lsl.w	r2, r0, r2
 8002086:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800208a:	bf00      	nop
 800208c:	370c      	adds	r7, #12
 800208e:	46bd      	mov	sp, r7
 8002090:	bc80      	pop	{r7}
 8002092:	4770      	bx	lr
 8002094:	e000e100 	.word	0xe000e100

08002098 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
 800209e:	4603      	mov	r3, r0
 80020a0:	6039      	str	r1, [r7, #0]
 80020a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	db0a      	blt.n	80020c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	b2da      	uxtb	r2, r3
 80020b0:	490c      	ldr	r1, [pc, #48]	; (80020e4 <__NVIC_SetPriority+0x4c>)
 80020b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b6:	0112      	lsls	r2, r2, #4
 80020b8:	b2d2      	uxtb	r2, r2
 80020ba:	440b      	add	r3, r1
 80020bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020c0:	e00a      	b.n	80020d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	b2da      	uxtb	r2, r3
 80020c6:	4908      	ldr	r1, [pc, #32]	; (80020e8 <__NVIC_SetPriority+0x50>)
 80020c8:	79fb      	ldrb	r3, [r7, #7]
 80020ca:	f003 030f 	and.w	r3, r3, #15
 80020ce:	3b04      	subs	r3, #4
 80020d0:	0112      	lsls	r2, r2, #4
 80020d2:	b2d2      	uxtb	r2, r2
 80020d4:	440b      	add	r3, r1
 80020d6:	761a      	strb	r2, [r3, #24]
}
 80020d8:	bf00      	nop
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	bc80      	pop	{r7}
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	e000e100 	.word	0xe000e100
 80020e8:	e000ed00 	.word	0xe000ed00

080020ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b089      	sub	sp, #36	; 0x24
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	60f8      	str	r0, [r7, #12]
 80020f4:	60b9      	str	r1, [r7, #8]
 80020f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	f003 0307 	and.w	r3, r3, #7
 80020fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002100:	69fb      	ldr	r3, [r7, #28]
 8002102:	f1c3 0307 	rsb	r3, r3, #7
 8002106:	2b04      	cmp	r3, #4
 8002108:	bf28      	it	cs
 800210a:	2304      	movcs	r3, #4
 800210c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	3304      	adds	r3, #4
 8002112:	2b06      	cmp	r3, #6
 8002114:	d902      	bls.n	800211c <NVIC_EncodePriority+0x30>
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	3b03      	subs	r3, #3
 800211a:	e000      	b.n	800211e <NVIC_EncodePriority+0x32>
 800211c:	2300      	movs	r3, #0
 800211e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002120:	f04f 32ff 	mov.w	r2, #4294967295
 8002124:	69bb      	ldr	r3, [r7, #24]
 8002126:	fa02 f303 	lsl.w	r3, r2, r3
 800212a:	43da      	mvns	r2, r3
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	401a      	ands	r2, r3
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002134:	f04f 31ff 	mov.w	r1, #4294967295
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	fa01 f303 	lsl.w	r3, r1, r3
 800213e:	43d9      	mvns	r1, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002144:	4313      	orrs	r3, r2
         );
}
 8002146:	4618      	mov	r0, r3
 8002148:	3724      	adds	r7, #36	; 0x24
 800214a:	46bd      	mov	sp, r7
 800214c:	bc80      	pop	{r7}
 800214e:	4770      	bx	lr

08002150 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	3b01      	subs	r3, #1
 800215c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002160:	d301      	bcc.n	8002166 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002162:	2301      	movs	r3, #1
 8002164:	e00f      	b.n	8002186 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002166:	4a0a      	ldr	r2, [pc, #40]	; (8002190 <SysTick_Config+0x40>)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	3b01      	subs	r3, #1
 800216c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800216e:	210f      	movs	r1, #15
 8002170:	f04f 30ff 	mov.w	r0, #4294967295
 8002174:	f7ff ff90 	bl	8002098 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002178:	4b05      	ldr	r3, [pc, #20]	; (8002190 <SysTick_Config+0x40>)
 800217a:	2200      	movs	r2, #0
 800217c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800217e:	4b04      	ldr	r3, [pc, #16]	; (8002190 <SysTick_Config+0x40>)
 8002180:	2207      	movs	r2, #7
 8002182:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002184:	2300      	movs	r3, #0
}
 8002186:	4618      	mov	r0, r3
 8002188:	3708      	adds	r7, #8
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	e000e010 	.word	0xe000e010

08002194 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	f7ff ff2d 	bl	8001ffc <__NVIC_SetPriorityGrouping>
}
 80021a2:	bf00      	nop
 80021a4:	3708      	adds	r7, #8
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}

080021aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021aa:	b580      	push	{r7, lr}
 80021ac:	b086      	sub	sp, #24
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	4603      	mov	r3, r0
 80021b2:	60b9      	str	r1, [r7, #8]
 80021b4:	607a      	str	r2, [r7, #4]
 80021b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021b8:	2300      	movs	r3, #0
 80021ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021bc:	f7ff ff42 	bl	8002044 <__NVIC_GetPriorityGrouping>
 80021c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	68b9      	ldr	r1, [r7, #8]
 80021c6:	6978      	ldr	r0, [r7, #20]
 80021c8:	f7ff ff90 	bl	80020ec <NVIC_EncodePriority>
 80021cc:	4602      	mov	r2, r0
 80021ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021d2:	4611      	mov	r1, r2
 80021d4:	4618      	mov	r0, r3
 80021d6:	f7ff ff5f 	bl	8002098 <__NVIC_SetPriority>
}
 80021da:	bf00      	nop
 80021dc:	3718      	adds	r7, #24
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}

080021e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021e2:	b580      	push	{r7, lr}
 80021e4:	b082      	sub	sp, #8
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	4603      	mov	r3, r0
 80021ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f0:	4618      	mov	r0, r3
 80021f2:	f7ff ff35 	bl	8002060 <__NVIC_EnableIRQ>
}
 80021f6:	bf00      	nop
 80021f8:	3708      	adds	r7, #8
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}

080021fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021fe:	b580      	push	{r7, lr}
 8002200:	b082      	sub	sp, #8
 8002202:	af00      	add	r7, sp, #0
 8002204:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f7ff ffa2 	bl	8002150 <SysTick_Config>
 800220c:	4603      	mov	r3, r0
}
 800220e:	4618      	mov	r0, r3
 8002210:	3708      	adds	r7, #8
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}

08002216 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002216:	b480      	push	{r7}
 8002218:	b085      	sub	sp, #20
 800221a:	af00      	add	r7, sp, #0
 800221c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800221e:	2300      	movs	r3, #0
 8002220:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002228:	b2db      	uxtb	r3, r3
 800222a:	2b02      	cmp	r3, #2
 800222c:	d008      	beq.n	8002240 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2204      	movs	r2, #4
 8002232:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2200      	movs	r2, #0
 8002238:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	e020      	b.n	8002282 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f022 020e 	bic.w	r2, r2, #14
 800224e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f022 0201 	bic.w	r2, r2, #1
 800225e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002268:	2101      	movs	r1, #1
 800226a:	fa01 f202 	lsl.w	r2, r1, r2
 800226e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2201      	movs	r2, #1
 8002274:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2200      	movs	r2, #0
 800227c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002280:	7bfb      	ldrb	r3, [r7, #15]
}
 8002282:	4618      	mov	r0, r3
 8002284:	3714      	adds	r7, #20
 8002286:	46bd      	mov	sp, r7
 8002288:	bc80      	pop	{r7}
 800228a:	4770      	bx	lr

0800228c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002294:	2300      	movs	r3, #0
 8002296:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d005      	beq.n	80022b0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2204      	movs	r2, #4
 80022a8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	73fb      	strb	r3, [r7, #15]
 80022ae:	e051      	b.n	8002354 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f022 020e 	bic.w	r2, r2, #14
 80022be:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f022 0201 	bic.w	r2, r2, #1
 80022ce:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a22      	ldr	r2, [pc, #136]	; (8002360 <HAL_DMA_Abort_IT+0xd4>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d029      	beq.n	800232e <HAL_DMA_Abort_IT+0xa2>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a21      	ldr	r2, [pc, #132]	; (8002364 <HAL_DMA_Abort_IT+0xd8>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d022      	beq.n	800232a <HAL_DMA_Abort_IT+0x9e>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a1f      	ldr	r2, [pc, #124]	; (8002368 <HAL_DMA_Abort_IT+0xdc>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d01a      	beq.n	8002324 <HAL_DMA_Abort_IT+0x98>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a1e      	ldr	r2, [pc, #120]	; (800236c <HAL_DMA_Abort_IT+0xe0>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d012      	beq.n	800231e <HAL_DMA_Abort_IT+0x92>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a1c      	ldr	r2, [pc, #112]	; (8002370 <HAL_DMA_Abort_IT+0xe4>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d00a      	beq.n	8002318 <HAL_DMA_Abort_IT+0x8c>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a1b      	ldr	r2, [pc, #108]	; (8002374 <HAL_DMA_Abort_IT+0xe8>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d102      	bne.n	8002312 <HAL_DMA_Abort_IT+0x86>
 800230c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002310:	e00e      	b.n	8002330 <HAL_DMA_Abort_IT+0xa4>
 8002312:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002316:	e00b      	b.n	8002330 <HAL_DMA_Abort_IT+0xa4>
 8002318:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800231c:	e008      	b.n	8002330 <HAL_DMA_Abort_IT+0xa4>
 800231e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002322:	e005      	b.n	8002330 <HAL_DMA_Abort_IT+0xa4>
 8002324:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002328:	e002      	b.n	8002330 <HAL_DMA_Abort_IT+0xa4>
 800232a:	2310      	movs	r3, #16
 800232c:	e000      	b.n	8002330 <HAL_DMA_Abort_IT+0xa4>
 800232e:	2301      	movs	r3, #1
 8002330:	4a11      	ldr	r2, [pc, #68]	; (8002378 <HAL_DMA_Abort_IT+0xec>)
 8002332:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2201      	movs	r2, #1
 8002338:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2200      	movs	r2, #0
 8002340:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002348:	2b00      	cmp	r3, #0
 800234a:	d003      	beq.n	8002354 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002350:	6878      	ldr	r0, [r7, #4]
 8002352:	4798      	blx	r3
    } 
  }
  return status;
 8002354:	7bfb      	ldrb	r3, [r7, #15]
}
 8002356:	4618      	mov	r0, r3
 8002358:	3710      	adds	r7, #16
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	40020008 	.word	0x40020008
 8002364:	4002001c 	.word	0x4002001c
 8002368:	40020030 	.word	0x40020030
 800236c:	40020044 	.word	0x40020044
 8002370:	40020058 	.word	0x40020058
 8002374:	4002006c 	.word	0x4002006c
 8002378:	40020000 	.word	0x40020000

0800237c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800237c:	b480      	push	{r7}
 800237e:	b08b      	sub	sp, #44	; 0x2c
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002386:	2300      	movs	r3, #0
 8002388:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800238a:	2300      	movs	r3, #0
 800238c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800238e:	e169      	b.n	8002664 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002390:	2201      	movs	r2, #1
 8002392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002394:	fa02 f303 	lsl.w	r3, r2, r3
 8002398:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	69fa      	ldr	r2, [r7, #28]
 80023a0:	4013      	ands	r3, r2
 80023a2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80023a4:	69ba      	ldr	r2, [r7, #24]
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	429a      	cmp	r2, r3
 80023aa:	f040 8158 	bne.w	800265e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	4a9a      	ldr	r2, [pc, #616]	; (800261c <HAL_GPIO_Init+0x2a0>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d05e      	beq.n	8002476 <HAL_GPIO_Init+0xfa>
 80023b8:	4a98      	ldr	r2, [pc, #608]	; (800261c <HAL_GPIO_Init+0x2a0>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d875      	bhi.n	80024aa <HAL_GPIO_Init+0x12e>
 80023be:	4a98      	ldr	r2, [pc, #608]	; (8002620 <HAL_GPIO_Init+0x2a4>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d058      	beq.n	8002476 <HAL_GPIO_Init+0xfa>
 80023c4:	4a96      	ldr	r2, [pc, #600]	; (8002620 <HAL_GPIO_Init+0x2a4>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d86f      	bhi.n	80024aa <HAL_GPIO_Init+0x12e>
 80023ca:	4a96      	ldr	r2, [pc, #600]	; (8002624 <HAL_GPIO_Init+0x2a8>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d052      	beq.n	8002476 <HAL_GPIO_Init+0xfa>
 80023d0:	4a94      	ldr	r2, [pc, #592]	; (8002624 <HAL_GPIO_Init+0x2a8>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d869      	bhi.n	80024aa <HAL_GPIO_Init+0x12e>
 80023d6:	4a94      	ldr	r2, [pc, #592]	; (8002628 <HAL_GPIO_Init+0x2ac>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d04c      	beq.n	8002476 <HAL_GPIO_Init+0xfa>
 80023dc:	4a92      	ldr	r2, [pc, #584]	; (8002628 <HAL_GPIO_Init+0x2ac>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d863      	bhi.n	80024aa <HAL_GPIO_Init+0x12e>
 80023e2:	4a92      	ldr	r2, [pc, #584]	; (800262c <HAL_GPIO_Init+0x2b0>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d046      	beq.n	8002476 <HAL_GPIO_Init+0xfa>
 80023e8:	4a90      	ldr	r2, [pc, #576]	; (800262c <HAL_GPIO_Init+0x2b0>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d85d      	bhi.n	80024aa <HAL_GPIO_Init+0x12e>
 80023ee:	2b12      	cmp	r3, #18
 80023f0:	d82a      	bhi.n	8002448 <HAL_GPIO_Init+0xcc>
 80023f2:	2b12      	cmp	r3, #18
 80023f4:	d859      	bhi.n	80024aa <HAL_GPIO_Init+0x12e>
 80023f6:	a201      	add	r2, pc, #4	; (adr r2, 80023fc <HAL_GPIO_Init+0x80>)
 80023f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023fc:	08002477 	.word	0x08002477
 8002400:	08002451 	.word	0x08002451
 8002404:	08002463 	.word	0x08002463
 8002408:	080024a5 	.word	0x080024a5
 800240c:	080024ab 	.word	0x080024ab
 8002410:	080024ab 	.word	0x080024ab
 8002414:	080024ab 	.word	0x080024ab
 8002418:	080024ab 	.word	0x080024ab
 800241c:	080024ab 	.word	0x080024ab
 8002420:	080024ab 	.word	0x080024ab
 8002424:	080024ab 	.word	0x080024ab
 8002428:	080024ab 	.word	0x080024ab
 800242c:	080024ab 	.word	0x080024ab
 8002430:	080024ab 	.word	0x080024ab
 8002434:	080024ab 	.word	0x080024ab
 8002438:	080024ab 	.word	0x080024ab
 800243c:	080024ab 	.word	0x080024ab
 8002440:	08002459 	.word	0x08002459
 8002444:	0800246d 	.word	0x0800246d
 8002448:	4a79      	ldr	r2, [pc, #484]	; (8002630 <HAL_GPIO_Init+0x2b4>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d013      	beq.n	8002476 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800244e:	e02c      	b.n	80024aa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	623b      	str	r3, [r7, #32]
          break;
 8002456:	e029      	b.n	80024ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	3304      	adds	r3, #4
 800245e:	623b      	str	r3, [r7, #32]
          break;
 8002460:	e024      	b.n	80024ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	68db      	ldr	r3, [r3, #12]
 8002466:	3308      	adds	r3, #8
 8002468:	623b      	str	r3, [r7, #32]
          break;
 800246a:	e01f      	b.n	80024ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	330c      	adds	r3, #12
 8002472:	623b      	str	r3, [r7, #32]
          break;
 8002474:	e01a      	b.n	80024ac <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d102      	bne.n	8002484 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800247e:	2304      	movs	r3, #4
 8002480:	623b      	str	r3, [r7, #32]
          break;
 8002482:	e013      	b.n	80024ac <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	2b01      	cmp	r3, #1
 800248a:	d105      	bne.n	8002498 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800248c:	2308      	movs	r3, #8
 800248e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	69fa      	ldr	r2, [r7, #28]
 8002494:	611a      	str	r2, [r3, #16]
          break;
 8002496:	e009      	b.n	80024ac <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002498:	2308      	movs	r3, #8
 800249a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	69fa      	ldr	r2, [r7, #28]
 80024a0:	615a      	str	r2, [r3, #20]
          break;
 80024a2:	e003      	b.n	80024ac <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80024a4:	2300      	movs	r3, #0
 80024a6:	623b      	str	r3, [r7, #32]
          break;
 80024a8:	e000      	b.n	80024ac <HAL_GPIO_Init+0x130>
          break;
 80024aa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80024ac:	69bb      	ldr	r3, [r7, #24]
 80024ae:	2bff      	cmp	r3, #255	; 0xff
 80024b0:	d801      	bhi.n	80024b6 <HAL_GPIO_Init+0x13a>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	e001      	b.n	80024ba <HAL_GPIO_Init+0x13e>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	3304      	adds	r3, #4
 80024ba:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80024bc:	69bb      	ldr	r3, [r7, #24]
 80024be:	2bff      	cmp	r3, #255	; 0xff
 80024c0:	d802      	bhi.n	80024c8 <HAL_GPIO_Init+0x14c>
 80024c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	e002      	b.n	80024ce <HAL_GPIO_Init+0x152>
 80024c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ca:	3b08      	subs	r3, #8
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	210f      	movs	r1, #15
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	fa01 f303 	lsl.w	r3, r1, r3
 80024dc:	43db      	mvns	r3, r3
 80024de:	401a      	ands	r2, r3
 80024e0:	6a39      	ldr	r1, [r7, #32]
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	fa01 f303 	lsl.w	r3, r1, r3
 80024e8:	431a      	orrs	r2, r3
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	f000 80b1 	beq.w	800265e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80024fc:	4b4d      	ldr	r3, [pc, #308]	; (8002634 <HAL_GPIO_Init+0x2b8>)
 80024fe:	699b      	ldr	r3, [r3, #24]
 8002500:	4a4c      	ldr	r2, [pc, #304]	; (8002634 <HAL_GPIO_Init+0x2b8>)
 8002502:	f043 0301 	orr.w	r3, r3, #1
 8002506:	6193      	str	r3, [r2, #24]
 8002508:	4b4a      	ldr	r3, [pc, #296]	; (8002634 <HAL_GPIO_Init+0x2b8>)
 800250a:	699b      	ldr	r3, [r3, #24]
 800250c:	f003 0301 	and.w	r3, r3, #1
 8002510:	60bb      	str	r3, [r7, #8]
 8002512:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002514:	4a48      	ldr	r2, [pc, #288]	; (8002638 <HAL_GPIO_Init+0x2bc>)
 8002516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002518:	089b      	lsrs	r3, r3, #2
 800251a:	3302      	adds	r3, #2
 800251c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002520:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002524:	f003 0303 	and.w	r3, r3, #3
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	220f      	movs	r2, #15
 800252c:	fa02 f303 	lsl.w	r3, r2, r3
 8002530:	43db      	mvns	r3, r3
 8002532:	68fa      	ldr	r2, [r7, #12]
 8002534:	4013      	ands	r3, r2
 8002536:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	4a40      	ldr	r2, [pc, #256]	; (800263c <HAL_GPIO_Init+0x2c0>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d013      	beq.n	8002568 <HAL_GPIO_Init+0x1ec>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	4a3f      	ldr	r2, [pc, #252]	; (8002640 <HAL_GPIO_Init+0x2c4>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d00d      	beq.n	8002564 <HAL_GPIO_Init+0x1e8>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	4a3e      	ldr	r2, [pc, #248]	; (8002644 <HAL_GPIO_Init+0x2c8>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d007      	beq.n	8002560 <HAL_GPIO_Init+0x1e4>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	4a3d      	ldr	r2, [pc, #244]	; (8002648 <HAL_GPIO_Init+0x2cc>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d101      	bne.n	800255c <HAL_GPIO_Init+0x1e0>
 8002558:	2303      	movs	r3, #3
 800255a:	e006      	b.n	800256a <HAL_GPIO_Init+0x1ee>
 800255c:	2304      	movs	r3, #4
 800255e:	e004      	b.n	800256a <HAL_GPIO_Init+0x1ee>
 8002560:	2302      	movs	r3, #2
 8002562:	e002      	b.n	800256a <HAL_GPIO_Init+0x1ee>
 8002564:	2301      	movs	r3, #1
 8002566:	e000      	b.n	800256a <HAL_GPIO_Init+0x1ee>
 8002568:	2300      	movs	r3, #0
 800256a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800256c:	f002 0203 	and.w	r2, r2, #3
 8002570:	0092      	lsls	r2, r2, #2
 8002572:	4093      	lsls	r3, r2
 8002574:	68fa      	ldr	r2, [r7, #12]
 8002576:	4313      	orrs	r3, r2
 8002578:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800257a:	492f      	ldr	r1, [pc, #188]	; (8002638 <HAL_GPIO_Init+0x2bc>)
 800257c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257e:	089b      	lsrs	r3, r3, #2
 8002580:	3302      	adds	r3, #2
 8002582:	68fa      	ldr	r2, [r7, #12]
 8002584:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002590:	2b00      	cmp	r3, #0
 8002592:	d006      	beq.n	80025a2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002594:	4b2d      	ldr	r3, [pc, #180]	; (800264c <HAL_GPIO_Init+0x2d0>)
 8002596:	689a      	ldr	r2, [r3, #8]
 8002598:	492c      	ldr	r1, [pc, #176]	; (800264c <HAL_GPIO_Init+0x2d0>)
 800259a:	69bb      	ldr	r3, [r7, #24]
 800259c:	4313      	orrs	r3, r2
 800259e:	608b      	str	r3, [r1, #8]
 80025a0:	e006      	b.n	80025b0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80025a2:	4b2a      	ldr	r3, [pc, #168]	; (800264c <HAL_GPIO_Init+0x2d0>)
 80025a4:	689a      	ldr	r2, [r3, #8]
 80025a6:	69bb      	ldr	r3, [r7, #24]
 80025a8:	43db      	mvns	r3, r3
 80025aa:	4928      	ldr	r1, [pc, #160]	; (800264c <HAL_GPIO_Init+0x2d0>)
 80025ac:	4013      	ands	r3, r2
 80025ae:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d006      	beq.n	80025ca <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80025bc:	4b23      	ldr	r3, [pc, #140]	; (800264c <HAL_GPIO_Init+0x2d0>)
 80025be:	68da      	ldr	r2, [r3, #12]
 80025c0:	4922      	ldr	r1, [pc, #136]	; (800264c <HAL_GPIO_Init+0x2d0>)
 80025c2:	69bb      	ldr	r3, [r7, #24]
 80025c4:	4313      	orrs	r3, r2
 80025c6:	60cb      	str	r3, [r1, #12]
 80025c8:	e006      	b.n	80025d8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80025ca:	4b20      	ldr	r3, [pc, #128]	; (800264c <HAL_GPIO_Init+0x2d0>)
 80025cc:	68da      	ldr	r2, [r3, #12]
 80025ce:	69bb      	ldr	r3, [r7, #24]
 80025d0:	43db      	mvns	r3, r3
 80025d2:	491e      	ldr	r1, [pc, #120]	; (800264c <HAL_GPIO_Init+0x2d0>)
 80025d4:	4013      	ands	r3, r2
 80025d6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d006      	beq.n	80025f2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80025e4:	4b19      	ldr	r3, [pc, #100]	; (800264c <HAL_GPIO_Init+0x2d0>)
 80025e6:	685a      	ldr	r2, [r3, #4]
 80025e8:	4918      	ldr	r1, [pc, #96]	; (800264c <HAL_GPIO_Init+0x2d0>)
 80025ea:	69bb      	ldr	r3, [r7, #24]
 80025ec:	4313      	orrs	r3, r2
 80025ee:	604b      	str	r3, [r1, #4]
 80025f0:	e006      	b.n	8002600 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80025f2:	4b16      	ldr	r3, [pc, #88]	; (800264c <HAL_GPIO_Init+0x2d0>)
 80025f4:	685a      	ldr	r2, [r3, #4]
 80025f6:	69bb      	ldr	r3, [r7, #24]
 80025f8:	43db      	mvns	r3, r3
 80025fa:	4914      	ldr	r1, [pc, #80]	; (800264c <HAL_GPIO_Init+0x2d0>)
 80025fc:	4013      	ands	r3, r2
 80025fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002608:	2b00      	cmp	r3, #0
 800260a:	d021      	beq.n	8002650 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800260c:	4b0f      	ldr	r3, [pc, #60]	; (800264c <HAL_GPIO_Init+0x2d0>)
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	490e      	ldr	r1, [pc, #56]	; (800264c <HAL_GPIO_Init+0x2d0>)
 8002612:	69bb      	ldr	r3, [r7, #24]
 8002614:	4313      	orrs	r3, r2
 8002616:	600b      	str	r3, [r1, #0]
 8002618:	e021      	b.n	800265e <HAL_GPIO_Init+0x2e2>
 800261a:	bf00      	nop
 800261c:	10320000 	.word	0x10320000
 8002620:	10310000 	.word	0x10310000
 8002624:	10220000 	.word	0x10220000
 8002628:	10210000 	.word	0x10210000
 800262c:	10120000 	.word	0x10120000
 8002630:	10110000 	.word	0x10110000
 8002634:	40021000 	.word	0x40021000
 8002638:	40010000 	.word	0x40010000
 800263c:	40010800 	.word	0x40010800
 8002640:	40010c00 	.word	0x40010c00
 8002644:	40011000 	.word	0x40011000
 8002648:	40011400 	.word	0x40011400
 800264c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002650:	4b0b      	ldr	r3, [pc, #44]	; (8002680 <HAL_GPIO_Init+0x304>)
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	69bb      	ldr	r3, [r7, #24]
 8002656:	43db      	mvns	r3, r3
 8002658:	4909      	ldr	r1, [pc, #36]	; (8002680 <HAL_GPIO_Init+0x304>)
 800265a:	4013      	ands	r3, r2
 800265c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800265e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002660:	3301      	adds	r3, #1
 8002662:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266a:	fa22 f303 	lsr.w	r3, r2, r3
 800266e:	2b00      	cmp	r3, #0
 8002670:	f47f ae8e 	bne.w	8002390 <HAL_GPIO_Init+0x14>
  }
}
 8002674:	bf00      	nop
 8002676:	bf00      	nop
 8002678:	372c      	adds	r7, #44	; 0x2c
 800267a:	46bd      	mov	sp, r7
 800267c:	bc80      	pop	{r7}
 800267e:	4770      	bx	lr
 8002680:	40010400 	.word	0x40010400

08002684 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002684:	b480      	push	{r7}
 8002686:	b085      	sub	sp, #20
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	460b      	mov	r3, r1
 800268e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	689a      	ldr	r2, [r3, #8]
 8002694:	887b      	ldrh	r3, [r7, #2]
 8002696:	4013      	ands	r3, r2
 8002698:	2b00      	cmp	r3, #0
 800269a:	d002      	beq.n	80026a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800269c:	2301      	movs	r3, #1
 800269e:	73fb      	strb	r3, [r7, #15]
 80026a0:	e001      	b.n	80026a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80026a2:	2300      	movs	r3, #0
 80026a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80026a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	3714      	adds	r7, #20
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bc80      	pop	{r7}
 80026b0:	4770      	bx	lr

080026b2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026b2:	b480      	push	{r7}
 80026b4:	b083      	sub	sp, #12
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	6078      	str	r0, [r7, #4]
 80026ba:	460b      	mov	r3, r1
 80026bc:	807b      	strh	r3, [r7, #2]
 80026be:	4613      	mov	r3, r2
 80026c0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80026c2:	787b      	ldrb	r3, [r7, #1]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d003      	beq.n	80026d0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026c8:	887a      	ldrh	r2, [r7, #2]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80026ce:	e003      	b.n	80026d8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80026d0:	887b      	ldrh	r3, [r7, #2]
 80026d2:	041a      	lsls	r2, r3, #16
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	611a      	str	r2, [r3, #16]
}
 80026d8:	bf00      	nop
 80026da:	370c      	adds	r7, #12
 80026dc:	46bd      	mov	sp, r7
 80026de:	bc80      	pop	{r7}
 80026e0:	4770      	bx	lr
	...

080026e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b086      	sub	sp, #24
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d101      	bne.n	80026f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e26c      	b.n	8002bd0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0301 	and.w	r3, r3, #1
 80026fe:	2b00      	cmp	r3, #0
 8002700:	f000 8087 	beq.w	8002812 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002704:	4b92      	ldr	r3, [pc, #584]	; (8002950 <HAL_RCC_OscConfig+0x26c>)
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f003 030c 	and.w	r3, r3, #12
 800270c:	2b04      	cmp	r3, #4
 800270e:	d00c      	beq.n	800272a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002710:	4b8f      	ldr	r3, [pc, #572]	; (8002950 <HAL_RCC_OscConfig+0x26c>)
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f003 030c 	and.w	r3, r3, #12
 8002718:	2b08      	cmp	r3, #8
 800271a:	d112      	bne.n	8002742 <HAL_RCC_OscConfig+0x5e>
 800271c:	4b8c      	ldr	r3, [pc, #560]	; (8002950 <HAL_RCC_OscConfig+0x26c>)
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002724:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002728:	d10b      	bne.n	8002742 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800272a:	4b89      	ldr	r3, [pc, #548]	; (8002950 <HAL_RCC_OscConfig+0x26c>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d06c      	beq.n	8002810 <HAL_RCC_OscConfig+0x12c>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d168      	bne.n	8002810 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e246      	b.n	8002bd0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800274a:	d106      	bne.n	800275a <HAL_RCC_OscConfig+0x76>
 800274c:	4b80      	ldr	r3, [pc, #512]	; (8002950 <HAL_RCC_OscConfig+0x26c>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a7f      	ldr	r2, [pc, #508]	; (8002950 <HAL_RCC_OscConfig+0x26c>)
 8002752:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002756:	6013      	str	r3, [r2, #0]
 8002758:	e02e      	b.n	80027b8 <HAL_RCC_OscConfig+0xd4>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d10c      	bne.n	800277c <HAL_RCC_OscConfig+0x98>
 8002762:	4b7b      	ldr	r3, [pc, #492]	; (8002950 <HAL_RCC_OscConfig+0x26c>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a7a      	ldr	r2, [pc, #488]	; (8002950 <HAL_RCC_OscConfig+0x26c>)
 8002768:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800276c:	6013      	str	r3, [r2, #0]
 800276e:	4b78      	ldr	r3, [pc, #480]	; (8002950 <HAL_RCC_OscConfig+0x26c>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a77      	ldr	r2, [pc, #476]	; (8002950 <HAL_RCC_OscConfig+0x26c>)
 8002774:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002778:	6013      	str	r3, [r2, #0]
 800277a:	e01d      	b.n	80027b8 <HAL_RCC_OscConfig+0xd4>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002784:	d10c      	bne.n	80027a0 <HAL_RCC_OscConfig+0xbc>
 8002786:	4b72      	ldr	r3, [pc, #456]	; (8002950 <HAL_RCC_OscConfig+0x26c>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a71      	ldr	r2, [pc, #452]	; (8002950 <HAL_RCC_OscConfig+0x26c>)
 800278c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002790:	6013      	str	r3, [r2, #0]
 8002792:	4b6f      	ldr	r3, [pc, #444]	; (8002950 <HAL_RCC_OscConfig+0x26c>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a6e      	ldr	r2, [pc, #440]	; (8002950 <HAL_RCC_OscConfig+0x26c>)
 8002798:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800279c:	6013      	str	r3, [r2, #0]
 800279e:	e00b      	b.n	80027b8 <HAL_RCC_OscConfig+0xd4>
 80027a0:	4b6b      	ldr	r3, [pc, #428]	; (8002950 <HAL_RCC_OscConfig+0x26c>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a6a      	ldr	r2, [pc, #424]	; (8002950 <HAL_RCC_OscConfig+0x26c>)
 80027a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027aa:	6013      	str	r3, [r2, #0]
 80027ac:	4b68      	ldr	r3, [pc, #416]	; (8002950 <HAL_RCC_OscConfig+0x26c>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a67      	ldr	r2, [pc, #412]	; (8002950 <HAL_RCC_OscConfig+0x26c>)
 80027b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027b6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d013      	beq.n	80027e8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027c0:	f7ff fc12 	bl	8001fe8 <HAL_GetTick>
 80027c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027c6:	e008      	b.n	80027da <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027c8:	f7ff fc0e 	bl	8001fe8 <HAL_GetTick>
 80027cc:	4602      	mov	r2, r0
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	2b64      	cmp	r3, #100	; 0x64
 80027d4:	d901      	bls.n	80027da <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80027d6:	2303      	movs	r3, #3
 80027d8:	e1fa      	b.n	8002bd0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027da:	4b5d      	ldr	r3, [pc, #372]	; (8002950 <HAL_RCC_OscConfig+0x26c>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d0f0      	beq.n	80027c8 <HAL_RCC_OscConfig+0xe4>
 80027e6:	e014      	b.n	8002812 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e8:	f7ff fbfe 	bl	8001fe8 <HAL_GetTick>
 80027ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027ee:	e008      	b.n	8002802 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027f0:	f7ff fbfa 	bl	8001fe8 <HAL_GetTick>
 80027f4:	4602      	mov	r2, r0
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	2b64      	cmp	r3, #100	; 0x64
 80027fc:	d901      	bls.n	8002802 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e1e6      	b.n	8002bd0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002802:	4b53      	ldr	r3, [pc, #332]	; (8002950 <HAL_RCC_OscConfig+0x26c>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d1f0      	bne.n	80027f0 <HAL_RCC_OscConfig+0x10c>
 800280e:	e000      	b.n	8002812 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002810:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0302 	and.w	r3, r3, #2
 800281a:	2b00      	cmp	r3, #0
 800281c:	d063      	beq.n	80028e6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800281e:	4b4c      	ldr	r3, [pc, #304]	; (8002950 <HAL_RCC_OscConfig+0x26c>)
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	f003 030c 	and.w	r3, r3, #12
 8002826:	2b00      	cmp	r3, #0
 8002828:	d00b      	beq.n	8002842 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800282a:	4b49      	ldr	r3, [pc, #292]	; (8002950 <HAL_RCC_OscConfig+0x26c>)
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	f003 030c 	and.w	r3, r3, #12
 8002832:	2b08      	cmp	r3, #8
 8002834:	d11c      	bne.n	8002870 <HAL_RCC_OscConfig+0x18c>
 8002836:	4b46      	ldr	r3, [pc, #280]	; (8002950 <HAL_RCC_OscConfig+0x26c>)
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d116      	bne.n	8002870 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002842:	4b43      	ldr	r3, [pc, #268]	; (8002950 <HAL_RCC_OscConfig+0x26c>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0302 	and.w	r3, r3, #2
 800284a:	2b00      	cmp	r3, #0
 800284c:	d005      	beq.n	800285a <HAL_RCC_OscConfig+0x176>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	691b      	ldr	r3, [r3, #16]
 8002852:	2b01      	cmp	r3, #1
 8002854:	d001      	beq.n	800285a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e1ba      	b.n	8002bd0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800285a:	4b3d      	ldr	r3, [pc, #244]	; (8002950 <HAL_RCC_OscConfig+0x26c>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	695b      	ldr	r3, [r3, #20]
 8002866:	00db      	lsls	r3, r3, #3
 8002868:	4939      	ldr	r1, [pc, #228]	; (8002950 <HAL_RCC_OscConfig+0x26c>)
 800286a:	4313      	orrs	r3, r2
 800286c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800286e:	e03a      	b.n	80028e6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	691b      	ldr	r3, [r3, #16]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d020      	beq.n	80028ba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002878:	4b36      	ldr	r3, [pc, #216]	; (8002954 <HAL_RCC_OscConfig+0x270>)
 800287a:	2201      	movs	r2, #1
 800287c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800287e:	f7ff fbb3 	bl	8001fe8 <HAL_GetTick>
 8002882:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002884:	e008      	b.n	8002898 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002886:	f7ff fbaf 	bl	8001fe8 <HAL_GetTick>
 800288a:	4602      	mov	r2, r0
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	2b02      	cmp	r3, #2
 8002892:	d901      	bls.n	8002898 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002894:	2303      	movs	r3, #3
 8002896:	e19b      	b.n	8002bd0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002898:	4b2d      	ldr	r3, [pc, #180]	; (8002950 <HAL_RCC_OscConfig+0x26c>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 0302 	and.w	r3, r3, #2
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d0f0      	beq.n	8002886 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028a4:	4b2a      	ldr	r3, [pc, #168]	; (8002950 <HAL_RCC_OscConfig+0x26c>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	695b      	ldr	r3, [r3, #20]
 80028b0:	00db      	lsls	r3, r3, #3
 80028b2:	4927      	ldr	r1, [pc, #156]	; (8002950 <HAL_RCC_OscConfig+0x26c>)
 80028b4:	4313      	orrs	r3, r2
 80028b6:	600b      	str	r3, [r1, #0]
 80028b8:	e015      	b.n	80028e6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028ba:	4b26      	ldr	r3, [pc, #152]	; (8002954 <HAL_RCC_OscConfig+0x270>)
 80028bc:	2200      	movs	r2, #0
 80028be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028c0:	f7ff fb92 	bl	8001fe8 <HAL_GetTick>
 80028c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028c6:	e008      	b.n	80028da <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028c8:	f7ff fb8e 	bl	8001fe8 <HAL_GetTick>
 80028cc:	4602      	mov	r2, r0
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d901      	bls.n	80028da <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	e17a      	b.n	8002bd0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028da:	4b1d      	ldr	r3, [pc, #116]	; (8002950 <HAL_RCC_OscConfig+0x26c>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 0302 	and.w	r3, r3, #2
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d1f0      	bne.n	80028c8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 0308 	and.w	r3, r3, #8
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d03a      	beq.n	8002968 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	699b      	ldr	r3, [r3, #24]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d019      	beq.n	800292e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028fa:	4b17      	ldr	r3, [pc, #92]	; (8002958 <HAL_RCC_OscConfig+0x274>)
 80028fc:	2201      	movs	r2, #1
 80028fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002900:	f7ff fb72 	bl	8001fe8 <HAL_GetTick>
 8002904:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002906:	e008      	b.n	800291a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002908:	f7ff fb6e 	bl	8001fe8 <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	2b02      	cmp	r3, #2
 8002914:	d901      	bls.n	800291a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	e15a      	b.n	8002bd0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800291a:	4b0d      	ldr	r3, [pc, #52]	; (8002950 <HAL_RCC_OscConfig+0x26c>)
 800291c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800291e:	f003 0302 	and.w	r3, r3, #2
 8002922:	2b00      	cmp	r3, #0
 8002924:	d0f0      	beq.n	8002908 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002926:	2001      	movs	r0, #1
 8002928:	f000 facc 	bl	8002ec4 <RCC_Delay>
 800292c:	e01c      	b.n	8002968 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800292e:	4b0a      	ldr	r3, [pc, #40]	; (8002958 <HAL_RCC_OscConfig+0x274>)
 8002930:	2200      	movs	r2, #0
 8002932:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002934:	f7ff fb58 	bl	8001fe8 <HAL_GetTick>
 8002938:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800293a:	e00f      	b.n	800295c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800293c:	f7ff fb54 	bl	8001fe8 <HAL_GetTick>
 8002940:	4602      	mov	r2, r0
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	2b02      	cmp	r3, #2
 8002948:	d908      	bls.n	800295c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800294a:	2303      	movs	r3, #3
 800294c:	e140      	b.n	8002bd0 <HAL_RCC_OscConfig+0x4ec>
 800294e:	bf00      	nop
 8002950:	40021000 	.word	0x40021000
 8002954:	42420000 	.word	0x42420000
 8002958:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800295c:	4b9e      	ldr	r3, [pc, #632]	; (8002bd8 <HAL_RCC_OscConfig+0x4f4>)
 800295e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002960:	f003 0302 	and.w	r3, r3, #2
 8002964:	2b00      	cmp	r3, #0
 8002966:	d1e9      	bne.n	800293c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 0304 	and.w	r3, r3, #4
 8002970:	2b00      	cmp	r3, #0
 8002972:	f000 80a6 	beq.w	8002ac2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002976:	2300      	movs	r3, #0
 8002978:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800297a:	4b97      	ldr	r3, [pc, #604]	; (8002bd8 <HAL_RCC_OscConfig+0x4f4>)
 800297c:	69db      	ldr	r3, [r3, #28]
 800297e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d10d      	bne.n	80029a2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002986:	4b94      	ldr	r3, [pc, #592]	; (8002bd8 <HAL_RCC_OscConfig+0x4f4>)
 8002988:	69db      	ldr	r3, [r3, #28]
 800298a:	4a93      	ldr	r2, [pc, #588]	; (8002bd8 <HAL_RCC_OscConfig+0x4f4>)
 800298c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002990:	61d3      	str	r3, [r2, #28]
 8002992:	4b91      	ldr	r3, [pc, #580]	; (8002bd8 <HAL_RCC_OscConfig+0x4f4>)
 8002994:	69db      	ldr	r3, [r3, #28]
 8002996:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800299a:	60bb      	str	r3, [r7, #8]
 800299c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800299e:	2301      	movs	r3, #1
 80029a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029a2:	4b8e      	ldr	r3, [pc, #568]	; (8002bdc <HAL_RCC_OscConfig+0x4f8>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d118      	bne.n	80029e0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029ae:	4b8b      	ldr	r3, [pc, #556]	; (8002bdc <HAL_RCC_OscConfig+0x4f8>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a8a      	ldr	r2, [pc, #552]	; (8002bdc <HAL_RCC_OscConfig+0x4f8>)
 80029b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029ba:	f7ff fb15 	bl	8001fe8 <HAL_GetTick>
 80029be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029c0:	e008      	b.n	80029d4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029c2:	f7ff fb11 	bl	8001fe8 <HAL_GetTick>
 80029c6:	4602      	mov	r2, r0
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	1ad3      	subs	r3, r2, r3
 80029cc:	2b64      	cmp	r3, #100	; 0x64
 80029ce:	d901      	bls.n	80029d4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80029d0:	2303      	movs	r3, #3
 80029d2:	e0fd      	b.n	8002bd0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029d4:	4b81      	ldr	r3, [pc, #516]	; (8002bdc <HAL_RCC_OscConfig+0x4f8>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d0f0      	beq.n	80029c2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d106      	bne.n	80029f6 <HAL_RCC_OscConfig+0x312>
 80029e8:	4b7b      	ldr	r3, [pc, #492]	; (8002bd8 <HAL_RCC_OscConfig+0x4f4>)
 80029ea:	6a1b      	ldr	r3, [r3, #32]
 80029ec:	4a7a      	ldr	r2, [pc, #488]	; (8002bd8 <HAL_RCC_OscConfig+0x4f4>)
 80029ee:	f043 0301 	orr.w	r3, r3, #1
 80029f2:	6213      	str	r3, [r2, #32]
 80029f4:	e02d      	b.n	8002a52 <HAL_RCC_OscConfig+0x36e>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	68db      	ldr	r3, [r3, #12]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d10c      	bne.n	8002a18 <HAL_RCC_OscConfig+0x334>
 80029fe:	4b76      	ldr	r3, [pc, #472]	; (8002bd8 <HAL_RCC_OscConfig+0x4f4>)
 8002a00:	6a1b      	ldr	r3, [r3, #32]
 8002a02:	4a75      	ldr	r2, [pc, #468]	; (8002bd8 <HAL_RCC_OscConfig+0x4f4>)
 8002a04:	f023 0301 	bic.w	r3, r3, #1
 8002a08:	6213      	str	r3, [r2, #32]
 8002a0a:	4b73      	ldr	r3, [pc, #460]	; (8002bd8 <HAL_RCC_OscConfig+0x4f4>)
 8002a0c:	6a1b      	ldr	r3, [r3, #32]
 8002a0e:	4a72      	ldr	r2, [pc, #456]	; (8002bd8 <HAL_RCC_OscConfig+0x4f4>)
 8002a10:	f023 0304 	bic.w	r3, r3, #4
 8002a14:	6213      	str	r3, [r2, #32]
 8002a16:	e01c      	b.n	8002a52 <HAL_RCC_OscConfig+0x36e>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	2b05      	cmp	r3, #5
 8002a1e:	d10c      	bne.n	8002a3a <HAL_RCC_OscConfig+0x356>
 8002a20:	4b6d      	ldr	r3, [pc, #436]	; (8002bd8 <HAL_RCC_OscConfig+0x4f4>)
 8002a22:	6a1b      	ldr	r3, [r3, #32]
 8002a24:	4a6c      	ldr	r2, [pc, #432]	; (8002bd8 <HAL_RCC_OscConfig+0x4f4>)
 8002a26:	f043 0304 	orr.w	r3, r3, #4
 8002a2a:	6213      	str	r3, [r2, #32]
 8002a2c:	4b6a      	ldr	r3, [pc, #424]	; (8002bd8 <HAL_RCC_OscConfig+0x4f4>)
 8002a2e:	6a1b      	ldr	r3, [r3, #32]
 8002a30:	4a69      	ldr	r2, [pc, #420]	; (8002bd8 <HAL_RCC_OscConfig+0x4f4>)
 8002a32:	f043 0301 	orr.w	r3, r3, #1
 8002a36:	6213      	str	r3, [r2, #32]
 8002a38:	e00b      	b.n	8002a52 <HAL_RCC_OscConfig+0x36e>
 8002a3a:	4b67      	ldr	r3, [pc, #412]	; (8002bd8 <HAL_RCC_OscConfig+0x4f4>)
 8002a3c:	6a1b      	ldr	r3, [r3, #32]
 8002a3e:	4a66      	ldr	r2, [pc, #408]	; (8002bd8 <HAL_RCC_OscConfig+0x4f4>)
 8002a40:	f023 0301 	bic.w	r3, r3, #1
 8002a44:	6213      	str	r3, [r2, #32]
 8002a46:	4b64      	ldr	r3, [pc, #400]	; (8002bd8 <HAL_RCC_OscConfig+0x4f4>)
 8002a48:	6a1b      	ldr	r3, [r3, #32]
 8002a4a:	4a63      	ldr	r2, [pc, #396]	; (8002bd8 <HAL_RCC_OscConfig+0x4f4>)
 8002a4c:	f023 0304 	bic.w	r3, r3, #4
 8002a50:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	68db      	ldr	r3, [r3, #12]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d015      	beq.n	8002a86 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a5a:	f7ff fac5 	bl	8001fe8 <HAL_GetTick>
 8002a5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a60:	e00a      	b.n	8002a78 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a62:	f7ff fac1 	bl	8001fe8 <HAL_GetTick>
 8002a66:	4602      	mov	r2, r0
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d901      	bls.n	8002a78 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002a74:	2303      	movs	r3, #3
 8002a76:	e0ab      	b.n	8002bd0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a78:	4b57      	ldr	r3, [pc, #348]	; (8002bd8 <HAL_RCC_OscConfig+0x4f4>)
 8002a7a:	6a1b      	ldr	r3, [r3, #32]
 8002a7c:	f003 0302 	and.w	r3, r3, #2
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d0ee      	beq.n	8002a62 <HAL_RCC_OscConfig+0x37e>
 8002a84:	e014      	b.n	8002ab0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a86:	f7ff faaf 	bl	8001fe8 <HAL_GetTick>
 8002a8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a8c:	e00a      	b.n	8002aa4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a8e:	f7ff faab 	bl	8001fe8 <HAL_GetTick>
 8002a92:	4602      	mov	r2, r0
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d901      	bls.n	8002aa4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	e095      	b.n	8002bd0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002aa4:	4b4c      	ldr	r3, [pc, #304]	; (8002bd8 <HAL_RCC_OscConfig+0x4f4>)
 8002aa6:	6a1b      	ldr	r3, [r3, #32]
 8002aa8:	f003 0302 	and.w	r3, r3, #2
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d1ee      	bne.n	8002a8e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002ab0:	7dfb      	ldrb	r3, [r7, #23]
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d105      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ab6:	4b48      	ldr	r3, [pc, #288]	; (8002bd8 <HAL_RCC_OscConfig+0x4f4>)
 8002ab8:	69db      	ldr	r3, [r3, #28]
 8002aba:	4a47      	ldr	r2, [pc, #284]	; (8002bd8 <HAL_RCC_OscConfig+0x4f4>)
 8002abc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ac0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	69db      	ldr	r3, [r3, #28]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	f000 8081 	beq.w	8002bce <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002acc:	4b42      	ldr	r3, [pc, #264]	; (8002bd8 <HAL_RCC_OscConfig+0x4f4>)
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	f003 030c 	and.w	r3, r3, #12
 8002ad4:	2b08      	cmp	r3, #8
 8002ad6:	d061      	beq.n	8002b9c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	69db      	ldr	r3, [r3, #28]
 8002adc:	2b02      	cmp	r3, #2
 8002ade:	d146      	bne.n	8002b6e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ae0:	4b3f      	ldr	r3, [pc, #252]	; (8002be0 <HAL_RCC_OscConfig+0x4fc>)
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ae6:	f7ff fa7f 	bl	8001fe8 <HAL_GetTick>
 8002aea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002aec:	e008      	b.n	8002b00 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002aee:	f7ff fa7b 	bl	8001fe8 <HAL_GetTick>
 8002af2:	4602      	mov	r2, r0
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	1ad3      	subs	r3, r2, r3
 8002af8:	2b02      	cmp	r3, #2
 8002afa:	d901      	bls.n	8002b00 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002afc:	2303      	movs	r3, #3
 8002afe:	e067      	b.n	8002bd0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b00:	4b35      	ldr	r3, [pc, #212]	; (8002bd8 <HAL_RCC_OscConfig+0x4f4>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d1f0      	bne.n	8002aee <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6a1b      	ldr	r3, [r3, #32]
 8002b10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b14:	d108      	bne.n	8002b28 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002b16:	4b30      	ldr	r3, [pc, #192]	; (8002bd8 <HAL_RCC_OscConfig+0x4f4>)
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	492d      	ldr	r1, [pc, #180]	; (8002bd8 <HAL_RCC_OscConfig+0x4f4>)
 8002b24:	4313      	orrs	r3, r2
 8002b26:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b28:	4b2b      	ldr	r3, [pc, #172]	; (8002bd8 <HAL_RCC_OscConfig+0x4f4>)
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6a19      	ldr	r1, [r3, #32]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b38:	430b      	orrs	r3, r1
 8002b3a:	4927      	ldr	r1, [pc, #156]	; (8002bd8 <HAL_RCC_OscConfig+0x4f4>)
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b40:	4b27      	ldr	r3, [pc, #156]	; (8002be0 <HAL_RCC_OscConfig+0x4fc>)
 8002b42:	2201      	movs	r2, #1
 8002b44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b46:	f7ff fa4f 	bl	8001fe8 <HAL_GetTick>
 8002b4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b4c:	e008      	b.n	8002b60 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b4e:	f7ff fa4b 	bl	8001fe8 <HAL_GetTick>
 8002b52:	4602      	mov	r2, r0
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	1ad3      	subs	r3, r2, r3
 8002b58:	2b02      	cmp	r3, #2
 8002b5a:	d901      	bls.n	8002b60 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	e037      	b.n	8002bd0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b60:	4b1d      	ldr	r3, [pc, #116]	; (8002bd8 <HAL_RCC_OscConfig+0x4f4>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d0f0      	beq.n	8002b4e <HAL_RCC_OscConfig+0x46a>
 8002b6c:	e02f      	b.n	8002bce <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b6e:	4b1c      	ldr	r3, [pc, #112]	; (8002be0 <HAL_RCC_OscConfig+0x4fc>)
 8002b70:	2200      	movs	r2, #0
 8002b72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b74:	f7ff fa38 	bl	8001fe8 <HAL_GetTick>
 8002b78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b7a:	e008      	b.n	8002b8e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b7c:	f7ff fa34 	bl	8001fe8 <HAL_GetTick>
 8002b80:	4602      	mov	r2, r0
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	2b02      	cmp	r3, #2
 8002b88:	d901      	bls.n	8002b8e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e020      	b.n	8002bd0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b8e:	4b12      	ldr	r3, [pc, #72]	; (8002bd8 <HAL_RCC_OscConfig+0x4f4>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d1f0      	bne.n	8002b7c <HAL_RCC_OscConfig+0x498>
 8002b9a:	e018      	b.n	8002bce <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	69db      	ldr	r3, [r3, #28]
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d101      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e013      	b.n	8002bd0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ba8:	4b0b      	ldr	r3, [pc, #44]	; (8002bd8 <HAL_RCC_OscConfig+0x4f4>)
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6a1b      	ldr	r3, [r3, #32]
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d106      	bne.n	8002bca <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d001      	beq.n	8002bce <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e000      	b.n	8002bd0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002bce:	2300      	movs	r3, #0
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3718      	adds	r7, #24
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}
 8002bd8:	40021000 	.word	0x40021000
 8002bdc:	40007000 	.word	0x40007000
 8002be0:	42420060 	.word	0x42420060

08002be4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
 8002bec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d101      	bne.n	8002bf8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e0d0      	b.n	8002d9a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002bf8:	4b6a      	ldr	r3, [pc, #424]	; (8002da4 <HAL_RCC_ClockConfig+0x1c0>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 0307 	and.w	r3, r3, #7
 8002c00:	683a      	ldr	r2, [r7, #0]
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d910      	bls.n	8002c28 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c06:	4b67      	ldr	r3, [pc, #412]	; (8002da4 <HAL_RCC_ClockConfig+0x1c0>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f023 0207 	bic.w	r2, r3, #7
 8002c0e:	4965      	ldr	r1, [pc, #404]	; (8002da4 <HAL_RCC_ClockConfig+0x1c0>)
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c16:	4b63      	ldr	r3, [pc, #396]	; (8002da4 <HAL_RCC_ClockConfig+0x1c0>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0307 	and.w	r3, r3, #7
 8002c1e:	683a      	ldr	r2, [r7, #0]
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d001      	beq.n	8002c28 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e0b8      	b.n	8002d9a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0302 	and.w	r3, r3, #2
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d020      	beq.n	8002c76 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0304 	and.w	r3, r3, #4
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d005      	beq.n	8002c4c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c40:	4b59      	ldr	r3, [pc, #356]	; (8002da8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	4a58      	ldr	r2, [pc, #352]	; (8002da8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c46:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002c4a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 0308 	and.w	r3, r3, #8
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d005      	beq.n	8002c64 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c58:	4b53      	ldr	r3, [pc, #332]	; (8002da8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	4a52      	ldr	r2, [pc, #328]	; (8002da8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c5e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002c62:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c64:	4b50      	ldr	r3, [pc, #320]	; (8002da8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	494d      	ldr	r1, [pc, #308]	; (8002da8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c72:	4313      	orrs	r3, r2
 8002c74:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 0301 	and.w	r3, r3, #1
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d040      	beq.n	8002d04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d107      	bne.n	8002c9a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c8a:	4b47      	ldr	r3, [pc, #284]	; (8002da8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d115      	bne.n	8002cc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e07f      	b.n	8002d9a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	2b02      	cmp	r3, #2
 8002ca0:	d107      	bne.n	8002cb2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ca2:	4b41      	ldr	r3, [pc, #260]	; (8002da8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d109      	bne.n	8002cc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e073      	b.n	8002d9a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cb2:	4b3d      	ldr	r3, [pc, #244]	; (8002da8 <HAL_RCC_ClockConfig+0x1c4>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0302 	and.w	r3, r3, #2
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d101      	bne.n	8002cc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e06b      	b.n	8002d9a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cc2:	4b39      	ldr	r3, [pc, #228]	; (8002da8 <HAL_RCC_ClockConfig+0x1c4>)
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	f023 0203 	bic.w	r2, r3, #3
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	4936      	ldr	r1, [pc, #216]	; (8002da8 <HAL_RCC_ClockConfig+0x1c4>)
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cd4:	f7ff f988 	bl	8001fe8 <HAL_GetTick>
 8002cd8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cda:	e00a      	b.n	8002cf2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cdc:	f7ff f984 	bl	8001fe8 <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d901      	bls.n	8002cf2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e053      	b.n	8002d9a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cf2:	4b2d      	ldr	r3, [pc, #180]	; (8002da8 <HAL_RCC_ClockConfig+0x1c4>)
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	f003 020c 	and.w	r2, r3, #12
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	009b      	lsls	r3, r3, #2
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d1eb      	bne.n	8002cdc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d04:	4b27      	ldr	r3, [pc, #156]	; (8002da4 <HAL_RCC_ClockConfig+0x1c0>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 0307 	and.w	r3, r3, #7
 8002d0c:	683a      	ldr	r2, [r7, #0]
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d210      	bcs.n	8002d34 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d12:	4b24      	ldr	r3, [pc, #144]	; (8002da4 <HAL_RCC_ClockConfig+0x1c0>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f023 0207 	bic.w	r2, r3, #7
 8002d1a:	4922      	ldr	r1, [pc, #136]	; (8002da4 <HAL_RCC_ClockConfig+0x1c0>)
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d22:	4b20      	ldr	r3, [pc, #128]	; (8002da4 <HAL_RCC_ClockConfig+0x1c0>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0307 	and.w	r3, r3, #7
 8002d2a:	683a      	ldr	r2, [r7, #0]
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d001      	beq.n	8002d34 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e032      	b.n	8002d9a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 0304 	and.w	r3, r3, #4
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d008      	beq.n	8002d52 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d40:	4b19      	ldr	r3, [pc, #100]	; (8002da8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	4916      	ldr	r1, [pc, #88]	; (8002da8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0308 	and.w	r3, r3, #8
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d009      	beq.n	8002d72 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002d5e:	4b12      	ldr	r3, [pc, #72]	; (8002da8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	691b      	ldr	r3, [r3, #16]
 8002d6a:	00db      	lsls	r3, r3, #3
 8002d6c:	490e      	ldr	r1, [pc, #56]	; (8002da8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d72:	f000 f821 	bl	8002db8 <HAL_RCC_GetSysClockFreq>
 8002d76:	4602      	mov	r2, r0
 8002d78:	4b0b      	ldr	r3, [pc, #44]	; (8002da8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	091b      	lsrs	r3, r3, #4
 8002d7e:	f003 030f 	and.w	r3, r3, #15
 8002d82:	490a      	ldr	r1, [pc, #40]	; (8002dac <HAL_RCC_ClockConfig+0x1c8>)
 8002d84:	5ccb      	ldrb	r3, [r1, r3]
 8002d86:	fa22 f303 	lsr.w	r3, r2, r3
 8002d8a:	4a09      	ldr	r2, [pc, #36]	; (8002db0 <HAL_RCC_ClockConfig+0x1cc>)
 8002d8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002d8e:	4b09      	ldr	r3, [pc, #36]	; (8002db4 <HAL_RCC_ClockConfig+0x1d0>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4618      	mov	r0, r3
 8002d94:	f7ff f8e6 	bl	8001f64 <HAL_InitTick>

  return HAL_OK;
 8002d98:	2300      	movs	r3, #0
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3710      	adds	r7, #16
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	40022000 	.word	0x40022000
 8002da8:	40021000 	.word	0x40021000
 8002dac:	080053ac 	.word	0x080053ac
 8002db0:	20000038 	.word	0x20000038
 8002db4:	20000040 	.word	0x20000040

08002db8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b087      	sub	sp, #28
 8002dbc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	60fb      	str	r3, [r7, #12]
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	60bb      	str	r3, [r7, #8]
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	617b      	str	r3, [r7, #20]
 8002dca:	2300      	movs	r3, #0
 8002dcc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002dd2:	4b1e      	ldr	r3, [pc, #120]	; (8002e4c <HAL_RCC_GetSysClockFreq+0x94>)
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	f003 030c 	and.w	r3, r3, #12
 8002dde:	2b04      	cmp	r3, #4
 8002de0:	d002      	beq.n	8002de8 <HAL_RCC_GetSysClockFreq+0x30>
 8002de2:	2b08      	cmp	r3, #8
 8002de4:	d003      	beq.n	8002dee <HAL_RCC_GetSysClockFreq+0x36>
 8002de6:	e027      	b.n	8002e38 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002de8:	4b19      	ldr	r3, [pc, #100]	; (8002e50 <HAL_RCC_GetSysClockFreq+0x98>)
 8002dea:	613b      	str	r3, [r7, #16]
      break;
 8002dec:	e027      	b.n	8002e3e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	0c9b      	lsrs	r3, r3, #18
 8002df2:	f003 030f 	and.w	r3, r3, #15
 8002df6:	4a17      	ldr	r2, [pc, #92]	; (8002e54 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002df8:	5cd3      	ldrb	r3, [r2, r3]
 8002dfa:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d010      	beq.n	8002e28 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002e06:	4b11      	ldr	r3, [pc, #68]	; (8002e4c <HAL_RCC_GetSysClockFreq+0x94>)
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	0c5b      	lsrs	r3, r3, #17
 8002e0c:	f003 0301 	and.w	r3, r3, #1
 8002e10:	4a11      	ldr	r2, [pc, #68]	; (8002e58 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002e12:	5cd3      	ldrb	r3, [r2, r3]
 8002e14:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4a0d      	ldr	r2, [pc, #52]	; (8002e50 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e1a:	fb02 f203 	mul.w	r2, r2, r3
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e24:	617b      	str	r3, [r7, #20]
 8002e26:	e004      	b.n	8002e32 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	4a0c      	ldr	r2, [pc, #48]	; (8002e5c <HAL_RCC_GetSysClockFreq+0xa4>)
 8002e2c:	fb02 f303 	mul.w	r3, r2, r3
 8002e30:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	613b      	str	r3, [r7, #16]
      break;
 8002e36:	e002      	b.n	8002e3e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002e38:	4b05      	ldr	r3, [pc, #20]	; (8002e50 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e3a:	613b      	str	r3, [r7, #16]
      break;
 8002e3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e3e:	693b      	ldr	r3, [r7, #16]
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	371c      	adds	r7, #28
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bc80      	pop	{r7}
 8002e48:	4770      	bx	lr
 8002e4a:	bf00      	nop
 8002e4c:	40021000 	.word	0x40021000
 8002e50:	007a1200 	.word	0x007a1200
 8002e54:	080053c4 	.word	0x080053c4
 8002e58:	080053d4 	.word	0x080053d4
 8002e5c:	003d0900 	.word	0x003d0900

08002e60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e60:	b480      	push	{r7}
 8002e62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e64:	4b02      	ldr	r3, [pc, #8]	; (8002e70 <HAL_RCC_GetHCLKFreq+0x10>)
 8002e66:	681b      	ldr	r3, [r3, #0]
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bc80      	pop	{r7}
 8002e6e:	4770      	bx	lr
 8002e70:	20000038 	.word	0x20000038

08002e74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002e78:	f7ff fff2 	bl	8002e60 <HAL_RCC_GetHCLKFreq>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	4b05      	ldr	r3, [pc, #20]	; (8002e94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	0a1b      	lsrs	r3, r3, #8
 8002e84:	f003 0307 	and.w	r3, r3, #7
 8002e88:	4903      	ldr	r1, [pc, #12]	; (8002e98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e8a:	5ccb      	ldrb	r3, [r1, r3]
 8002e8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	bd80      	pop	{r7, pc}
 8002e94:	40021000 	.word	0x40021000
 8002e98:	080053bc 	.word	0x080053bc

08002e9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ea0:	f7ff ffde 	bl	8002e60 <HAL_RCC_GetHCLKFreq>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	4b05      	ldr	r3, [pc, #20]	; (8002ebc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	0adb      	lsrs	r3, r3, #11
 8002eac:	f003 0307 	and.w	r3, r3, #7
 8002eb0:	4903      	ldr	r1, [pc, #12]	; (8002ec0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002eb2:	5ccb      	ldrb	r3, [r1, r3]
 8002eb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	bd80      	pop	{r7, pc}
 8002ebc:	40021000 	.word	0x40021000
 8002ec0:	080053bc 	.word	0x080053bc

08002ec4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b085      	sub	sp, #20
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002ecc:	4b0a      	ldr	r3, [pc, #40]	; (8002ef8 <RCC_Delay+0x34>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a0a      	ldr	r2, [pc, #40]	; (8002efc <RCC_Delay+0x38>)
 8002ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ed6:	0a5b      	lsrs	r3, r3, #9
 8002ed8:	687a      	ldr	r2, [r7, #4]
 8002eda:	fb02 f303 	mul.w	r3, r2, r3
 8002ede:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002ee0:	bf00      	nop
  }
  while (Delay --);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	1e5a      	subs	r2, r3, #1
 8002ee6:	60fa      	str	r2, [r7, #12]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d1f9      	bne.n	8002ee0 <RCC_Delay+0x1c>
}
 8002eec:	bf00      	nop
 8002eee:	bf00      	nop
 8002ef0:	3714      	adds	r7, #20
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bc80      	pop	{r7}
 8002ef6:	4770      	bx	lr
 8002ef8:	20000038 	.word	0x20000038
 8002efc:	10624dd3 	.word	0x10624dd3

08002f00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d101      	bne.n	8002f12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e041      	b.n	8002f96 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d106      	bne.n	8002f2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f7fe fd0a 	bl	8001940 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2202      	movs	r2, #2
 8002f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	3304      	adds	r3, #4
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	4610      	mov	r0, r2
 8002f40:	f000 fc30 	bl	80037a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2201      	movs	r2, #1
 8002f48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2201      	movs	r2, #1
 8002f58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2201      	movs	r2, #1
 8002f68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2201      	movs	r2, #1
 8002f78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2201      	movs	r2, #1
 8002f88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f94:	2300      	movs	r3, #0
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3708      	adds	r7, #8
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
	...

08002fa0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b085      	sub	sp, #20
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d001      	beq.n	8002fb8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e03a      	b.n	800302e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2202      	movs	r2, #2
 8002fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	68da      	ldr	r2, [r3, #12]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f042 0201 	orr.w	r2, r2, #1
 8002fce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a18      	ldr	r2, [pc, #96]	; (8003038 <HAL_TIM_Base_Start_IT+0x98>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d00e      	beq.n	8002ff8 <HAL_TIM_Base_Start_IT+0x58>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fe2:	d009      	beq.n	8002ff8 <HAL_TIM_Base_Start_IT+0x58>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a14      	ldr	r2, [pc, #80]	; (800303c <HAL_TIM_Base_Start_IT+0x9c>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d004      	beq.n	8002ff8 <HAL_TIM_Base_Start_IT+0x58>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a13      	ldr	r2, [pc, #76]	; (8003040 <HAL_TIM_Base_Start_IT+0xa0>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d111      	bne.n	800301c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	f003 0307 	and.w	r3, r3, #7
 8003002:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2b06      	cmp	r3, #6
 8003008:	d010      	beq.n	800302c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f042 0201 	orr.w	r2, r2, #1
 8003018:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800301a:	e007      	b.n	800302c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f042 0201 	orr.w	r2, r2, #1
 800302a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800302c:	2300      	movs	r3, #0
}
 800302e:	4618      	mov	r0, r3
 8003030:	3714      	adds	r7, #20
 8003032:	46bd      	mov	sp, r7
 8003034:	bc80      	pop	{r7}
 8003036:	4770      	bx	lr
 8003038:	40012c00 	.word	0x40012c00
 800303c:	40000400 	.word	0x40000400
 8003040:	40000800 	.word	0x40000800

08003044 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b082      	sub	sp, #8
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d101      	bne.n	8003056 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e041      	b.n	80030da <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800305c:	b2db      	uxtb	r3, r3
 800305e:	2b00      	cmp	r3, #0
 8003060:	d106      	bne.n	8003070 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2200      	movs	r2, #0
 8003066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f000 f839 	bl	80030e2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2202      	movs	r2, #2
 8003074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	3304      	adds	r3, #4
 8003080:	4619      	mov	r1, r3
 8003082:	4610      	mov	r0, r2
 8003084:	f000 fb8e 	bl	80037a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2201      	movs	r2, #1
 800308c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2201      	movs	r2, #1
 8003094:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2201      	movs	r2, #1
 800309c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2201      	movs	r2, #1
 80030a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2201      	movs	r2, #1
 80030ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2201      	movs	r2, #1
 80030b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2201      	movs	r2, #1
 80030bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2201      	movs	r2, #1
 80030c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2201      	movs	r2, #1
 80030cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2201      	movs	r2, #1
 80030d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80030d8:	2300      	movs	r3, #0
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3708      	adds	r7, #8
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}

080030e2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80030e2:	b480      	push	{r7}
 80030e4:	b083      	sub	sp, #12
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80030ea:	bf00      	nop
 80030ec:	370c      	adds	r7, #12
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bc80      	pop	{r7}
 80030f2:	4770      	bx	lr

080030f4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b084      	sub	sp, #16
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d109      	bne.n	8003118 <HAL_TIM_PWM_Start+0x24>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800310a:	b2db      	uxtb	r3, r3
 800310c:	2b01      	cmp	r3, #1
 800310e:	bf14      	ite	ne
 8003110:	2301      	movne	r3, #1
 8003112:	2300      	moveq	r3, #0
 8003114:	b2db      	uxtb	r3, r3
 8003116:	e022      	b.n	800315e <HAL_TIM_PWM_Start+0x6a>
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	2b04      	cmp	r3, #4
 800311c:	d109      	bne.n	8003132 <HAL_TIM_PWM_Start+0x3e>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003124:	b2db      	uxtb	r3, r3
 8003126:	2b01      	cmp	r3, #1
 8003128:	bf14      	ite	ne
 800312a:	2301      	movne	r3, #1
 800312c:	2300      	moveq	r3, #0
 800312e:	b2db      	uxtb	r3, r3
 8003130:	e015      	b.n	800315e <HAL_TIM_PWM_Start+0x6a>
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	2b08      	cmp	r3, #8
 8003136:	d109      	bne.n	800314c <HAL_TIM_PWM_Start+0x58>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800313e:	b2db      	uxtb	r3, r3
 8003140:	2b01      	cmp	r3, #1
 8003142:	bf14      	ite	ne
 8003144:	2301      	movne	r3, #1
 8003146:	2300      	moveq	r3, #0
 8003148:	b2db      	uxtb	r3, r3
 800314a:	e008      	b.n	800315e <HAL_TIM_PWM_Start+0x6a>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003152:	b2db      	uxtb	r3, r3
 8003154:	2b01      	cmp	r3, #1
 8003156:	bf14      	ite	ne
 8003158:	2301      	movne	r3, #1
 800315a:	2300      	moveq	r3, #0
 800315c:	b2db      	uxtb	r3, r3
 800315e:	2b00      	cmp	r3, #0
 8003160:	d001      	beq.n	8003166 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e05e      	b.n	8003224 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d104      	bne.n	8003176 <HAL_TIM_PWM_Start+0x82>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2202      	movs	r2, #2
 8003170:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003174:	e013      	b.n	800319e <HAL_TIM_PWM_Start+0xaa>
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	2b04      	cmp	r3, #4
 800317a:	d104      	bne.n	8003186 <HAL_TIM_PWM_Start+0x92>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2202      	movs	r2, #2
 8003180:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003184:	e00b      	b.n	800319e <HAL_TIM_PWM_Start+0xaa>
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	2b08      	cmp	r3, #8
 800318a:	d104      	bne.n	8003196 <HAL_TIM_PWM_Start+0xa2>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2202      	movs	r2, #2
 8003190:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003194:	e003      	b.n	800319e <HAL_TIM_PWM_Start+0xaa>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2202      	movs	r2, #2
 800319a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	2201      	movs	r2, #1
 80031a4:	6839      	ldr	r1, [r7, #0]
 80031a6:	4618      	mov	r0, r3
 80031a8:	f000 fd7c 	bl	8003ca4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a1e      	ldr	r2, [pc, #120]	; (800322c <HAL_TIM_PWM_Start+0x138>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d107      	bne.n	80031c6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80031c4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a18      	ldr	r2, [pc, #96]	; (800322c <HAL_TIM_PWM_Start+0x138>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d00e      	beq.n	80031ee <HAL_TIM_PWM_Start+0xfa>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031d8:	d009      	beq.n	80031ee <HAL_TIM_PWM_Start+0xfa>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a14      	ldr	r2, [pc, #80]	; (8003230 <HAL_TIM_PWM_Start+0x13c>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d004      	beq.n	80031ee <HAL_TIM_PWM_Start+0xfa>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a12      	ldr	r2, [pc, #72]	; (8003234 <HAL_TIM_PWM_Start+0x140>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d111      	bne.n	8003212 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	f003 0307 	and.w	r3, r3, #7
 80031f8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2b06      	cmp	r3, #6
 80031fe:	d010      	beq.n	8003222 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f042 0201 	orr.w	r2, r2, #1
 800320e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003210:	e007      	b.n	8003222 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f042 0201 	orr.w	r2, r2, #1
 8003220:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003222:	2300      	movs	r3, #0
}
 8003224:	4618      	mov	r0, r3
 8003226:	3710      	adds	r7, #16
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}
 800322c:	40012c00 	.word	0x40012c00
 8003230:	40000400 	.word	0x40000400
 8003234:	40000800 	.word	0x40000800

08003238 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b082      	sub	sp, #8
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	691b      	ldr	r3, [r3, #16]
 8003246:	f003 0302 	and.w	r3, r3, #2
 800324a:	2b02      	cmp	r3, #2
 800324c:	d122      	bne.n	8003294 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	68db      	ldr	r3, [r3, #12]
 8003254:	f003 0302 	and.w	r3, r3, #2
 8003258:	2b02      	cmp	r3, #2
 800325a:	d11b      	bne.n	8003294 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f06f 0202 	mvn.w	r2, #2
 8003264:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2201      	movs	r2, #1
 800326a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	699b      	ldr	r3, [r3, #24]
 8003272:	f003 0303 	and.w	r3, r3, #3
 8003276:	2b00      	cmp	r3, #0
 8003278:	d003      	beq.n	8003282 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f000 fa76 	bl	800376c <HAL_TIM_IC_CaptureCallback>
 8003280:	e005      	b.n	800328e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f000 fa69 	bl	800375a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003288:	6878      	ldr	r0, [r7, #4]
 800328a:	f000 fa78 	bl	800377e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2200      	movs	r2, #0
 8003292:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	691b      	ldr	r3, [r3, #16]
 800329a:	f003 0304 	and.w	r3, r3, #4
 800329e:	2b04      	cmp	r3, #4
 80032a0:	d122      	bne.n	80032e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	f003 0304 	and.w	r3, r3, #4
 80032ac:	2b04      	cmp	r3, #4
 80032ae:	d11b      	bne.n	80032e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f06f 0204 	mvn.w	r2, #4
 80032b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2202      	movs	r2, #2
 80032be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	699b      	ldr	r3, [r3, #24]
 80032c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d003      	beq.n	80032d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f000 fa4c 	bl	800376c <HAL_TIM_IC_CaptureCallback>
 80032d4:	e005      	b.n	80032e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f000 fa3f 	bl	800375a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	f000 fa4e 	bl	800377e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2200      	movs	r2, #0
 80032e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	691b      	ldr	r3, [r3, #16]
 80032ee:	f003 0308 	and.w	r3, r3, #8
 80032f2:	2b08      	cmp	r3, #8
 80032f4:	d122      	bne.n	800333c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	f003 0308 	and.w	r3, r3, #8
 8003300:	2b08      	cmp	r3, #8
 8003302:	d11b      	bne.n	800333c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f06f 0208 	mvn.w	r2, #8
 800330c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2204      	movs	r2, #4
 8003312:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	69db      	ldr	r3, [r3, #28]
 800331a:	f003 0303 	and.w	r3, r3, #3
 800331e:	2b00      	cmp	r3, #0
 8003320:	d003      	beq.n	800332a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f000 fa22 	bl	800376c <HAL_TIM_IC_CaptureCallback>
 8003328:	e005      	b.n	8003336 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	f000 fa15 	bl	800375a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003330:	6878      	ldr	r0, [r7, #4]
 8003332:	f000 fa24 	bl	800377e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	691b      	ldr	r3, [r3, #16]
 8003342:	f003 0310 	and.w	r3, r3, #16
 8003346:	2b10      	cmp	r3, #16
 8003348:	d122      	bne.n	8003390 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	f003 0310 	and.w	r3, r3, #16
 8003354:	2b10      	cmp	r3, #16
 8003356:	d11b      	bne.n	8003390 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f06f 0210 	mvn.w	r2, #16
 8003360:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2208      	movs	r2, #8
 8003366:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	69db      	ldr	r3, [r3, #28]
 800336e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003372:	2b00      	cmp	r3, #0
 8003374:	d003      	beq.n	800337e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f000 f9f8 	bl	800376c <HAL_TIM_IC_CaptureCallback>
 800337c:	e005      	b.n	800338a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f000 f9eb 	bl	800375a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	f000 f9fa 	bl	800377e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2200      	movs	r2, #0
 800338e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	691b      	ldr	r3, [r3, #16]
 8003396:	f003 0301 	and.w	r3, r3, #1
 800339a:	2b01      	cmp	r3, #1
 800339c:	d10e      	bne.n	80033bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	68db      	ldr	r3, [r3, #12]
 80033a4:	f003 0301 	and.w	r3, r3, #1
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d107      	bne.n	80033bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f06f 0201 	mvn.w	r2, #1
 80033b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f7fd ffce 	bl	8001358 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	691b      	ldr	r3, [r3, #16]
 80033c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033c6:	2b80      	cmp	r3, #128	; 0x80
 80033c8:	d10e      	bne.n	80033e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033d4:	2b80      	cmp	r3, #128	; 0x80
 80033d6:	d107      	bne.n	80033e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80033e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f000 fce9 	bl	8003dba <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	691b      	ldr	r3, [r3, #16]
 80033ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033f2:	2b40      	cmp	r3, #64	; 0x40
 80033f4:	d10e      	bne.n	8003414 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003400:	2b40      	cmp	r3, #64	; 0x40
 8003402:	d107      	bne.n	8003414 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800340c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f000 f9be 	bl	8003790 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	691b      	ldr	r3, [r3, #16]
 800341a:	f003 0320 	and.w	r3, r3, #32
 800341e:	2b20      	cmp	r3, #32
 8003420:	d10e      	bne.n	8003440 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	f003 0320 	and.w	r3, r3, #32
 800342c:	2b20      	cmp	r3, #32
 800342e:	d107      	bne.n	8003440 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f06f 0220 	mvn.w	r2, #32
 8003438:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f000 fcb4 	bl	8003da8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003440:	bf00      	nop
 8003442:	3708      	adds	r7, #8
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}

08003448 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b086      	sub	sp, #24
 800344c:	af00      	add	r7, sp, #0
 800344e:	60f8      	str	r0, [r7, #12]
 8003450:	60b9      	str	r1, [r7, #8]
 8003452:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003454:	2300      	movs	r3, #0
 8003456:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800345e:	2b01      	cmp	r3, #1
 8003460:	d101      	bne.n	8003466 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003462:	2302      	movs	r3, #2
 8003464:	e0ae      	b.n	80035c4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2201      	movs	r2, #1
 800346a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2b0c      	cmp	r3, #12
 8003472:	f200 809f 	bhi.w	80035b4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003476:	a201      	add	r2, pc, #4	; (adr r2, 800347c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800347c:	080034b1 	.word	0x080034b1
 8003480:	080035b5 	.word	0x080035b5
 8003484:	080035b5 	.word	0x080035b5
 8003488:	080035b5 	.word	0x080035b5
 800348c:	080034f1 	.word	0x080034f1
 8003490:	080035b5 	.word	0x080035b5
 8003494:	080035b5 	.word	0x080035b5
 8003498:	080035b5 	.word	0x080035b5
 800349c:	08003533 	.word	0x08003533
 80034a0:	080035b5 	.word	0x080035b5
 80034a4:	080035b5 	.word	0x080035b5
 80034a8:	080035b5 	.word	0x080035b5
 80034ac:	08003573 	.word	0x08003573
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	68b9      	ldr	r1, [r7, #8]
 80034b6:	4618      	mov	r0, r3
 80034b8:	f000 f9d6 	bl	8003868 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	699a      	ldr	r2, [r3, #24]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f042 0208 	orr.w	r2, r2, #8
 80034ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	699a      	ldr	r2, [r3, #24]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f022 0204 	bic.w	r2, r2, #4
 80034da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	6999      	ldr	r1, [r3, #24]
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	691a      	ldr	r2, [r3, #16]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	430a      	orrs	r2, r1
 80034ec:	619a      	str	r2, [r3, #24]
      break;
 80034ee:	e064      	b.n	80035ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	68b9      	ldr	r1, [r7, #8]
 80034f6:	4618      	mov	r0, r3
 80034f8:	f000 fa1c 	bl	8003934 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	699a      	ldr	r2, [r3, #24]
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800350a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	699a      	ldr	r2, [r3, #24]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800351a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	6999      	ldr	r1, [r3, #24]
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	691b      	ldr	r3, [r3, #16]
 8003526:	021a      	lsls	r2, r3, #8
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	430a      	orrs	r2, r1
 800352e:	619a      	str	r2, [r3, #24]
      break;
 8003530:	e043      	b.n	80035ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	68b9      	ldr	r1, [r7, #8]
 8003538:	4618      	mov	r0, r3
 800353a:	f000 fa65 	bl	8003a08 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	69da      	ldr	r2, [r3, #28]
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f042 0208 	orr.w	r2, r2, #8
 800354c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	69da      	ldr	r2, [r3, #28]
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f022 0204 	bic.w	r2, r2, #4
 800355c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	69d9      	ldr	r1, [r3, #28]
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	691a      	ldr	r2, [r3, #16]
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	430a      	orrs	r2, r1
 800356e:	61da      	str	r2, [r3, #28]
      break;
 8003570:	e023      	b.n	80035ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	68b9      	ldr	r1, [r7, #8]
 8003578:	4618      	mov	r0, r3
 800357a:	f000 faaf 	bl	8003adc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	69da      	ldr	r2, [r3, #28]
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800358c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	69da      	ldr	r2, [r3, #28]
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800359c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	69d9      	ldr	r1, [r3, #28]
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	691b      	ldr	r3, [r3, #16]
 80035a8:	021a      	lsls	r2, r3, #8
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	430a      	orrs	r2, r1
 80035b0:	61da      	str	r2, [r3, #28]
      break;
 80035b2:	e002      	b.n	80035ba <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	75fb      	strb	r3, [r7, #23]
      break;
 80035b8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2200      	movs	r2, #0
 80035be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80035c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	3718      	adds	r7, #24
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}

080035cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b084      	sub	sp, #16
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80035d6:	2300      	movs	r3, #0
 80035d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d101      	bne.n	80035e8 <HAL_TIM_ConfigClockSource+0x1c>
 80035e4:	2302      	movs	r3, #2
 80035e6:	e0b4      	b.n	8003752 <HAL_TIM_ConfigClockSource+0x186>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2201      	movs	r2, #1
 80035ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2202      	movs	r2, #2
 80035f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003606:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800360e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	68ba      	ldr	r2, [r7, #8]
 8003616:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003620:	d03e      	beq.n	80036a0 <HAL_TIM_ConfigClockSource+0xd4>
 8003622:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003626:	f200 8087 	bhi.w	8003738 <HAL_TIM_ConfigClockSource+0x16c>
 800362a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800362e:	f000 8086 	beq.w	800373e <HAL_TIM_ConfigClockSource+0x172>
 8003632:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003636:	d87f      	bhi.n	8003738 <HAL_TIM_ConfigClockSource+0x16c>
 8003638:	2b70      	cmp	r3, #112	; 0x70
 800363a:	d01a      	beq.n	8003672 <HAL_TIM_ConfigClockSource+0xa6>
 800363c:	2b70      	cmp	r3, #112	; 0x70
 800363e:	d87b      	bhi.n	8003738 <HAL_TIM_ConfigClockSource+0x16c>
 8003640:	2b60      	cmp	r3, #96	; 0x60
 8003642:	d050      	beq.n	80036e6 <HAL_TIM_ConfigClockSource+0x11a>
 8003644:	2b60      	cmp	r3, #96	; 0x60
 8003646:	d877      	bhi.n	8003738 <HAL_TIM_ConfigClockSource+0x16c>
 8003648:	2b50      	cmp	r3, #80	; 0x50
 800364a:	d03c      	beq.n	80036c6 <HAL_TIM_ConfigClockSource+0xfa>
 800364c:	2b50      	cmp	r3, #80	; 0x50
 800364e:	d873      	bhi.n	8003738 <HAL_TIM_ConfigClockSource+0x16c>
 8003650:	2b40      	cmp	r3, #64	; 0x40
 8003652:	d058      	beq.n	8003706 <HAL_TIM_ConfigClockSource+0x13a>
 8003654:	2b40      	cmp	r3, #64	; 0x40
 8003656:	d86f      	bhi.n	8003738 <HAL_TIM_ConfigClockSource+0x16c>
 8003658:	2b30      	cmp	r3, #48	; 0x30
 800365a:	d064      	beq.n	8003726 <HAL_TIM_ConfigClockSource+0x15a>
 800365c:	2b30      	cmp	r3, #48	; 0x30
 800365e:	d86b      	bhi.n	8003738 <HAL_TIM_ConfigClockSource+0x16c>
 8003660:	2b20      	cmp	r3, #32
 8003662:	d060      	beq.n	8003726 <HAL_TIM_ConfigClockSource+0x15a>
 8003664:	2b20      	cmp	r3, #32
 8003666:	d867      	bhi.n	8003738 <HAL_TIM_ConfigClockSource+0x16c>
 8003668:	2b00      	cmp	r3, #0
 800366a:	d05c      	beq.n	8003726 <HAL_TIM_ConfigClockSource+0x15a>
 800366c:	2b10      	cmp	r3, #16
 800366e:	d05a      	beq.n	8003726 <HAL_TIM_ConfigClockSource+0x15a>
 8003670:	e062      	b.n	8003738 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6818      	ldr	r0, [r3, #0]
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	6899      	ldr	r1, [r3, #8]
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	685a      	ldr	r2, [r3, #4]
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	68db      	ldr	r3, [r3, #12]
 8003682:	f000 faf0 	bl	8003c66 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003694:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	68ba      	ldr	r2, [r7, #8]
 800369c:	609a      	str	r2, [r3, #8]
      break;
 800369e:	e04f      	b.n	8003740 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6818      	ldr	r0, [r3, #0]
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	6899      	ldr	r1, [r3, #8]
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	685a      	ldr	r2, [r3, #4]
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	f000 fad9 	bl	8003c66 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	689a      	ldr	r2, [r3, #8]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80036c2:	609a      	str	r2, [r3, #8]
      break;
 80036c4:	e03c      	b.n	8003740 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6818      	ldr	r0, [r3, #0]
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	6859      	ldr	r1, [r3, #4]
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	68db      	ldr	r3, [r3, #12]
 80036d2:	461a      	mov	r2, r3
 80036d4:	f000 fa50 	bl	8003b78 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	2150      	movs	r1, #80	; 0x50
 80036de:	4618      	mov	r0, r3
 80036e0:	f000 faa7 	bl	8003c32 <TIM_ITRx_SetConfig>
      break;
 80036e4:	e02c      	b.n	8003740 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6818      	ldr	r0, [r3, #0]
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	6859      	ldr	r1, [r3, #4]
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	68db      	ldr	r3, [r3, #12]
 80036f2:	461a      	mov	r2, r3
 80036f4:	f000 fa6e 	bl	8003bd4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	2160      	movs	r1, #96	; 0x60
 80036fe:	4618      	mov	r0, r3
 8003700:	f000 fa97 	bl	8003c32 <TIM_ITRx_SetConfig>
      break;
 8003704:	e01c      	b.n	8003740 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6818      	ldr	r0, [r3, #0]
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	6859      	ldr	r1, [r3, #4]
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	68db      	ldr	r3, [r3, #12]
 8003712:	461a      	mov	r2, r3
 8003714:	f000 fa30 	bl	8003b78 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	2140      	movs	r1, #64	; 0x40
 800371e:	4618      	mov	r0, r3
 8003720:	f000 fa87 	bl	8003c32 <TIM_ITRx_SetConfig>
      break;
 8003724:	e00c      	b.n	8003740 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4619      	mov	r1, r3
 8003730:	4610      	mov	r0, r2
 8003732:	f000 fa7e 	bl	8003c32 <TIM_ITRx_SetConfig>
      break;
 8003736:	e003      	b.n	8003740 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	73fb      	strb	r3, [r7, #15]
      break;
 800373c:	e000      	b.n	8003740 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800373e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2201      	movs	r2, #1
 8003744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003750:	7bfb      	ldrb	r3, [r7, #15]
}
 8003752:	4618      	mov	r0, r3
 8003754:	3710      	adds	r7, #16
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}

0800375a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800375a:	b480      	push	{r7}
 800375c:	b083      	sub	sp, #12
 800375e:	af00      	add	r7, sp, #0
 8003760:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003762:	bf00      	nop
 8003764:	370c      	adds	r7, #12
 8003766:	46bd      	mov	sp, r7
 8003768:	bc80      	pop	{r7}
 800376a:	4770      	bx	lr

0800376c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800376c:	b480      	push	{r7}
 800376e:	b083      	sub	sp, #12
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003774:	bf00      	nop
 8003776:	370c      	adds	r7, #12
 8003778:	46bd      	mov	sp, r7
 800377a:	bc80      	pop	{r7}
 800377c:	4770      	bx	lr

0800377e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800377e:	b480      	push	{r7}
 8003780:	b083      	sub	sp, #12
 8003782:	af00      	add	r7, sp, #0
 8003784:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003786:	bf00      	nop
 8003788:	370c      	adds	r7, #12
 800378a:	46bd      	mov	sp, r7
 800378c:	bc80      	pop	{r7}
 800378e:	4770      	bx	lr

08003790 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003790:	b480      	push	{r7}
 8003792:	b083      	sub	sp, #12
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003798:	bf00      	nop
 800379a:	370c      	adds	r7, #12
 800379c:	46bd      	mov	sp, r7
 800379e:	bc80      	pop	{r7}
 80037a0:	4770      	bx	lr
	...

080037a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b085      	sub	sp, #20
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
 80037ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	4a29      	ldr	r2, [pc, #164]	; (800385c <TIM_Base_SetConfig+0xb8>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d00b      	beq.n	80037d4 <TIM_Base_SetConfig+0x30>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037c2:	d007      	beq.n	80037d4 <TIM_Base_SetConfig+0x30>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	4a26      	ldr	r2, [pc, #152]	; (8003860 <TIM_Base_SetConfig+0xbc>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d003      	beq.n	80037d4 <TIM_Base_SetConfig+0x30>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	4a25      	ldr	r2, [pc, #148]	; (8003864 <TIM_Base_SetConfig+0xc0>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d108      	bne.n	80037e6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	68fa      	ldr	r2, [r7, #12]
 80037e2:	4313      	orrs	r3, r2
 80037e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	4a1c      	ldr	r2, [pc, #112]	; (800385c <TIM_Base_SetConfig+0xb8>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d00b      	beq.n	8003806 <TIM_Base_SetConfig+0x62>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037f4:	d007      	beq.n	8003806 <TIM_Base_SetConfig+0x62>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	4a19      	ldr	r2, [pc, #100]	; (8003860 <TIM_Base_SetConfig+0xbc>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d003      	beq.n	8003806 <TIM_Base_SetConfig+0x62>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	4a18      	ldr	r2, [pc, #96]	; (8003864 <TIM_Base_SetConfig+0xc0>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d108      	bne.n	8003818 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800380c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	68db      	ldr	r3, [r3, #12]
 8003812:	68fa      	ldr	r2, [r7, #12]
 8003814:	4313      	orrs	r3, r2
 8003816:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	695b      	ldr	r3, [r3, #20]
 8003822:	4313      	orrs	r3, r2
 8003824:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	68fa      	ldr	r2, [r7, #12]
 800382a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	689a      	ldr	r2, [r3, #8]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	4a07      	ldr	r2, [pc, #28]	; (800385c <TIM_Base_SetConfig+0xb8>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d103      	bne.n	800384c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	691a      	ldr	r2, [r3, #16]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2201      	movs	r2, #1
 8003850:	615a      	str	r2, [r3, #20]
}
 8003852:	bf00      	nop
 8003854:	3714      	adds	r7, #20
 8003856:	46bd      	mov	sp, r7
 8003858:	bc80      	pop	{r7}
 800385a:	4770      	bx	lr
 800385c:	40012c00 	.word	0x40012c00
 8003860:	40000400 	.word	0x40000400
 8003864:	40000800 	.word	0x40000800

08003868 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003868:	b480      	push	{r7}
 800386a:	b087      	sub	sp, #28
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6a1b      	ldr	r3, [r3, #32]
 8003876:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6a1b      	ldr	r3, [r3, #32]
 800387c:	f023 0201 	bic.w	r2, r3, #1
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	699b      	ldr	r3, [r3, #24]
 800388e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003896:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	f023 0303 	bic.w	r3, r3, #3
 800389e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	68fa      	ldr	r2, [r7, #12]
 80038a6:	4313      	orrs	r3, r2
 80038a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	f023 0302 	bic.w	r3, r3, #2
 80038b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	697a      	ldr	r2, [r7, #20]
 80038b8:	4313      	orrs	r3, r2
 80038ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	4a1c      	ldr	r2, [pc, #112]	; (8003930 <TIM_OC1_SetConfig+0xc8>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d10c      	bne.n	80038de <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	f023 0308 	bic.w	r3, r3, #8
 80038ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	697a      	ldr	r2, [r7, #20]
 80038d2:	4313      	orrs	r3, r2
 80038d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	f023 0304 	bic.w	r3, r3, #4
 80038dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4a13      	ldr	r2, [pc, #76]	; (8003930 <TIM_OC1_SetConfig+0xc8>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d111      	bne.n	800390a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80038f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	695b      	ldr	r3, [r3, #20]
 80038fa:	693a      	ldr	r2, [r7, #16]
 80038fc:	4313      	orrs	r3, r2
 80038fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	699b      	ldr	r3, [r3, #24]
 8003904:	693a      	ldr	r2, [r7, #16]
 8003906:	4313      	orrs	r3, r2
 8003908:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	693a      	ldr	r2, [r7, #16]
 800390e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	68fa      	ldr	r2, [r7, #12]
 8003914:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	685a      	ldr	r2, [r3, #4]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	697a      	ldr	r2, [r7, #20]
 8003922:	621a      	str	r2, [r3, #32]
}
 8003924:	bf00      	nop
 8003926:	371c      	adds	r7, #28
 8003928:	46bd      	mov	sp, r7
 800392a:	bc80      	pop	{r7}
 800392c:	4770      	bx	lr
 800392e:	bf00      	nop
 8003930:	40012c00 	.word	0x40012c00

08003934 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003934:	b480      	push	{r7}
 8003936:	b087      	sub	sp, #28
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
 800393c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6a1b      	ldr	r3, [r3, #32]
 8003942:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6a1b      	ldr	r3, [r3, #32]
 8003948:	f023 0210 	bic.w	r2, r3, #16
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	699b      	ldr	r3, [r3, #24]
 800395a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003962:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800396a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	021b      	lsls	r3, r3, #8
 8003972:	68fa      	ldr	r2, [r7, #12]
 8003974:	4313      	orrs	r3, r2
 8003976:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	f023 0320 	bic.w	r3, r3, #32
 800397e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	011b      	lsls	r3, r3, #4
 8003986:	697a      	ldr	r2, [r7, #20]
 8003988:	4313      	orrs	r3, r2
 800398a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	4a1d      	ldr	r2, [pc, #116]	; (8003a04 <TIM_OC2_SetConfig+0xd0>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d10d      	bne.n	80039b0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800399a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	011b      	lsls	r3, r3, #4
 80039a2:	697a      	ldr	r2, [r7, #20]
 80039a4:	4313      	orrs	r3, r2
 80039a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039ae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	4a14      	ldr	r2, [pc, #80]	; (8003a04 <TIM_OC2_SetConfig+0xd0>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d113      	bne.n	80039e0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80039be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80039c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	695b      	ldr	r3, [r3, #20]
 80039cc:	009b      	lsls	r3, r3, #2
 80039ce:	693a      	ldr	r2, [r7, #16]
 80039d0:	4313      	orrs	r3, r2
 80039d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	699b      	ldr	r3, [r3, #24]
 80039d8:	009b      	lsls	r3, r3, #2
 80039da:	693a      	ldr	r2, [r7, #16]
 80039dc:	4313      	orrs	r3, r2
 80039de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	693a      	ldr	r2, [r7, #16]
 80039e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	68fa      	ldr	r2, [r7, #12]
 80039ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	685a      	ldr	r2, [r3, #4]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	697a      	ldr	r2, [r7, #20]
 80039f8:	621a      	str	r2, [r3, #32]
}
 80039fa:	bf00      	nop
 80039fc:	371c      	adds	r7, #28
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bc80      	pop	{r7}
 8003a02:	4770      	bx	lr
 8003a04:	40012c00 	.word	0x40012c00

08003a08 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b087      	sub	sp, #28
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6a1b      	ldr	r3, [r3, #32]
 8003a16:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6a1b      	ldr	r3, [r3, #32]
 8003a1c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	69db      	ldr	r3, [r3, #28]
 8003a2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f023 0303 	bic.w	r3, r3, #3
 8003a3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	68fa      	ldr	r2, [r7, #12]
 8003a46:	4313      	orrs	r3, r2
 8003a48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	021b      	lsls	r3, r3, #8
 8003a58:	697a      	ldr	r2, [r7, #20]
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	4a1d      	ldr	r2, [pc, #116]	; (8003ad8 <TIM_OC3_SetConfig+0xd0>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d10d      	bne.n	8003a82 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003a6c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	68db      	ldr	r3, [r3, #12]
 8003a72:	021b      	lsls	r3, r3, #8
 8003a74:	697a      	ldr	r2, [r7, #20]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003a80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	4a14      	ldr	r2, [pc, #80]	; (8003ad8 <TIM_OC3_SetConfig+0xd0>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d113      	bne.n	8003ab2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003a90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003a98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	695b      	ldr	r3, [r3, #20]
 8003a9e:	011b      	lsls	r3, r3, #4
 8003aa0:	693a      	ldr	r2, [r7, #16]
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	699b      	ldr	r3, [r3, #24]
 8003aaa:	011b      	lsls	r3, r3, #4
 8003aac:	693a      	ldr	r2, [r7, #16]
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	693a      	ldr	r2, [r7, #16]
 8003ab6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	68fa      	ldr	r2, [r7, #12]
 8003abc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	685a      	ldr	r2, [r3, #4]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	697a      	ldr	r2, [r7, #20]
 8003aca:	621a      	str	r2, [r3, #32]
}
 8003acc:	bf00      	nop
 8003ace:	371c      	adds	r7, #28
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bc80      	pop	{r7}
 8003ad4:	4770      	bx	lr
 8003ad6:	bf00      	nop
 8003ad8:	40012c00 	.word	0x40012c00

08003adc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b087      	sub	sp, #28
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
 8003ae4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6a1b      	ldr	r3, [r3, #32]
 8003aea:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6a1b      	ldr	r3, [r3, #32]
 8003af0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	69db      	ldr	r3, [r3, #28]
 8003b02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	021b      	lsls	r3, r3, #8
 8003b1a:	68fa      	ldr	r2, [r7, #12]
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	031b      	lsls	r3, r3, #12
 8003b2e:	693a      	ldr	r2, [r7, #16]
 8003b30:	4313      	orrs	r3, r2
 8003b32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	4a0f      	ldr	r2, [pc, #60]	; (8003b74 <TIM_OC4_SetConfig+0x98>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d109      	bne.n	8003b50 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b42:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	695b      	ldr	r3, [r3, #20]
 8003b48:	019b      	lsls	r3, r3, #6
 8003b4a:	697a      	ldr	r2, [r7, #20]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	697a      	ldr	r2, [r7, #20]
 8003b54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	68fa      	ldr	r2, [r7, #12]
 8003b5a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	685a      	ldr	r2, [r3, #4]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	693a      	ldr	r2, [r7, #16]
 8003b68:	621a      	str	r2, [r3, #32]
}
 8003b6a:	bf00      	nop
 8003b6c:	371c      	adds	r7, #28
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bc80      	pop	{r7}
 8003b72:	4770      	bx	lr
 8003b74:	40012c00 	.word	0x40012c00

08003b78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b087      	sub	sp, #28
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	60f8      	str	r0, [r7, #12]
 8003b80:	60b9      	str	r1, [r7, #8]
 8003b82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	6a1b      	ldr	r3, [r3, #32]
 8003b88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	6a1b      	ldr	r3, [r3, #32]
 8003b8e:	f023 0201 	bic.w	r2, r3, #1
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	699b      	ldr	r3, [r3, #24]
 8003b9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ba2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	011b      	lsls	r3, r3, #4
 8003ba8:	693a      	ldr	r2, [r7, #16]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	f023 030a 	bic.w	r3, r3, #10
 8003bb4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003bb6:	697a      	ldr	r2, [r7, #20]
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	693a      	ldr	r2, [r7, #16]
 8003bc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	697a      	ldr	r2, [r7, #20]
 8003bc8:	621a      	str	r2, [r3, #32]
}
 8003bca:	bf00      	nop
 8003bcc:	371c      	adds	r7, #28
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bc80      	pop	{r7}
 8003bd2:	4770      	bx	lr

08003bd4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b087      	sub	sp, #28
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	60f8      	str	r0, [r7, #12]
 8003bdc:	60b9      	str	r1, [r7, #8]
 8003bde:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	6a1b      	ldr	r3, [r3, #32]
 8003be4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	6a1b      	ldr	r3, [r3, #32]
 8003bea:	f023 0210 	bic.w	r2, r3, #16
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	699b      	ldr	r3, [r3, #24]
 8003bf6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003bfe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	031b      	lsls	r3, r3, #12
 8003c04:	693a      	ldr	r2, [r7, #16]
 8003c06:	4313      	orrs	r3, r2
 8003c08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003c10:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	011b      	lsls	r3, r3, #4
 8003c16:	697a      	ldr	r2, [r7, #20]
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	693a      	ldr	r2, [r7, #16]
 8003c20:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	697a      	ldr	r2, [r7, #20]
 8003c26:	621a      	str	r2, [r3, #32]
}
 8003c28:	bf00      	nop
 8003c2a:	371c      	adds	r7, #28
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bc80      	pop	{r7}
 8003c30:	4770      	bx	lr

08003c32 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003c32:	b480      	push	{r7}
 8003c34:	b085      	sub	sp, #20
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	6078      	str	r0, [r7, #4]
 8003c3a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c48:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003c4a:	683a      	ldr	r2, [r7, #0]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	f043 0307 	orr.w	r3, r3, #7
 8003c54:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	68fa      	ldr	r2, [r7, #12]
 8003c5a:	609a      	str	r2, [r3, #8]
}
 8003c5c:	bf00      	nop
 8003c5e:	3714      	adds	r7, #20
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bc80      	pop	{r7}
 8003c64:	4770      	bx	lr

08003c66 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003c66:	b480      	push	{r7}
 8003c68:	b087      	sub	sp, #28
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	60f8      	str	r0, [r7, #12]
 8003c6e:	60b9      	str	r1, [r7, #8]
 8003c70:	607a      	str	r2, [r7, #4]
 8003c72:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c80:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	021a      	lsls	r2, r3, #8
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	431a      	orrs	r2, r3
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	697a      	ldr	r2, [r7, #20]
 8003c90:	4313      	orrs	r3, r2
 8003c92:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	697a      	ldr	r2, [r7, #20]
 8003c98:	609a      	str	r2, [r3, #8]
}
 8003c9a:	bf00      	nop
 8003c9c:	371c      	adds	r7, #28
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bc80      	pop	{r7}
 8003ca2:	4770      	bx	lr

08003ca4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b087      	sub	sp, #28
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	60f8      	str	r0, [r7, #12]
 8003cac:	60b9      	str	r1, [r7, #8]
 8003cae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	f003 031f 	and.w	r3, r3, #31
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cbc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	6a1a      	ldr	r2, [r3, #32]
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	43db      	mvns	r3, r3
 8003cc6:	401a      	ands	r2, r3
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	6a1a      	ldr	r2, [r3, #32]
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	f003 031f 	and.w	r3, r3, #31
 8003cd6:	6879      	ldr	r1, [r7, #4]
 8003cd8:	fa01 f303 	lsl.w	r3, r1, r3
 8003cdc:	431a      	orrs	r2, r3
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	621a      	str	r2, [r3, #32]
}
 8003ce2:	bf00      	nop
 8003ce4:	371c      	adds	r7, #28
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bc80      	pop	{r7}
 8003cea:	4770      	bx	lr

08003cec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b085      	sub	sp, #20
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
 8003cf4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d101      	bne.n	8003d04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d00:	2302      	movs	r3, #2
 8003d02:	e046      	b.n	8003d92 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2201      	movs	r2, #1
 8003d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2202      	movs	r2, #2
 8003d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d2a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	68fa      	ldr	r2, [r7, #12]
 8003d32:	4313      	orrs	r3, r2
 8003d34:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	68fa      	ldr	r2, [r7, #12]
 8003d3c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a16      	ldr	r2, [pc, #88]	; (8003d9c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d00e      	beq.n	8003d66 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d50:	d009      	beq.n	8003d66 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a12      	ldr	r2, [pc, #72]	; (8003da0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d004      	beq.n	8003d66 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a10      	ldr	r2, [pc, #64]	; (8003da4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d10c      	bne.n	8003d80 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d6c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	68ba      	ldr	r2, [r7, #8]
 8003d74:	4313      	orrs	r3, r2
 8003d76:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	68ba      	ldr	r2, [r7, #8]
 8003d7e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2201      	movs	r2, #1
 8003d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d90:	2300      	movs	r3, #0
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	3714      	adds	r7, #20
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bc80      	pop	{r7}
 8003d9a:	4770      	bx	lr
 8003d9c:	40012c00 	.word	0x40012c00
 8003da0:	40000400 	.word	0x40000400
 8003da4:	40000800 	.word	0x40000800

08003da8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b083      	sub	sp, #12
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003db0:	bf00      	nop
 8003db2:	370c      	adds	r7, #12
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bc80      	pop	{r7}
 8003db8:	4770      	bx	lr

08003dba <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003dba:	b480      	push	{r7}
 8003dbc:	b083      	sub	sp, #12
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003dc2:	bf00      	nop
 8003dc4:	370c      	adds	r7, #12
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bc80      	pop	{r7}
 8003dca:	4770      	bx	lr

08003dcc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b082      	sub	sp, #8
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d101      	bne.n	8003dde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e042      	b.n	8003e64 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d106      	bne.n	8003df8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2200      	movs	r2, #0
 8003dee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f7fd fe16 	bl	8001a24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2224      	movs	r2, #36	; 0x24
 8003dfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	68da      	ldr	r2, [r3, #12]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e0e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	f000 fd71 	bl	80048f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	691a      	ldr	r2, [r3, #16]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e24:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	695a      	ldr	r2, [r3, #20]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e34:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	68da      	ldr	r2, [r3, #12]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e44:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2220      	movs	r2, #32
 8003e50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2220      	movs	r2, #32
 8003e58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003e62:	2300      	movs	r3, #0
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	3708      	adds	r7, #8
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}

08003e6c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b08a      	sub	sp, #40	; 0x28
 8003e70:	af02      	add	r7, sp, #8
 8003e72:	60f8      	str	r0, [r7, #12]
 8003e74:	60b9      	str	r1, [r7, #8]
 8003e76:	603b      	str	r3, [r7, #0]
 8003e78:	4613      	mov	r3, r2
 8003e7a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	2b20      	cmp	r3, #32
 8003e8a:	d16d      	bne.n	8003f68 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d002      	beq.n	8003e98 <HAL_UART_Transmit+0x2c>
 8003e92:	88fb      	ldrh	r3, [r7, #6]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d101      	bne.n	8003e9c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e066      	b.n	8003f6a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2221      	movs	r2, #33	; 0x21
 8003ea6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003eaa:	f7fe f89d 	bl	8001fe8 <HAL_GetTick>
 8003eae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	88fa      	ldrh	r2, [r7, #6]
 8003eb4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	88fa      	ldrh	r2, [r7, #6]
 8003eba:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ec4:	d108      	bne.n	8003ed8 <HAL_UART_Transmit+0x6c>
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	691b      	ldr	r3, [r3, #16]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d104      	bne.n	8003ed8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	61bb      	str	r3, [r7, #24]
 8003ed6:	e003      	b.n	8003ee0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003edc:	2300      	movs	r3, #0
 8003ede:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003ee0:	e02a      	b.n	8003f38 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	9300      	str	r3, [sp, #0]
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	2180      	movs	r1, #128	; 0x80
 8003eec:	68f8      	ldr	r0, [r7, #12]
 8003eee:	f000 faf9 	bl	80044e4 <UART_WaitOnFlagUntilTimeout>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d001      	beq.n	8003efc <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003ef8:	2303      	movs	r3, #3
 8003efa:	e036      	b.n	8003f6a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003efc:	69fb      	ldr	r3, [r7, #28]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d10b      	bne.n	8003f1a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f02:	69bb      	ldr	r3, [r7, #24]
 8003f04:	881b      	ldrh	r3, [r3, #0]
 8003f06:	461a      	mov	r2, r3
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f10:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003f12:	69bb      	ldr	r3, [r7, #24]
 8003f14:	3302      	adds	r3, #2
 8003f16:	61bb      	str	r3, [r7, #24]
 8003f18:	e007      	b.n	8003f2a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f1a:	69fb      	ldr	r3, [r7, #28]
 8003f1c:	781a      	ldrb	r2, [r3, #0]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003f24:	69fb      	ldr	r3, [r7, #28]
 8003f26:	3301      	adds	r3, #1
 8003f28:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f2e:	b29b      	uxth	r3, r3
 8003f30:	3b01      	subs	r3, #1
 8003f32:	b29a      	uxth	r2, r3
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f3c:	b29b      	uxth	r3, r3
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d1cf      	bne.n	8003ee2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	9300      	str	r3, [sp, #0]
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	2140      	movs	r1, #64	; 0x40
 8003f4c:	68f8      	ldr	r0, [r7, #12]
 8003f4e:	f000 fac9 	bl	80044e4 <UART_WaitOnFlagUntilTimeout>
 8003f52:	4603      	mov	r3, r0
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d001      	beq.n	8003f5c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003f58:	2303      	movs	r3, #3
 8003f5a:	e006      	b.n	8003f6a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2220      	movs	r2, #32
 8003f60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003f64:	2300      	movs	r3, #0
 8003f66:	e000      	b.n	8003f6a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003f68:	2302      	movs	r3, #2
  }
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3720      	adds	r7, #32
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}
	...

08003f74 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b0ba      	sub	sp, #232	; 0xe8
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	68db      	ldr	r3, [r3, #12]
 8003f8c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	695b      	ldr	r3, [r3, #20]
 8003f96:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003fa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003faa:	f003 030f 	and.w	r3, r3, #15
 8003fae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003fb2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d10f      	bne.n	8003fda <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003fba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fbe:	f003 0320 	and.w	r3, r3, #32
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d009      	beq.n	8003fda <HAL_UART_IRQHandler+0x66>
 8003fc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fca:	f003 0320 	and.w	r3, r3, #32
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d003      	beq.n	8003fda <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f000 fbd1 	bl	800477a <UART_Receive_IT>
      return;
 8003fd8:	e25b      	b.n	8004492 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003fda:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	f000 80de 	beq.w	80041a0 <HAL_UART_IRQHandler+0x22c>
 8003fe4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003fe8:	f003 0301 	and.w	r3, r3, #1
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d106      	bne.n	8003ffe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003ff0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ff4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	f000 80d1 	beq.w	80041a0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003ffe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004002:	f003 0301 	and.w	r3, r3, #1
 8004006:	2b00      	cmp	r3, #0
 8004008:	d00b      	beq.n	8004022 <HAL_UART_IRQHandler+0xae>
 800400a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800400e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004012:	2b00      	cmp	r3, #0
 8004014:	d005      	beq.n	8004022 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800401a:	f043 0201 	orr.w	r2, r3, #1
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004022:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004026:	f003 0304 	and.w	r3, r3, #4
 800402a:	2b00      	cmp	r3, #0
 800402c:	d00b      	beq.n	8004046 <HAL_UART_IRQHandler+0xd2>
 800402e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004032:	f003 0301 	and.w	r3, r3, #1
 8004036:	2b00      	cmp	r3, #0
 8004038:	d005      	beq.n	8004046 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800403e:	f043 0202 	orr.w	r2, r3, #2
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004046:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800404a:	f003 0302 	and.w	r3, r3, #2
 800404e:	2b00      	cmp	r3, #0
 8004050:	d00b      	beq.n	800406a <HAL_UART_IRQHandler+0xf6>
 8004052:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004056:	f003 0301 	and.w	r3, r3, #1
 800405a:	2b00      	cmp	r3, #0
 800405c:	d005      	beq.n	800406a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004062:	f043 0204 	orr.w	r2, r3, #4
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800406a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800406e:	f003 0308 	and.w	r3, r3, #8
 8004072:	2b00      	cmp	r3, #0
 8004074:	d011      	beq.n	800409a <HAL_UART_IRQHandler+0x126>
 8004076:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800407a:	f003 0320 	and.w	r3, r3, #32
 800407e:	2b00      	cmp	r3, #0
 8004080:	d105      	bne.n	800408e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004082:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004086:	f003 0301 	and.w	r3, r3, #1
 800408a:	2b00      	cmp	r3, #0
 800408c:	d005      	beq.n	800409a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004092:	f043 0208 	orr.w	r2, r3, #8
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800409e:	2b00      	cmp	r3, #0
 80040a0:	f000 81f2 	beq.w	8004488 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80040a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040a8:	f003 0320 	and.w	r3, r3, #32
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d008      	beq.n	80040c2 <HAL_UART_IRQHandler+0x14e>
 80040b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040b4:	f003 0320 	and.w	r3, r3, #32
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d002      	beq.n	80040c2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	f000 fb5c 	bl	800477a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	695b      	ldr	r3, [r3, #20]
 80040c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	bf14      	ite	ne
 80040d0:	2301      	movne	r3, #1
 80040d2:	2300      	moveq	r3, #0
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040de:	f003 0308 	and.w	r3, r3, #8
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d103      	bne.n	80040ee <HAL_UART_IRQHandler+0x17a>
 80040e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d04f      	beq.n	800418e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f000 fa66 	bl	80045c0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	695b      	ldr	r3, [r3, #20]
 80040fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d041      	beq.n	8004186 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	3314      	adds	r3, #20
 8004108:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800410c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004110:	e853 3f00 	ldrex	r3, [r3]
 8004114:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004118:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800411c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004120:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	3314      	adds	r3, #20
 800412a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800412e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004132:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004136:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800413a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800413e:	e841 2300 	strex	r3, r2, [r1]
 8004142:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004146:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800414a:	2b00      	cmp	r3, #0
 800414c:	d1d9      	bne.n	8004102 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004152:	2b00      	cmp	r3, #0
 8004154:	d013      	beq.n	800417e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800415a:	4a7e      	ldr	r2, [pc, #504]	; (8004354 <HAL_UART_IRQHandler+0x3e0>)
 800415c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004162:	4618      	mov	r0, r3
 8004164:	f7fe f892 	bl	800228c <HAL_DMA_Abort_IT>
 8004168:	4603      	mov	r3, r0
 800416a:	2b00      	cmp	r3, #0
 800416c:	d016      	beq.n	800419c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004172:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004174:	687a      	ldr	r2, [r7, #4]
 8004176:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004178:	4610      	mov	r0, r2
 800417a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800417c:	e00e      	b.n	800419c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f000 f99c 	bl	80044bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004184:	e00a      	b.n	800419c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f000 f998 	bl	80044bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800418c:	e006      	b.n	800419c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f000 f994 	bl	80044bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2200      	movs	r2, #0
 8004198:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800419a:	e175      	b.n	8004488 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800419c:	bf00      	nop
    return;
 800419e:	e173      	b.n	8004488 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	f040 814f 	bne.w	8004448 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80041aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041ae:	f003 0310 	and.w	r3, r3, #16
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	f000 8148 	beq.w	8004448 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80041b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041bc:	f003 0310 	and.w	r3, r3, #16
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	f000 8141 	beq.w	8004448 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80041c6:	2300      	movs	r3, #0
 80041c8:	60bb      	str	r3, [r7, #8]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	60bb      	str	r3, [r7, #8]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	60bb      	str	r3, [r7, #8]
 80041da:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	695b      	ldr	r3, [r3, #20]
 80041e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	f000 80b6 	beq.w	8004358 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80041f8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	f000 8145 	beq.w	800448c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004206:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800420a:	429a      	cmp	r2, r3
 800420c:	f080 813e 	bcs.w	800448c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004216:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800421c:	699b      	ldr	r3, [r3, #24]
 800421e:	2b20      	cmp	r3, #32
 8004220:	f000 8088 	beq.w	8004334 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	330c      	adds	r3, #12
 800422a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800422e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004232:	e853 3f00 	ldrex	r3, [r3]
 8004236:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800423a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800423e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004242:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	330c      	adds	r3, #12
 800424c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004250:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004254:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004258:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800425c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004260:	e841 2300 	strex	r3, r2, [r1]
 8004264:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004268:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800426c:	2b00      	cmp	r3, #0
 800426e:	d1d9      	bne.n	8004224 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	3314      	adds	r3, #20
 8004276:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004278:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800427a:	e853 3f00 	ldrex	r3, [r3]
 800427e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004280:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004282:	f023 0301 	bic.w	r3, r3, #1
 8004286:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	3314      	adds	r3, #20
 8004290:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004294:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004298:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800429a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800429c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80042a0:	e841 2300 	strex	r3, r2, [r1]
 80042a4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80042a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d1e1      	bne.n	8004270 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	3314      	adds	r3, #20
 80042b2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80042b6:	e853 3f00 	ldrex	r3, [r3]
 80042ba:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80042bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	3314      	adds	r3, #20
 80042cc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80042d0:	66fa      	str	r2, [r7, #108]	; 0x6c
 80042d2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042d4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80042d6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80042d8:	e841 2300 	strex	r3, r2, [r1]
 80042dc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80042de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d1e3      	bne.n	80042ac <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2220      	movs	r2, #32
 80042e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2200      	movs	r2, #0
 80042f0:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	330c      	adds	r3, #12
 80042f8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042fc:	e853 3f00 	ldrex	r3, [r3]
 8004300:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004302:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004304:	f023 0310 	bic.w	r3, r3, #16
 8004308:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	330c      	adds	r3, #12
 8004312:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004316:	65ba      	str	r2, [r7, #88]	; 0x58
 8004318:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800431a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800431c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800431e:	e841 2300 	strex	r3, r2, [r1]
 8004322:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004324:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004326:	2b00      	cmp	r3, #0
 8004328:	d1e3      	bne.n	80042f2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800432e:	4618      	mov	r0, r3
 8004330:	f7fd ff71 	bl	8002216 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2202      	movs	r2, #2
 8004338:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004342:	b29b      	uxth	r3, r3
 8004344:	1ad3      	subs	r3, r2, r3
 8004346:	b29b      	uxth	r3, r3
 8004348:	4619      	mov	r1, r3
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f000 f8bf 	bl	80044ce <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004350:	e09c      	b.n	800448c <HAL_UART_IRQHandler+0x518>
 8004352:	bf00      	nop
 8004354:	08004685 	.word	0x08004685
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004360:	b29b      	uxth	r3, r3
 8004362:	1ad3      	subs	r3, r2, r3
 8004364:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800436c:	b29b      	uxth	r3, r3
 800436e:	2b00      	cmp	r3, #0
 8004370:	f000 808e 	beq.w	8004490 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004374:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004378:	2b00      	cmp	r3, #0
 800437a:	f000 8089 	beq.w	8004490 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	330c      	adds	r3, #12
 8004384:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004388:	e853 3f00 	ldrex	r3, [r3]
 800438c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800438e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004390:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004394:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	330c      	adds	r3, #12
 800439e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80043a2:	647a      	str	r2, [r7, #68]	; 0x44
 80043a4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043a6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80043a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80043aa:	e841 2300 	strex	r3, r2, [r1]
 80043ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80043b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d1e3      	bne.n	800437e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	3314      	adds	r3, #20
 80043bc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c0:	e853 3f00 	ldrex	r3, [r3]
 80043c4:	623b      	str	r3, [r7, #32]
   return(result);
 80043c6:	6a3b      	ldr	r3, [r7, #32]
 80043c8:	f023 0301 	bic.w	r3, r3, #1
 80043cc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	3314      	adds	r3, #20
 80043d6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80043da:	633a      	str	r2, [r7, #48]	; 0x30
 80043dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80043e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043e2:	e841 2300 	strex	r3, r2, [r1]
 80043e6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80043e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d1e3      	bne.n	80043b6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2220      	movs	r2, #32
 80043f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2200      	movs	r2, #0
 80043fa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	330c      	adds	r3, #12
 8004402:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	e853 3f00 	ldrex	r3, [r3]
 800440a:	60fb      	str	r3, [r7, #12]
   return(result);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	f023 0310 	bic.w	r3, r3, #16
 8004412:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	330c      	adds	r3, #12
 800441c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004420:	61fa      	str	r2, [r7, #28]
 8004422:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004424:	69b9      	ldr	r1, [r7, #24]
 8004426:	69fa      	ldr	r2, [r7, #28]
 8004428:	e841 2300 	strex	r3, r2, [r1]
 800442c:	617b      	str	r3, [r7, #20]
   return(result);
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d1e3      	bne.n	80043fc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2202      	movs	r2, #2
 8004438:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800443a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800443e:	4619      	mov	r1, r3
 8004440:	6878      	ldr	r0, [r7, #4]
 8004442:	f000 f844 	bl	80044ce <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004446:	e023      	b.n	8004490 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004448:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800444c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004450:	2b00      	cmp	r3, #0
 8004452:	d009      	beq.n	8004468 <HAL_UART_IRQHandler+0x4f4>
 8004454:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004458:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800445c:	2b00      	cmp	r3, #0
 800445e:	d003      	beq.n	8004468 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004460:	6878      	ldr	r0, [r7, #4]
 8004462:	f000 f923 	bl	80046ac <UART_Transmit_IT>
    return;
 8004466:	e014      	b.n	8004492 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004468:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800446c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004470:	2b00      	cmp	r3, #0
 8004472:	d00e      	beq.n	8004492 <HAL_UART_IRQHandler+0x51e>
 8004474:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004478:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800447c:	2b00      	cmp	r3, #0
 800447e:	d008      	beq.n	8004492 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	f000 f962 	bl	800474a <UART_EndTransmit_IT>
    return;
 8004486:	e004      	b.n	8004492 <HAL_UART_IRQHandler+0x51e>
    return;
 8004488:	bf00      	nop
 800448a:	e002      	b.n	8004492 <HAL_UART_IRQHandler+0x51e>
      return;
 800448c:	bf00      	nop
 800448e:	e000      	b.n	8004492 <HAL_UART_IRQHandler+0x51e>
      return;
 8004490:	bf00      	nop
  }
}
 8004492:	37e8      	adds	r7, #232	; 0xe8
 8004494:	46bd      	mov	sp, r7
 8004496:	bd80      	pop	{r7, pc}

08004498 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004498:	b480      	push	{r7}
 800449a:	b083      	sub	sp, #12
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80044a0:	bf00      	nop
 80044a2:	370c      	adds	r7, #12
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bc80      	pop	{r7}
 80044a8:	4770      	bx	lr

080044aa <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80044aa:	b480      	push	{r7}
 80044ac:	b083      	sub	sp, #12
 80044ae:	af00      	add	r7, sp, #0
 80044b0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80044b2:	bf00      	nop
 80044b4:	370c      	adds	r7, #12
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bc80      	pop	{r7}
 80044ba:	4770      	bx	lr

080044bc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80044bc:	b480      	push	{r7}
 80044be:	b083      	sub	sp, #12
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80044c4:	bf00      	nop
 80044c6:	370c      	adds	r7, #12
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bc80      	pop	{r7}
 80044cc:	4770      	bx	lr

080044ce <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80044ce:	b480      	push	{r7}
 80044d0:	b083      	sub	sp, #12
 80044d2:	af00      	add	r7, sp, #0
 80044d4:	6078      	str	r0, [r7, #4]
 80044d6:	460b      	mov	r3, r1
 80044d8:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80044da:	bf00      	nop
 80044dc:	370c      	adds	r7, #12
 80044de:	46bd      	mov	sp, r7
 80044e0:	bc80      	pop	{r7}
 80044e2:	4770      	bx	lr

080044e4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b090      	sub	sp, #64	; 0x40
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	60f8      	str	r0, [r7, #12]
 80044ec:	60b9      	str	r1, [r7, #8]
 80044ee:	603b      	str	r3, [r7, #0]
 80044f0:	4613      	mov	r3, r2
 80044f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044f4:	e050      	b.n	8004598 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044fc:	d04c      	beq.n	8004598 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80044fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004500:	2b00      	cmp	r3, #0
 8004502:	d007      	beq.n	8004514 <UART_WaitOnFlagUntilTimeout+0x30>
 8004504:	f7fd fd70 	bl	8001fe8 <HAL_GetTick>
 8004508:	4602      	mov	r2, r0
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	1ad3      	subs	r3, r2, r3
 800450e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004510:	429a      	cmp	r2, r3
 8004512:	d241      	bcs.n	8004598 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	330c      	adds	r3, #12
 800451a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800451c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800451e:	e853 3f00 	ldrex	r3, [r3]
 8004522:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004526:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800452a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	330c      	adds	r3, #12
 8004532:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004534:	637a      	str	r2, [r7, #52]	; 0x34
 8004536:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004538:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800453a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800453c:	e841 2300 	strex	r3, r2, [r1]
 8004540:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004544:	2b00      	cmp	r3, #0
 8004546:	d1e5      	bne.n	8004514 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	3314      	adds	r3, #20
 800454e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	e853 3f00 	ldrex	r3, [r3]
 8004556:	613b      	str	r3, [r7, #16]
   return(result);
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	f023 0301 	bic.w	r3, r3, #1
 800455e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	3314      	adds	r3, #20
 8004566:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004568:	623a      	str	r2, [r7, #32]
 800456a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800456c:	69f9      	ldr	r1, [r7, #28]
 800456e:	6a3a      	ldr	r2, [r7, #32]
 8004570:	e841 2300 	strex	r3, r2, [r1]
 8004574:	61bb      	str	r3, [r7, #24]
   return(result);
 8004576:	69bb      	ldr	r3, [r7, #24]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d1e5      	bne.n	8004548 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2220      	movs	r2, #32
 8004580:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2220      	movs	r2, #32
 8004588:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2200      	movs	r2, #0
 8004590:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8004594:	2303      	movs	r3, #3
 8004596:	e00f      	b.n	80045b8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	4013      	ands	r3, r2
 80045a2:	68ba      	ldr	r2, [r7, #8]
 80045a4:	429a      	cmp	r2, r3
 80045a6:	bf0c      	ite	eq
 80045a8:	2301      	moveq	r3, #1
 80045aa:	2300      	movne	r3, #0
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	461a      	mov	r2, r3
 80045b0:	79fb      	ldrb	r3, [r7, #7]
 80045b2:	429a      	cmp	r2, r3
 80045b4:	d09f      	beq.n	80044f6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80045b6:	2300      	movs	r3, #0
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	3740      	adds	r7, #64	; 0x40
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}

080045c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b095      	sub	sp, #84	; 0x54
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	330c      	adds	r3, #12
 80045ce:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045d2:	e853 3f00 	ldrex	r3, [r3]
 80045d6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80045d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045da:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80045de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	330c      	adds	r3, #12
 80045e6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80045e8:	643a      	str	r2, [r7, #64]	; 0x40
 80045ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80045ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80045f0:	e841 2300 	strex	r3, r2, [r1]
 80045f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80045f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d1e5      	bne.n	80045c8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	3314      	adds	r3, #20
 8004602:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004604:	6a3b      	ldr	r3, [r7, #32]
 8004606:	e853 3f00 	ldrex	r3, [r3]
 800460a:	61fb      	str	r3, [r7, #28]
   return(result);
 800460c:	69fb      	ldr	r3, [r7, #28]
 800460e:	f023 0301 	bic.w	r3, r3, #1
 8004612:	64bb      	str	r3, [r7, #72]	; 0x48
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	3314      	adds	r3, #20
 800461a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800461c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800461e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004620:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004622:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004624:	e841 2300 	strex	r3, r2, [r1]
 8004628:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800462a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462c:	2b00      	cmp	r3, #0
 800462e:	d1e5      	bne.n	80045fc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004634:	2b01      	cmp	r3, #1
 8004636:	d119      	bne.n	800466c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	330c      	adds	r3, #12
 800463e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	e853 3f00 	ldrex	r3, [r3]
 8004646:	60bb      	str	r3, [r7, #8]
   return(result);
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	f023 0310 	bic.w	r3, r3, #16
 800464e:	647b      	str	r3, [r7, #68]	; 0x44
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	330c      	adds	r3, #12
 8004656:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004658:	61ba      	str	r2, [r7, #24]
 800465a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800465c:	6979      	ldr	r1, [r7, #20]
 800465e:	69ba      	ldr	r2, [r7, #24]
 8004660:	e841 2300 	strex	r3, r2, [r1]
 8004664:	613b      	str	r3, [r7, #16]
   return(result);
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d1e5      	bne.n	8004638 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2220      	movs	r2, #32
 8004670:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2200      	movs	r2, #0
 8004678:	631a      	str	r2, [r3, #48]	; 0x30
}
 800467a:	bf00      	nop
 800467c:	3754      	adds	r7, #84	; 0x54
 800467e:	46bd      	mov	sp, r7
 8004680:	bc80      	pop	{r7}
 8004682:	4770      	bx	lr

08004684 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b084      	sub	sp, #16
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004690:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2200      	movs	r2, #0
 8004696:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2200      	movs	r2, #0
 800469c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800469e:	68f8      	ldr	r0, [r7, #12]
 80046a0:	f7ff ff0c 	bl	80044bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80046a4:	bf00      	nop
 80046a6:	3710      	adds	r7, #16
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}

080046ac <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b085      	sub	sp, #20
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046ba:	b2db      	uxtb	r3, r3
 80046bc:	2b21      	cmp	r3, #33	; 0x21
 80046be:	d13e      	bne.n	800473e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046c8:	d114      	bne.n	80046f4 <UART_Transmit_IT+0x48>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	691b      	ldr	r3, [r3, #16]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d110      	bne.n	80046f4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6a1b      	ldr	r3, [r3, #32]
 80046d6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	881b      	ldrh	r3, [r3, #0]
 80046dc:	461a      	mov	r2, r3
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046e6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6a1b      	ldr	r3, [r3, #32]
 80046ec:	1c9a      	adds	r2, r3, #2
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	621a      	str	r2, [r3, #32]
 80046f2:	e008      	b.n	8004706 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6a1b      	ldr	r3, [r3, #32]
 80046f8:	1c59      	adds	r1, r3, #1
 80046fa:	687a      	ldr	r2, [r7, #4]
 80046fc:	6211      	str	r1, [r2, #32]
 80046fe:	781a      	ldrb	r2, [r3, #0]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800470a:	b29b      	uxth	r3, r3
 800470c:	3b01      	subs	r3, #1
 800470e:	b29b      	uxth	r3, r3
 8004710:	687a      	ldr	r2, [r7, #4]
 8004712:	4619      	mov	r1, r3
 8004714:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004716:	2b00      	cmp	r3, #0
 8004718:	d10f      	bne.n	800473a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	68da      	ldr	r2, [r3, #12]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004728:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	68da      	ldr	r2, [r3, #12]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004738:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800473a:	2300      	movs	r3, #0
 800473c:	e000      	b.n	8004740 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800473e:	2302      	movs	r3, #2
  }
}
 8004740:	4618      	mov	r0, r3
 8004742:	3714      	adds	r7, #20
 8004744:	46bd      	mov	sp, r7
 8004746:	bc80      	pop	{r7}
 8004748:	4770      	bx	lr

0800474a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800474a:	b580      	push	{r7, lr}
 800474c:	b082      	sub	sp, #8
 800474e:	af00      	add	r7, sp, #0
 8004750:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	68da      	ldr	r2, [r3, #12]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004760:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2220      	movs	r2, #32
 8004766:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f7ff fe94 	bl	8004498 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004770:	2300      	movs	r3, #0
}
 8004772:	4618      	mov	r0, r3
 8004774:	3708      	adds	r7, #8
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}

0800477a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800477a:	b580      	push	{r7, lr}
 800477c:	b08c      	sub	sp, #48	; 0x30
 800477e:	af00      	add	r7, sp, #0
 8004780:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004788:	b2db      	uxtb	r3, r3
 800478a:	2b22      	cmp	r3, #34	; 0x22
 800478c:	f040 80ae 	bne.w	80048ec <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004798:	d117      	bne.n	80047ca <UART_Receive_IT+0x50>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	691b      	ldr	r3, [r3, #16]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d113      	bne.n	80047ca <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80047a2:	2300      	movs	r3, #0
 80047a4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047aa:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	b29b      	uxth	r3, r3
 80047b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047b8:	b29a      	uxth	r2, r3
 80047ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047bc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047c2:	1c9a      	adds	r2, r3, #2
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	629a      	str	r2, [r3, #40]	; 0x28
 80047c8:	e026      	b.n	8004818 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ce:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80047d0:	2300      	movs	r3, #0
 80047d2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047dc:	d007      	beq.n	80047ee <UART_Receive_IT+0x74>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d10a      	bne.n	80047fc <UART_Receive_IT+0x82>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	691b      	ldr	r3, [r3, #16]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d106      	bne.n	80047fc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	b2da      	uxtb	r2, r3
 80047f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047f8:	701a      	strb	r2, [r3, #0]
 80047fa:	e008      	b.n	800480e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	b2db      	uxtb	r3, r3
 8004804:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004808:	b2da      	uxtb	r2, r3
 800480a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800480c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004812:	1c5a      	adds	r2, r3, #1
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800481c:	b29b      	uxth	r3, r3
 800481e:	3b01      	subs	r3, #1
 8004820:	b29b      	uxth	r3, r3
 8004822:	687a      	ldr	r2, [r7, #4]
 8004824:	4619      	mov	r1, r3
 8004826:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004828:	2b00      	cmp	r3, #0
 800482a:	d15d      	bne.n	80048e8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	68da      	ldr	r2, [r3, #12]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f022 0220 	bic.w	r2, r2, #32
 800483a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	68da      	ldr	r2, [r3, #12]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800484a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	695a      	ldr	r2, [r3, #20]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f022 0201 	bic.w	r2, r2, #1
 800485a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2220      	movs	r2, #32
 8004860:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2200      	movs	r2, #0
 8004868:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800486e:	2b01      	cmp	r3, #1
 8004870:	d135      	bne.n	80048de <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2200      	movs	r2, #0
 8004876:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	330c      	adds	r3, #12
 800487e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	e853 3f00 	ldrex	r3, [r3]
 8004886:	613b      	str	r3, [r7, #16]
   return(result);
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	f023 0310 	bic.w	r3, r3, #16
 800488e:	627b      	str	r3, [r7, #36]	; 0x24
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	330c      	adds	r3, #12
 8004896:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004898:	623a      	str	r2, [r7, #32]
 800489a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800489c:	69f9      	ldr	r1, [r7, #28]
 800489e:	6a3a      	ldr	r2, [r7, #32]
 80048a0:	e841 2300 	strex	r3, r2, [r1]
 80048a4:	61bb      	str	r3, [r7, #24]
   return(result);
 80048a6:	69bb      	ldr	r3, [r7, #24]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d1e5      	bne.n	8004878 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f003 0310 	and.w	r3, r3, #16
 80048b6:	2b10      	cmp	r3, #16
 80048b8:	d10a      	bne.n	80048d0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80048ba:	2300      	movs	r3, #0
 80048bc:	60fb      	str	r3, [r7, #12]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	60fb      	str	r3, [r7, #12]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	60fb      	str	r3, [r7, #12]
 80048ce:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80048d4:	4619      	mov	r1, r3
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f7ff fdf9 	bl	80044ce <HAL_UARTEx_RxEventCallback>
 80048dc:	e002      	b.n	80048e4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f7ff fde3 	bl	80044aa <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80048e4:	2300      	movs	r3, #0
 80048e6:	e002      	b.n	80048ee <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80048e8:	2300      	movs	r3, #0
 80048ea:	e000      	b.n	80048ee <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80048ec:	2302      	movs	r3, #2
  }
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3730      	adds	r7, #48	; 0x30
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}
	...

080048f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b084      	sub	sp, #16
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	691b      	ldr	r3, [r3, #16]
 8004906:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	68da      	ldr	r2, [r3, #12]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	430a      	orrs	r2, r1
 8004914:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	689a      	ldr	r2, [r3, #8]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	691b      	ldr	r3, [r3, #16]
 800491e:	431a      	orrs	r2, r3
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	695b      	ldr	r3, [r3, #20]
 8004924:	4313      	orrs	r3, r2
 8004926:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	68db      	ldr	r3, [r3, #12]
 800492e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004932:	f023 030c 	bic.w	r3, r3, #12
 8004936:	687a      	ldr	r2, [r7, #4]
 8004938:	6812      	ldr	r2, [r2, #0]
 800493a:	68b9      	ldr	r1, [r7, #8]
 800493c:	430b      	orrs	r3, r1
 800493e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	695b      	ldr	r3, [r3, #20]
 8004946:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	699a      	ldr	r2, [r3, #24]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	430a      	orrs	r2, r1
 8004954:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a2c      	ldr	r2, [pc, #176]	; (8004a0c <UART_SetConfig+0x114>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d103      	bne.n	8004968 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004960:	f7fe fa9c 	bl	8002e9c <HAL_RCC_GetPCLK2Freq>
 8004964:	60f8      	str	r0, [r7, #12]
 8004966:	e002      	b.n	800496e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004968:	f7fe fa84 	bl	8002e74 <HAL_RCC_GetPCLK1Freq>
 800496c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800496e:	68fa      	ldr	r2, [r7, #12]
 8004970:	4613      	mov	r3, r2
 8004972:	009b      	lsls	r3, r3, #2
 8004974:	4413      	add	r3, r2
 8004976:	009a      	lsls	r2, r3, #2
 8004978:	441a      	add	r2, r3
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	009b      	lsls	r3, r3, #2
 8004980:	fbb2 f3f3 	udiv	r3, r2, r3
 8004984:	4a22      	ldr	r2, [pc, #136]	; (8004a10 <UART_SetConfig+0x118>)
 8004986:	fba2 2303 	umull	r2, r3, r2, r3
 800498a:	095b      	lsrs	r3, r3, #5
 800498c:	0119      	lsls	r1, r3, #4
 800498e:	68fa      	ldr	r2, [r7, #12]
 8004990:	4613      	mov	r3, r2
 8004992:	009b      	lsls	r3, r3, #2
 8004994:	4413      	add	r3, r2
 8004996:	009a      	lsls	r2, r3, #2
 8004998:	441a      	add	r2, r3
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	009b      	lsls	r3, r3, #2
 80049a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80049a4:	4b1a      	ldr	r3, [pc, #104]	; (8004a10 <UART_SetConfig+0x118>)
 80049a6:	fba3 0302 	umull	r0, r3, r3, r2
 80049aa:	095b      	lsrs	r3, r3, #5
 80049ac:	2064      	movs	r0, #100	; 0x64
 80049ae:	fb00 f303 	mul.w	r3, r0, r3
 80049b2:	1ad3      	subs	r3, r2, r3
 80049b4:	011b      	lsls	r3, r3, #4
 80049b6:	3332      	adds	r3, #50	; 0x32
 80049b8:	4a15      	ldr	r2, [pc, #84]	; (8004a10 <UART_SetConfig+0x118>)
 80049ba:	fba2 2303 	umull	r2, r3, r2, r3
 80049be:	095b      	lsrs	r3, r3, #5
 80049c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80049c4:	4419      	add	r1, r3
 80049c6:	68fa      	ldr	r2, [r7, #12]
 80049c8:	4613      	mov	r3, r2
 80049ca:	009b      	lsls	r3, r3, #2
 80049cc:	4413      	add	r3, r2
 80049ce:	009a      	lsls	r2, r3, #2
 80049d0:	441a      	add	r2, r3
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	009b      	lsls	r3, r3, #2
 80049d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80049dc:	4b0c      	ldr	r3, [pc, #48]	; (8004a10 <UART_SetConfig+0x118>)
 80049de:	fba3 0302 	umull	r0, r3, r3, r2
 80049e2:	095b      	lsrs	r3, r3, #5
 80049e4:	2064      	movs	r0, #100	; 0x64
 80049e6:	fb00 f303 	mul.w	r3, r0, r3
 80049ea:	1ad3      	subs	r3, r2, r3
 80049ec:	011b      	lsls	r3, r3, #4
 80049ee:	3332      	adds	r3, #50	; 0x32
 80049f0:	4a07      	ldr	r2, [pc, #28]	; (8004a10 <UART_SetConfig+0x118>)
 80049f2:	fba2 2303 	umull	r2, r3, r2, r3
 80049f6:	095b      	lsrs	r3, r3, #5
 80049f8:	f003 020f 	and.w	r2, r3, #15
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	440a      	add	r2, r1
 8004a02:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004a04:	bf00      	nop
 8004a06:	3710      	adds	r7, #16
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}
 8004a0c:	40013800 	.word	0x40013800
 8004a10:	51eb851f 	.word	0x51eb851f

08004a14 <__errno>:
 8004a14:	4b01      	ldr	r3, [pc, #4]	; (8004a1c <__errno+0x8>)
 8004a16:	6818      	ldr	r0, [r3, #0]
 8004a18:	4770      	bx	lr
 8004a1a:	bf00      	nop
 8004a1c:	20000048 	.word	0x20000048

08004a20 <__libc_init_array>:
 8004a20:	b570      	push	{r4, r5, r6, lr}
 8004a22:	2600      	movs	r6, #0
 8004a24:	4d0c      	ldr	r5, [pc, #48]	; (8004a58 <__libc_init_array+0x38>)
 8004a26:	4c0d      	ldr	r4, [pc, #52]	; (8004a5c <__libc_init_array+0x3c>)
 8004a28:	1b64      	subs	r4, r4, r5
 8004a2a:	10a4      	asrs	r4, r4, #2
 8004a2c:	42a6      	cmp	r6, r4
 8004a2e:	d109      	bne.n	8004a44 <__libc_init_array+0x24>
 8004a30:	f000 fc5c 	bl	80052ec <_init>
 8004a34:	2600      	movs	r6, #0
 8004a36:	4d0a      	ldr	r5, [pc, #40]	; (8004a60 <__libc_init_array+0x40>)
 8004a38:	4c0a      	ldr	r4, [pc, #40]	; (8004a64 <__libc_init_array+0x44>)
 8004a3a:	1b64      	subs	r4, r4, r5
 8004a3c:	10a4      	asrs	r4, r4, #2
 8004a3e:	42a6      	cmp	r6, r4
 8004a40:	d105      	bne.n	8004a4e <__libc_init_array+0x2e>
 8004a42:	bd70      	pop	{r4, r5, r6, pc}
 8004a44:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a48:	4798      	blx	r3
 8004a4a:	3601      	adds	r6, #1
 8004a4c:	e7ee      	b.n	8004a2c <__libc_init_array+0xc>
 8004a4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a52:	4798      	blx	r3
 8004a54:	3601      	adds	r6, #1
 8004a56:	e7f2      	b.n	8004a3e <__libc_init_array+0x1e>
 8004a58:	0800540c 	.word	0x0800540c
 8004a5c:	0800540c 	.word	0x0800540c
 8004a60:	0800540c 	.word	0x0800540c
 8004a64:	08005410 	.word	0x08005410

08004a68 <memset>:
 8004a68:	4603      	mov	r3, r0
 8004a6a:	4402      	add	r2, r0
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d100      	bne.n	8004a72 <memset+0xa>
 8004a70:	4770      	bx	lr
 8004a72:	f803 1b01 	strb.w	r1, [r3], #1
 8004a76:	e7f9      	b.n	8004a6c <memset+0x4>

08004a78 <siprintf>:
 8004a78:	b40e      	push	{r1, r2, r3}
 8004a7a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004a7e:	b500      	push	{lr}
 8004a80:	b09c      	sub	sp, #112	; 0x70
 8004a82:	ab1d      	add	r3, sp, #116	; 0x74
 8004a84:	9002      	str	r0, [sp, #8]
 8004a86:	9006      	str	r0, [sp, #24]
 8004a88:	9107      	str	r1, [sp, #28]
 8004a8a:	9104      	str	r1, [sp, #16]
 8004a8c:	4808      	ldr	r0, [pc, #32]	; (8004ab0 <siprintf+0x38>)
 8004a8e:	4909      	ldr	r1, [pc, #36]	; (8004ab4 <siprintf+0x3c>)
 8004a90:	f853 2b04 	ldr.w	r2, [r3], #4
 8004a94:	9105      	str	r1, [sp, #20]
 8004a96:	6800      	ldr	r0, [r0, #0]
 8004a98:	a902      	add	r1, sp, #8
 8004a9a:	9301      	str	r3, [sp, #4]
 8004a9c:	f000 f868 	bl	8004b70 <_svfiprintf_r>
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	9b02      	ldr	r3, [sp, #8]
 8004aa4:	701a      	strb	r2, [r3, #0]
 8004aa6:	b01c      	add	sp, #112	; 0x70
 8004aa8:	f85d eb04 	ldr.w	lr, [sp], #4
 8004aac:	b003      	add	sp, #12
 8004aae:	4770      	bx	lr
 8004ab0:	20000048 	.word	0x20000048
 8004ab4:	ffff0208 	.word	0xffff0208

08004ab8 <__ssputs_r>:
 8004ab8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004abc:	688e      	ldr	r6, [r1, #8]
 8004abe:	4682      	mov	sl, r0
 8004ac0:	429e      	cmp	r6, r3
 8004ac2:	460c      	mov	r4, r1
 8004ac4:	4690      	mov	r8, r2
 8004ac6:	461f      	mov	r7, r3
 8004ac8:	d838      	bhi.n	8004b3c <__ssputs_r+0x84>
 8004aca:	898a      	ldrh	r2, [r1, #12]
 8004acc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004ad0:	d032      	beq.n	8004b38 <__ssputs_r+0x80>
 8004ad2:	6825      	ldr	r5, [r4, #0]
 8004ad4:	6909      	ldr	r1, [r1, #16]
 8004ad6:	3301      	adds	r3, #1
 8004ad8:	eba5 0901 	sub.w	r9, r5, r1
 8004adc:	6965      	ldr	r5, [r4, #20]
 8004ade:	444b      	add	r3, r9
 8004ae0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004ae4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004ae8:	106d      	asrs	r5, r5, #1
 8004aea:	429d      	cmp	r5, r3
 8004aec:	bf38      	it	cc
 8004aee:	461d      	movcc	r5, r3
 8004af0:	0553      	lsls	r3, r2, #21
 8004af2:	d531      	bpl.n	8004b58 <__ssputs_r+0xa0>
 8004af4:	4629      	mov	r1, r5
 8004af6:	f000 fb53 	bl	80051a0 <_malloc_r>
 8004afa:	4606      	mov	r6, r0
 8004afc:	b950      	cbnz	r0, 8004b14 <__ssputs_r+0x5c>
 8004afe:	230c      	movs	r3, #12
 8004b00:	f04f 30ff 	mov.w	r0, #4294967295
 8004b04:	f8ca 3000 	str.w	r3, [sl]
 8004b08:	89a3      	ldrh	r3, [r4, #12]
 8004b0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b0e:	81a3      	strh	r3, [r4, #12]
 8004b10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b14:	464a      	mov	r2, r9
 8004b16:	6921      	ldr	r1, [r4, #16]
 8004b18:	f000 face 	bl	80050b8 <memcpy>
 8004b1c:	89a3      	ldrh	r3, [r4, #12]
 8004b1e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004b22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b26:	81a3      	strh	r3, [r4, #12]
 8004b28:	6126      	str	r6, [r4, #16]
 8004b2a:	444e      	add	r6, r9
 8004b2c:	6026      	str	r6, [r4, #0]
 8004b2e:	463e      	mov	r6, r7
 8004b30:	6165      	str	r5, [r4, #20]
 8004b32:	eba5 0509 	sub.w	r5, r5, r9
 8004b36:	60a5      	str	r5, [r4, #8]
 8004b38:	42be      	cmp	r6, r7
 8004b3a:	d900      	bls.n	8004b3e <__ssputs_r+0x86>
 8004b3c:	463e      	mov	r6, r7
 8004b3e:	4632      	mov	r2, r6
 8004b40:	4641      	mov	r1, r8
 8004b42:	6820      	ldr	r0, [r4, #0]
 8004b44:	f000 fac6 	bl	80050d4 <memmove>
 8004b48:	68a3      	ldr	r3, [r4, #8]
 8004b4a:	6822      	ldr	r2, [r4, #0]
 8004b4c:	1b9b      	subs	r3, r3, r6
 8004b4e:	4432      	add	r2, r6
 8004b50:	2000      	movs	r0, #0
 8004b52:	60a3      	str	r3, [r4, #8]
 8004b54:	6022      	str	r2, [r4, #0]
 8004b56:	e7db      	b.n	8004b10 <__ssputs_r+0x58>
 8004b58:	462a      	mov	r2, r5
 8004b5a:	f000 fb7b 	bl	8005254 <_realloc_r>
 8004b5e:	4606      	mov	r6, r0
 8004b60:	2800      	cmp	r0, #0
 8004b62:	d1e1      	bne.n	8004b28 <__ssputs_r+0x70>
 8004b64:	4650      	mov	r0, sl
 8004b66:	6921      	ldr	r1, [r4, #16]
 8004b68:	f000 face 	bl	8005108 <_free_r>
 8004b6c:	e7c7      	b.n	8004afe <__ssputs_r+0x46>
	...

08004b70 <_svfiprintf_r>:
 8004b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b74:	4698      	mov	r8, r3
 8004b76:	898b      	ldrh	r3, [r1, #12]
 8004b78:	4607      	mov	r7, r0
 8004b7a:	061b      	lsls	r3, r3, #24
 8004b7c:	460d      	mov	r5, r1
 8004b7e:	4614      	mov	r4, r2
 8004b80:	b09d      	sub	sp, #116	; 0x74
 8004b82:	d50e      	bpl.n	8004ba2 <_svfiprintf_r+0x32>
 8004b84:	690b      	ldr	r3, [r1, #16]
 8004b86:	b963      	cbnz	r3, 8004ba2 <_svfiprintf_r+0x32>
 8004b88:	2140      	movs	r1, #64	; 0x40
 8004b8a:	f000 fb09 	bl	80051a0 <_malloc_r>
 8004b8e:	6028      	str	r0, [r5, #0]
 8004b90:	6128      	str	r0, [r5, #16]
 8004b92:	b920      	cbnz	r0, 8004b9e <_svfiprintf_r+0x2e>
 8004b94:	230c      	movs	r3, #12
 8004b96:	603b      	str	r3, [r7, #0]
 8004b98:	f04f 30ff 	mov.w	r0, #4294967295
 8004b9c:	e0d1      	b.n	8004d42 <_svfiprintf_r+0x1d2>
 8004b9e:	2340      	movs	r3, #64	; 0x40
 8004ba0:	616b      	str	r3, [r5, #20]
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	9309      	str	r3, [sp, #36]	; 0x24
 8004ba6:	2320      	movs	r3, #32
 8004ba8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004bac:	2330      	movs	r3, #48	; 0x30
 8004bae:	f04f 0901 	mov.w	r9, #1
 8004bb2:	f8cd 800c 	str.w	r8, [sp, #12]
 8004bb6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004d5c <_svfiprintf_r+0x1ec>
 8004bba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004bbe:	4623      	mov	r3, r4
 8004bc0:	469a      	mov	sl, r3
 8004bc2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004bc6:	b10a      	cbz	r2, 8004bcc <_svfiprintf_r+0x5c>
 8004bc8:	2a25      	cmp	r2, #37	; 0x25
 8004bca:	d1f9      	bne.n	8004bc0 <_svfiprintf_r+0x50>
 8004bcc:	ebba 0b04 	subs.w	fp, sl, r4
 8004bd0:	d00b      	beq.n	8004bea <_svfiprintf_r+0x7a>
 8004bd2:	465b      	mov	r3, fp
 8004bd4:	4622      	mov	r2, r4
 8004bd6:	4629      	mov	r1, r5
 8004bd8:	4638      	mov	r0, r7
 8004bda:	f7ff ff6d 	bl	8004ab8 <__ssputs_r>
 8004bde:	3001      	adds	r0, #1
 8004be0:	f000 80aa 	beq.w	8004d38 <_svfiprintf_r+0x1c8>
 8004be4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004be6:	445a      	add	r2, fp
 8004be8:	9209      	str	r2, [sp, #36]	; 0x24
 8004bea:	f89a 3000 	ldrb.w	r3, [sl]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	f000 80a2 	beq.w	8004d38 <_svfiprintf_r+0x1c8>
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	f04f 32ff 	mov.w	r2, #4294967295
 8004bfa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004bfe:	f10a 0a01 	add.w	sl, sl, #1
 8004c02:	9304      	str	r3, [sp, #16]
 8004c04:	9307      	str	r3, [sp, #28]
 8004c06:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004c0a:	931a      	str	r3, [sp, #104]	; 0x68
 8004c0c:	4654      	mov	r4, sl
 8004c0e:	2205      	movs	r2, #5
 8004c10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c14:	4851      	ldr	r0, [pc, #324]	; (8004d5c <_svfiprintf_r+0x1ec>)
 8004c16:	f000 fa41 	bl	800509c <memchr>
 8004c1a:	9a04      	ldr	r2, [sp, #16]
 8004c1c:	b9d8      	cbnz	r0, 8004c56 <_svfiprintf_r+0xe6>
 8004c1e:	06d0      	lsls	r0, r2, #27
 8004c20:	bf44      	itt	mi
 8004c22:	2320      	movmi	r3, #32
 8004c24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004c28:	0711      	lsls	r1, r2, #28
 8004c2a:	bf44      	itt	mi
 8004c2c:	232b      	movmi	r3, #43	; 0x2b
 8004c2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004c32:	f89a 3000 	ldrb.w	r3, [sl]
 8004c36:	2b2a      	cmp	r3, #42	; 0x2a
 8004c38:	d015      	beq.n	8004c66 <_svfiprintf_r+0xf6>
 8004c3a:	4654      	mov	r4, sl
 8004c3c:	2000      	movs	r0, #0
 8004c3e:	f04f 0c0a 	mov.w	ip, #10
 8004c42:	9a07      	ldr	r2, [sp, #28]
 8004c44:	4621      	mov	r1, r4
 8004c46:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004c4a:	3b30      	subs	r3, #48	; 0x30
 8004c4c:	2b09      	cmp	r3, #9
 8004c4e:	d94e      	bls.n	8004cee <_svfiprintf_r+0x17e>
 8004c50:	b1b0      	cbz	r0, 8004c80 <_svfiprintf_r+0x110>
 8004c52:	9207      	str	r2, [sp, #28]
 8004c54:	e014      	b.n	8004c80 <_svfiprintf_r+0x110>
 8004c56:	eba0 0308 	sub.w	r3, r0, r8
 8004c5a:	fa09 f303 	lsl.w	r3, r9, r3
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	46a2      	mov	sl, r4
 8004c62:	9304      	str	r3, [sp, #16]
 8004c64:	e7d2      	b.n	8004c0c <_svfiprintf_r+0x9c>
 8004c66:	9b03      	ldr	r3, [sp, #12]
 8004c68:	1d19      	adds	r1, r3, #4
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	9103      	str	r1, [sp, #12]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	bfbb      	ittet	lt
 8004c72:	425b      	neglt	r3, r3
 8004c74:	f042 0202 	orrlt.w	r2, r2, #2
 8004c78:	9307      	strge	r3, [sp, #28]
 8004c7a:	9307      	strlt	r3, [sp, #28]
 8004c7c:	bfb8      	it	lt
 8004c7e:	9204      	strlt	r2, [sp, #16]
 8004c80:	7823      	ldrb	r3, [r4, #0]
 8004c82:	2b2e      	cmp	r3, #46	; 0x2e
 8004c84:	d10c      	bne.n	8004ca0 <_svfiprintf_r+0x130>
 8004c86:	7863      	ldrb	r3, [r4, #1]
 8004c88:	2b2a      	cmp	r3, #42	; 0x2a
 8004c8a:	d135      	bne.n	8004cf8 <_svfiprintf_r+0x188>
 8004c8c:	9b03      	ldr	r3, [sp, #12]
 8004c8e:	3402      	adds	r4, #2
 8004c90:	1d1a      	adds	r2, r3, #4
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	9203      	str	r2, [sp, #12]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	bfb8      	it	lt
 8004c9a:	f04f 33ff 	movlt.w	r3, #4294967295
 8004c9e:	9305      	str	r3, [sp, #20]
 8004ca0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004d6c <_svfiprintf_r+0x1fc>
 8004ca4:	2203      	movs	r2, #3
 8004ca6:	4650      	mov	r0, sl
 8004ca8:	7821      	ldrb	r1, [r4, #0]
 8004caa:	f000 f9f7 	bl	800509c <memchr>
 8004cae:	b140      	cbz	r0, 8004cc2 <_svfiprintf_r+0x152>
 8004cb0:	2340      	movs	r3, #64	; 0x40
 8004cb2:	eba0 000a 	sub.w	r0, r0, sl
 8004cb6:	fa03 f000 	lsl.w	r0, r3, r0
 8004cba:	9b04      	ldr	r3, [sp, #16]
 8004cbc:	3401      	adds	r4, #1
 8004cbe:	4303      	orrs	r3, r0
 8004cc0:	9304      	str	r3, [sp, #16]
 8004cc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004cc6:	2206      	movs	r2, #6
 8004cc8:	4825      	ldr	r0, [pc, #148]	; (8004d60 <_svfiprintf_r+0x1f0>)
 8004cca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004cce:	f000 f9e5 	bl	800509c <memchr>
 8004cd2:	2800      	cmp	r0, #0
 8004cd4:	d038      	beq.n	8004d48 <_svfiprintf_r+0x1d8>
 8004cd6:	4b23      	ldr	r3, [pc, #140]	; (8004d64 <_svfiprintf_r+0x1f4>)
 8004cd8:	bb1b      	cbnz	r3, 8004d22 <_svfiprintf_r+0x1b2>
 8004cda:	9b03      	ldr	r3, [sp, #12]
 8004cdc:	3307      	adds	r3, #7
 8004cde:	f023 0307 	bic.w	r3, r3, #7
 8004ce2:	3308      	adds	r3, #8
 8004ce4:	9303      	str	r3, [sp, #12]
 8004ce6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ce8:	4433      	add	r3, r6
 8004cea:	9309      	str	r3, [sp, #36]	; 0x24
 8004cec:	e767      	b.n	8004bbe <_svfiprintf_r+0x4e>
 8004cee:	460c      	mov	r4, r1
 8004cf0:	2001      	movs	r0, #1
 8004cf2:	fb0c 3202 	mla	r2, ip, r2, r3
 8004cf6:	e7a5      	b.n	8004c44 <_svfiprintf_r+0xd4>
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	f04f 0c0a 	mov.w	ip, #10
 8004cfe:	4619      	mov	r1, r3
 8004d00:	3401      	adds	r4, #1
 8004d02:	9305      	str	r3, [sp, #20]
 8004d04:	4620      	mov	r0, r4
 8004d06:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004d0a:	3a30      	subs	r2, #48	; 0x30
 8004d0c:	2a09      	cmp	r2, #9
 8004d0e:	d903      	bls.n	8004d18 <_svfiprintf_r+0x1a8>
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d0c5      	beq.n	8004ca0 <_svfiprintf_r+0x130>
 8004d14:	9105      	str	r1, [sp, #20]
 8004d16:	e7c3      	b.n	8004ca0 <_svfiprintf_r+0x130>
 8004d18:	4604      	mov	r4, r0
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004d20:	e7f0      	b.n	8004d04 <_svfiprintf_r+0x194>
 8004d22:	ab03      	add	r3, sp, #12
 8004d24:	9300      	str	r3, [sp, #0]
 8004d26:	462a      	mov	r2, r5
 8004d28:	4638      	mov	r0, r7
 8004d2a:	4b0f      	ldr	r3, [pc, #60]	; (8004d68 <_svfiprintf_r+0x1f8>)
 8004d2c:	a904      	add	r1, sp, #16
 8004d2e:	f3af 8000 	nop.w
 8004d32:	1c42      	adds	r2, r0, #1
 8004d34:	4606      	mov	r6, r0
 8004d36:	d1d6      	bne.n	8004ce6 <_svfiprintf_r+0x176>
 8004d38:	89ab      	ldrh	r3, [r5, #12]
 8004d3a:	065b      	lsls	r3, r3, #25
 8004d3c:	f53f af2c 	bmi.w	8004b98 <_svfiprintf_r+0x28>
 8004d40:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004d42:	b01d      	add	sp, #116	; 0x74
 8004d44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d48:	ab03      	add	r3, sp, #12
 8004d4a:	9300      	str	r3, [sp, #0]
 8004d4c:	462a      	mov	r2, r5
 8004d4e:	4638      	mov	r0, r7
 8004d50:	4b05      	ldr	r3, [pc, #20]	; (8004d68 <_svfiprintf_r+0x1f8>)
 8004d52:	a904      	add	r1, sp, #16
 8004d54:	f000 f87c 	bl	8004e50 <_printf_i>
 8004d58:	e7eb      	b.n	8004d32 <_svfiprintf_r+0x1c2>
 8004d5a:	bf00      	nop
 8004d5c:	080053d6 	.word	0x080053d6
 8004d60:	080053e0 	.word	0x080053e0
 8004d64:	00000000 	.word	0x00000000
 8004d68:	08004ab9 	.word	0x08004ab9
 8004d6c:	080053dc 	.word	0x080053dc

08004d70 <_printf_common>:
 8004d70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d74:	4616      	mov	r6, r2
 8004d76:	4699      	mov	r9, r3
 8004d78:	688a      	ldr	r2, [r1, #8]
 8004d7a:	690b      	ldr	r3, [r1, #16]
 8004d7c:	4607      	mov	r7, r0
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	bfb8      	it	lt
 8004d82:	4613      	movlt	r3, r2
 8004d84:	6033      	str	r3, [r6, #0]
 8004d86:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004d8a:	460c      	mov	r4, r1
 8004d8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004d90:	b10a      	cbz	r2, 8004d96 <_printf_common+0x26>
 8004d92:	3301      	adds	r3, #1
 8004d94:	6033      	str	r3, [r6, #0]
 8004d96:	6823      	ldr	r3, [r4, #0]
 8004d98:	0699      	lsls	r1, r3, #26
 8004d9a:	bf42      	ittt	mi
 8004d9c:	6833      	ldrmi	r3, [r6, #0]
 8004d9e:	3302      	addmi	r3, #2
 8004da0:	6033      	strmi	r3, [r6, #0]
 8004da2:	6825      	ldr	r5, [r4, #0]
 8004da4:	f015 0506 	ands.w	r5, r5, #6
 8004da8:	d106      	bne.n	8004db8 <_printf_common+0x48>
 8004daa:	f104 0a19 	add.w	sl, r4, #25
 8004dae:	68e3      	ldr	r3, [r4, #12]
 8004db0:	6832      	ldr	r2, [r6, #0]
 8004db2:	1a9b      	subs	r3, r3, r2
 8004db4:	42ab      	cmp	r3, r5
 8004db6:	dc28      	bgt.n	8004e0a <_printf_common+0x9a>
 8004db8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004dbc:	1e13      	subs	r3, r2, #0
 8004dbe:	6822      	ldr	r2, [r4, #0]
 8004dc0:	bf18      	it	ne
 8004dc2:	2301      	movne	r3, #1
 8004dc4:	0692      	lsls	r2, r2, #26
 8004dc6:	d42d      	bmi.n	8004e24 <_printf_common+0xb4>
 8004dc8:	4649      	mov	r1, r9
 8004dca:	4638      	mov	r0, r7
 8004dcc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004dd0:	47c0      	blx	r8
 8004dd2:	3001      	adds	r0, #1
 8004dd4:	d020      	beq.n	8004e18 <_printf_common+0xa8>
 8004dd6:	6823      	ldr	r3, [r4, #0]
 8004dd8:	68e5      	ldr	r5, [r4, #12]
 8004dda:	f003 0306 	and.w	r3, r3, #6
 8004dde:	2b04      	cmp	r3, #4
 8004de0:	bf18      	it	ne
 8004de2:	2500      	movne	r5, #0
 8004de4:	6832      	ldr	r2, [r6, #0]
 8004de6:	f04f 0600 	mov.w	r6, #0
 8004dea:	68a3      	ldr	r3, [r4, #8]
 8004dec:	bf08      	it	eq
 8004dee:	1aad      	subeq	r5, r5, r2
 8004df0:	6922      	ldr	r2, [r4, #16]
 8004df2:	bf08      	it	eq
 8004df4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	bfc4      	itt	gt
 8004dfc:	1a9b      	subgt	r3, r3, r2
 8004dfe:	18ed      	addgt	r5, r5, r3
 8004e00:	341a      	adds	r4, #26
 8004e02:	42b5      	cmp	r5, r6
 8004e04:	d11a      	bne.n	8004e3c <_printf_common+0xcc>
 8004e06:	2000      	movs	r0, #0
 8004e08:	e008      	b.n	8004e1c <_printf_common+0xac>
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	4652      	mov	r2, sl
 8004e0e:	4649      	mov	r1, r9
 8004e10:	4638      	mov	r0, r7
 8004e12:	47c0      	blx	r8
 8004e14:	3001      	adds	r0, #1
 8004e16:	d103      	bne.n	8004e20 <_printf_common+0xb0>
 8004e18:	f04f 30ff 	mov.w	r0, #4294967295
 8004e1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e20:	3501      	adds	r5, #1
 8004e22:	e7c4      	b.n	8004dae <_printf_common+0x3e>
 8004e24:	2030      	movs	r0, #48	; 0x30
 8004e26:	18e1      	adds	r1, r4, r3
 8004e28:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004e2c:	1c5a      	adds	r2, r3, #1
 8004e2e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004e32:	4422      	add	r2, r4
 8004e34:	3302      	adds	r3, #2
 8004e36:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004e3a:	e7c5      	b.n	8004dc8 <_printf_common+0x58>
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	4622      	mov	r2, r4
 8004e40:	4649      	mov	r1, r9
 8004e42:	4638      	mov	r0, r7
 8004e44:	47c0      	blx	r8
 8004e46:	3001      	adds	r0, #1
 8004e48:	d0e6      	beq.n	8004e18 <_printf_common+0xa8>
 8004e4a:	3601      	adds	r6, #1
 8004e4c:	e7d9      	b.n	8004e02 <_printf_common+0x92>
	...

08004e50 <_printf_i>:
 8004e50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e54:	460c      	mov	r4, r1
 8004e56:	7e27      	ldrb	r7, [r4, #24]
 8004e58:	4691      	mov	r9, r2
 8004e5a:	2f78      	cmp	r7, #120	; 0x78
 8004e5c:	4680      	mov	r8, r0
 8004e5e:	469a      	mov	sl, r3
 8004e60:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004e62:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004e66:	d807      	bhi.n	8004e78 <_printf_i+0x28>
 8004e68:	2f62      	cmp	r7, #98	; 0x62
 8004e6a:	d80a      	bhi.n	8004e82 <_printf_i+0x32>
 8004e6c:	2f00      	cmp	r7, #0
 8004e6e:	f000 80d9 	beq.w	8005024 <_printf_i+0x1d4>
 8004e72:	2f58      	cmp	r7, #88	; 0x58
 8004e74:	f000 80a4 	beq.w	8004fc0 <_printf_i+0x170>
 8004e78:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004e7c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004e80:	e03a      	b.n	8004ef8 <_printf_i+0xa8>
 8004e82:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004e86:	2b15      	cmp	r3, #21
 8004e88:	d8f6      	bhi.n	8004e78 <_printf_i+0x28>
 8004e8a:	a001      	add	r0, pc, #4	; (adr r0, 8004e90 <_printf_i+0x40>)
 8004e8c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004e90:	08004ee9 	.word	0x08004ee9
 8004e94:	08004efd 	.word	0x08004efd
 8004e98:	08004e79 	.word	0x08004e79
 8004e9c:	08004e79 	.word	0x08004e79
 8004ea0:	08004e79 	.word	0x08004e79
 8004ea4:	08004e79 	.word	0x08004e79
 8004ea8:	08004efd 	.word	0x08004efd
 8004eac:	08004e79 	.word	0x08004e79
 8004eb0:	08004e79 	.word	0x08004e79
 8004eb4:	08004e79 	.word	0x08004e79
 8004eb8:	08004e79 	.word	0x08004e79
 8004ebc:	0800500b 	.word	0x0800500b
 8004ec0:	08004f2d 	.word	0x08004f2d
 8004ec4:	08004fed 	.word	0x08004fed
 8004ec8:	08004e79 	.word	0x08004e79
 8004ecc:	08004e79 	.word	0x08004e79
 8004ed0:	0800502d 	.word	0x0800502d
 8004ed4:	08004e79 	.word	0x08004e79
 8004ed8:	08004f2d 	.word	0x08004f2d
 8004edc:	08004e79 	.word	0x08004e79
 8004ee0:	08004e79 	.word	0x08004e79
 8004ee4:	08004ff5 	.word	0x08004ff5
 8004ee8:	680b      	ldr	r3, [r1, #0]
 8004eea:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004eee:	1d1a      	adds	r2, r3, #4
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	600a      	str	r2, [r1, #0]
 8004ef4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004ef8:	2301      	movs	r3, #1
 8004efa:	e0a4      	b.n	8005046 <_printf_i+0x1f6>
 8004efc:	6825      	ldr	r5, [r4, #0]
 8004efe:	6808      	ldr	r0, [r1, #0]
 8004f00:	062e      	lsls	r6, r5, #24
 8004f02:	f100 0304 	add.w	r3, r0, #4
 8004f06:	d50a      	bpl.n	8004f1e <_printf_i+0xce>
 8004f08:	6805      	ldr	r5, [r0, #0]
 8004f0a:	600b      	str	r3, [r1, #0]
 8004f0c:	2d00      	cmp	r5, #0
 8004f0e:	da03      	bge.n	8004f18 <_printf_i+0xc8>
 8004f10:	232d      	movs	r3, #45	; 0x2d
 8004f12:	426d      	negs	r5, r5
 8004f14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f18:	230a      	movs	r3, #10
 8004f1a:	485e      	ldr	r0, [pc, #376]	; (8005094 <_printf_i+0x244>)
 8004f1c:	e019      	b.n	8004f52 <_printf_i+0x102>
 8004f1e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004f22:	6805      	ldr	r5, [r0, #0]
 8004f24:	600b      	str	r3, [r1, #0]
 8004f26:	bf18      	it	ne
 8004f28:	b22d      	sxthne	r5, r5
 8004f2a:	e7ef      	b.n	8004f0c <_printf_i+0xbc>
 8004f2c:	680b      	ldr	r3, [r1, #0]
 8004f2e:	6825      	ldr	r5, [r4, #0]
 8004f30:	1d18      	adds	r0, r3, #4
 8004f32:	6008      	str	r0, [r1, #0]
 8004f34:	0628      	lsls	r0, r5, #24
 8004f36:	d501      	bpl.n	8004f3c <_printf_i+0xec>
 8004f38:	681d      	ldr	r5, [r3, #0]
 8004f3a:	e002      	b.n	8004f42 <_printf_i+0xf2>
 8004f3c:	0669      	lsls	r1, r5, #25
 8004f3e:	d5fb      	bpl.n	8004f38 <_printf_i+0xe8>
 8004f40:	881d      	ldrh	r5, [r3, #0]
 8004f42:	2f6f      	cmp	r7, #111	; 0x6f
 8004f44:	bf0c      	ite	eq
 8004f46:	2308      	moveq	r3, #8
 8004f48:	230a      	movne	r3, #10
 8004f4a:	4852      	ldr	r0, [pc, #328]	; (8005094 <_printf_i+0x244>)
 8004f4c:	2100      	movs	r1, #0
 8004f4e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004f52:	6866      	ldr	r6, [r4, #4]
 8004f54:	2e00      	cmp	r6, #0
 8004f56:	bfa8      	it	ge
 8004f58:	6821      	ldrge	r1, [r4, #0]
 8004f5a:	60a6      	str	r6, [r4, #8]
 8004f5c:	bfa4      	itt	ge
 8004f5e:	f021 0104 	bicge.w	r1, r1, #4
 8004f62:	6021      	strge	r1, [r4, #0]
 8004f64:	b90d      	cbnz	r5, 8004f6a <_printf_i+0x11a>
 8004f66:	2e00      	cmp	r6, #0
 8004f68:	d04d      	beq.n	8005006 <_printf_i+0x1b6>
 8004f6a:	4616      	mov	r6, r2
 8004f6c:	fbb5 f1f3 	udiv	r1, r5, r3
 8004f70:	fb03 5711 	mls	r7, r3, r1, r5
 8004f74:	5dc7      	ldrb	r7, [r0, r7]
 8004f76:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004f7a:	462f      	mov	r7, r5
 8004f7c:	42bb      	cmp	r3, r7
 8004f7e:	460d      	mov	r5, r1
 8004f80:	d9f4      	bls.n	8004f6c <_printf_i+0x11c>
 8004f82:	2b08      	cmp	r3, #8
 8004f84:	d10b      	bne.n	8004f9e <_printf_i+0x14e>
 8004f86:	6823      	ldr	r3, [r4, #0]
 8004f88:	07df      	lsls	r7, r3, #31
 8004f8a:	d508      	bpl.n	8004f9e <_printf_i+0x14e>
 8004f8c:	6923      	ldr	r3, [r4, #16]
 8004f8e:	6861      	ldr	r1, [r4, #4]
 8004f90:	4299      	cmp	r1, r3
 8004f92:	bfde      	ittt	le
 8004f94:	2330      	movle	r3, #48	; 0x30
 8004f96:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004f9a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004f9e:	1b92      	subs	r2, r2, r6
 8004fa0:	6122      	str	r2, [r4, #16]
 8004fa2:	464b      	mov	r3, r9
 8004fa4:	4621      	mov	r1, r4
 8004fa6:	4640      	mov	r0, r8
 8004fa8:	f8cd a000 	str.w	sl, [sp]
 8004fac:	aa03      	add	r2, sp, #12
 8004fae:	f7ff fedf 	bl	8004d70 <_printf_common>
 8004fb2:	3001      	adds	r0, #1
 8004fb4:	d14c      	bne.n	8005050 <_printf_i+0x200>
 8004fb6:	f04f 30ff 	mov.w	r0, #4294967295
 8004fba:	b004      	add	sp, #16
 8004fbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fc0:	4834      	ldr	r0, [pc, #208]	; (8005094 <_printf_i+0x244>)
 8004fc2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004fc6:	680e      	ldr	r6, [r1, #0]
 8004fc8:	6823      	ldr	r3, [r4, #0]
 8004fca:	f856 5b04 	ldr.w	r5, [r6], #4
 8004fce:	061f      	lsls	r7, r3, #24
 8004fd0:	600e      	str	r6, [r1, #0]
 8004fd2:	d514      	bpl.n	8004ffe <_printf_i+0x1ae>
 8004fd4:	07d9      	lsls	r1, r3, #31
 8004fd6:	bf44      	itt	mi
 8004fd8:	f043 0320 	orrmi.w	r3, r3, #32
 8004fdc:	6023      	strmi	r3, [r4, #0]
 8004fde:	b91d      	cbnz	r5, 8004fe8 <_printf_i+0x198>
 8004fe0:	6823      	ldr	r3, [r4, #0]
 8004fe2:	f023 0320 	bic.w	r3, r3, #32
 8004fe6:	6023      	str	r3, [r4, #0]
 8004fe8:	2310      	movs	r3, #16
 8004fea:	e7af      	b.n	8004f4c <_printf_i+0xfc>
 8004fec:	6823      	ldr	r3, [r4, #0]
 8004fee:	f043 0320 	orr.w	r3, r3, #32
 8004ff2:	6023      	str	r3, [r4, #0]
 8004ff4:	2378      	movs	r3, #120	; 0x78
 8004ff6:	4828      	ldr	r0, [pc, #160]	; (8005098 <_printf_i+0x248>)
 8004ff8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004ffc:	e7e3      	b.n	8004fc6 <_printf_i+0x176>
 8004ffe:	065e      	lsls	r6, r3, #25
 8005000:	bf48      	it	mi
 8005002:	b2ad      	uxthmi	r5, r5
 8005004:	e7e6      	b.n	8004fd4 <_printf_i+0x184>
 8005006:	4616      	mov	r6, r2
 8005008:	e7bb      	b.n	8004f82 <_printf_i+0x132>
 800500a:	680b      	ldr	r3, [r1, #0]
 800500c:	6826      	ldr	r6, [r4, #0]
 800500e:	1d1d      	adds	r5, r3, #4
 8005010:	6960      	ldr	r0, [r4, #20]
 8005012:	600d      	str	r5, [r1, #0]
 8005014:	0635      	lsls	r5, r6, #24
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	d501      	bpl.n	800501e <_printf_i+0x1ce>
 800501a:	6018      	str	r0, [r3, #0]
 800501c:	e002      	b.n	8005024 <_printf_i+0x1d4>
 800501e:	0671      	lsls	r1, r6, #25
 8005020:	d5fb      	bpl.n	800501a <_printf_i+0x1ca>
 8005022:	8018      	strh	r0, [r3, #0]
 8005024:	2300      	movs	r3, #0
 8005026:	4616      	mov	r6, r2
 8005028:	6123      	str	r3, [r4, #16]
 800502a:	e7ba      	b.n	8004fa2 <_printf_i+0x152>
 800502c:	680b      	ldr	r3, [r1, #0]
 800502e:	1d1a      	adds	r2, r3, #4
 8005030:	600a      	str	r2, [r1, #0]
 8005032:	681e      	ldr	r6, [r3, #0]
 8005034:	2100      	movs	r1, #0
 8005036:	4630      	mov	r0, r6
 8005038:	6862      	ldr	r2, [r4, #4]
 800503a:	f000 f82f 	bl	800509c <memchr>
 800503e:	b108      	cbz	r0, 8005044 <_printf_i+0x1f4>
 8005040:	1b80      	subs	r0, r0, r6
 8005042:	6060      	str	r0, [r4, #4]
 8005044:	6863      	ldr	r3, [r4, #4]
 8005046:	6123      	str	r3, [r4, #16]
 8005048:	2300      	movs	r3, #0
 800504a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800504e:	e7a8      	b.n	8004fa2 <_printf_i+0x152>
 8005050:	4632      	mov	r2, r6
 8005052:	4649      	mov	r1, r9
 8005054:	4640      	mov	r0, r8
 8005056:	6923      	ldr	r3, [r4, #16]
 8005058:	47d0      	blx	sl
 800505a:	3001      	adds	r0, #1
 800505c:	d0ab      	beq.n	8004fb6 <_printf_i+0x166>
 800505e:	6823      	ldr	r3, [r4, #0]
 8005060:	079b      	lsls	r3, r3, #30
 8005062:	d413      	bmi.n	800508c <_printf_i+0x23c>
 8005064:	68e0      	ldr	r0, [r4, #12]
 8005066:	9b03      	ldr	r3, [sp, #12]
 8005068:	4298      	cmp	r0, r3
 800506a:	bfb8      	it	lt
 800506c:	4618      	movlt	r0, r3
 800506e:	e7a4      	b.n	8004fba <_printf_i+0x16a>
 8005070:	2301      	movs	r3, #1
 8005072:	4632      	mov	r2, r6
 8005074:	4649      	mov	r1, r9
 8005076:	4640      	mov	r0, r8
 8005078:	47d0      	blx	sl
 800507a:	3001      	adds	r0, #1
 800507c:	d09b      	beq.n	8004fb6 <_printf_i+0x166>
 800507e:	3501      	adds	r5, #1
 8005080:	68e3      	ldr	r3, [r4, #12]
 8005082:	9903      	ldr	r1, [sp, #12]
 8005084:	1a5b      	subs	r3, r3, r1
 8005086:	42ab      	cmp	r3, r5
 8005088:	dcf2      	bgt.n	8005070 <_printf_i+0x220>
 800508a:	e7eb      	b.n	8005064 <_printf_i+0x214>
 800508c:	2500      	movs	r5, #0
 800508e:	f104 0619 	add.w	r6, r4, #25
 8005092:	e7f5      	b.n	8005080 <_printf_i+0x230>
 8005094:	080053e7 	.word	0x080053e7
 8005098:	080053f8 	.word	0x080053f8

0800509c <memchr>:
 800509c:	4603      	mov	r3, r0
 800509e:	b510      	push	{r4, lr}
 80050a0:	b2c9      	uxtb	r1, r1
 80050a2:	4402      	add	r2, r0
 80050a4:	4293      	cmp	r3, r2
 80050a6:	4618      	mov	r0, r3
 80050a8:	d101      	bne.n	80050ae <memchr+0x12>
 80050aa:	2000      	movs	r0, #0
 80050ac:	e003      	b.n	80050b6 <memchr+0x1a>
 80050ae:	7804      	ldrb	r4, [r0, #0]
 80050b0:	3301      	adds	r3, #1
 80050b2:	428c      	cmp	r4, r1
 80050b4:	d1f6      	bne.n	80050a4 <memchr+0x8>
 80050b6:	bd10      	pop	{r4, pc}

080050b8 <memcpy>:
 80050b8:	440a      	add	r2, r1
 80050ba:	4291      	cmp	r1, r2
 80050bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80050c0:	d100      	bne.n	80050c4 <memcpy+0xc>
 80050c2:	4770      	bx	lr
 80050c4:	b510      	push	{r4, lr}
 80050c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80050ca:	4291      	cmp	r1, r2
 80050cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80050d0:	d1f9      	bne.n	80050c6 <memcpy+0xe>
 80050d2:	bd10      	pop	{r4, pc}

080050d4 <memmove>:
 80050d4:	4288      	cmp	r0, r1
 80050d6:	b510      	push	{r4, lr}
 80050d8:	eb01 0402 	add.w	r4, r1, r2
 80050dc:	d902      	bls.n	80050e4 <memmove+0x10>
 80050de:	4284      	cmp	r4, r0
 80050e0:	4623      	mov	r3, r4
 80050e2:	d807      	bhi.n	80050f4 <memmove+0x20>
 80050e4:	1e43      	subs	r3, r0, #1
 80050e6:	42a1      	cmp	r1, r4
 80050e8:	d008      	beq.n	80050fc <memmove+0x28>
 80050ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80050ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80050f2:	e7f8      	b.n	80050e6 <memmove+0x12>
 80050f4:	4601      	mov	r1, r0
 80050f6:	4402      	add	r2, r0
 80050f8:	428a      	cmp	r2, r1
 80050fa:	d100      	bne.n	80050fe <memmove+0x2a>
 80050fc:	bd10      	pop	{r4, pc}
 80050fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005102:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005106:	e7f7      	b.n	80050f8 <memmove+0x24>

08005108 <_free_r>:
 8005108:	b538      	push	{r3, r4, r5, lr}
 800510a:	4605      	mov	r5, r0
 800510c:	2900      	cmp	r1, #0
 800510e:	d043      	beq.n	8005198 <_free_r+0x90>
 8005110:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005114:	1f0c      	subs	r4, r1, #4
 8005116:	2b00      	cmp	r3, #0
 8005118:	bfb8      	it	lt
 800511a:	18e4      	addlt	r4, r4, r3
 800511c:	f000 f8d0 	bl	80052c0 <__malloc_lock>
 8005120:	4a1e      	ldr	r2, [pc, #120]	; (800519c <_free_r+0x94>)
 8005122:	6813      	ldr	r3, [r2, #0]
 8005124:	4610      	mov	r0, r2
 8005126:	b933      	cbnz	r3, 8005136 <_free_r+0x2e>
 8005128:	6063      	str	r3, [r4, #4]
 800512a:	6014      	str	r4, [r2, #0]
 800512c:	4628      	mov	r0, r5
 800512e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005132:	f000 b8cb 	b.w	80052cc <__malloc_unlock>
 8005136:	42a3      	cmp	r3, r4
 8005138:	d90a      	bls.n	8005150 <_free_r+0x48>
 800513a:	6821      	ldr	r1, [r4, #0]
 800513c:	1862      	adds	r2, r4, r1
 800513e:	4293      	cmp	r3, r2
 8005140:	bf01      	itttt	eq
 8005142:	681a      	ldreq	r2, [r3, #0]
 8005144:	685b      	ldreq	r3, [r3, #4]
 8005146:	1852      	addeq	r2, r2, r1
 8005148:	6022      	streq	r2, [r4, #0]
 800514a:	6063      	str	r3, [r4, #4]
 800514c:	6004      	str	r4, [r0, #0]
 800514e:	e7ed      	b.n	800512c <_free_r+0x24>
 8005150:	461a      	mov	r2, r3
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	b10b      	cbz	r3, 800515a <_free_r+0x52>
 8005156:	42a3      	cmp	r3, r4
 8005158:	d9fa      	bls.n	8005150 <_free_r+0x48>
 800515a:	6811      	ldr	r1, [r2, #0]
 800515c:	1850      	adds	r0, r2, r1
 800515e:	42a0      	cmp	r0, r4
 8005160:	d10b      	bne.n	800517a <_free_r+0x72>
 8005162:	6820      	ldr	r0, [r4, #0]
 8005164:	4401      	add	r1, r0
 8005166:	1850      	adds	r0, r2, r1
 8005168:	4283      	cmp	r3, r0
 800516a:	6011      	str	r1, [r2, #0]
 800516c:	d1de      	bne.n	800512c <_free_r+0x24>
 800516e:	6818      	ldr	r0, [r3, #0]
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	4401      	add	r1, r0
 8005174:	6011      	str	r1, [r2, #0]
 8005176:	6053      	str	r3, [r2, #4]
 8005178:	e7d8      	b.n	800512c <_free_r+0x24>
 800517a:	d902      	bls.n	8005182 <_free_r+0x7a>
 800517c:	230c      	movs	r3, #12
 800517e:	602b      	str	r3, [r5, #0]
 8005180:	e7d4      	b.n	800512c <_free_r+0x24>
 8005182:	6820      	ldr	r0, [r4, #0]
 8005184:	1821      	adds	r1, r4, r0
 8005186:	428b      	cmp	r3, r1
 8005188:	bf01      	itttt	eq
 800518a:	6819      	ldreq	r1, [r3, #0]
 800518c:	685b      	ldreq	r3, [r3, #4]
 800518e:	1809      	addeq	r1, r1, r0
 8005190:	6021      	streq	r1, [r4, #0]
 8005192:	6063      	str	r3, [r4, #4]
 8005194:	6054      	str	r4, [r2, #4]
 8005196:	e7c9      	b.n	800512c <_free_r+0x24>
 8005198:	bd38      	pop	{r3, r4, r5, pc}
 800519a:	bf00      	nop
 800519c:	200001fc 	.word	0x200001fc

080051a0 <_malloc_r>:
 80051a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051a2:	1ccd      	adds	r5, r1, #3
 80051a4:	f025 0503 	bic.w	r5, r5, #3
 80051a8:	3508      	adds	r5, #8
 80051aa:	2d0c      	cmp	r5, #12
 80051ac:	bf38      	it	cc
 80051ae:	250c      	movcc	r5, #12
 80051b0:	2d00      	cmp	r5, #0
 80051b2:	4606      	mov	r6, r0
 80051b4:	db01      	blt.n	80051ba <_malloc_r+0x1a>
 80051b6:	42a9      	cmp	r1, r5
 80051b8:	d903      	bls.n	80051c2 <_malloc_r+0x22>
 80051ba:	230c      	movs	r3, #12
 80051bc:	6033      	str	r3, [r6, #0]
 80051be:	2000      	movs	r0, #0
 80051c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80051c2:	f000 f87d 	bl	80052c0 <__malloc_lock>
 80051c6:	4921      	ldr	r1, [pc, #132]	; (800524c <_malloc_r+0xac>)
 80051c8:	680a      	ldr	r2, [r1, #0]
 80051ca:	4614      	mov	r4, r2
 80051cc:	b99c      	cbnz	r4, 80051f6 <_malloc_r+0x56>
 80051ce:	4f20      	ldr	r7, [pc, #128]	; (8005250 <_malloc_r+0xb0>)
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	b923      	cbnz	r3, 80051de <_malloc_r+0x3e>
 80051d4:	4621      	mov	r1, r4
 80051d6:	4630      	mov	r0, r6
 80051d8:	f000 f862 	bl	80052a0 <_sbrk_r>
 80051dc:	6038      	str	r0, [r7, #0]
 80051de:	4629      	mov	r1, r5
 80051e0:	4630      	mov	r0, r6
 80051e2:	f000 f85d 	bl	80052a0 <_sbrk_r>
 80051e6:	1c43      	adds	r3, r0, #1
 80051e8:	d123      	bne.n	8005232 <_malloc_r+0x92>
 80051ea:	230c      	movs	r3, #12
 80051ec:	4630      	mov	r0, r6
 80051ee:	6033      	str	r3, [r6, #0]
 80051f0:	f000 f86c 	bl	80052cc <__malloc_unlock>
 80051f4:	e7e3      	b.n	80051be <_malloc_r+0x1e>
 80051f6:	6823      	ldr	r3, [r4, #0]
 80051f8:	1b5b      	subs	r3, r3, r5
 80051fa:	d417      	bmi.n	800522c <_malloc_r+0x8c>
 80051fc:	2b0b      	cmp	r3, #11
 80051fe:	d903      	bls.n	8005208 <_malloc_r+0x68>
 8005200:	6023      	str	r3, [r4, #0]
 8005202:	441c      	add	r4, r3
 8005204:	6025      	str	r5, [r4, #0]
 8005206:	e004      	b.n	8005212 <_malloc_r+0x72>
 8005208:	6863      	ldr	r3, [r4, #4]
 800520a:	42a2      	cmp	r2, r4
 800520c:	bf0c      	ite	eq
 800520e:	600b      	streq	r3, [r1, #0]
 8005210:	6053      	strne	r3, [r2, #4]
 8005212:	4630      	mov	r0, r6
 8005214:	f000 f85a 	bl	80052cc <__malloc_unlock>
 8005218:	f104 000b 	add.w	r0, r4, #11
 800521c:	1d23      	adds	r3, r4, #4
 800521e:	f020 0007 	bic.w	r0, r0, #7
 8005222:	1ac2      	subs	r2, r0, r3
 8005224:	d0cc      	beq.n	80051c0 <_malloc_r+0x20>
 8005226:	1a1b      	subs	r3, r3, r0
 8005228:	50a3      	str	r3, [r4, r2]
 800522a:	e7c9      	b.n	80051c0 <_malloc_r+0x20>
 800522c:	4622      	mov	r2, r4
 800522e:	6864      	ldr	r4, [r4, #4]
 8005230:	e7cc      	b.n	80051cc <_malloc_r+0x2c>
 8005232:	1cc4      	adds	r4, r0, #3
 8005234:	f024 0403 	bic.w	r4, r4, #3
 8005238:	42a0      	cmp	r0, r4
 800523a:	d0e3      	beq.n	8005204 <_malloc_r+0x64>
 800523c:	1a21      	subs	r1, r4, r0
 800523e:	4630      	mov	r0, r6
 8005240:	f000 f82e 	bl	80052a0 <_sbrk_r>
 8005244:	3001      	adds	r0, #1
 8005246:	d1dd      	bne.n	8005204 <_malloc_r+0x64>
 8005248:	e7cf      	b.n	80051ea <_malloc_r+0x4a>
 800524a:	bf00      	nop
 800524c:	200001fc 	.word	0x200001fc
 8005250:	20000200 	.word	0x20000200

08005254 <_realloc_r>:
 8005254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005256:	4607      	mov	r7, r0
 8005258:	4614      	mov	r4, r2
 800525a:	460e      	mov	r6, r1
 800525c:	b921      	cbnz	r1, 8005268 <_realloc_r+0x14>
 800525e:	4611      	mov	r1, r2
 8005260:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005264:	f7ff bf9c 	b.w	80051a0 <_malloc_r>
 8005268:	b922      	cbnz	r2, 8005274 <_realloc_r+0x20>
 800526a:	f7ff ff4d 	bl	8005108 <_free_r>
 800526e:	4625      	mov	r5, r4
 8005270:	4628      	mov	r0, r5
 8005272:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005274:	f000 f830 	bl	80052d8 <_malloc_usable_size_r>
 8005278:	42a0      	cmp	r0, r4
 800527a:	d20f      	bcs.n	800529c <_realloc_r+0x48>
 800527c:	4621      	mov	r1, r4
 800527e:	4638      	mov	r0, r7
 8005280:	f7ff ff8e 	bl	80051a0 <_malloc_r>
 8005284:	4605      	mov	r5, r0
 8005286:	2800      	cmp	r0, #0
 8005288:	d0f2      	beq.n	8005270 <_realloc_r+0x1c>
 800528a:	4631      	mov	r1, r6
 800528c:	4622      	mov	r2, r4
 800528e:	f7ff ff13 	bl	80050b8 <memcpy>
 8005292:	4631      	mov	r1, r6
 8005294:	4638      	mov	r0, r7
 8005296:	f7ff ff37 	bl	8005108 <_free_r>
 800529a:	e7e9      	b.n	8005270 <_realloc_r+0x1c>
 800529c:	4635      	mov	r5, r6
 800529e:	e7e7      	b.n	8005270 <_realloc_r+0x1c>

080052a0 <_sbrk_r>:
 80052a0:	b538      	push	{r3, r4, r5, lr}
 80052a2:	2300      	movs	r3, #0
 80052a4:	4d05      	ldr	r5, [pc, #20]	; (80052bc <_sbrk_r+0x1c>)
 80052a6:	4604      	mov	r4, r0
 80052a8:	4608      	mov	r0, r1
 80052aa:	602b      	str	r3, [r5, #0]
 80052ac:	f7fc fc52 	bl	8001b54 <_sbrk>
 80052b0:	1c43      	adds	r3, r0, #1
 80052b2:	d102      	bne.n	80052ba <_sbrk_r+0x1a>
 80052b4:	682b      	ldr	r3, [r5, #0]
 80052b6:	b103      	cbz	r3, 80052ba <_sbrk_r+0x1a>
 80052b8:	6023      	str	r3, [r4, #0]
 80052ba:	bd38      	pop	{r3, r4, r5, pc}
 80052bc:	200002e4 	.word	0x200002e4

080052c0 <__malloc_lock>:
 80052c0:	4801      	ldr	r0, [pc, #4]	; (80052c8 <__malloc_lock+0x8>)
 80052c2:	f000 b811 	b.w	80052e8 <__retarget_lock_acquire_recursive>
 80052c6:	bf00      	nop
 80052c8:	200002ec 	.word	0x200002ec

080052cc <__malloc_unlock>:
 80052cc:	4801      	ldr	r0, [pc, #4]	; (80052d4 <__malloc_unlock+0x8>)
 80052ce:	f000 b80c 	b.w	80052ea <__retarget_lock_release_recursive>
 80052d2:	bf00      	nop
 80052d4:	200002ec 	.word	0x200002ec

080052d8 <_malloc_usable_size_r>:
 80052d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052dc:	1f18      	subs	r0, r3, #4
 80052de:	2b00      	cmp	r3, #0
 80052e0:	bfbc      	itt	lt
 80052e2:	580b      	ldrlt	r3, [r1, r0]
 80052e4:	18c0      	addlt	r0, r0, r3
 80052e6:	4770      	bx	lr

080052e8 <__retarget_lock_acquire_recursive>:
 80052e8:	4770      	bx	lr

080052ea <__retarget_lock_release_recursive>:
 80052ea:	4770      	bx	lr

080052ec <_init>:
 80052ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052ee:	bf00      	nop
 80052f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052f2:	bc08      	pop	{r3}
 80052f4:	469e      	mov	lr, r3
 80052f6:	4770      	bx	lr

080052f8 <_fini>:
 80052f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052fa:	bf00      	nop
 80052fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052fe:	bc08      	pop	{r3}
 8005300:	469e      	mov	lr, r3
 8005302:	4770      	bx	lr
