
MCU_Assignment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d20  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  08004e2c  08004e2c  00014e2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f34  08004f34  00020098  2**0
                  CONTENTS
  4 .ARM          00000000  08004f34  08004f34  00020098  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004f34  08004f34  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f34  08004f34  00014f34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f38  08004f38  00014f38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  08004f3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a8  20000098  08004fd4  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000340  08004fd4  00020340  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200c1  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e092  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002619  00000000  00000000  0002e196  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000df0  00000000  00000000  000307b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ac7  00000000  00000000  000315a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017f18  00000000  00000000  00032067  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001141a  00000000  00000000  00049f7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008ac5a  00000000  00000000  0005b399  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003ce8  00000000  00000000  000e5ff4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000045  00000000  00000000  000e9cdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000098 	.word	0x20000098
 8000128:	00000000 	.word	0x00000000
 800012c:	08004e14 	.word	0x08004e14

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000009c 	.word	0x2000009c
 8000148:	08004e14 	.word	0x08004e14

0800014c <fsm_automatic>:
#include "input_reading.h"
#include "uart.h"

int t_road_1 = 0, t_road_2 = 0;

void fsm_automatic() {
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	switch (status) {
 8000150:	4b8d      	ldr	r3, [pc, #564]	; (8000388 <fsm_automatic+0x23c>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	3301      	adds	r3, #1
 8000156:	2b05      	cmp	r3, #5
 8000158:	f200 810a 	bhi.w	8000370 <fsm_automatic+0x224>
 800015c:	a201      	add	r2, pc, #4	; (adr r2, 8000164 <fsm_automatic+0x18>)
 800015e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000162:	bf00      	nop
 8000164:	0800017d 	.word	0x0800017d
 8000168:	08000185 	.word	0x08000185
 800016c:	080001d3 	.word	0x080001d3
 8000170:	08000261 	.word	0x08000261
 8000174:	080002bb 	.word	0x080002bb
 8000178:	0800030b 	.word	0x0800030b
		case INIT:
			status = MODE1;
 800017c:	4b82      	ldr	r3, [pc, #520]	; (8000388 <fsm_automatic+0x23c>)
 800017e:	2200      	movs	r2, #0
 8000180:	601a      	str	r2, [r3, #0]
			break;
 8000182:	e0fe      	b.n	8000382 <fsm_automatic+0x236>
		case MODE1:
			led_config();
 8000184:	f000 f9e4 	bl	8000550 <led_config>
			t_road_1 = T_RED;
 8000188:	4b80      	ldr	r3, [pc, #512]	; (800038c <fsm_automatic+0x240>)
 800018a:	681b      	ldr	r3, [r3, #0]
 800018c:	4a80      	ldr	r2, [pc, #512]	; (8000390 <fsm_automatic+0x244>)
 800018e:	6013      	str	r3, [r2, #0]
			t_road_2 = T_GREEN;
 8000190:	4b80      	ldr	r3, [pc, #512]	; (8000394 <fsm_automatic+0x248>)
 8000192:	681b      	ldr	r3, [r3, #0]
 8000194:	4a80      	ldr	r2, [pc, #512]	; (8000398 <fsm_automatic+0x24c>)
 8000196:	6013      	str	r3, [r2, #0]
			HAL_UART_Transmit(&huart2, "!_____MODE1_____#\n\r", 20, 50);
 8000198:	2332      	movs	r3, #50	; 0x32
 800019a:	2214      	movs	r2, #20
 800019c:	497f      	ldr	r1, [pc, #508]	; (800039c <fsm_automatic+0x250>)
 800019e:	4880      	ldr	r0, [pc, #512]	; (80003a0 <fsm_automatic+0x254>)
 80001a0:	f003 fbb2 	bl	8003908 <HAL_UART_Transmit>
			disp_time_uart(t_road_1, t_road_2);
 80001a4:	4b7a      	ldr	r3, [pc, #488]	; (8000390 <fsm_automatic+0x244>)
 80001a6:	681b      	ldr	r3, [r3, #0]
 80001a8:	4a7b      	ldr	r2, [pc, #492]	; (8000398 <fsm_automatic+0x24c>)
 80001aa:	6812      	ldr	r2, [r2, #0]
 80001ac:	4611      	mov	r1, r2
 80001ae:	4618      	mov	r0, r3
 80001b0:	f001 fba4 	bl	80018fc <disp_time_uart>
			setTimer4(1000);
 80001b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001b8:	f001 fa54 	bl	8001664 <setTimer4>
			buzzer_period=400;
 80001bc:	4b79      	ldr	r3, [pc, #484]	; (80003a4 <fsm_automatic+0x258>)
 80001be:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80001c2:	601a      	str	r2, [r3, #0]
			volume = 15;
 80001c4:	4b78      	ldr	r3, [pc, #480]	; (80003a8 <fsm_automatic+0x25c>)
 80001c6:	220f      	movs	r2, #15
 80001c8:	601a      	str	r2, [r3, #0]
			status = RED_GREEN;
 80001ca:	4b6f      	ldr	r3, [pc, #444]	; (8000388 <fsm_automatic+0x23c>)
 80001cc:	2201      	movs	r2, #1
 80001ce:	601a      	str	r2, [r3, #0]
			break;
 80001d0:	e0d7      	b.n	8000382 <fsm_automatic+0x236>
		case RED_GREEN:
			led_config();
 80001d2:	f000 f9bd 	bl	8000550 <led_config>
			if (timer4_flag == 1) {
 80001d6:	4b75      	ldr	r3, [pc, #468]	; (80003ac <fsm_automatic+0x260>)
 80001d8:	681b      	ldr	r3, [r3, #0]
 80001da:	2b01      	cmp	r3, #1
 80001dc:	f040 80ca 	bne.w	8000374 <fsm_automatic+0x228>
				t_road_1--;
 80001e0:	4b6b      	ldr	r3, [pc, #428]	; (8000390 <fsm_automatic+0x244>)
 80001e2:	681b      	ldr	r3, [r3, #0]
 80001e4:	3b01      	subs	r3, #1
 80001e6:	4a6a      	ldr	r2, [pc, #424]	; (8000390 <fsm_automatic+0x244>)
 80001e8:	6013      	str	r3, [r2, #0]
				t_road_2--;
 80001ea:	4b6b      	ldr	r3, [pc, #428]	; (8000398 <fsm_automatic+0x24c>)
 80001ec:	681b      	ldr	r3, [r3, #0]
 80001ee:	3b01      	subs	r3, #1
 80001f0:	4a69      	ldr	r2, [pc, #420]	; (8000398 <fsm_automatic+0x24c>)
 80001f2:	6013      	str	r3, [r2, #0]
				T_CHECK = t_road_2;
 80001f4:	4b68      	ldr	r3, [pc, #416]	; (8000398 <fsm_automatic+0x24c>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	4a6d      	ldr	r2, [pc, #436]	; (80003b0 <fsm_automatic+0x264>)
 80001fa:	6013      	str	r3, [r2, #0]
				if (t_road_2 <= 0) { // next state pre-setup
 80001fc:	4b66      	ldr	r3, [pc, #408]	; (8000398 <fsm_automatic+0x24c>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	2b00      	cmp	r3, #0
 8000202:	dc0c      	bgt.n	800021e <fsm_automatic+0xd2>
					t_road_2 = T_AMBER;
 8000204:	4b6b      	ldr	r3, [pc, #428]	; (80003b4 <fsm_automatic+0x268>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	4a63      	ldr	r2, [pc, #396]	; (8000398 <fsm_automatic+0x24c>)
 800020a:	6013      	str	r3, [r2, #0]
					buzzer_period = 75;
 800020c:	4b65      	ldr	r3, [pc, #404]	; (80003a4 <fsm_automatic+0x258>)
 800020e:	224b      	movs	r2, #75	; 0x4b
 8000210:	601a      	str	r2, [r3, #0]
					volume = 100;
 8000212:	4b65      	ldr	r3, [pc, #404]	; (80003a8 <fsm_automatic+0x25c>)
 8000214:	2264      	movs	r2, #100	; 0x64
 8000216:	601a      	str	r2, [r3, #0]
					status = RED_AMBER; // Change state
 8000218:	4b5b      	ldr	r3, [pc, #364]	; (8000388 <fsm_automatic+0x23c>)
 800021a:	2202      	movs	r2, #2
 800021c:	601a      	str	r2, [r3, #0]
				}
				if (T_CHECK <= T_GREEN/2 && T_CHECK > 0) { // next state pre-setup
 800021e:	4b5d      	ldr	r3, [pc, #372]	; (8000394 <fsm_automatic+0x248>)
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	0fda      	lsrs	r2, r3, #31
 8000224:	4413      	add	r3, r2
 8000226:	105b      	asrs	r3, r3, #1
 8000228:	461a      	mov	r2, r3
 800022a:	4b61      	ldr	r3, [pc, #388]	; (80003b0 <fsm_automatic+0x264>)
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	429a      	cmp	r2, r3
 8000230:	db09      	blt.n	8000246 <fsm_automatic+0xfa>
 8000232:	4b5f      	ldr	r3, [pc, #380]	; (80003b0 <fsm_automatic+0x264>)
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	2b00      	cmp	r3, #0
 8000238:	dd05      	ble.n	8000246 <fsm_automatic+0xfa>
					buzzer_period = 200;
 800023a:	4b5a      	ldr	r3, [pc, #360]	; (80003a4 <fsm_automatic+0x258>)
 800023c:	22c8      	movs	r2, #200	; 0xc8
 800023e:	601a      	str	r2, [r3, #0]
					volume = 50;
 8000240:	4b59      	ldr	r3, [pc, #356]	; (80003a8 <fsm_automatic+0x25c>)
 8000242:	2232      	movs	r2, #50	; 0x32
 8000244:	601a      	str	r2, [r3, #0]
				}
				disp_time_uart(t_road_1, t_road_2);
 8000246:	4b52      	ldr	r3, [pc, #328]	; (8000390 <fsm_automatic+0x244>)
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	4a53      	ldr	r2, [pc, #332]	; (8000398 <fsm_automatic+0x24c>)
 800024c:	6812      	ldr	r2, [r2, #0]
 800024e:	4611      	mov	r1, r2
 8000250:	4618      	mov	r0, r3
 8000252:	f001 fb53 	bl	80018fc <disp_time_uart>
				setTimer4(1000);
 8000256:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800025a:	f001 fa03 	bl	8001664 <setTimer4>
			}
			break;
 800025e:	e089      	b.n	8000374 <fsm_automatic+0x228>
		case RED_AMBER:
			led_config();
 8000260:	f000 f976 	bl	8000550 <led_config>
			if (timer4_flag == 1) {
 8000264:	4b51      	ldr	r3, [pc, #324]	; (80003ac <fsm_automatic+0x260>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	2b01      	cmp	r3, #1
 800026a:	f040 8085 	bne.w	8000378 <fsm_automatic+0x22c>
				t_road_1--;
 800026e:	4b48      	ldr	r3, [pc, #288]	; (8000390 <fsm_automatic+0x244>)
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	3b01      	subs	r3, #1
 8000274:	4a46      	ldr	r2, [pc, #280]	; (8000390 <fsm_automatic+0x244>)
 8000276:	6013      	str	r3, [r2, #0]
				t_road_2--;
 8000278:	4b47      	ldr	r3, [pc, #284]	; (8000398 <fsm_automatic+0x24c>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	3b01      	subs	r3, #1
 800027e:	4a46      	ldr	r2, [pc, #280]	; (8000398 <fsm_automatic+0x24c>)
 8000280:	6013      	str	r3, [r2, #0]
				if (t_road_1 <= 0) { // next state pre-setup
 8000282:	4b43      	ldr	r3, [pc, #268]	; (8000390 <fsm_automatic+0x244>)
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	2b00      	cmp	r3, #0
 8000288:	dc0a      	bgt.n	80002a0 <fsm_automatic+0x154>
					t_road_1 = T_GREEN;
 800028a:	4b42      	ldr	r3, [pc, #264]	; (8000394 <fsm_automatic+0x248>)
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	4a40      	ldr	r2, [pc, #256]	; (8000390 <fsm_automatic+0x244>)
 8000290:	6013      	str	r3, [r2, #0]
					t_road_2 = T_RED;
 8000292:	4b3e      	ldr	r3, [pc, #248]	; (800038c <fsm_automatic+0x240>)
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	4a40      	ldr	r2, [pc, #256]	; (8000398 <fsm_automatic+0x24c>)
 8000298:	6013      	str	r3, [r2, #0]
					status = GREEN_RED; // Change state
 800029a:	4b3b      	ldr	r3, [pc, #236]	; (8000388 <fsm_automatic+0x23c>)
 800029c:	2203      	movs	r2, #3
 800029e:	601a      	str	r2, [r3, #0]
				}
				disp_time_uart(t_road_1, t_road_2);
 80002a0:	4b3b      	ldr	r3, [pc, #236]	; (8000390 <fsm_automatic+0x244>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	4a3c      	ldr	r2, [pc, #240]	; (8000398 <fsm_automatic+0x24c>)
 80002a6:	6812      	ldr	r2, [r2, #0]
 80002a8:	4611      	mov	r1, r2
 80002aa:	4618      	mov	r0, r3
 80002ac:	f001 fb26 	bl	80018fc <disp_time_uart>
				setTimer4(1000);
 80002b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002b4:	f001 f9d6 	bl	8001664 <setTimer4>
			}
			break;
 80002b8:	e05e      	b.n	8000378 <fsm_automatic+0x22c>
		case GREEN_RED:
			led_config();
 80002ba:	f000 f949 	bl	8000550 <led_config>
			if (timer4_flag == 1) {
 80002be:	4b3b      	ldr	r3, [pc, #236]	; (80003ac <fsm_automatic+0x260>)
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	2b01      	cmp	r3, #1
 80002c4:	d15a      	bne.n	800037c <fsm_automatic+0x230>
				t_road_1--;
 80002c6:	4b32      	ldr	r3, [pc, #200]	; (8000390 <fsm_automatic+0x244>)
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	3b01      	subs	r3, #1
 80002cc:	4a30      	ldr	r2, [pc, #192]	; (8000390 <fsm_automatic+0x244>)
 80002ce:	6013      	str	r3, [r2, #0]
				t_road_2--;
 80002d0:	4b31      	ldr	r3, [pc, #196]	; (8000398 <fsm_automatic+0x24c>)
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	3b01      	subs	r3, #1
 80002d6:	4a30      	ldr	r2, [pc, #192]	; (8000398 <fsm_automatic+0x24c>)
 80002d8:	6013      	str	r3, [r2, #0]
				if (t_road_1 <= 0) { // next state pre-setup
 80002da:	4b2d      	ldr	r3, [pc, #180]	; (8000390 <fsm_automatic+0x244>)
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	2b00      	cmp	r3, #0
 80002e0:	dc06      	bgt.n	80002f0 <fsm_automatic+0x1a4>
					t_road_1 = T_AMBER;
 80002e2:	4b34      	ldr	r3, [pc, #208]	; (80003b4 <fsm_automatic+0x268>)
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	4a2a      	ldr	r2, [pc, #168]	; (8000390 <fsm_automatic+0x244>)
 80002e8:	6013      	str	r3, [r2, #0]
					status = AMBER_RED; // Change state
 80002ea:	4b27      	ldr	r3, [pc, #156]	; (8000388 <fsm_automatic+0x23c>)
 80002ec:	2204      	movs	r2, #4
 80002ee:	601a      	str	r2, [r3, #0]
				}
				disp_time_uart(t_road_1, t_road_2);
 80002f0:	4b27      	ldr	r3, [pc, #156]	; (8000390 <fsm_automatic+0x244>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	4a28      	ldr	r2, [pc, #160]	; (8000398 <fsm_automatic+0x24c>)
 80002f6:	6812      	ldr	r2, [r2, #0]
 80002f8:	4611      	mov	r1, r2
 80002fa:	4618      	mov	r0, r3
 80002fc:	f001 fafe 	bl	80018fc <disp_time_uart>
				setTimer4(1000);
 8000300:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000304:	f001 f9ae 	bl	8001664 <setTimer4>
			}
			break;
 8000308:	e038      	b.n	800037c <fsm_automatic+0x230>
		case AMBER_RED:
			led_config();
 800030a:	f000 f921 	bl	8000550 <led_config>
			if (timer4_flag == 1) {
 800030e:	4b27      	ldr	r3, [pc, #156]	; (80003ac <fsm_automatic+0x260>)
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	2b01      	cmp	r3, #1
 8000314:	d134      	bne.n	8000380 <fsm_automatic+0x234>
				t_road_1--;
 8000316:	4b1e      	ldr	r3, [pc, #120]	; (8000390 <fsm_automatic+0x244>)
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	3b01      	subs	r3, #1
 800031c:	4a1c      	ldr	r2, [pc, #112]	; (8000390 <fsm_automatic+0x244>)
 800031e:	6013      	str	r3, [r2, #0]
				t_road_2--;
 8000320:	4b1d      	ldr	r3, [pc, #116]	; (8000398 <fsm_automatic+0x24c>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	3b01      	subs	r3, #1
 8000326:	4a1c      	ldr	r2, [pc, #112]	; (8000398 <fsm_automatic+0x24c>)
 8000328:	6013      	str	r3, [r2, #0]
				if (t_road_1 <= 0) { // next state pre-setup
 800032a:	4b19      	ldr	r3, [pc, #100]	; (8000390 <fsm_automatic+0x244>)
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	2b00      	cmp	r3, #0
 8000330:	dc11      	bgt.n	8000356 <fsm_automatic+0x20a>
					t_road_1 = T_RED;
 8000332:	4b16      	ldr	r3, [pc, #88]	; (800038c <fsm_automatic+0x240>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	4a16      	ldr	r2, [pc, #88]	; (8000390 <fsm_automatic+0x244>)
 8000338:	6013      	str	r3, [r2, #0]
					t_road_2 = T_GREEN;
 800033a:	4b16      	ldr	r3, [pc, #88]	; (8000394 <fsm_automatic+0x248>)
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	4a16      	ldr	r2, [pc, #88]	; (8000398 <fsm_automatic+0x24c>)
 8000340:	6013      	str	r3, [r2, #0]
					buzzer_period=500;
 8000342:	4b18      	ldr	r3, [pc, #96]	; (80003a4 <fsm_automatic+0x258>)
 8000344:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000348:	601a      	str	r2, [r3, #0]
					volume = 20;
 800034a:	4b17      	ldr	r3, [pc, #92]	; (80003a8 <fsm_automatic+0x25c>)
 800034c:	2214      	movs	r2, #20
 800034e:	601a      	str	r2, [r3, #0]
					status = RED_GREEN; // Change state
 8000350:	4b0d      	ldr	r3, [pc, #52]	; (8000388 <fsm_automatic+0x23c>)
 8000352:	2201      	movs	r2, #1
 8000354:	601a      	str	r2, [r3, #0]
				}
				disp_time_uart(t_road_1, t_road_2);
 8000356:	4b0e      	ldr	r3, [pc, #56]	; (8000390 <fsm_automatic+0x244>)
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	4a0f      	ldr	r2, [pc, #60]	; (8000398 <fsm_automatic+0x24c>)
 800035c:	6812      	ldr	r2, [r2, #0]
 800035e:	4611      	mov	r1, r2
 8000360:	4618      	mov	r0, r3
 8000362:	f001 facb 	bl	80018fc <disp_time_uart>
				setTimer4(1000);
 8000366:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800036a:	f001 f97b 	bl	8001664 <setTimer4>
			}
			break;
 800036e:	e007      	b.n	8000380 <fsm_automatic+0x234>
		default:
			break;
 8000370:	bf00      	nop
 8000372:	e006      	b.n	8000382 <fsm_automatic+0x236>
			break;
 8000374:	bf00      	nop
 8000376:	e004      	b.n	8000382 <fsm_automatic+0x236>
			break;
 8000378:	bf00      	nop
 800037a:	e002      	b.n	8000382 <fsm_automatic+0x236>
			break;
 800037c:	bf00      	nop
 800037e:	e000      	b.n	8000382 <fsm_automatic+0x236>
			break;
 8000380:	bf00      	nop
	}
}
 8000382:	bf00      	nop
 8000384:	bd80      	pop	{r7, pc}
 8000386:	bf00      	nop
 8000388:	2000000c 	.word	0x2000000c
 800038c:	20000000 	.word	0x20000000
 8000390:	200000b4 	.word	0x200000b4
 8000394:	20000008 	.word	0x20000008
 8000398:	200000b8 	.word	0x200000b8
 800039c:	08004e2c 	.word	0x08004e2c
 80003a0:	20000170 	.word	0x20000170
 80003a4:	20000014 	.word	0x20000014
 80003a8:	20000018 	.word	0x20000018
 80003ac:	200001e8 	.word	0x200001e8
 80003b0:	200000bc 	.word	0x200000bc
 80003b4:	20000004 	.word	0x20000004

080003b8 <fsm_red_manual>:
#include "global.h"
#include "fsm_manual.h"
#include "timer.h"
#include "uart.h"

void fsm_red_manual() {
 80003b8:	b580      	push	{r7, lr}
 80003ba:	af00      	add	r7, sp, #0
	switch(status) {
 80003bc:	4b1c      	ldr	r3, [pc, #112]	; (8000430 <fsm_red_manual+0x78>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	2b07      	cmp	r3, #7
 80003c2:	d023      	beq.n	800040c <fsm_red_manual+0x54>
 80003c4:	2b07      	cmp	r3, #7
 80003c6:	dc2c      	bgt.n	8000422 <fsm_red_manual+0x6a>
 80003c8:	2b05      	cmp	r3, #5
 80003ca:	d002      	beq.n	80003d2 <fsm_red_manual+0x1a>
 80003cc:	2b06      	cmp	r3, #6
 80003ce:	d012      	beq.n	80003f6 <fsm_red_manual+0x3e>
				toggle_red();
				setTimer1(500);
			}
			break;
		default:
			break;
 80003d0:	e027      	b.n	8000422 <fsm_red_manual+0x6a>
			led_config();
 80003d2:	f000 f8bd 	bl	8000550 <led_config>
			setTimer1(500);
 80003d6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80003da:	f001 f929 	bl	8001630 <setTimer1>
			HAL_UART_Transmit(&huart2, "!_____MODE2_____#\n\r", 20, 50);
 80003de:	2332      	movs	r3, #50	; 0x32
 80003e0:	2214      	movs	r2, #20
 80003e2:	4914      	ldr	r1, [pc, #80]	; (8000434 <fsm_red_manual+0x7c>)
 80003e4:	4814      	ldr	r0, [pc, #80]	; (8000438 <fsm_red_manual+0x80>)
 80003e6:	f003 fa8f 	bl	8003908 <HAL_UART_Transmit>
			disp_t_red_uart();
 80003ea:	f001 fa1b 	bl	8001824 <disp_t_red_uart>
			status = AUTO_RED;
 80003ee:	4b10      	ldr	r3, [pc, #64]	; (8000430 <fsm_red_manual+0x78>)
 80003f0:	2206      	movs	r2, #6
 80003f2:	601a      	str	r2, [r3, #0]
			break;
 80003f4:	e01a      	b.n	800042c <fsm_red_manual+0x74>
			if (timer1_flag == 1) {
 80003f6:	4b11      	ldr	r3, [pc, #68]	; (800043c <fsm_red_manual+0x84>)
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	2b01      	cmp	r3, #1
 80003fc:	d113      	bne.n	8000426 <fsm_red_manual+0x6e>
				toggle_red();
 80003fe:	f000 f9f9 	bl	80007f4 <toggle_red>
				setTimer1(500);
 8000402:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000406:	f001 f913 	bl	8001630 <setTimer1>
			break;
 800040a:	e00c      	b.n	8000426 <fsm_red_manual+0x6e>
			if (timer1_flag == 1) {
 800040c:	4b0b      	ldr	r3, [pc, #44]	; (800043c <fsm_red_manual+0x84>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	2b01      	cmp	r3, #1
 8000412:	d10a      	bne.n	800042a <fsm_red_manual+0x72>
				toggle_red();
 8000414:	f000 f9ee 	bl	80007f4 <toggle_red>
				setTimer1(500);
 8000418:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800041c:	f001 f908 	bl	8001630 <setTimer1>
			break;
 8000420:	e003      	b.n	800042a <fsm_red_manual+0x72>
			break;
 8000422:	bf00      	nop
 8000424:	e002      	b.n	800042c <fsm_red_manual+0x74>
			break;
 8000426:	bf00      	nop
 8000428:	e000      	b.n	800042c <fsm_red_manual+0x74>
			break;
 800042a:	bf00      	nop
	}
}
 800042c:	bf00      	nop
 800042e:	bd80      	pop	{r7, pc}
 8000430:	2000000c 	.word	0x2000000c
 8000434:	08004e40 	.word	0x08004e40
 8000438:	20000170 	.word	0x20000170
 800043c:	200001dc 	.word	0x200001dc

08000440 <fsm_amber_manual>:

void fsm_amber_manual() {
 8000440:	b580      	push	{r7, lr}
 8000442:	af00      	add	r7, sp, #0
	switch(status) {
 8000444:	4b1c      	ldr	r3, [pc, #112]	; (80004b8 <fsm_amber_manual+0x78>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	2b0a      	cmp	r3, #10
 800044a:	d023      	beq.n	8000494 <fsm_amber_manual+0x54>
 800044c:	2b0a      	cmp	r3, #10
 800044e:	dc2c      	bgt.n	80004aa <fsm_amber_manual+0x6a>
 8000450:	2b08      	cmp	r3, #8
 8000452:	d002      	beq.n	800045a <fsm_amber_manual+0x1a>
 8000454:	2b09      	cmp	r3, #9
 8000456:	d012      	beq.n	800047e <fsm_amber_manual+0x3e>
				toggle_amber();
				setTimer1(500);
			}
			break;
		default:
			break;
 8000458:	e027      	b.n	80004aa <fsm_amber_manual+0x6a>
			led_config();
 800045a:	f000 f879 	bl	8000550 <led_config>
			setTimer1(500);
 800045e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000462:	f001 f8e5 	bl	8001630 <setTimer1>
			HAL_UART_Transmit(&huart2, "!_____MODE3_____#\n\r", 20, 50);
 8000466:	2332      	movs	r3, #50	; 0x32
 8000468:	2214      	movs	r2, #20
 800046a:	4914      	ldr	r1, [pc, #80]	; (80004bc <fsm_amber_manual+0x7c>)
 800046c:	4814      	ldr	r0, [pc, #80]	; (80004c0 <fsm_amber_manual+0x80>)
 800046e:	f003 fa4b 	bl	8003908 <HAL_UART_Transmit>
			disp_t_amber_uart();
 8000472:	f001 f9fb 	bl	800186c <disp_t_amber_uart>
			status = AUTO_AMBER;
 8000476:	4b10      	ldr	r3, [pc, #64]	; (80004b8 <fsm_amber_manual+0x78>)
 8000478:	2209      	movs	r2, #9
 800047a:	601a      	str	r2, [r3, #0]
			break;
 800047c:	e01a      	b.n	80004b4 <fsm_amber_manual+0x74>
			if (timer1_flag == 1) {
 800047e:	4b11      	ldr	r3, [pc, #68]	; (80004c4 <fsm_amber_manual+0x84>)
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	2b01      	cmp	r3, #1
 8000484:	d113      	bne.n	80004ae <fsm_amber_manual+0x6e>
				toggle_amber();
 8000486:	f000 f9cf 	bl	8000828 <toggle_amber>
				setTimer1(500);
 800048a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800048e:	f001 f8cf 	bl	8001630 <setTimer1>
			break;
 8000492:	e00c      	b.n	80004ae <fsm_amber_manual+0x6e>
			if (timer1_flag == 1) {
 8000494:	4b0b      	ldr	r3, [pc, #44]	; (80004c4 <fsm_amber_manual+0x84>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	2b01      	cmp	r3, #1
 800049a:	d10a      	bne.n	80004b2 <fsm_amber_manual+0x72>
				toggle_amber();
 800049c:	f000 f9c4 	bl	8000828 <toggle_amber>
				setTimer1(500);
 80004a0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004a4:	f001 f8c4 	bl	8001630 <setTimer1>
			break;
 80004a8:	e003      	b.n	80004b2 <fsm_amber_manual+0x72>
			break;
 80004aa:	bf00      	nop
 80004ac:	e002      	b.n	80004b4 <fsm_amber_manual+0x74>
			break;
 80004ae:	bf00      	nop
 80004b0:	e000      	b.n	80004b4 <fsm_amber_manual+0x74>
			break;
 80004b2:	bf00      	nop
	}
}
 80004b4:	bf00      	nop
 80004b6:	bd80      	pop	{r7, pc}
 80004b8:	2000000c 	.word	0x2000000c
 80004bc:	08004e54 	.word	0x08004e54
 80004c0:	20000170 	.word	0x20000170
 80004c4:	200001dc 	.word	0x200001dc

080004c8 <fsm_green_manual>:

void fsm_green_manual() {
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
	switch(status) {
 80004cc:	4b1c      	ldr	r3, [pc, #112]	; (8000540 <fsm_green_manual+0x78>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	2b0d      	cmp	r3, #13
 80004d2:	d023      	beq.n	800051c <fsm_green_manual+0x54>
 80004d4:	2b0d      	cmp	r3, #13
 80004d6:	dc2c      	bgt.n	8000532 <fsm_green_manual+0x6a>
 80004d8:	2b0b      	cmp	r3, #11
 80004da:	d002      	beq.n	80004e2 <fsm_green_manual+0x1a>
 80004dc:	2b0c      	cmp	r3, #12
 80004de:	d012      	beq.n	8000506 <fsm_green_manual+0x3e>
				toggle_green();
				setTimer1(500);
			}
			break;
		default:
			break;
 80004e0:	e027      	b.n	8000532 <fsm_green_manual+0x6a>
			led_config();
 80004e2:	f000 f835 	bl	8000550 <led_config>
			setTimer1(500);
 80004e6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004ea:	f001 f8a1 	bl	8001630 <setTimer1>
			HAL_UART_Transmit(&huart2, "!_____MODE4_____#\n\r", 20, 50);
 80004ee:	2332      	movs	r3, #50	; 0x32
 80004f0:	2214      	movs	r2, #20
 80004f2:	4914      	ldr	r1, [pc, #80]	; (8000544 <fsm_green_manual+0x7c>)
 80004f4:	4814      	ldr	r0, [pc, #80]	; (8000548 <fsm_green_manual+0x80>)
 80004f6:	f003 fa07 	bl	8003908 <HAL_UART_Transmit>
			disp_t_green_uart();
 80004fa:	f001 f9db 	bl	80018b4 <disp_t_green_uart>
			status = AUTO_GREEN;
 80004fe:	4b10      	ldr	r3, [pc, #64]	; (8000540 <fsm_green_manual+0x78>)
 8000500:	220c      	movs	r2, #12
 8000502:	601a      	str	r2, [r3, #0]
			break;
 8000504:	e01a      	b.n	800053c <fsm_green_manual+0x74>
			if (timer1_flag == 1) {
 8000506:	4b11      	ldr	r3, [pc, #68]	; (800054c <fsm_green_manual+0x84>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	2b01      	cmp	r3, #1
 800050c:	d113      	bne.n	8000536 <fsm_green_manual+0x6e>
				toggle_green();
 800050e:	f000 f9a5 	bl	800085c <toggle_green>
				setTimer1(500);
 8000512:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000516:	f001 f88b 	bl	8001630 <setTimer1>
			break;
 800051a:	e00c      	b.n	8000536 <fsm_green_manual+0x6e>
			if (timer1_flag == 1) {
 800051c:	4b0b      	ldr	r3, [pc, #44]	; (800054c <fsm_green_manual+0x84>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	2b01      	cmp	r3, #1
 8000522:	d10a      	bne.n	800053a <fsm_green_manual+0x72>
				toggle_green();
 8000524:	f000 f99a 	bl	800085c <toggle_green>
				setTimer1(500);
 8000528:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800052c:	f001 f880 	bl	8001630 <setTimer1>
			break;
 8000530:	e003      	b.n	800053a <fsm_green_manual+0x72>
			break;
 8000532:	bf00      	nop
 8000534:	e002      	b.n	800053c <fsm_green_manual+0x74>
			break;
 8000536:	bf00      	nop
 8000538:	e000      	b.n	800053c <fsm_green_manual+0x74>
			break;
 800053a:	bf00      	nop
	}
}
 800053c:	bf00      	nop
 800053e:	bd80      	pop	{r7, pc}
 8000540:	2000000c 	.word	0x2000000c
 8000544:	08004e68 	.word	0x08004e68
 8000548:	20000170 	.word	0x20000170
 800054c:	200001dc 	.word	0x200001dc

08000550 <led_config>:
void on_red_pedestrian();
void on_green_pedestrian();

void set_buzzer();

void led_config() {
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0
	pedestrian_buzzer_config();
 8000554:	f000 f9d8 	bl	8000908 <pedestrian_buzzer_config>
	pedestrian_led_config();
 8000558:	f000 f856 	bl	8000608 <pedestrian_led_config>
	switch (status) {
 800055c:	4b28      	ldr	r3, [pc, #160]	; (8000600 <led_config+0xb0>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	2b0b      	cmp	r3, #11
 8000562:	d84a      	bhi.n	80005fa <led_config+0xaa>
 8000564:	a201      	add	r2, pc, #4	; (adr r2, 800056c <led_config+0x1c>)
 8000566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800056a:	bf00      	nop
 800056c:	0800059d 	.word	0x0800059d
 8000570:	080005ab 	.word	0x080005ab
 8000574:	080005b5 	.word	0x080005b5
 8000578:	080005bb 	.word	0x080005bb
 800057c:	080005c5 	.word	0x080005c5
 8000580:	080005cb 	.word	0x080005cb
 8000584:	080005fb 	.word	0x080005fb
 8000588:	080005fb 	.word	0x080005fb
 800058c:	080005db 	.word	0x080005db
 8000590:	080005fb 	.word	0x080005fb
 8000594:	080005fb 	.word	0x080005fb
 8000598:	080005eb 	.word	0x080005eb
		case MODE1:
			off_all_leds_road_1();
 800059c:	f000 f89a 	bl	80006d4 <off_all_leds_road_1>
			off_all_leds_road_2();
 80005a0:	f000 f8ac 	bl	80006fc <off_all_leds_road_2>
			off_pedestrian();
 80005a4:	f000 f974 	bl	8000890 <off_pedestrian>
			break;
 80005a8:	e028      	b.n	80005fc <led_config+0xac>
		case RED_GREEN:
			on_red_road_1();
 80005aa:	f000 f8b7 	bl	800071c <on_red_road_1>
			on_green_road_2();
 80005ae:	f000 f911 	bl	80007d4 <on_green_road_2>

			break;
 80005b2:	e023      	b.n	80005fc <led_config+0xac>
		case RED_AMBER:
			on_amber_road_2();
 80005b4:	f000 f8ea 	bl	800078c <on_amber_road_2>
			break;
 80005b8:	e020      	b.n	80005fc <led_config+0xac>
		case GREEN_RED:
			on_green_road_1();
 80005ba:	f000 f8f7 	bl	80007ac <on_green_road_1>
			on_red_road_2();
 80005be:	f000 f8c1 	bl	8000744 <on_red_road_2>
			break;
 80005c2:	e01b      	b.n	80005fc <led_config+0xac>
		case AMBER_RED:
			on_amber_road_1();
 80005c4:	f000 f8ce 	bl	8000764 <on_amber_road_1>
			break;
 80005c8:	e018      	b.n	80005fc <led_config+0xac>
		case MODE2:
			on_red_road_1();
 80005ca:	f000 f8a7 	bl	800071c <on_red_road_1>
			on_red_road_2();
 80005ce:	f000 f8b9 	bl	8000744 <on_red_road_2>
			toggle_flag = 0;
 80005d2:	4b0c      	ldr	r3, [pc, #48]	; (8000604 <led_config+0xb4>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
			break;
 80005d8:	e010      	b.n	80005fc <led_config+0xac>
		case MODE3:
			on_amber_road_1();
 80005da:	f000 f8c3 	bl	8000764 <on_amber_road_1>
			on_amber_road_2();
 80005de:	f000 f8d5 	bl	800078c <on_amber_road_2>
			toggle_flag = 0;
 80005e2:	4b08      	ldr	r3, [pc, #32]	; (8000604 <led_config+0xb4>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
			break;
 80005e8:	e008      	b.n	80005fc <led_config+0xac>
		case MODE4:
			on_green_road_1();
 80005ea:	f000 f8df 	bl	80007ac <on_green_road_1>
			on_green_road_2();
 80005ee:	f000 f8f1 	bl	80007d4 <on_green_road_2>
			toggle_flag = 0;
 80005f2:	4b04      	ldr	r3, [pc, #16]	; (8000604 <led_config+0xb4>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]
			break;
 80005f8:	e000      	b.n	80005fc <led_config+0xac>
		default:
			break;
 80005fa:	bf00      	nop
	}
}
 80005fc:	bf00      	nop
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	2000000c 	.word	0x2000000c
 8000604:	200000c0 	.word	0x200000c0

08000608 <pedestrian_led_config>:
void pedestrian_led_config(){
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
	switch (status) {
 800060c:	4b2f      	ldr	r3, [pc, #188]	; (80006cc <pedestrian_led_config+0xc4>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	2b0b      	cmp	r3, #11
 8000612:	d858      	bhi.n	80006c6 <pedestrian_led_config+0xbe>
 8000614:	a201      	add	r2, pc, #4	; (adr r2, 800061c <pedestrian_led_config+0x14>)
 8000616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800061a:	bf00      	nop
 800061c:	0800064d 	.word	0x0800064d
 8000620:	08000653 	.word	0x08000653
 8000624:	08000667 	.word	0x08000667
 8000628:	0800067b 	.word	0x0800067b
 800062c:	0800068f 	.word	0x0800068f
 8000630:	080006a3 	.word	0x080006a3
 8000634:	080006c7 	.word	0x080006c7
 8000638:	080006c7 	.word	0x080006c7
 800063c:	080006af 	.word	0x080006af
 8000640:	080006c7 	.word	0x080006c7
 8000644:	080006c7 	.word	0x080006c7
 8000648:	080006bb 	.word	0x080006bb
			case MODE1:
				off_pedestrian();
 800064c:	f000 f920 	bl	8000890 <off_pedestrian>
				break;
 8000650:	e03a      	b.n	80006c8 <pedestrian_led_config+0xc0>
			case RED_GREEN:
				if(curr_ped_status==PED_ON){
 8000652:	4b1f      	ldr	r3, [pc, #124]	; (80006d0 <pedestrian_led_config+0xc8>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	2b00      	cmp	r3, #0
 8000658:	d102      	bne.n	8000660 <pedestrian_led_config+0x58>
					on_green_pedestrian();
 800065a:	f000 f941 	bl	80008e0 <on_green_pedestrian>
					break;
 800065e:	e033      	b.n	80006c8 <pedestrian_led_config+0xc0>
				}
				off_pedestrian();
 8000660:	f000 f916 	bl	8000890 <off_pedestrian>
				break;
 8000664:	e030      	b.n	80006c8 <pedestrian_led_config+0xc0>
			case RED_AMBER:
				if(curr_ped_status==PED_ON){
 8000666:	4b1a      	ldr	r3, [pc, #104]	; (80006d0 <pedestrian_led_config+0xc8>)
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	2b00      	cmp	r3, #0
 800066c:	d102      	bne.n	8000674 <pedestrian_led_config+0x6c>
					on_green_pedestrian();
 800066e:	f000 f937 	bl	80008e0 <on_green_pedestrian>
					break;
 8000672:	e029      	b.n	80006c8 <pedestrian_led_config+0xc0>
				}
				off_pedestrian();
 8000674:	f000 f90c 	bl	8000890 <off_pedestrian>
				break;
 8000678:	e026      	b.n	80006c8 <pedestrian_led_config+0xc0>
			case GREEN_RED:
				if(curr_ped_status==PED_ON){
 800067a:	4b15      	ldr	r3, [pc, #84]	; (80006d0 <pedestrian_led_config+0xc8>)
 800067c:	781b      	ldrb	r3, [r3, #0]
 800067e:	2b00      	cmp	r3, #0
 8000680:	d102      	bne.n	8000688 <pedestrian_led_config+0x80>
					on_red_pedestrian();
 8000682:	f000 f919 	bl	80008b8 <on_red_pedestrian>
					break;
 8000686:	e01f      	b.n	80006c8 <pedestrian_led_config+0xc0>
				}
				off_pedestrian();
 8000688:	f000 f902 	bl	8000890 <off_pedestrian>
				break;
 800068c:	e01c      	b.n	80006c8 <pedestrian_led_config+0xc0>
			case AMBER_RED:
				if(curr_ped_status==PED_ON){
 800068e:	4b10      	ldr	r3, [pc, #64]	; (80006d0 <pedestrian_led_config+0xc8>)
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	2b00      	cmp	r3, #0
 8000694:	d102      	bne.n	800069c <pedestrian_led_config+0x94>
					on_red_pedestrian();
 8000696:	f000 f90f 	bl	80008b8 <on_red_pedestrian>
					break;
 800069a:	e015      	b.n	80006c8 <pedestrian_led_config+0xc0>
				}
				off_pedestrian();
 800069c:	f000 f8f8 	bl	8000890 <off_pedestrian>
				break;
 80006a0:	e012      	b.n	80006c8 <pedestrian_led_config+0xc0>
			case MODE2:
				curr_ped_status=PED_OFF;
 80006a2:	4b0b      	ldr	r3, [pc, #44]	; (80006d0 <pedestrian_led_config+0xc8>)
 80006a4:	2201      	movs	r2, #1
 80006a6:	701a      	strb	r2, [r3, #0]
				off_pedestrian();
 80006a8:	f000 f8f2 	bl	8000890 <off_pedestrian>
				break;
 80006ac:	e00c      	b.n	80006c8 <pedestrian_led_config+0xc0>
			case MODE3:
				curr_ped_status=PED_OFF;
 80006ae:	4b08      	ldr	r3, [pc, #32]	; (80006d0 <pedestrian_led_config+0xc8>)
 80006b0:	2201      	movs	r2, #1
 80006b2:	701a      	strb	r2, [r3, #0]
				off_pedestrian();
 80006b4:	f000 f8ec 	bl	8000890 <off_pedestrian>
				break;
 80006b8:	e006      	b.n	80006c8 <pedestrian_led_config+0xc0>
			case MODE4:
				curr_ped_status=PED_OFF;
 80006ba:	4b05      	ldr	r3, [pc, #20]	; (80006d0 <pedestrian_led_config+0xc8>)
 80006bc:	2201      	movs	r2, #1
 80006be:	701a      	strb	r2, [r3, #0]
				off_pedestrian();
 80006c0:	f000 f8e6 	bl	8000890 <off_pedestrian>
				break;
 80006c4:	e000      	b.n	80006c8 <pedestrian_led_config+0xc0>
			default:
				break;
 80006c6:	bf00      	nop
		}
}
 80006c8:	bf00      	nop
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	2000000c 	.word	0x2000000c
 80006d0:	20000010 	.word	0x20000010

080006d4 <off_all_leds_road_1>:
void off_all_leds_road_1() {
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (D2_LED1_GPIO_Port, D2_LED1_Pin, 0);
 80006d8:	2200      	movs	r2, #0
 80006da:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006de:	4805      	ldr	r0, [pc, #20]	; (80006f4 <off_all_leds_road_1+0x20>)
 80006e0:	f001 fd33 	bl	800214a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (D3_LED1_GPIO_Port, D3_LED1_Pin, 0);
 80006e4:	2200      	movs	r2, #0
 80006e6:	2108      	movs	r1, #8
 80006e8:	4803      	ldr	r0, [pc, #12]	; (80006f8 <off_all_leds_road_1+0x24>)
 80006ea:	f001 fd2e 	bl	800214a <HAL_GPIO_WritePin>
}
 80006ee:	bf00      	nop
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	40010800 	.word	0x40010800
 80006f8:	40010c00 	.word	0x40010c00

080006fc <off_all_leds_road_2>:

void off_all_leds_road_2() {
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (D4_LED2_GPIO_Port, D4_LED2_Pin, 0);
 8000700:	2200      	movs	r2, #0
 8000702:	2120      	movs	r1, #32
 8000704:	4804      	ldr	r0, [pc, #16]	; (8000718 <off_all_leds_road_2+0x1c>)
 8000706:	f001 fd20 	bl	800214a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (D5_LED2_GPIO_Port, D5_LED2_Pin, 0);
 800070a:	2200      	movs	r2, #0
 800070c:	2110      	movs	r1, #16
 800070e:	4802      	ldr	r0, [pc, #8]	; (8000718 <off_all_leds_road_2+0x1c>)
 8000710:	f001 fd1b 	bl	800214a <HAL_GPIO_WritePin>
}
 8000714:	bf00      	nop
 8000716:	bd80      	pop	{r7, pc}
 8000718:	40010c00 	.word	0x40010c00

0800071c <on_red_road_1>:

void on_red_road_1() {
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (D2_LED1_GPIO_Port, D2_LED1_Pin, 1);
 8000720:	2201      	movs	r2, #1
 8000722:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000726:	4805      	ldr	r0, [pc, #20]	; (800073c <on_red_road_1+0x20>)
 8000728:	f001 fd0f 	bl	800214a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (D3_LED1_GPIO_Port, D3_LED1_Pin, 0);
 800072c:	2200      	movs	r2, #0
 800072e:	2108      	movs	r1, #8
 8000730:	4803      	ldr	r0, [pc, #12]	; (8000740 <on_red_road_1+0x24>)
 8000732:	f001 fd0a 	bl	800214a <HAL_GPIO_WritePin>
}
 8000736:	bf00      	nop
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	40010800 	.word	0x40010800
 8000740:	40010c00 	.word	0x40010c00

08000744 <on_red_road_2>:

void on_red_road_2() {
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (D4_LED2_GPIO_Port, D4_LED2_Pin, 1);
 8000748:	2201      	movs	r2, #1
 800074a:	2120      	movs	r1, #32
 800074c:	4804      	ldr	r0, [pc, #16]	; (8000760 <on_red_road_2+0x1c>)
 800074e:	f001 fcfc 	bl	800214a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (D5_LED2_GPIO_Port, D5_LED2_Pin, 0);
 8000752:	2200      	movs	r2, #0
 8000754:	2110      	movs	r1, #16
 8000756:	4802      	ldr	r0, [pc, #8]	; (8000760 <on_red_road_2+0x1c>)
 8000758:	f001 fcf7 	bl	800214a <HAL_GPIO_WritePin>
}
 800075c:	bf00      	nop
 800075e:	bd80      	pop	{r7, pc}
 8000760:	40010c00 	.word	0x40010c00

08000764 <on_amber_road_1>:

void on_amber_road_1() {
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (D2_LED1_GPIO_Port, D2_LED1_Pin, 1);
 8000768:	2201      	movs	r2, #1
 800076a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800076e:	4805      	ldr	r0, [pc, #20]	; (8000784 <on_amber_road_1+0x20>)
 8000770:	f001 fceb 	bl	800214a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (D3_LED1_GPIO_Port, D3_LED1_Pin, 1);
 8000774:	2201      	movs	r2, #1
 8000776:	2108      	movs	r1, #8
 8000778:	4803      	ldr	r0, [pc, #12]	; (8000788 <on_amber_road_1+0x24>)
 800077a:	f001 fce6 	bl	800214a <HAL_GPIO_WritePin>
}
 800077e:	bf00      	nop
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	40010800 	.word	0x40010800
 8000788:	40010c00 	.word	0x40010c00

0800078c <on_amber_road_2>:

void on_amber_road_2() {
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (D4_LED2_GPIO_Port, D4_LED2_Pin, 1);
 8000790:	2201      	movs	r2, #1
 8000792:	2120      	movs	r1, #32
 8000794:	4804      	ldr	r0, [pc, #16]	; (80007a8 <on_amber_road_2+0x1c>)
 8000796:	f001 fcd8 	bl	800214a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (D5_LED2_GPIO_Port, D5_LED2_Pin, 1);
 800079a:	2201      	movs	r2, #1
 800079c:	2110      	movs	r1, #16
 800079e:	4802      	ldr	r0, [pc, #8]	; (80007a8 <on_amber_road_2+0x1c>)
 80007a0:	f001 fcd3 	bl	800214a <HAL_GPIO_WritePin>
}
 80007a4:	bf00      	nop
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	40010c00 	.word	0x40010c00

080007ac <on_green_road_1>:

void on_green_road_1() {
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (D2_LED1_GPIO_Port, D2_LED1_Pin, 0);
 80007b0:	2200      	movs	r2, #0
 80007b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007b6:	4805      	ldr	r0, [pc, #20]	; (80007cc <on_green_road_1+0x20>)
 80007b8:	f001 fcc7 	bl	800214a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (D3_LED1_GPIO_Port, D3_LED1_Pin, 1);
 80007bc:	2201      	movs	r2, #1
 80007be:	2108      	movs	r1, #8
 80007c0:	4803      	ldr	r0, [pc, #12]	; (80007d0 <on_green_road_1+0x24>)
 80007c2:	f001 fcc2 	bl	800214a <HAL_GPIO_WritePin>
}
 80007c6:	bf00      	nop
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	40010800 	.word	0x40010800
 80007d0:	40010c00 	.word	0x40010c00

080007d4 <on_green_road_2>:

void on_green_road_2() {
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (D4_LED2_GPIO_Port, D4_LED2_Pin, 0);
 80007d8:	2200      	movs	r2, #0
 80007da:	2120      	movs	r1, #32
 80007dc:	4804      	ldr	r0, [pc, #16]	; (80007f0 <on_green_road_2+0x1c>)
 80007de:	f001 fcb4 	bl	800214a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (D5_LED2_GPIO_Port, D5_LED2_Pin, 1);
 80007e2:	2201      	movs	r2, #1
 80007e4:	2110      	movs	r1, #16
 80007e6:	4802      	ldr	r0, [pc, #8]	; (80007f0 <on_green_road_2+0x1c>)
 80007e8:	f001 fcaf 	bl	800214a <HAL_GPIO_WritePin>
}
 80007ec:	bf00      	nop
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	40010c00 	.word	0x40010c00

080007f4 <toggle_red>:


void toggle_red() {
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
	if (toggle_flag == 0) {
 80007f8:	4b0a      	ldr	r3, [pc, #40]	; (8000824 <toggle_red+0x30>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d107      	bne.n	8000810 <toggle_red+0x1c>
		on_red_road_1();
 8000800:	f7ff ff8c 	bl	800071c <on_red_road_1>
		on_red_road_2();
 8000804:	f7ff ff9e 	bl	8000744 <on_red_road_2>
		toggle_flag = 1;
 8000808:	4b06      	ldr	r3, [pc, #24]	; (8000824 <toggle_red+0x30>)
 800080a:	2201      	movs	r2, #1
 800080c:	601a      	str	r2, [r3, #0]
	} else {
		off_all_leds_road_1();
		off_all_leds_road_2();
		toggle_flag = 0;
	}
}
 800080e:	e006      	b.n	800081e <toggle_red+0x2a>
		off_all_leds_road_1();
 8000810:	f7ff ff60 	bl	80006d4 <off_all_leds_road_1>
		off_all_leds_road_2();
 8000814:	f7ff ff72 	bl	80006fc <off_all_leds_road_2>
		toggle_flag = 0;
 8000818:	4b02      	ldr	r3, [pc, #8]	; (8000824 <toggle_red+0x30>)
 800081a:	2200      	movs	r2, #0
 800081c:	601a      	str	r2, [r3, #0]
}
 800081e:	bf00      	nop
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	200000c0 	.word	0x200000c0

08000828 <toggle_amber>:

void toggle_amber() {
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
	if (toggle_flag == 0) {
 800082c:	4b0a      	ldr	r3, [pc, #40]	; (8000858 <toggle_amber+0x30>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d107      	bne.n	8000844 <toggle_amber+0x1c>
		on_amber_road_1();
 8000834:	f7ff ff96 	bl	8000764 <on_amber_road_1>
		on_amber_road_2();
 8000838:	f7ff ffa8 	bl	800078c <on_amber_road_2>
		toggle_flag = 1;
 800083c:	4b06      	ldr	r3, [pc, #24]	; (8000858 <toggle_amber+0x30>)
 800083e:	2201      	movs	r2, #1
 8000840:	601a      	str	r2, [r3, #0]
	} else {
		off_all_leds_road_1();
		off_all_leds_road_2();
		toggle_flag = 0;
	}
}
 8000842:	e006      	b.n	8000852 <toggle_amber+0x2a>
		off_all_leds_road_1();
 8000844:	f7ff ff46 	bl	80006d4 <off_all_leds_road_1>
		off_all_leds_road_2();
 8000848:	f7ff ff58 	bl	80006fc <off_all_leds_road_2>
		toggle_flag = 0;
 800084c:	4b02      	ldr	r3, [pc, #8]	; (8000858 <toggle_amber+0x30>)
 800084e:	2200      	movs	r2, #0
 8000850:	601a      	str	r2, [r3, #0]
}
 8000852:	bf00      	nop
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	200000c0 	.word	0x200000c0

0800085c <toggle_green>:

void toggle_green() {
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
	if (toggle_flag == 0) {
 8000860:	4b0a      	ldr	r3, [pc, #40]	; (800088c <toggle_green+0x30>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d107      	bne.n	8000878 <toggle_green+0x1c>
		on_green_road_1();
 8000868:	f7ff ffa0 	bl	80007ac <on_green_road_1>
		on_green_road_2();
 800086c:	f7ff ffb2 	bl	80007d4 <on_green_road_2>
		toggle_flag = 1;
 8000870:	4b06      	ldr	r3, [pc, #24]	; (800088c <toggle_green+0x30>)
 8000872:	2201      	movs	r2, #1
 8000874:	601a      	str	r2, [r3, #0]
	} else {
		off_all_leds_road_1();
		off_all_leds_road_2();
		toggle_flag = 0;
	}
}
 8000876:	e006      	b.n	8000886 <toggle_green+0x2a>
		off_all_leds_road_1();
 8000878:	f7ff ff2c 	bl	80006d4 <off_all_leds_road_1>
		off_all_leds_road_2();
 800087c:	f7ff ff3e 	bl	80006fc <off_all_leds_road_2>
		toggle_flag = 0;
 8000880:	4b02      	ldr	r3, [pc, #8]	; (800088c <toggle_green+0x30>)
 8000882:	2200      	movs	r2, #0
 8000884:	601a      	str	r2, [r3, #0]
}
 8000886:	bf00      	nop
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	200000c0 	.word	0x200000c0

08000890 <off_pedestrian>:

void off_pedestrian(){
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (D6_PedLED_GPIO_Port, D6_PedLED_Pin, 0);
 8000894:	2200      	movs	r2, #0
 8000896:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800089a:	4805      	ldr	r0, [pc, #20]	; (80008b0 <off_pedestrian+0x20>)
 800089c:	f001 fc55 	bl	800214a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (D7_PedLED_GPIO_Port, D7_PedLED_Pin, 0);
 80008a0:	2200      	movs	r2, #0
 80008a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008a6:	4803      	ldr	r0, [pc, #12]	; (80008b4 <off_pedestrian+0x24>)
 80008a8:	f001 fc4f 	bl	800214a <HAL_GPIO_WritePin>
}
 80008ac:	bf00      	nop
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	40010c00 	.word	0x40010c00
 80008b4:	40010800 	.word	0x40010800

080008b8 <on_red_pedestrian>:
void on_red_pedestrian(){
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (D6_PedLED_GPIO_Port, D6_PedLED_Pin, 1);
 80008bc:	2201      	movs	r2, #1
 80008be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008c2:	4805      	ldr	r0, [pc, #20]	; (80008d8 <on_red_pedestrian+0x20>)
 80008c4:	f001 fc41 	bl	800214a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (D7_PedLED_GPIO_Port, D7_PedLED_Pin, 0);
 80008c8:	2200      	movs	r2, #0
 80008ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008ce:	4803      	ldr	r0, [pc, #12]	; (80008dc <on_red_pedestrian+0x24>)
 80008d0:	f001 fc3b 	bl	800214a <HAL_GPIO_WritePin>
}
 80008d4:	bf00      	nop
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	40010c00 	.word	0x40010c00
 80008dc:	40010800 	.word	0x40010800

080008e0 <on_green_pedestrian>:
void on_green_pedestrian(){
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (D6_PedLED_GPIO_Port, D6_PedLED_Pin, 0);
 80008e4:	2200      	movs	r2, #0
 80008e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008ea:	4805      	ldr	r0, [pc, #20]	; (8000900 <on_green_pedestrian+0x20>)
 80008ec:	f001 fc2d 	bl	800214a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (D7_PedLED_GPIO_Port, D7_PedLED_Pin, 1);
 80008f0:	2201      	movs	r2, #1
 80008f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008f6:	4803      	ldr	r0, [pc, #12]	; (8000904 <on_green_pedestrian+0x24>)
 80008f8:	f001 fc27 	bl	800214a <HAL_GPIO_WritePin>
}
 80008fc:	bf00      	nop
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	40010c00 	.word	0x40010c00
 8000904:	40010800 	.word	0x40010800

08000908 <pedestrian_buzzer_config>:

void pedestrian_buzzer_config(){
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
	switch (status) {
 800090c:	4b34      	ldr	r3, [pc, #208]	; (80009e0 <pedestrian_buzzer_config+0xd8>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	2b0b      	cmp	r3, #11
 8000912:	d862      	bhi.n	80009da <pedestrian_buzzer_config+0xd2>
 8000914:	a201      	add	r2, pc, #4	; (adr r2, 800091c <pedestrian_buzzer_config+0x14>)
 8000916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800091a:	bf00      	nop
 800091c:	0800094d 	.word	0x0800094d
 8000920:	08000955 	.word	0x08000955
 8000924:	0800096b 	.word	0x0800096b
 8000928:	08000981 	.word	0x08000981
 800092c:	08000999 	.word	0x08000999
 8000930:	080009b1 	.word	0x080009b1
 8000934:	080009db 	.word	0x080009db
 8000938:	080009db 	.word	0x080009db
 800093c:	080009bf 	.word	0x080009bf
 8000940:	080009db 	.word	0x080009db
 8000944:	080009db 	.word	0x080009db
 8000948:	080009cd 	.word	0x080009cd
			case MODE1:
				buzzer(0);
 800094c:	2000      	movs	r0, #0
 800094e:	f000 fb0f 	bl	8000f70 <buzzer>
				break;
 8000952:	e043      	b.n	80009dc <pedestrian_buzzer_config+0xd4>
			case RED_GREEN:
				if(curr_ped_status==PED_ON){
 8000954:	4b23      	ldr	r3, [pc, #140]	; (80009e4 <pedestrian_buzzer_config+0xdc>)
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	2b00      	cmp	r3, #0
 800095a:	d102      	bne.n	8000962 <pedestrian_buzzer_config+0x5a>
					set_buzzer();
 800095c:	f000 f844 	bl	80009e8 <set_buzzer>
					break;
 8000960:	e03c      	b.n	80009dc <pedestrian_buzzer_config+0xd4>
				}
				buzzer(0);
 8000962:	2000      	movs	r0, #0
 8000964:	f000 fb04 	bl	8000f70 <buzzer>
				break;
 8000968:	e038      	b.n	80009dc <pedestrian_buzzer_config+0xd4>
			case RED_AMBER:
				if(curr_ped_status==PED_ON){
 800096a:	4b1e      	ldr	r3, [pc, #120]	; (80009e4 <pedestrian_buzzer_config+0xdc>)
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	2b00      	cmp	r3, #0
 8000970:	d102      	bne.n	8000978 <pedestrian_buzzer_config+0x70>
					set_buzzer();
 8000972:	f000 f839 	bl	80009e8 <set_buzzer>
					break;
 8000976:	e031      	b.n	80009dc <pedestrian_buzzer_config+0xd4>
				}
				buzzer(0);
 8000978:	2000      	movs	r0, #0
 800097a:	f000 faf9 	bl	8000f70 <buzzer>
				break;
 800097e:	e02d      	b.n	80009dc <pedestrian_buzzer_config+0xd4>
			case GREEN_RED:
				if(curr_ped_status==PED_ON){
 8000980:	4b18      	ldr	r3, [pc, #96]	; (80009e4 <pedestrian_buzzer_config+0xdc>)
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	2b00      	cmp	r3, #0
 8000986:	d103      	bne.n	8000990 <pedestrian_buzzer_config+0x88>
					buzzer(0);
 8000988:	2000      	movs	r0, #0
 800098a:	f000 faf1 	bl	8000f70 <buzzer>
					break;
 800098e:	e025      	b.n	80009dc <pedestrian_buzzer_config+0xd4>
				}
				buzzer(0);
 8000990:	2000      	movs	r0, #0
 8000992:	f000 faed 	bl	8000f70 <buzzer>
				break;
 8000996:	e021      	b.n	80009dc <pedestrian_buzzer_config+0xd4>
			case AMBER_RED:
				if(curr_ped_status==PED_ON){
 8000998:	4b12      	ldr	r3, [pc, #72]	; (80009e4 <pedestrian_buzzer_config+0xdc>)
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	2b00      	cmp	r3, #0
 800099e:	d103      	bne.n	80009a8 <pedestrian_buzzer_config+0xa0>
					buzzer(0);
 80009a0:	2000      	movs	r0, #0
 80009a2:	f000 fae5 	bl	8000f70 <buzzer>
					break;
 80009a6:	e019      	b.n	80009dc <pedestrian_buzzer_config+0xd4>
				}
				buzzer(0);
 80009a8:	2000      	movs	r0, #0
 80009aa:	f000 fae1 	bl	8000f70 <buzzer>
				break;
 80009ae:	e015      	b.n	80009dc <pedestrian_buzzer_config+0xd4>
			case MODE2:
				curr_ped_status=PED_OFF;
 80009b0:	4b0c      	ldr	r3, [pc, #48]	; (80009e4 <pedestrian_buzzer_config+0xdc>)
 80009b2:	2201      	movs	r2, #1
 80009b4:	701a      	strb	r2, [r3, #0]
				buzzer(0);
 80009b6:	2000      	movs	r0, #0
 80009b8:	f000 fada 	bl	8000f70 <buzzer>
				break;
 80009bc:	e00e      	b.n	80009dc <pedestrian_buzzer_config+0xd4>
			case MODE3:
				curr_ped_status=PED_OFF;
 80009be:	4b09      	ldr	r3, [pc, #36]	; (80009e4 <pedestrian_buzzer_config+0xdc>)
 80009c0:	2201      	movs	r2, #1
 80009c2:	701a      	strb	r2, [r3, #0]
				buzzer(0);
 80009c4:	2000      	movs	r0, #0
 80009c6:	f000 fad3 	bl	8000f70 <buzzer>
				break;
 80009ca:	e007      	b.n	80009dc <pedestrian_buzzer_config+0xd4>
			case MODE4:
				curr_ped_status=PED_OFF;
 80009cc:	4b05      	ldr	r3, [pc, #20]	; (80009e4 <pedestrian_buzzer_config+0xdc>)
 80009ce:	2201      	movs	r2, #1
 80009d0:	701a      	strb	r2, [r3, #0]
				buzzer(0);
 80009d2:	2000      	movs	r0, #0
 80009d4:	f000 facc 	bl	8000f70 <buzzer>
				break;
 80009d8:	e000      	b.n	80009dc <pedestrian_buzzer_config+0xd4>
			default:
				break;
 80009da:	bf00      	nop
		}
}
 80009dc:	bf00      	nop
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	2000000c 	.word	0x2000000c
 80009e4:	20000010 	.word	0x20000010

080009e8 <set_buzzer>:


void set_buzzer(){
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
//	setTimer6(500);
	if (timer6_flag == 1){
 80009ec:	4b0e      	ldr	r3, [pc, #56]	; (8000a28 <set_buzzer+0x40>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	2b01      	cmp	r3, #1
 80009f2:	d117      	bne.n	8000a24 <set_buzzer+0x3c>
		setTimer6(buzzer_period);
 80009f4:	4b0d      	ldr	r3, [pc, #52]	; (8000a2c <set_buzzer+0x44>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4618      	mov	r0, r3
 80009fa:	f000 fe67 	bl	80016cc <setTimer6>
		if (buzzer_flag == 0){
 80009fe:	4b0c      	ldr	r3, [pc, #48]	; (8000a30 <set_buzzer+0x48>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d108      	bne.n	8000a18 <set_buzzer+0x30>
			buzzer(volume);
 8000a06:	4b0b      	ldr	r3, [pc, #44]	; (8000a34 <set_buzzer+0x4c>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f000 fab0 	bl	8000f70 <buzzer>
			buzzer_flag = 1;
 8000a10:	4b07      	ldr	r3, [pc, #28]	; (8000a30 <set_buzzer+0x48>)
 8000a12:	2201      	movs	r2, #1
 8000a14:	601a      	str	r2, [r3, #0]
		}else {
			buzzer(0);
			buzzer_flag = 0;
		}
	}
}
 8000a16:	e005      	b.n	8000a24 <set_buzzer+0x3c>
			buzzer(0);
 8000a18:	2000      	movs	r0, #0
 8000a1a:	f000 faa9 	bl	8000f70 <buzzer>
			buzzer_flag = 0;
 8000a1e:	4b04      	ldr	r3, [pc, #16]	; (8000a30 <set_buzzer+0x48>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	601a      	str	r2, [r3, #0]
}
 8000a24:	bf00      	nop
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	200001f0 	.word	0x200001f0
 8000a2c:	20000014 	.word	0x20000014
 8000a30:	200000c4 	.word	0x200000c4
 8000a34:	20000018 	.word	0x20000018

08000a38 <fsm_button_processing>:
enum ButtonState button_0_state = BUTTON_PRESSED;
enum ButtonState button_1_state = BUTTON_PRESSED;
enum ButtonState button_2_state = BUTTON_PRESSED;
enum ButtonState button_3_state = BUTTON_PRESSED;

void fsm_button_processing() {
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
	if(timer5_flag==1){
 8000a3c:	4b99      	ldr	r3, [pc, #612]	; (8000ca4 <fsm_button_processing+0x26c>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	2b01      	cmp	r3, #1
 8000a42:	d105      	bne.n	8000a50 <fsm_button_processing+0x18>
		timer5_flag=0;
 8000a44:	4b97      	ldr	r3, [pc, #604]	; (8000ca4 <fsm_button_processing+0x26c>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	601a      	str	r2, [r3, #0]
		curr_ped_status=PED_OFF;
 8000a4a:	4b97      	ldr	r3, [pc, #604]	; (8000ca8 <fsm_button_processing+0x270>)
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	701a      	strb	r2, [r3, #0]
	}
	switch (button_0_state) {
 8000a50:	4b96      	ldr	r3, [pc, #600]	; (8000cac <fsm_button_processing+0x274>)
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	2b02      	cmp	r3, #2
 8000a56:	d043      	beq.n	8000ae0 <fsm_button_processing+0xa8>
 8000a58:	2b02      	cmp	r3, #2
 8000a5a:	dc50      	bgt.n	8000afe <fsm_button_processing+0xc6>
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d002      	beq.n	8000a66 <fsm_button_processing+0x2e>
 8000a60:	2b01      	cmp	r3, #1
 8000a62:	d029      	beq.n	8000ab8 <fsm_button_processing+0x80>
 8000a64:	e04b      	b.n	8000afe <fsm_button_processing+0xc6>
			case BUTTON_RELEASED:
				if (is_button_pressed(0)) {
 8000a66:	2000      	movs	r0, #0
 8000a68:	f000 fa4e 	bl	8000f08 <is_button_pressed>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d040      	beq.n	8000af4 <fsm_button_processing+0xbc>
					button_0_state = BUTTON_PRESSED;
 8000a72:	4b8e      	ldr	r3, [pc, #568]	; (8000cac <fsm_button_processing+0x274>)
 8000a74:	2201      	movs	r2, #1
 8000a76:	701a      	strb	r2, [r3, #0]
					if(curr_ped_status==PED_OFF&&(status==MODE1||status==RED_GREEN||status==RED_AMBER||status==GREEN_RED||status==AMBER_RED)){
 8000a78:	4b8b      	ldr	r3, [pc, #556]	; (8000ca8 <fsm_button_processing+0x270>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	2b01      	cmp	r3, #1
 8000a7e:	d139      	bne.n	8000af4 <fsm_button_processing+0xbc>
 8000a80:	4b8b      	ldr	r3, [pc, #556]	; (8000cb0 <fsm_button_processing+0x278>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d00f      	beq.n	8000aa8 <fsm_button_processing+0x70>
 8000a88:	4b89      	ldr	r3, [pc, #548]	; (8000cb0 <fsm_button_processing+0x278>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	2b01      	cmp	r3, #1
 8000a8e:	d00b      	beq.n	8000aa8 <fsm_button_processing+0x70>
 8000a90:	4b87      	ldr	r3, [pc, #540]	; (8000cb0 <fsm_button_processing+0x278>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	2b02      	cmp	r3, #2
 8000a96:	d007      	beq.n	8000aa8 <fsm_button_processing+0x70>
 8000a98:	4b85      	ldr	r3, [pc, #532]	; (8000cb0 <fsm_button_processing+0x278>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	2b03      	cmp	r3, #3
 8000a9e:	d003      	beq.n	8000aa8 <fsm_button_processing+0x70>
 8000aa0:	4b83      	ldr	r3, [pc, #524]	; (8000cb0 <fsm_button_processing+0x278>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	2b04      	cmp	r3, #4
 8000aa6:	d125      	bne.n	8000af4 <fsm_button_processing+0xbc>
						curr_ped_status=PED_ON;
 8000aa8:	4b7f      	ldr	r3, [pc, #508]	; (8000ca8 <fsm_button_processing+0x270>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	701a      	strb	r2, [r3, #0]
						setTimer5(10*1000);
 8000aae:	f242 7010 	movw	r0, #10000	; 0x2710
 8000ab2:	f000 fdf1 	bl	8001698 <setTimer5>
					}
				}
				break;
 8000ab6:	e01d      	b.n	8000af4 <fsm_button_processing+0xbc>
			case BUTTON_PRESSED:
				if (!is_button_pressed(0)) {
 8000ab8:	2000      	movs	r0, #0
 8000aba:	f000 fa25 	bl	8000f08 <is_button_pressed>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d103      	bne.n	8000acc <fsm_button_processing+0x94>
					button_0_state = BUTTON_RELEASED;
 8000ac4:	4b79      	ldr	r3, [pc, #484]	; (8000cac <fsm_button_processing+0x274>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	701a      	strb	r2, [r3, #0]
				} else {
					if (is_button_pressed_1s(0)) {
						button_0_state = BUTTON_PRESSED_MORE_THAN_1_SECOND;
					}
				}
				break;
 8000aca:	e015      	b.n	8000af8 <fsm_button_processing+0xc0>
					if (is_button_pressed_1s(0)) {
 8000acc:	2000      	movs	r0, #0
 8000ace:	f000 fa35 	bl	8000f3c <is_button_pressed_1s>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d00f      	beq.n	8000af8 <fsm_button_processing+0xc0>
						button_0_state = BUTTON_PRESSED_MORE_THAN_1_SECOND;
 8000ad8:	4b74      	ldr	r3, [pc, #464]	; (8000cac <fsm_button_processing+0x274>)
 8000ada:	2202      	movs	r2, #2
 8000adc:	701a      	strb	r2, [r3, #0]
				break;
 8000ade:	e00b      	b.n	8000af8 <fsm_button_processing+0xc0>
			case BUTTON_PRESSED_MORE_THAN_1_SECOND:
				if (!is_button_pressed(0)) {
 8000ae0:	2000      	movs	r0, #0
 8000ae2:	f000 fa11 	bl	8000f08 <is_button_pressed>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d107      	bne.n	8000afc <fsm_button_processing+0xc4>
					button_0_state = BUTTON_RELEASED;
 8000aec:	4b6f      	ldr	r3, [pc, #444]	; (8000cac <fsm_button_processing+0x274>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	701a      	strb	r2, [r3, #0]
				}
				// do nothing, wait for the button to be released
				break;
 8000af2:	e003      	b.n	8000afc <fsm_button_processing+0xc4>
				break;
 8000af4:	bf00      	nop
 8000af6:	e002      	b.n	8000afe <fsm_button_processing+0xc6>
				break;
 8000af8:	bf00      	nop
 8000afa:	e000      	b.n	8000afe <fsm_button_processing+0xc6>
				break;
 8000afc:	bf00      	nop
		}
	switch (button_1_state) {
 8000afe:	4b6d      	ldr	r3, [pc, #436]	; (8000cb4 <fsm_button_processing+0x27c>)
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	2b02      	cmp	r3, #2
 8000b04:	d040      	beq.n	8000b88 <fsm_button_processing+0x150>
 8000b06:	2b02      	cmp	r3, #2
 8000b08:	dc4d      	bgt.n	8000ba6 <fsm_button_processing+0x16e>
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d002      	beq.n	8000b14 <fsm_button_processing+0xdc>
 8000b0e:	2b01      	cmp	r3, #1
 8000b10:	d026      	beq.n	8000b60 <fsm_button_processing+0x128>
 8000b12:	e048      	b.n	8000ba6 <fsm_button_processing+0x16e>
		case BUTTON_RELEASED:
			if (is_button_pressed(1)) {
 8000b14:	2001      	movs	r0, #1
 8000b16:	f000 f9f7 	bl	8000f08 <is_button_pressed>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d03d      	beq.n	8000b9c <fsm_button_processing+0x164>
				button_1_state = BUTTON_PRESSED;
 8000b20:	4b64      	ldr	r3, [pc, #400]	; (8000cb4 <fsm_button_processing+0x27c>)
 8000b22:	2201      	movs	r2, #1
 8000b24:	701a      	strb	r2, [r3, #0]
				if (status == RED_GREEN)	status = MODE2;
 8000b26:	4b62      	ldr	r3, [pc, #392]	; (8000cb0 <fsm_button_processing+0x278>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	2b01      	cmp	r3, #1
 8000b2c:	d102      	bne.n	8000b34 <fsm_button_processing+0xfc>
 8000b2e:	4b60      	ldr	r3, [pc, #384]	; (8000cb0 <fsm_button_processing+0x278>)
 8000b30:	2205      	movs	r2, #5
 8000b32:	601a      	str	r2, [r3, #0]
				if (status == AUTO_RED) 	status = MODE3;
 8000b34:	4b5e      	ldr	r3, [pc, #376]	; (8000cb0 <fsm_button_processing+0x278>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	2b06      	cmp	r3, #6
 8000b3a:	d102      	bne.n	8000b42 <fsm_button_processing+0x10a>
 8000b3c:	4b5c      	ldr	r3, [pc, #368]	; (8000cb0 <fsm_button_processing+0x278>)
 8000b3e:	2208      	movs	r2, #8
 8000b40:	601a      	str	r2, [r3, #0]
				if (status == AUTO_AMBER) 	status = MODE4;
 8000b42:	4b5b      	ldr	r3, [pc, #364]	; (8000cb0 <fsm_button_processing+0x278>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	2b09      	cmp	r3, #9
 8000b48:	d102      	bne.n	8000b50 <fsm_button_processing+0x118>
 8000b4a:	4b59      	ldr	r3, [pc, #356]	; (8000cb0 <fsm_button_processing+0x278>)
 8000b4c:	220b      	movs	r2, #11
 8000b4e:	601a      	str	r2, [r3, #0]
				if (status == AUTO_GREEN) 	status = MODE1;
 8000b50:	4b57      	ldr	r3, [pc, #348]	; (8000cb0 <fsm_button_processing+0x278>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	2b0c      	cmp	r3, #12
 8000b56:	d121      	bne.n	8000b9c <fsm_button_processing+0x164>
 8000b58:	4b55      	ldr	r3, [pc, #340]	; (8000cb0 <fsm_button_processing+0x278>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	601a      	str	r2, [r3, #0]
			}
			break;
 8000b5e:	e01d      	b.n	8000b9c <fsm_button_processing+0x164>
		case BUTTON_PRESSED:
			if (!is_button_pressed(1)) {
 8000b60:	2001      	movs	r0, #1
 8000b62:	f000 f9d1 	bl	8000f08 <is_button_pressed>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d103      	bne.n	8000b74 <fsm_button_processing+0x13c>
				button_1_state = BUTTON_RELEASED;
 8000b6c:	4b51      	ldr	r3, [pc, #324]	; (8000cb4 <fsm_button_processing+0x27c>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	701a      	strb	r2, [r3, #0]
			} else {
				if (is_button_pressed_1s(1)) {
					button_1_state = BUTTON_PRESSED_MORE_THAN_1_SECOND;
				}
			}
			break;
 8000b72:	e015      	b.n	8000ba0 <fsm_button_processing+0x168>
				if (is_button_pressed_1s(1)) {
 8000b74:	2001      	movs	r0, #1
 8000b76:	f000 f9e1 	bl	8000f3c <is_button_pressed_1s>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d00f      	beq.n	8000ba0 <fsm_button_processing+0x168>
					button_1_state = BUTTON_PRESSED_MORE_THAN_1_SECOND;
 8000b80:	4b4c      	ldr	r3, [pc, #304]	; (8000cb4 <fsm_button_processing+0x27c>)
 8000b82:	2202      	movs	r2, #2
 8000b84:	701a      	strb	r2, [r3, #0]
			break;
 8000b86:	e00b      	b.n	8000ba0 <fsm_button_processing+0x168>
		case BUTTON_PRESSED_MORE_THAN_1_SECOND:
			if (!is_button_pressed(1)) {
 8000b88:	2001      	movs	r0, #1
 8000b8a:	f000 f9bd 	bl	8000f08 <is_button_pressed>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d107      	bne.n	8000ba4 <fsm_button_processing+0x16c>
				button_1_state = BUTTON_RELEASED;
 8000b94:	4b47      	ldr	r3, [pc, #284]	; (8000cb4 <fsm_button_processing+0x27c>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	701a      	strb	r2, [r3, #0]
			}
			// do nothing, wait for the button to be released
			break;
 8000b9a:	e003      	b.n	8000ba4 <fsm_button_processing+0x16c>
			break;
 8000b9c:	bf00      	nop
 8000b9e:	e002      	b.n	8000ba6 <fsm_button_processing+0x16e>
			break;
 8000ba0:	bf00      	nop
 8000ba2:	e000      	b.n	8000ba6 <fsm_button_processing+0x16e>
			break;
 8000ba4:	bf00      	nop
	}

	switch (button_2_state) {
 8000ba6:	4b44      	ldr	r3, [pc, #272]	; (8000cb8 <fsm_button_processing+0x280>)
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	2b02      	cmp	r3, #2
 8000bac:	d070      	beq.n	8000c90 <fsm_button_processing+0x258>
 8000bae:	2b02      	cmp	r3, #2
 8000bb0:	f300 808f 	bgt.w	8000cd2 <fsm_button_processing+0x29a>
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d002      	beq.n	8000bbe <fsm_button_processing+0x186>
 8000bb8:	2b01      	cmp	r3, #1
 8000bba:	d055      	beq.n	8000c68 <fsm_button_processing+0x230>
 8000bbc:	e089      	b.n	8000cd2 <fsm_button_processing+0x29a>
		case BUTTON_RELEASED:
			if (is_button_pressed(2)) {
 8000bbe:	2002      	movs	r0, #2
 8000bc0:	f000 f9a2 	bl	8000f08 <is_button_pressed>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d07e      	beq.n	8000cc8 <fsm_button_processing+0x290>
				button_2_state = BUTTON_PRESSED;
 8000bca:	4b3b      	ldr	r3, [pc, #236]	; (8000cb8 <fsm_button_processing+0x280>)
 8000bcc:	2201      	movs	r2, #1
 8000bce:	701a      	strb	r2, [r3, #0]
				if (status == AUTO_RED || status == ADJ_RED) {
 8000bd0:	4b37      	ldr	r3, [pc, #220]	; (8000cb0 <fsm_button_processing+0x278>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	2b06      	cmp	r3, #6
 8000bd6:	d003      	beq.n	8000be0 <fsm_button_processing+0x1a8>
 8000bd8:	4b35      	ldr	r3, [pc, #212]	; (8000cb0 <fsm_button_processing+0x278>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	2b07      	cmp	r3, #7
 8000bde:	d110      	bne.n	8000c02 <fsm_button_processing+0x1ca>
					status = ADJ_RED;
 8000be0:	4b33      	ldr	r3, [pc, #204]	; (8000cb0 <fsm_button_processing+0x278>)
 8000be2:	2207      	movs	r2, #7
 8000be4:	601a      	str	r2, [r3, #0]
					T_RED++;
 8000be6:	4b35      	ldr	r3, [pc, #212]	; (8000cbc <fsm_button_processing+0x284>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	3301      	adds	r3, #1
 8000bec:	4a33      	ldr	r2, [pc, #204]	; (8000cbc <fsm_button_processing+0x284>)
 8000bee:	6013      	str	r3, [r2, #0]
					if (T_RED >= 99) T_RED = 1;
 8000bf0:	4b32      	ldr	r3, [pc, #200]	; (8000cbc <fsm_button_processing+0x284>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	2b62      	cmp	r3, #98	; 0x62
 8000bf6:	dd02      	ble.n	8000bfe <fsm_button_processing+0x1c6>
 8000bf8:	4b30      	ldr	r3, [pc, #192]	; (8000cbc <fsm_button_processing+0x284>)
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	601a      	str	r2, [r3, #0]
					disp_t_red_uart();
 8000bfe:	f000 fe11 	bl	8001824 <disp_t_red_uart>
				}
				if (status == AUTO_AMBER || status == ADJ_AMBER) {
 8000c02:	4b2b      	ldr	r3, [pc, #172]	; (8000cb0 <fsm_button_processing+0x278>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	2b09      	cmp	r3, #9
 8000c08:	d003      	beq.n	8000c12 <fsm_button_processing+0x1da>
 8000c0a:	4b29      	ldr	r3, [pc, #164]	; (8000cb0 <fsm_button_processing+0x278>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	2b0a      	cmp	r3, #10
 8000c10:	d110      	bne.n	8000c34 <fsm_button_processing+0x1fc>
					status = ADJ_AMBER;
 8000c12:	4b27      	ldr	r3, [pc, #156]	; (8000cb0 <fsm_button_processing+0x278>)
 8000c14:	220a      	movs	r2, #10
 8000c16:	601a      	str	r2, [r3, #0]
					T_AMBER++;
 8000c18:	4b29      	ldr	r3, [pc, #164]	; (8000cc0 <fsm_button_processing+0x288>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	3301      	adds	r3, #1
 8000c1e:	4a28      	ldr	r2, [pc, #160]	; (8000cc0 <fsm_button_processing+0x288>)
 8000c20:	6013      	str	r3, [r2, #0]
					if (T_AMBER >= 5) T_AMBER = 1;
 8000c22:	4b27      	ldr	r3, [pc, #156]	; (8000cc0 <fsm_button_processing+0x288>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	2b04      	cmp	r3, #4
 8000c28:	dd02      	ble.n	8000c30 <fsm_button_processing+0x1f8>
 8000c2a:	4b25      	ldr	r3, [pc, #148]	; (8000cc0 <fsm_button_processing+0x288>)
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	601a      	str	r2, [r3, #0]
					disp_t_amber_uart();
 8000c30:	f000 fe1c 	bl	800186c <disp_t_amber_uart>
				}
				if (status == AUTO_GREEN || status == ADJ_GREEN) {
 8000c34:	4b1e      	ldr	r3, [pc, #120]	; (8000cb0 <fsm_button_processing+0x278>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	2b0c      	cmp	r3, #12
 8000c3a:	d003      	beq.n	8000c44 <fsm_button_processing+0x20c>
 8000c3c:	4b1c      	ldr	r3, [pc, #112]	; (8000cb0 <fsm_button_processing+0x278>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	2b0d      	cmp	r3, #13
 8000c42:	d141      	bne.n	8000cc8 <fsm_button_processing+0x290>
					status = ADJ_GREEN;
 8000c44:	4b1a      	ldr	r3, [pc, #104]	; (8000cb0 <fsm_button_processing+0x278>)
 8000c46:	220d      	movs	r2, #13
 8000c48:	601a      	str	r2, [r3, #0]
					T_GREEN++;
 8000c4a:	4b1e      	ldr	r3, [pc, #120]	; (8000cc4 <fsm_button_processing+0x28c>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	3301      	adds	r3, #1
 8000c50:	4a1c      	ldr	r2, [pc, #112]	; (8000cc4 <fsm_button_processing+0x28c>)
 8000c52:	6013      	str	r3, [r2, #0]
					if (T_GREEN >= 99) T_GREEN = 1;
 8000c54:	4b1b      	ldr	r3, [pc, #108]	; (8000cc4 <fsm_button_processing+0x28c>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	2b62      	cmp	r3, #98	; 0x62
 8000c5a:	dd02      	ble.n	8000c62 <fsm_button_processing+0x22a>
 8000c5c:	4b19      	ldr	r3, [pc, #100]	; (8000cc4 <fsm_button_processing+0x28c>)
 8000c5e:	2201      	movs	r2, #1
 8000c60:	601a      	str	r2, [r3, #0]
					disp_t_green_uart();
 8000c62:	f000 fe27 	bl	80018b4 <disp_t_green_uart>
				}
			}
			break;
 8000c66:	e02f      	b.n	8000cc8 <fsm_button_processing+0x290>
		case BUTTON_PRESSED:
			if (!is_button_pressed(2)) {
 8000c68:	2002      	movs	r0, #2
 8000c6a:	f000 f94d 	bl	8000f08 <is_button_pressed>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d103      	bne.n	8000c7c <fsm_button_processing+0x244>
				button_2_state = BUTTON_RELEASED;
 8000c74:	4b10      	ldr	r3, [pc, #64]	; (8000cb8 <fsm_button_processing+0x280>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	701a      	strb	r2, [r3, #0]
			} else {
				if (is_button_pressed_1s(2)) {
					button_2_state = BUTTON_PRESSED_MORE_THAN_1_SECOND;
				}
			}
			break;
 8000c7a:	e027      	b.n	8000ccc <fsm_button_processing+0x294>
				if (is_button_pressed_1s(2)) {
 8000c7c:	2002      	movs	r0, #2
 8000c7e:	f000 f95d 	bl	8000f3c <is_button_pressed_1s>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d021      	beq.n	8000ccc <fsm_button_processing+0x294>
					button_2_state = BUTTON_PRESSED_MORE_THAN_1_SECOND;
 8000c88:	4b0b      	ldr	r3, [pc, #44]	; (8000cb8 <fsm_button_processing+0x280>)
 8000c8a:	2202      	movs	r2, #2
 8000c8c:	701a      	strb	r2, [r3, #0]
			break;
 8000c8e:	e01d      	b.n	8000ccc <fsm_button_processing+0x294>
		case BUTTON_PRESSED_MORE_THAN_1_SECOND:
			if (!is_button_pressed(2)) {
 8000c90:	2002      	movs	r0, #2
 8000c92:	f000 f939 	bl	8000f08 <is_button_pressed>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d119      	bne.n	8000cd0 <fsm_button_processing+0x298>
				button_2_state = BUTTON_RELEASED;
 8000c9c:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <fsm_button_processing+0x280>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	701a      	strb	r2, [r3, #0]
			}
			// do nothing, wait for the button to be released
			break;
 8000ca2:	e015      	b.n	8000cd0 <fsm_button_processing+0x298>
 8000ca4:	200001ec 	.word	0x200001ec
 8000ca8:	20000010 	.word	0x20000010
 8000cac:	2000001c 	.word	0x2000001c
 8000cb0:	2000000c 	.word	0x2000000c
 8000cb4:	2000001d 	.word	0x2000001d
 8000cb8:	2000001e 	.word	0x2000001e
 8000cbc:	20000000 	.word	0x20000000
 8000cc0:	20000004 	.word	0x20000004
 8000cc4:	20000008 	.word	0x20000008
			break;
 8000cc8:	bf00      	nop
 8000cca:	e002      	b.n	8000cd2 <fsm_button_processing+0x29a>
			break;
 8000ccc:	bf00      	nop
 8000cce:	e000      	b.n	8000cd2 <fsm_button_processing+0x29a>
			break;
 8000cd0:	bf00      	nop
	}

	switch (button_3_state) {
 8000cd2:	4b4a      	ldr	r3, [pc, #296]	; (8000dfc <fsm_button_processing+0x3c4>)
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	2b02      	cmp	r3, #2
 8000cd8:	d07e      	beq.n	8000dd8 <fsm_button_processing+0x3a0>
 8000cda:	2b02      	cmp	r3, #2
 8000cdc:	f300 808b 	bgt.w	8000df6 <fsm_button_processing+0x3be>
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d002      	beq.n	8000cea <fsm_button_processing+0x2b2>
 8000ce4:	2b01      	cmp	r3, #1
 8000ce6:	d063      	beq.n	8000db0 <fsm_button_processing+0x378>
				button_3_state = BUTTON_RELEASED;
			}
			// do nothing, wait for the button to be released
			break;
	}
}
 8000ce8:	e085      	b.n	8000df6 <fsm_button_processing+0x3be>
			if (is_button_pressed(3)) {
 8000cea:	2003      	movs	r0, #3
 8000cec:	f000 f90c 	bl	8000f08 <is_button_pressed>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d07a      	beq.n	8000dec <fsm_button_processing+0x3b4>
				button_3_state = BUTTON_PRESSED;
 8000cf6:	4b41      	ldr	r3, [pc, #260]	; (8000dfc <fsm_button_processing+0x3c4>)
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	701a      	strb	r2, [r3, #0]
				if (status == ADJ_RED) {
 8000cfc:	4b40      	ldr	r3, [pc, #256]	; (8000e00 <fsm_button_processing+0x3c8>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	2b07      	cmp	r3, #7
 8000d02:	d114      	bne.n	8000d2e <fsm_button_processing+0x2f6>
					status = AUTO_RED;
 8000d04:	4b3e      	ldr	r3, [pc, #248]	; (8000e00 <fsm_button_processing+0x3c8>)
 8000d06:	2206      	movs	r2, #6
 8000d08:	601a      	str	r2, [r3, #0]
					if (T_RED <= T_AMBER) T_RED = T_AMBER + 1;
 8000d0a:	4b3e      	ldr	r3, [pc, #248]	; (8000e04 <fsm_button_processing+0x3cc>)
 8000d0c:	681a      	ldr	r2, [r3, #0]
 8000d0e:	4b3e      	ldr	r3, [pc, #248]	; (8000e08 <fsm_button_processing+0x3d0>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	429a      	cmp	r2, r3
 8000d14:	dc04      	bgt.n	8000d20 <fsm_button_processing+0x2e8>
 8000d16:	4b3c      	ldr	r3, [pc, #240]	; (8000e08 <fsm_button_processing+0x3d0>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	3301      	adds	r3, #1
 8000d1c:	4a39      	ldr	r2, [pc, #228]	; (8000e04 <fsm_button_processing+0x3cc>)
 8000d1e:	6013      	str	r3, [r2, #0]
					T_GREEN = T_RED - T_AMBER;
 8000d20:	4b38      	ldr	r3, [pc, #224]	; (8000e04 <fsm_button_processing+0x3cc>)
 8000d22:	681a      	ldr	r2, [r3, #0]
 8000d24:	4b38      	ldr	r3, [pc, #224]	; (8000e08 <fsm_button_processing+0x3d0>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	1ad3      	subs	r3, r2, r3
 8000d2a:	4a38      	ldr	r2, [pc, #224]	; (8000e0c <fsm_button_processing+0x3d4>)
 8000d2c:	6013      	str	r3, [r2, #0]
				if (status == ADJ_AMBER) {
 8000d2e:	4b34      	ldr	r3, [pc, #208]	; (8000e00 <fsm_button_processing+0x3c8>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	2b0a      	cmp	r3, #10
 8000d34:	d114      	bne.n	8000d60 <fsm_button_processing+0x328>
					status = AUTO_AMBER;
 8000d36:	4b32      	ldr	r3, [pc, #200]	; (8000e00 <fsm_button_processing+0x3c8>)
 8000d38:	2209      	movs	r2, #9
 8000d3a:	601a      	str	r2, [r3, #0]
					if (T_RED <= T_AMBER) T_RED = T_AMBER + 1;
 8000d3c:	4b31      	ldr	r3, [pc, #196]	; (8000e04 <fsm_button_processing+0x3cc>)
 8000d3e:	681a      	ldr	r2, [r3, #0]
 8000d40:	4b31      	ldr	r3, [pc, #196]	; (8000e08 <fsm_button_processing+0x3d0>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	429a      	cmp	r2, r3
 8000d46:	dc04      	bgt.n	8000d52 <fsm_button_processing+0x31a>
 8000d48:	4b2f      	ldr	r3, [pc, #188]	; (8000e08 <fsm_button_processing+0x3d0>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	3301      	adds	r3, #1
 8000d4e:	4a2d      	ldr	r2, [pc, #180]	; (8000e04 <fsm_button_processing+0x3cc>)
 8000d50:	6013      	str	r3, [r2, #0]
					T_GREEN = T_RED - T_AMBER;
 8000d52:	4b2c      	ldr	r3, [pc, #176]	; (8000e04 <fsm_button_processing+0x3cc>)
 8000d54:	681a      	ldr	r2, [r3, #0]
 8000d56:	4b2c      	ldr	r3, [pc, #176]	; (8000e08 <fsm_button_processing+0x3d0>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	1ad3      	subs	r3, r2, r3
 8000d5c:	4a2b      	ldr	r2, [pc, #172]	; (8000e0c <fsm_button_processing+0x3d4>)
 8000d5e:	6013      	str	r3, [r2, #0]
				if (status == ADJ_GREEN) {
 8000d60:	4b27      	ldr	r3, [pc, #156]	; (8000e00 <fsm_button_processing+0x3c8>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	2b0d      	cmp	r3, #13
 8000d66:	d116      	bne.n	8000d96 <fsm_button_processing+0x35e>
					status = AUTO_GREEN;
 8000d68:	4b25      	ldr	r3, [pc, #148]	; (8000e00 <fsm_button_processing+0x3c8>)
 8000d6a:	220c      	movs	r2, #12
 8000d6c:	601a      	str	r2, [r3, #0]
					if (T_AMBER + T_GREEN >= 99) {
 8000d6e:	4b26      	ldr	r3, [pc, #152]	; (8000e08 <fsm_button_processing+0x3d0>)
 8000d70:	681a      	ldr	r2, [r3, #0]
 8000d72:	4b26      	ldr	r3, [pc, #152]	; (8000e0c <fsm_button_processing+0x3d4>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4413      	add	r3, r2
 8000d78:	2b62      	cmp	r3, #98	; 0x62
 8000d7a:	dd05      	ble.n	8000d88 <fsm_button_processing+0x350>
						T_AMBER = 4;
 8000d7c:	4b22      	ldr	r3, [pc, #136]	; (8000e08 <fsm_button_processing+0x3d0>)
 8000d7e:	2204      	movs	r2, #4
 8000d80:	601a      	str	r2, [r3, #0]
						T_GREEN = 95;
 8000d82:	4b22      	ldr	r3, [pc, #136]	; (8000e0c <fsm_button_processing+0x3d4>)
 8000d84:	225f      	movs	r2, #95	; 0x5f
 8000d86:	601a      	str	r2, [r3, #0]
					T_RED = T_AMBER + T_GREEN;
 8000d88:	4b1f      	ldr	r3, [pc, #124]	; (8000e08 <fsm_button_processing+0x3d0>)
 8000d8a:	681a      	ldr	r2, [r3, #0]
 8000d8c:	4b1f      	ldr	r3, [pc, #124]	; (8000e0c <fsm_button_processing+0x3d4>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4413      	add	r3, r2
 8000d92:	4a1c      	ldr	r2, [pc, #112]	; (8000e04 <fsm_button_processing+0x3cc>)
 8000d94:	6013      	str	r3, [r2, #0]
				HAL_UART_Transmit(&huart2, "!SAVED#\n\r", 11, 50);
 8000d96:	2332      	movs	r3, #50	; 0x32
 8000d98:	220b      	movs	r2, #11
 8000d9a:	491d      	ldr	r1, [pc, #116]	; (8000e10 <fsm_button_processing+0x3d8>)
 8000d9c:	481d      	ldr	r0, [pc, #116]	; (8000e14 <fsm_button_processing+0x3dc>)
 8000d9e:	f002 fdb3 	bl	8003908 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart2, "\n\r", 4, 50);
 8000da2:	2332      	movs	r3, #50	; 0x32
 8000da4:	2204      	movs	r2, #4
 8000da6:	491c      	ldr	r1, [pc, #112]	; (8000e18 <fsm_button_processing+0x3e0>)
 8000da8:	481a      	ldr	r0, [pc, #104]	; (8000e14 <fsm_button_processing+0x3dc>)
 8000daa:	f002 fdad 	bl	8003908 <HAL_UART_Transmit>
			break;
 8000dae:	e01d      	b.n	8000dec <fsm_button_processing+0x3b4>
			if (!is_button_pressed(3)) {
 8000db0:	2003      	movs	r0, #3
 8000db2:	f000 f8a9 	bl	8000f08 <is_button_pressed>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d103      	bne.n	8000dc4 <fsm_button_processing+0x38c>
				button_3_state = BUTTON_RELEASED;
 8000dbc:	4b0f      	ldr	r3, [pc, #60]	; (8000dfc <fsm_button_processing+0x3c4>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	701a      	strb	r2, [r3, #0]
			break;
 8000dc2:	e015      	b.n	8000df0 <fsm_button_processing+0x3b8>
				if (is_button_pressed_1s(3)) {
 8000dc4:	2003      	movs	r0, #3
 8000dc6:	f000 f8b9 	bl	8000f3c <is_button_pressed_1s>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d00f      	beq.n	8000df0 <fsm_button_processing+0x3b8>
					button_3_state = BUTTON_PRESSED_MORE_THAN_1_SECOND;
 8000dd0:	4b0a      	ldr	r3, [pc, #40]	; (8000dfc <fsm_button_processing+0x3c4>)
 8000dd2:	2202      	movs	r2, #2
 8000dd4:	701a      	strb	r2, [r3, #0]
			break;
 8000dd6:	e00b      	b.n	8000df0 <fsm_button_processing+0x3b8>
			if (!is_button_pressed(3)) {
 8000dd8:	2003      	movs	r0, #3
 8000dda:	f000 f895 	bl	8000f08 <is_button_pressed>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d107      	bne.n	8000df4 <fsm_button_processing+0x3bc>
				button_3_state = BUTTON_RELEASED;
 8000de4:	4b05      	ldr	r3, [pc, #20]	; (8000dfc <fsm_button_processing+0x3c4>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	701a      	strb	r2, [r3, #0]
			break;
 8000dea:	e003      	b.n	8000df4 <fsm_button_processing+0x3bc>
			break;
 8000dec:	bf00      	nop
 8000dee:	e002      	b.n	8000df6 <fsm_button_processing+0x3be>
			break;
 8000df0:	bf00      	nop
 8000df2:	e000      	b.n	8000df6 <fsm_button_processing+0x3be>
			break;
 8000df4:	bf00      	nop
}
 8000df6:	bf00      	nop
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	2000001f 	.word	0x2000001f
 8000e00:	2000000c 	.word	0x2000000c
 8000e04:	20000000 	.word	0x20000000
 8000e08:	20000004 	.word	0x20000004
 8000e0c:	20000008 	.word	0x20000008
 8000e10:	08004e7c 	.word	0x08004e7c
 8000e14:	20000170 	.word	0x20000170
 8000e18:	08004e88 	.word	0x08004e88

08000e1c <button_reading>:
static uint16_t counterForButtonPress1s[N0_OF_BUTTONS];

static GPIO_TypeDef* button_ports[N0_OF_BUTTONS] = {A0_PedButton_GPIO_Port, A1_Button1_GPIO_Port, A2_Button2_GPIO_Port, A3_Button3_GPIO_Port};
static uint16_t button_pins[N0_OF_BUTTONS] = {A0_PedButton_Pin, A1_Button1_Pin, A2_Button2_Pin, A3_Button3_Pin};

void button_reading(void) {
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
	for (int i = 0; i < N0_OF_BUTTONS; i++) {
 8000e22:	2300      	movs	r3, #0
 8000e24:	607b      	str	r3, [r7, #4]
 8000e26:	e058      	b.n	8000eda <button_reading+0xbe>
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 8000e28:	4a30      	ldr	r2, [pc, #192]	; (8000eec <button_reading+0xd0>)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4413      	add	r3, r2
 8000e2e:	7819      	ldrb	r1, [r3, #0]
 8000e30:	4a2f      	ldr	r2, [pc, #188]	; (8000ef0 <button_reading+0xd4>)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	4413      	add	r3, r2
 8000e36:	460a      	mov	r2, r1
 8000e38:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(button_ports[i], button_pins[i]);
 8000e3a:	4a2e      	ldr	r2, [pc, #184]	; (8000ef4 <button_reading+0xd8>)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000e42:	492d      	ldr	r1, [pc, #180]	; (8000ef8 <button_reading+0xdc>)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	4610      	mov	r0, r2
 8000e4e:	f001 f965 	bl	800211c <HAL_GPIO_ReadPin>
 8000e52:	4603      	mov	r3, r0
 8000e54:	4619      	mov	r1, r3
 8000e56:	4a25      	ldr	r2, [pc, #148]	; (8000eec <button_reading+0xd0>)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	4413      	add	r3, r2
 8000e5c:	460a      	mov	r2, r1
 8000e5e:	701a      	strb	r2, [r3, #0]

		if (debounceButtonBuffer1[i] == debounceButtonBuffer2[i])
 8000e60:	4a22      	ldr	r2, [pc, #136]	; (8000eec <button_reading+0xd0>)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	4413      	add	r3, r2
 8000e66:	781a      	ldrb	r2, [r3, #0]
 8000e68:	4921      	ldr	r1, [pc, #132]	; (8000ef0 <button_reading+0xd4>)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	440b      	add	r3, r1
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	429a      	cmp	r2, r3
 8000e72:	d108      	bne.n	8000e86 <button_reading+0x6a>
			buttonBuffer[i] = debounceButtonBuffer1[i];
 8000e74:	4a1d      	ldr	r2, [pc, #116]	; (8000eec <button_reading+0xd0>)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4413      	add	r3, r2
 8000e7a:	7819      	ldrb	r1, [r3, #0]
 8000e7c:	4a1f      	ldr	r2, [pc, #124]	; (8000efc <button_reading+0xe0>)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4413      	add	r3, r2
 8000e82:	460a      	mov	r2, r1
 8000e84:	701a      	strb	r2, [r3, #0]

		if (buttonBuffer[i] == BUTTON_IS_PRESSED) {
 8000e86:	4a1d      	ldr	r2, [pc, #116]	; (8000efc <button_reading+0xe0>)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	4413      	add	r3, r2
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d116      	bne.n	8000ec0 <button_reading+0xa4>
			//if a button is pressed, we start counting
			if (counterForButtonPress1s[i] < DURATION_FOR_AUTO_INCREASING) {
 8000e92:	4a1b      	ldr	r2, [pc, #108]	; (8000f00 <button_reading+0xe4>)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e9a:	2b63      	cmp	r3, #99	; 0x63
 8000e9c:	d80a      	bhi.n	8000eb4 <button_reading+0x98>
				counterForButtonPress1s[i]++;
 8000e9e:	4a18      	ldr	r2, [pc, #96]	; (8000f00 <button_reading+0xe4>)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ea6:	3301      	adds	r3, #1
 8000ea8:	b299      	uxth	r1, r3
 8000eaa:	4a15      	ldr	r2, [pc, #84]	; (8000f00 <button_reading+0xe4>)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000eb2:	e00f      	b.n	8000ed4 <button_reading+0xb8>
			} else {
				//the flag is turned on when 1 second has passed
				//since the button is pressed.
				flagForButtonPress1s[i] = 1;
 8000eb4:	4a13      	ldr	r2, [pc, #76]	; (8000f04 <button_reading+0xe8>)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4413      	add	r3, r2
 8000eba:	2201      	movs	r2, #1
 8000ebc:	701a      	strb	r2, [r3, #0]
 8000ebe:	e009      	b.n	8000ed4 <button_reading+0xb8>
			}
		} else {
			counterForButtonPress1s[i] = 0;
 8000ec0:	4a0f      	ldr	r2, [pc, #60]	; (8000f00 <button_reading+0xe4>)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			flagForButtonPress1s[i] = 0;
 8000eca:	4a0e      	ldr	r2, [pc, #56]	; (8000f04 <button_reading+0xe8>)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	4413      	add	r3, r2
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < N0_OF_BUTTONS; i++) {
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	3301      	adds	r3, #1
 8000ed8:	607b      	str	r3, [r7, #4]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	2b03      	cmp	r3, #3
 8000ede:	dda3      	ble.n	8000e28 <button_reading+0xc>
		}
	}
}
 8000ee0:	bf00      	nop
 8000ee2:	bf00      	nop
 8000ee4:	3708      	adds	r7, #8
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	200000cc 	.word	0x200000cc
 8000ef0:	200000d0 	.word	0x200000d0
 8000ef4:	20000020 	.word	0x20000020
 8000ef8:	20000030 	.word	0x20000030
 8000efc:	200000c8 	.word	0x200000c8
 8000f00:	200000d8 	.word	0x200000d8
 8000f04:	200000d4 	.word	0x200000d4

08000f08 <is_button_pressed>:

unsigned char is_button_pressed(uint8_t index){
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	4603      	mov	r3, r0
 8000f10:	71fb      	strb	r3, [r7, #7]
	if (index >= N0_OF_BUTTONS) return 0;
 8000f12:	79fb      	ldrb	r3, [r7, #7]
 8000f14:	2b03      	cmp	r3, #3
 8000f16:	d901      	bls.n	8000f1c <is_button_pressed+0x14>
 8000f18:	2300      	movs	r3, #0
 8000f1a:	e007      	b.n	8000f2c <is_button_pressed+0x24>
	return (buttonBuffer[index] == BUTTON_IS_PRESSED);
 8000f1c:	79fb      	ldrb	r3, [r7, #7]
 8000f1e:	4a06      	ldr	r2, [pc, #24]	; (8000f38 <is_button_pressed+0x30>)
 8000f20:	5cd3      	ldrb	r3, [r2, r3]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	bf0c      	ite	eq
 8000f26:	2301      	moveq	r3, #1
 8000f28:	2300      	movne	r3, #0
 8000f2a:	b2db      	uxtb	r3, r3
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	370c      	adds	r7, #12
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bc80      	pop	{r7}
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	200000c8 	.word	0x200000c8

08000f3c <is_button_pressed_1s>:

unsigned char is_button_pressed_1s(unsigned char index){
 8000f3c:	b480      	push	{r7}
 8000f3e:	b083      	sub	sp, #12
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	4603      	mov	r3, r0
 8000f44:	71fb      	strb	r3, [r7, #7]
	if (index >= N0_OF_BUTTONS) return 0;
 8000f46:	79fb      	ldrb	r3, [r7, #7]
 8000f48:	2b03      	cmp	r3, #3
 8000f4a:	d901      	bls.n	8000f50 <is_button_pressed_1s+0x14>
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	e007      	b.n	8000f60 <is_button_pressed_1s+0x24>
	return (flagForButtonPress1s[index] == 1);
 8000f50:	79fb      	ldrb	r3, [r7, #7]
 8000f52:	4a06      	ldr	r2, [pc, #24]	; (8000f6c <is_button_pressed_1s+0x30>)
 8000f54:	5cd3      	ldrb	r3, [r2, r3]
 8000f56:	2b01      	cmp	r3, #1
 8000f58:	bf0c      	ite	eq
 8000f5a:	2301      	moveq	r3, #1
 8000f5c:	2300      	movne	r3, #0
 8000f5e:	b2db      	uxtb	r3, r3
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	370c      	adds	r7, #12
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bc80      	pop	{r7}
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	200000d4 	.word	0x200000d4

08000f70 <buzzer>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void buzzer(int vol){
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, vol);
 8000f78:	4b04      	ldr	r3, [pc, #16]	; (8000f8c <buzzer+0x1c>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	687a      	ldr	r2, [r7, #4]
 8000f7e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000f80:	bf00      	nop
 8000f82:	370c      	adds	r7, #12
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bc80      	pop	{r7}
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	20000128 	.word	0x20000128

08000f90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f94:	f000 fd1c 	bl	80019d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f98:	f000 f826 	bl	8000fe8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f9c:	f000 f950 	bl	8001240 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000fa0:	f000 f862 	bl	8001068 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000fa4:	f000 f8ac 	bl	8001100 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000fa8:	f000 f920 	bl	80011ec <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000fac:	480c      	ldr	r0, [pc, #48]	; (8000fe0 <main+0x50>)
 8000fae:	f001 fd45 	bl	8002a3c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8000fb2:	480c      	ldr	r0, [pc, #48]	; (8000fe4 <main+0x54>)
 8000fb4:	f001 fd42 	bl	8002a3c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000fb8:	2100      	movs	r1, #0
 8000fba:	480a      	ldr	r0, [pc, #40]	; (8000fe4 <main+0x54>)
 8000fbc:	f001 fde8 	bl	8002b90 <HAL_TIM_PWM_Start>
  setTimer6(500);
 8000fc0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000fc4:	f000 fb82 	bl	80016cc <setTimer6>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  fsm_automatic();
 8000fc8:	f7ff f8c0 	bl	800014c <fsm_automatic>
	  fsm_red_manual();
 8000fcc:	f7ff f9f4 	bl	80003b8 <fsm_red_manual>
	  fsm_amber_manual();
 8000fd0:	f7ff fa36 	bl	8000440 <fsm_amber_manual>
	  fsm_green_manual();
 8000fd4:	f7ff fa78 	bl	80004c8 <fsm_green_manual>
	  fsm_button_processing();
 8000fd8:	f7ff fd2e 	bl	8000a38 <fsm_button_processing>
	  fsm_automatic();
 8000fdc:	e7f4      	b.n	8000fc8 <main+0x38>
 8000fde:	bf00      	nop
 8000fe0:	200000e0 	.word	0x200000e0
 8000fe4:	20000128 	.word	0x20000128

08000fe8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b090      	sub	sp, #64	; 0x40
 8000fec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fee:	f107 0318 	add.w	r3, r7, #24
 8000ff2:	2228      	movs	r2, #40	; 0x28
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f003 fa7a 	bl	80044f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ffc:	1d3b      	adds	r3, r7, #4
 8000ffe:	2200      	movs	r2, #0
 8001000:	601a      	str	r2, [r3, #0]
 8001002:	605a      	str	r2, [r3, #4]
 8001004:	609a      	str	r2, [r3, #8]
 8001006:	60da      	str	r2, [r3, #12]
 8001008:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800100a:	2302      	movs	r3, #2
 800100c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800100e:	2301      	movs	r3, #1
 8001010:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001012:	2310      	movs	r3, #16
 8001014:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001016:	2302      	movs	r3, #2
 8001018:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800101a:	2300      	movs	r3, #0
 800101c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 800101e:	2300      	movs	r3, #0
 8001020:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001022:	f107 0318 	add.w	r3, r7, #24
 8001026:	4618      	mov	r0, r3
 8001028:	f001 f8a8 	bl	800217c <HAL_RCC_OscConfig>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <SystemClock_Config+0x4e>
  {
    Error_Handler();
 8001032:	f000 f97f 	bl	8001334 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001036:	230f      	movs	r3, #15
 8001038:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800103a:	2302      	movs	r3, #2
 800103c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800103e:	2300      	movs	r3, #0
 8001040:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001042:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001046:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001048:	2300      	movs	r3, #0
 800104a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800104c:	1d3b      	adds	r3, r7, #4
 800104e:	2100      	movs	r1, #0
 8001050:	4618      	mov	r0, r3
 8001052:	f001 fb15 	bl	8002680 <HAL_RCC_ClockConfig>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <SystemClock_Config+0x78>
  {
    Error_Handler();
 800105c:	f000 f96a 	bl	8001334 <Error_Handler>
  }
}
 8001060:	bf00      	nop
 8001062:	3740      	adds	r7, #64	; 0x40
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}

08001068 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b086      	sub	sp, #24
 800106c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800106e:	f107 0308 	add.w	r3, r7, #8
 8001072:	2200      	movs	r2, #0
 8001074:	601a      	str	r2, [r3, #0]
 8001076:	605a      	str	r2, [r3, #4]
 8001078:	609a      	str	r2, [r3, #8]
 800107a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800107c:	463b      	mov	r3, r7
 800107e:	2200      	movs	r2, #0
 8001080:	601a      	str	r2, [r3, #0]
 8001082:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001084:	4b1d      	ldr	r3, [pc, #116]	; (80010fc <MX_TIM2_Init+0x94>)
 8001086:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800108a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 800108c:	4b1b      	ldr	r3, [pc, #108]	; (80010fc <MX_TIM2_Init+0x94>)
 800108e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001092:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001094:	4b19      	ldr	r3, [pc, #100]	; (80010fc <MX_TIM2_Init+0x94>)
 8001096:	2200      	movs	r2, #0
 8001098:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800109a:	4b18      	ldr	r3, [pc, #96]	; (80010fc <MX_TIM2_Init+0x94>)
 800109c:	2209      	movs	r2, #9
 800109e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010a0:	4b16      	ldr	r3, [pc, #88]	; (80010fc <MX_TIM2_Init+0x94>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010a6:	4b15      	ldr	r3, [pc, #84]	; (80010fc <MX_TIM2_Init+0x94>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010ac:	4813      	ldr	r0, [pc, #76]	; (80010fc <MX_TIM2_Init+0x94>)
 80010ae:	f001 fc75 	bl	800299c <HAL_TIM_Base_Init>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80010b8:	f000 f93c 	bl	8001334 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010c0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010c2:	f107 0308 	add.w	r3, r7, #8
 80010c6:	4619      	mov	r1, r3
 80010c8:	480c      	ldr	r0, [pc, #48]	; (80010fc <MX_TIM2_Init+0x94>)
 80010ca:	f001 ffcd 	bl	8003068 <HAL_TIM_ConfigClockSource>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80010d4:	f000 f92e 	bl	8001334 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010d8:	2300      	movs	r3, #0
 80010da:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010dc:	2300      	movs	r3, #0
 80010de:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010e0:	463b      	mov	r3, r7
 80010e2:	4619      	mov	r1, r3
 80010e4:	4805      	ldr	r0, [pc, #20]	; (80010fc <MX_TIM2_Init+0x94>)
 80010e6:	f002 fb4f 	bl	8003788 <HAL_TIMEx_MasterConfigSynchronization>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80010f0:	f000 f920 	bl	8001334 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80010f4:	bf00      	nop
 80010f6:	3718      	adds	r7, #24
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	200000e0 	.word	0x200000e0

08001100 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b08e      	sub	sp, #56	; 0x38
 8001104:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001106:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800110a:	2200      	movs	r2, #0
 800110c:	601a      	str	r2, [r3, #0]
 800110e:	605a      	str	r2, [r3, #4]
 8001110:	609a      	str	r2, [r3, #8]
 8001112:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001114:	f107 0320 	add.w	r3, r7, #32
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
 800111c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800111e:	1d3b      	adds	r3, r7, #4
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	605a      	str	r2, [r3, #4]
 8001126:	609a      	str	r2, [r3, #8]
 8001128:	60da      	str	r2, [r3, #12]
 800112a:	611a      	str	r2, [r3, #16]
 800112c:	615a      	str	r2, [r3, #20]
 800112e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001130:	4b2c      	ldr	r3, [pc, #176]	; (80011e4 <MX_TIM3_Init+0xe4>)
 8001132:	4a2d      	ldr	r2, [pc, #180]	; (80011e8 <MX_TIM3_Init+0xe8>)
 8001134:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7999;
 8001136:	4b2b      	ldr	r3, [pc, #172]	; (80011e4 <MX_TIM3_Init+0xe4>)
 8001138:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800113c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800113e:	4b29      	ldr	r3, [pc, #164]	; (80011e4 <MX_TIM3_Init+0xe4>)
 8001140:	2200      	movs	r2, #0
 8001142:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9;
 8001144:	4b27      	ldr	r3, [pc, #156]	; (80011e4 <MX_TIM3_Init+0xe4>)
 8001146:	2209      	movs	r2, #9
 8001148:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800114a:	4b26      	ldr	r3, [pc, #152]	; (80011e4 <MX_TIM3_Init+0xe4>)
 800114c:	2200      	movs	r2, #0
 800114e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001150:	4b24      	ldr	r3, [pc, #144]	; (80011e4 <MX_TIM3_Init+0xe4>)
 8001152:	2200      	movs	r2, #0
 8001154:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001156:	4823      	ldr	r0, [pc, #140]	; (80011e4 <MX_TIM3_Init+0xe4>)
 8001158:	f001 fc20 	bl	800299c <HAL_TIM_Base_Init>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001162:	f000 f8e7 	bl	8001334 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001166:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800116a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800116c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001170:	4619      	mov	r1, r3
 8001172:	481c      	ldr	r0, [pc, #112]	; (80011e4 <MX_TIM3_Init+0xe4>)
 8001174:	f001 ff78 	bl	8003068 <HAL_TIM_ConfigClockSource>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800117e:	f000 f8d9 	bl	8001334 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001182:	4818      	ldr	r0, [pc, #96]	; (80011e4 <MX_TIM3_Init+0xe4>)
 8001184:	f001 fcac 	bl	8002ae0 <HAL_TIM_PWM_Init>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800118e:	f000 f8d1 	bl	8001334 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001192:	2300      	movs	r3, #0
 8001194:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001196:	2300      	movs	r3, #0
 8001198:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800119a:	f107 0320 	add.w	r3, r7, #32
 800119e:	4619      	mov	r1, r3
 80011a0:	4810      	ldr	r0, [pc, #64]	; (80011e4 <MX_TIM3_Init+0xe4>)
 80011a2:	f002 faf1 	bl	8003788 <HAL_TIMEx_MasterConfigSynchronization>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80011ac:	f000 f8c2 	bl	8001334 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011b0:	2360      	movs	r3, #96	; 0x60
 80011b2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80011b4:	2300      	movs	r3, #0
 80011b6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011b8:	2300      	movs	r3, #0
 80011ba:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011bc:	2300      	movs	r3, #0
 80011be:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011c0:	1d3b      	adds	r3, r7, #4
 80011c2:	2200      	movs	r2, #0
 80011c4:	4619      	mov	r1, r3
 80011c6:	4807      	ldr	r0, [pc, #28]	; (80011e4 <MX_TIM3_Init+0xe4>)
 80011c8:	f001 fe8c 	bl	8002ee4 <HAL_TIM_PWM_ConfigChannel>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80011d2:	f000 f8af 	bl	8001334 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80011d6:	4803      	ldr	r0, [pc, #12]	; (80011e4 <MX_TIM3_Init+0xe4>)
 80011d8:	f000 f924 	bl	8001424 <HAL_TIM_MspPostInit>

}
 80011dc:	bf00      	nop
 80011de:	3738      	adds	r7, #56	; 0x38
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	20000128 	.word	0x20000128
 80011e8:	40000400 	.word	0x40000400

080011ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011f0:	4b11      	ldr	r3, [pc, #68]	; (8001238 <MX_USART2_UART_Init+0x4c>)
 80011f2:	4a12      	ldr	r2, [pc, #72]	; (800123c <MX_USART2_UART_Init+0x50>)
 80011f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80011f6:	4b10      	ldr	r3, [pc, #64]	; (8001238 <MX_USART2_UART_Init+0x4c>)
 80011f8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80011fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011fe:	4b0e      	ldr	r3, [pc, #56]	; (8001238 <MX_USART2_UART_Init+0x4c>)
 8001200:	2200      	movs	r2, #0
 8001202:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001204:	4b0c      	ldr	r3, [pc, #48]	; (8001238 <MX_USART2_UART_Init+0x4c>)
 8001206:	2200      	movs	r2, #0
 8001208:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800120a:	4b0b      	ldr	r3, [pc, #44]	; (8001238 <MX_USART2_UART_Init+0x4c>)
 800120c:	2200      	movs	r2, #0
 800120e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001210:	4b09      	ldr	r3, [pc, #36]	; (8001238 <MX_USART2_UART_Init+0x4c>)
 8001212:	220c      	movs	r2, #12
 8001214:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001216:	4b08      	ldr	r3, [pc, #32]	; (8001238 <MX_USART2_UART_Init+0x4c>)
 8001218:	2200      	movs	r2, #0
 800121a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800121c:	4b06      	ldr	r3, [pc, #24]	; (8001238 <MX_USART2_UART_Init+0x4c>)
 800121e:	2200      	movs	r2, #0
 8001220:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001222:	4805      	ldr	r0, [pc, #20]	; (8001238 <MX_USART2_UART_Init+0x4c>)
 8001224:	f002 fb20 	bl	8003868 <HAL_UART_Init>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800122e:	f000 f881 	bl	8001334 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001232:	bf00      	nop
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	20000170 	.word	0x20000170
 800123c:	40004400 	.word	0x40004400

08001240 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b086      	sub	sp, #24
 8001244:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001246:	f107 0308 	add.w	r3, r7, #8
 800124a:	2200      	movs	r2, #0
 800124c:	601a      	str	r2, [r3, #0]
 800124e:	605a      	str	r2, [r3, #4]
 8001250:	609a      	str	r2, [r3, #8]
 8001252:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001254:	4b2e      	ldr	r3, [pc, #184]	; (8001310 <MX_GPIO_Init+0xd0>)
 8001256:	699b      	ldr	r3, [r3, #24]
 8001258:	4a2d      	ldr	r2, [pc, #180]	; (8001310 <MX_GPIO_Init+0xd0>)
 800125a:	f043 0304 	orr.w	r3, r3, #4
 800125e:	6193      	str	r3, [r2, #24]
 8001260:	4b2b      	ldr	r3, [pc, #172]	; (8001310 <MX_GPIO_Init+0xd0>)
 8001262:	699b      	ldr	r3, [r3, #24]
 8001264:	f003 0304 	and.w	r3, r3, #4
 8001268:	607b      	str	r3, [r7, #4]
 800126a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800126c:	4b28      	ldr	r3, [pc, #160]	; (8001310 <MX_GPIO_Init+0xd0>)
 800126e:	699b      	ldr	r3, [r3, #24]
 8001270:	4a27      	ldr	r2, [pc, #156]	; (8001310 <MX_GPIO_Init+0xd0>)
 8001272:	f043 0308 	orr.w	r3, r3, #8
 8001276:	6193      	str	r3, [r2, #24]
 8001278:	4b25      	ldr	r3, [pc, #148]	; (8001310 <MX_GPIO_Init+0xd0>)
 800127a:	699b      	ldr	r3, [r3, #24]
 800127c:	f003 0308 	and.w	r3, r3, #8
 8001280:	603b      	str	r3, [r7, #0]
 8001282:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_PedLED_Pin|D3_LED1_Pin|D5_LED2_Pin|D4_LED2_Pin, GPIO_PIN_RESET);
 8001284:	2200      	movs	r2, #0
 8001286:	f44f 6187 	mov.w	r1, #1080	; 0x438
 800128a:	4822      	ldr	r0, [pc, #136]	; (8001314 <MX_GPIO_Init+0xd4>)
 800128c:	f000 ff5d 	bl	800214a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D7_PedLED_Pin|D2_LED1_Pin, GPIO_PIN_RESET);
 8001290:	2200      	movs	r2, #0
 8001292:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8001296:	4820      	ldr	r0, [pc, #128]	; (8001318 <MX_GPIO_Init+0xd8>)
 8001298:	f000 ff57 	bl	800214a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_PedButton_Pin A1_Button1_Pin A2_Button2_Pin */
  GPIO_InitStruct.Pin = A0_PedButton_Pin|A1_Button1_Pin|A2_Button2_Pin;
 800129c:	2313      	movs	r3, #19
 800129e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012a0:	2300      	movs	r3, #0
 80012a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a4:	2300      	movs	r3, #0
 80012a6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a8:	f107 0308 	add.w	r3, r7, #8
 80012ac:	4619      	mov	r1, r3
 80012ae:	481a      	ldr	r0, [pc, #104]	; (8001318 <MX_GPIO_Init+0xd8>)
 80012b0:	f000 fdb0 	bl	8001e14 <HAL_GPIO_Init>

  /*Configure GPIO pin : A3_Button3_Pin */
  GPIO_InitStruct.Pin = A3_Button3_Pin;
 80012b4:	2301      	movs	r3, #1
 80012b6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012b8:	2300      	movs	r3, #0
 80012ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012bc:	2300      	movs	r3, #0
 80012be:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(A3_Button3_GPIO_Port, &GPIO_InitStruct);
 80012c0:	f107 0308 	add.w	r3, r7, #8
 80012c4:	4619      	mov	r1, r3
 80012c6:	4813      	ldr	r0, [pc, #76]	; (8001314 <MX_GPIO_Init+0xd4>)
 80012c8:	f000 fda4 	bl	8001e14 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_PedLED_Pin D3_LED1_Pin D5_LED2_Pin D4_LED2_Pin */
  GPIO_InitStruct.Pin = D6_PedLED_Pin|D3_LED1_Pin|D5_LED2_Pin|D4_LED2_Pin;
 80012cc:	f44f 6387 	mov.w	r3, #1080	; 0x438
 80012d0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012d2:	2301      	movs	r3, #1
 80012d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d6:	2300      	movs	r3, #0
 80012d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012da:	2302      	movs	r3, #2
 80012dc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012de:	f107 0308 	add.w	r3, r7, #8
 80012e2:	4619      	mov	r1, r3
 80012e4:	480b      	ldr	r0, [pc, #44]	; (8001314 <MX_GPIO_Init+0xd4>)
 80012e6:	f000 fd95 	bl	8001e14 <HAL_GPIO_Init>

  /*Configure GPIO pins : D7_PedLED_Pin D2_LED1_Pin */
  GPIO_InitStruct.Pin = D7_PedLED_Pin|D2_LED1_Pin;
 80012ea:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80012ee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f0:	2301      	movs	r3, #1
 80012f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f4:	2300      	movs	r3, #0
 80012f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f8:	2302      	movs	r3, #2
 80012fa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012fc:	f107 0308 	add.w	r3, r7, #8
 8001300:	4619      	mov	r1, r3
 8001302:	4805      	ldr	r0, [pc, #20]	; (8001318 <MX_GPIO_Init+0xd8>)
 8001304:	f000 fd86 	bl	8001e14 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001308:	bf00      	nop
 800130a:	3718      	adds	r7, #24
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	40021000 	.word	0x40021000
 8001314:	40010c00 	.word	0x40010c00
 8001318:	40010800 	.word	0x40010800

0800131c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim2) {
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
	timer_run();
 8001324:	f000 f9ec 	bl	8001700 <timer_run>
	button_reading();
 8001328:	f7ff fd78 	bl	8000e1c <button_reading>
}
 800132c:	bf00      	nop
 800132e:	3708      	adds	r7, #8
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}

08001334 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001338:	b672      	cpsid	i
}
 800133a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800133c:	e7fe      	b.n	800133c <Error_Handler+0x8>
	...

08001340 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001340:	b480      	push	{r7}
 8001342:	b085      	sub	sp, #20
 8001344:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001346:	4b15      	ldr	r3, [pc, #84]	; (800139c <HAL_MspInit+0x5c>)
 8001348:	699b      	ldr	r3, [r3, #24]
 800134a:	4a14      	ldr	r2, [pc, #80]	; (800139c <HAL_MspInit+0x5c>)
 800134c:	f043 0301 	orr.w	r3, r3, #1
 8001350:	6193      	str	r3, [r2, #24]
 8001352:	4b12      	ldr	r3, [pc, #72]	; (800139c <HAL_MspInit+0x5c>)
 8001354:	699b      	ldr	r3, [r3, #24]
 8001356:	f003 0301 	and.w	r3, r3, #1
 800135a:	60bb      	str	r3, [r7, #8]
 800135c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800135e:	4b0f      	ldr	r3, [pc, #60]	; (800139c <HAL_MspInit+0x5c>)
 8001360:	69db      	ldr	r3, [r3, #28]
 8001362:	4a0e      	ldr	r2, [pc, #56]	; (800139c <HAL_MspInit+0x5c>)
 8001364:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001368:	61d3      	str	r3, [r2, #28]
 800136a:	4b0c      	ldr	r3, [pc, #48]	; (800139c <HAL_MspInit+0x5c>)
 800136c:	69db      	ldr	r3, [r3, #28]
 800136e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001372:	607b      	str	r3, [r7, #4]
 8001374:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001376:	4b0a      	ldr	r3, [pc, #40]	; (80013a0 <HAL_MspInit+0x60>)
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	60fb      	str	r3, [r7, #12]
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001382:	60fb      	str	r3, [r7, #12]
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800138a:	60fb      	str	r3, [r7, #12]
 800138c:	4a04      	ldr	r2, [pc, #16]	; (80013a0 <HAL_MspInit+0x60>)
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001392:	bf00      	nop
 8001394:	3714      	adds	r7, #20
 8001396:	46bd      	mov	sp, r7
 8001398:	bc80      	pop	{r7}
 800139a:	4770      	bx	lr
 800139c:	40021000 	.word	0x40021000
 80013a0:	40010000 	.word	0x40010000

080013a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013b4:	d114      	bne.n	80013e0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013b6:	4b19      	ldr	r3, [pc, #100]	; (800141c <HAL_TIM_Base_MspInit+0x78>)
 80013b8:	69db      	ldr	r3, [r3, #28]
 80013ba:	4a18      	ldr	r2, [pc, #96]	; (800141c <HAL_TIM_Base_MspInit+0x78>)
 80013bc:	f043 0301 	orr.w	r3, r3, #1
 80013c0:	61d3      	str	r3, [r2, #28]
 80013c2:	4b16      	ldr	r3, [pc, #88]	; (800141c <HAL_TIM_Base_MspInit+0x78>)
 80013c4:	69db      	ldr	r3, [r3, #28]
 80013c6:	f003 0301 	and.w	r3, r3, #1
 80013ca:	60fb      	str	r3, [r7, #12]
 80013cc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80013ce:	2200      	movs	r2, #0
 80013d0:	2100      	movs	r1, #0
 80013d2:	201c      	movs	r0, #28
 80013d4:	f000 fc35 	bl	8001c42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80013d8:	201c      	movs	r0, #28
 80013da:	f000 fc4e 	bl	8001c7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80013de:	e018      	b.n	8001412 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a0e      	ldr	r2, [pc, #56]	; (8001420 <HAL_TIM_Base_MspInit+0x7c>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d113      	bne.n	8001412 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80013ea:	4b0c      	ldr	r3, [pc, #48]	; (800141c <HAL_TIM_Base_MspInit+0x78>)
 80013ec:	69db      	ldr	r3, [r3, #28]
 80013ee:	4a0b      	ldr	r2, [pc, #44]	; (800141c <HAL_TIM_Base_MspInit+0x78>)
 80013f0:	f043 0302 	orr.w	r3, r3, #2
 80013f4:	61d3      	str	r3, [r2, #28]
 80013f6:	4b09      	ldr	r3, [pc, #36]	; (800141c <HAL_TIM_Base_MspInit+0x78>)
 80013f8:	69db      	ldr	r3, [r3, #28]
 80013fa:	f003 0302 	and.w	r3, r3, #2
 80013fe:	60bb      	str	r3, [r7, #8]
 8001400:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001402:	2200      	movs	r2, #0
 8001404:	2100      	movs	r1, #0
 8001406:	201d      	movs	r0, #29
 8001408:	f000 fc1b 	bl	8001c42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800140c:	201d      	movs	r0, #29
 800140e:	f000 fc34 	bl	8001c7a <HAL_NVIC_EnableIRQ>
}
 8001412:	bf00      	nop
 8001414:	3710      	adds	r7, #16
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	40021000 	.word	0x40021000
 8001420:	40000400 	.word	0x40000400

08001424 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b088      	sub	sp, #32
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800142c:	f107 0310 	add.w	r3, r7, #16
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]
 8001434:	605a      	str	r2, [r3, #4]
 8001436:	609a      	str	r2, [r3, #8]
 8001438:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a0f      	ldr	r2, [pc, #60]	; (800147c <HAL_TIM_MspPostInit+0x58>)
 8001440:	4293      	cmp	r3, r2
 8001442:	d117      	bne.n	8001474 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001444:	4b0e      	ldr	r3, [pc, #56]	; (8001480 <HAL_TIM_MspPostInit+0x5c>)
 8001446:	699b      	ldr	r3, [r3, #24]
 8001448:	4a0d      	ldr	r2, [pc, #52]	; (8001480 <HAL_TIM_MspPostInit+0x5c>)
 800144a:	f043 0304 	orr.w	r3, r3, #4
 800144e:	6193      	str	r3, [r2, #24]
 8001450:	4b0b      	ldr	r3, [pc, #44]	; (8001480 <HAL_TIM_MspPostInit+0x5c>)
 8001452:	699b      	ldr	r3, [r3, #24]
 8001454:	f003 0304 	and.w	r3, r3, #4
 8001458:	60fb      	str	r3, [r7, #12]
 800145a:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800145c:	2340      	movs	r3, #64	; 0x40
 800145e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001460:	2302      	movs	r3, #2
 8001462:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001464:	2302      	movs	r3, #2
 8001466:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001468:	f107 0310 	add.w	r3, r7, #16
 800146c:	4619      	mov	r1, r3
 800146e:	4805      	ldr	r0, [pc, #20]	; (8001484 <HAL_TIM_MspPostInit+0x60>)
 8001470:	f000 fcd0 	bl	8001e14 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001474:	bf00      	nop
 8001476:	3720      	adds	r7, #32
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	40000400 	.word	0x40000400
 8001480:	40021000 	.word	0x40021000
 8001484:	40010800 	.word	0x40010800

08001488 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b088      	sub	sp, #32
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001490:	f107 0310 	add.w	r3, r7, #16
 8001494:	2200      	movs	r2, #0
 8001496:	601a      	str	r2, [r3, #0]
 8001498:	605a      	str	r2, [r3, #4]
 800149a:	609a      	str	r2, [r3, #8]
 800149c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a1f      	ldr	r2, [pc, #124]	; (8001520 <HAL_UART_MspInit+0x98>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d137      	bne.n	8001518 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014a8:	4b1e      	ldr	r3, [pc, #120]	; (8001524 <HAL_UART_MspInit+0x9c>)
 80014aa:	69db      	ldr	r3, [r3, #28]
 80014ac:	4a1d      	ldr	r2, [pc, #116]	; (8001524 <HAL_UART_MspInit+0x9c>)
 80014ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014b2:	61d3      	str	r3, [r2, #28]
 80014b4:	4b1b      	ldr	r3, [pc, #108]	; (8001524 <HAL_UART_MspInit+0x9c>)
 80014b6:	69db      	ldr	r3, [r3, #28]
 80014b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014bc:	60fb      	str	r3, [r7, #12]
 80014be:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014c0:	4b18      	ldr	r3, [pc, #96]	; (8001524 <HAL_UART_MspInit+0x9c>)
 80014c2:	699b      	ldr	r3, [r3, #24]
 80014c4:	4a17      	ldr	r2, [pc, #92]	; (8001524 <HAL_UART_MspInit+0x9c>)
 80014c6:	f043 0304 	orr.w	r3, r3, #4
 80014ca:	6193      	str	r3, [r2, #24]
 80014cc:	4b15      	ldr	r3, [pc, #84]	; (8001524 <HAL_UART_MspInit+0x9c>)
 80014ce:	699b      	ldr	r3, [r3, #24]
 80014d0:	f003 0304 	and.w	r3, r3, #4
 80014d4:	60bb      	str	r3, [r7, #8]
 80014d6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80014d8:	2304      	movs	r3, #4
 80014da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014dc:	2302      	movs	r3, #2
 80014de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014e0:	2303      	movs	r3, #3
 80014e2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014e4:	f107 0310 	add.w	r3, r7, #16
 80014e8:	4619      	mov	r1, r3
 80014ea:	480f      	ldr	r0, [pc, #60]	; (8001528 <HAL_UART_MspInit+0xa0>)
 80014ec:	f000 fc92 	bl	8001e14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80014f0:	2308      	movs	r3, #8
 80014f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014f4:	2300      	movs	r3, #0
 80014f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f8:	2300      	movs	r3, #0
 80014fa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014fc:	f107 0310 	add.w	r3, r7, #16
 8001500:	4619      	mov	r1, r3
 8001502:	4809      	ldr	r0, [pc, #36]	; (8001528 <HAL_UART_MspInit+0xa0>)
 8001504:	f000 fc86 	bl	8001e14 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001508:	2200      	movs	r2, #0
 800150a:	2100      	movs	r1, #0
 800150c:	2026      	movs	r0, #38	; 0x26
 800150e:	f000 fb98 	bl	8001c42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001512:	2026      	movs	r0, #38	; 0x26
 8001514:	f000 fbb1 	bl	8001c7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001518:	bf00      	nop
 800151a:	3720      	adds	r7, #32
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	40004400 	.word	0x40004400
 8001524:	40021000 	.word	0x40021000
 8001528:	40010800 	.word	0x40010800

0800152c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001530:	e7fe      	b.n	8001530 <NMI_Handler+0x4>

08001532 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001532:	b480      	push	{r7}
 8001534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001536:	e7fe      	b.n	8001536 <HardFault_Handler+0x4>

08001538 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800153c:	e7fe      	b.n	800153c <MemManage_Handler+0x4>

0800153e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800153e:	b480      	push	{r7}
 8001540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001542:	e7fe      	b.n	8001542 <BusFault_Handler+0x4>

08001544 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001548:	e7fe      	b.n	8001548 <UsageFault_Handler+0x4>

0800154a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800154a:	b480      	push	{r7}
 800154c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800154e:	bf00      	nop
 8001550:	46bd      	mov	sp, r7
 8001552:	bc80      	pop	{r7}
 8001554:	4770      	bx	lr

08001556 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001556:	b480      	push	{r7}
 8001558:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800155a:	bf00      	nop
 800155c:	46bd      	mov	sp, r7
 800155e:	bc80      	pop	{r7}
 8001560:	4770      	bx	lr

08001562 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001562:	b480      	push	{r7}
 8001564:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001566:	bf00      	nop
 8001568:	46bd      	mov	sp, r7
 800156a:	bc80      	pop	{r7}
 800156c:	4770      	bx	lr

0800156e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800156e:	b580      	push	{r7, lr}
 8001570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001572:	f000 fa73 	bl	8001a5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001576:	bf00      	nop
 8001578:	bd80      	pop	{r7, pc}
	...

0800157c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001580:	4802      	ldr	r0, [pc, #8]	; (800158c <TIM2_IRQHandler+0x10>)
 8001582:	f001 fba7 	bl	8002cd4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001586:	bf00      	nop
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	200000e0 	.word	0x200000e0

08001590 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001594:	4802      	ldr	r0, [pc, #8]	; (80015a0 <TIM3_IRQHandler+0x10>)
 8001596:	f001 fb9d 	bl	8002cd4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800159a:	bf00      	nop
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	20000128 	.word	0x20000128

080015a4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80015a8:	4802      	ldr	r0, [pc, #8]	; (80015b4 <USART2_IRQHandler+0x10>)
 80015aa:	f002 fa31 	bl	8003a10 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80015ae:	bf00      	nop
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	20000170 	.word	0x20000170

080015b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b086      	sub	sp, #24
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015c0:	4a14      	ldr	r2, [pc, #80]	; (8001614 <_sbrk+0x5c>)
 80015c2:	4b15      	ldr	r3, [pc, #84]	; (8001618 <_sbrk+0x60>)
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015cc:	4b13      	ldr	r3, [pc, #76]	; (800161c <_sbrk+0x64>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d102      	bne.n	80015da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015d4:	4b11      	ldr	r3, [pc, #68]	; (800161c <_sbrk+0x64>)
 80015d6:	4a12      	ldr	r2, [pc, #72]	; (8001620 <_sbrk+0x68>)
 80015d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015da:	4b10      	ldr	r3, [pc, #64]	; (800161c <_sbrk+0x64>)
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4413      	add	r3, r2
 80015e2:	693a      	ldr	r2, [r7, #16]
 80015e4:	429a      	cmp	r2, r3
 80015e6:	d207      	bcs.n	80015f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015e8:	f002 ff8a 	bl	8004500 <__errno>
 80015ec:	4603      	mov	r3, r0
 80015ee:	220c      	movs	r2, #12
 80015f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015f2:	f04f 33ff 	mov.w	r3, #4294967295
 80015f6:	e009      	b.n	800160c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015f8:	4b08      	ldr	r3, [pc, #32]	; (800161c <_sbrk+0x64>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015fe:	4b07      	ldr	r3, [pc, #28]	; (800161c <_sbrk+0x64>)
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	4413      	add	r3, r2
 8001606:	4a05      	ldr	r2, [pc, #20]	; (800161c <_sbrk+0x64>)
 8001608:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800160a:	68fb      	ldr	r3, [r7, #12]
}
 800160c:	4618      	mov	r0, r3
 800160e:	3718      	adds	r7, #24
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	20005000 	.word	0x20005000
 8001618:	00000400 	.word	0x00000400
 800161c:	200001b8 	.word	0x200001b8
 8001620:	20000340 	.word	0x20000340

08001624 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001628:	bf00      	nop
 800162a:	46bd      	mov	sp, r7
 800162c:	bc80      	pop	{r7}
 800162e:	4770      	bx	lr

08001630 <setTimer1>:
void setTimer0(int duration) {
	timer0_counter = duration/TIMER_CYCLE;
	timer0_flag = 0;
}

void setTimer1(int duration) {
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
	timer1_counter = duration/TIMER_CYCLE;
 8001638:	4b07      	ldr	r3, [pc, #28]	; (8001658 <setTimer1+0x28>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	687a      	ldr	r2, [r7, #4]
 800163e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001642:	4a06      	ldr	r2, [pc, #24]	; (800165c <setTimer1+0x2c>)
 8001644:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8001646:	4b06      	ldr	r3, [pc, #24]	; (8001660 <setTimer1+0x30>)
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
}
 800164c:	bf00      	nop
 800164e:	370c      	adds	r7, #12
 8001650:	46bd      	mov	sp, r7
 8001652:	bc80      	pop	{r7}
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	2000003c 	.word	0x2000003c
 800165c:	200001c0 	.word	0x200001c0
 8001660:	200001dc 	.word	0x200001dc

08001664 <setTimer4>:
void setTimer3(int duration) {
	timer3_counter = duration/TIMER_CYCLE;
	timer3_flag = 0;
}

void setTimer4(int duration) {
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
	timer4_counter = duration/TIMER_CYCLE;
 800166c:	4b07      	ldr	r3, [pc, #28]	; (800168c <setTimer4+0x28>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	687a      	ldr	r2, [r7, #4]
 8001672:	fb92 f3f3 	sdiv	r3, r2, r3
 8001676:	4a06      	ldr	r2, [pc, #24]	; (8001690 <setTimer4+0x2c>)
 8001678:	6013      	str	r3, [r2, #0]
	timer4_flag = 0;
 800167a:	4b06      	ldr	r3, [pc, #24]	; (8001694 <setTimer4+0x30>)
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]
}
 8001680:	bf00      	nop
 8001682:	370c      	adds	r7, #12
 8001684:	46bd      	mov	sp, r7
 8001686:	bc80      	pop	{r7}
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	2000003c 	.word	0x2000003c
 8001690:	200001cc 	.word	0x200001cc
 8001694:	200001e8 	.word	0x200001e8

08001698 <setTimer5>:

void setTimer5(int duration) {
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
	timer5_counter = duration/TIMER_CYCLE;
 80016a0:	4b07      	ldr	r3, [pc, #28]	; (80016c0 <setTimer5+0x28>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	687a      	ldr	r2, [r7, #4]
 80016a6:	fb92 f3f3 	sdiv	r3, r2, r3
 80016aa:	4a06      	ldr	r2, [pc, #24]	; (80016c4 <setTimer5+0x2c>)
 80016ac:	6013      	str	r3, [r2, #0]
	timer5_flag = 0;
 80016ae:	4b06      	ldr	r3, [pc, #24]	; (80016c8 <setTimer5+0x30>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	601a      	str	r2, [r3, #0]
}
 80016b4:	bf00      	nop
 80016b6:	370c      	adds	r7, #12
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bc80      	pop	{r7}
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	2000003c 	.word	0x2000003c
 80016c4:	200001d0 	.word	0x200001d0
 80016c8:	200001ec 	.word	0x200001ec

080016cc <setTimer6>:

void setTimer6(int duration) {
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
	timer6_counter = duration/TIMER_CYCLE;
 80016d4:	4b07      	ldr	r3, [pc, #28]	; (80016f4 <setTimer6+0x28>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	687a      	ldr	r2, [r7, #4]
 80016da:	fb92 f3f3 	sdiv	r3, r2, r3
 80016de:	4a06      	ldr	r2, [pc, #24]	; (80016f8 <setTimer6+0x2c>)
 80016e0:	6013      	str	r3, [r2, #0]
	timer6_flag = 0;
 80016e2:	4b06      	ldr	r3, [pc, #24]	; (80016fc <setTimer6+0x30>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	601a      	str	r2, [r3, #0]
}
 80016e8:	bf00      	nop
 80016ea:	370c      	adds	r7, #12
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bc80      	pop	{r7}
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	2000003c 	.word	0x2000003c
 80016f8:	200001d4 	.word	0x200001d4
 80016fc:	200001f0 	.word	0x200001f0

08001700 <timer_run>:

void timer_run() {
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
	if (timer0_counter > 0) {
 8001704:	4b39      	ldr	r3, [pc, #228]	; (80017ec <timer_run+0xec>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	2b00      	cmp	r3, #0
 800170a:	dd0b      	ble.n	8001724 <timer_run+0x24>
		timer0_counter--;
 800170c:	4b37      	ldr	r3, [pc, #220]	; (80017ec <timer_run+0xec>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	3b01      	subs	r3, #1
 8001712:	4a36      	ldr	r2, [pc, #216]	; (80017ec <timer_run+0xec>)
 8001714:	6013      	str	r3, [r2, #0]
		if (timer0_counter == 0) timer0_flag = 1;
 8001716:	4b35      	ldr	r3, [pc, #212]	; (80017ec <timer_run+0xec>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d102      	bne.n	8001724 <timer_run+0x24>
 800171e:	4b34      	ldr	r3, [pc, #208]	; (80017f0 <timer_run+0xf0>)
 8001720:	2201      	movs	r2, #1
 8001722:	601a      	str	r2, [r3, #0]
	}
	if (timer1_counter > 0) {
 8001724:	4b33      	ldr	r3, [pc, #204]	; (80017f4 <timer_run+0xf4>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	2b00      	cmp	r3, #0
 800172a:	dd0b      	ble.n	8001744 <timer_run+0x44>
		timer1_counter--;
 800172c:	4b31      	ldr	r3, [pc, #196]	; (80017f4 <timer_run+0xf4>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	3b01      	subs	r3, #1
 8001732:	4a30      	ldr	r2, [pc, #192]	; (80017f4 <timer_run+0xf4>)
 8001734:	6013      	str	r3, [r2, #0]
		if (timer1_counter == 0) timer1_flag = 1;
 8001736:	4b2f      	ldr	r3, [pc, #188]	; (80017f4 <timer_run+0xf4>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d102      	bne.n	8001744 <timer_run+0x44>
 800173e:	4b2e      	ldr	r3, [pc, #184]	; (80017f8 <timer_run+0xf8>)
 8001740:	2201      	movs	r2, #1
 8001742:	601a      	str	r2, [r3, #0]
	}
	if (timer2_counter > 0) {
 8001744:	4b2d      	ldr	r3, [pc, #180]	; (80017fc <timer_run+0xfc>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	2b00      	cmp	r3, #0
 800174a:	dd0b      	ble.n	8001764 <timer_run+0x64>
		timer2_counter--;
 800174c:	4b2b      	ldr	r3, [pc, #172]	; (80017fc <timer_run+0xfc>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	3b01      	subs	r3, #1
 8001752:	4a2a      	ldr	r2, [pc, #168]	; (80017fc <timer_run+0xfc>)
 8001754:	6013      	str	r3, [r2, #0]
		if (timer2_counter == 0) timer2_flag = 1;
 8001756:	4b29      	ldr	r3, [pc, #164]	; (80017fc <timer_run+0xfc>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d102      	bne.n	8001764 <timer_run+0x64>
 800175e:	4b28      	ldr	r3, [pc, #160]	; (8001800 <timer_run+0x100>)
 8001760:	2201      	movs	r2, #1
 8001762:	601a      	str	r2, [r3, #0]
	}
	if (timer3_counter > 0) {
 8001764:	4b27      	ldr	r3, [pc, #156]	; (8001804 <timer_run+0x104>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2b00      	cmp	r3, #0
 800176a:	dd0b      	ble.n	8001784 <timer_run+0x84>
		timer3_counter--;
 800176c:	4b25      	ldr	r3, [pc, #148]	; (8001804 <timer_run+0x104>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	3b01      	subs	r3, #1
 8001772:	4a24      	ldr	r2, [pc, #144]	; (8001804 <timer_run+0x104>)
 8001774:	6013      	str	r3, [r2, #0]
		if (timer3_counter == 0) timer3_flag = 1;
 8001776:	4b23      	ldr	r3, [pc, #140]	; (8001804 <timer_run+0x104>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d102      	bne.n	8001784 <timer_run+0x84>
 800177e:	4b22      	ldr	r3, [pc, #136]	; (8001808 <timer_run+0x108>)
 8001780:	2201      	movs	r2, #1
 8001782:	601a      	str	r2, [r3, #0]
	}
	if (timer4_counter > 0) {
 8001784:	4b21      	ldr	r3, [pc, #132]	; (800180c <timer_run+0x10c>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	2b00      	cmp	r3, #0
 800178a:	dd0b      	ble.n	80017a4 <timer_run+0xa4>
		timer4_counter--;
 800178c:	4b1f      	ldr	r3, [pc, #124]	; (800180c <timer_run+0x10c>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	3b01      	subs	r3, #1
 8001792:	4a1e      	ldr	r2, [pc, #120]	; (800180c <timer_run+0x10c>)
 8001794:	6013      	str	r3, [r2, #0]
		if (timer4_counter == 0) timer4_flag = 1;
 8001796:	4b1d      	ldr	r3, [pc, #116]	; (800180c <timer_run+0x10c>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d102      	bne.n	80017a4 <timer_run+0xa4>
 800179e:	4b1c      	ldr	r3, [pc, #112]	; (8001810 <timer_run+0x110>)
 80017a0:	2201      	movs	r2, #1
 80017a2:	601a      	str	r2, [r3, #0]
	}
	if (timer5_counter > 0) {
 80017a4:	4b1b      	ldr	r3, [pc, #108]	; (8001814 <timer_run+0x114>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	dd0b      	ble.n	80017c4 <timer_run+0xc4>
		timer5_counter--;
 80017ac:	4b19      	ldr	r3, [pc, #100]	; (8001814 <timer_run+0x114>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	3b01      	subs	r3, #1
 80017b2:	4a18      	ldr	r2, [pc, #96]	; (8001814 <timer_run+0x114>)
 80017b4:	6013      	str	r3, [r2, #0]
		if (timer5_counter == 0) timer5_flag = 1;
 80017b6:	4b17      	ldr	r3, [pc, #92]	; (8001814 <timer_run+0x114>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d102      	bne.n	80017c4 <timer_run+0xc4>
 80017be:	4b16      	ldr	r3, [pc, #88]	; (8001818 <timer_run+0x118>)
 80017c0:	2201      	movs	r2, #1
 80017c2:	601a      	str	r2, [r3, #0]
	}
	if (timer6_counter > 0) {
 80017c4:	4b15      	ldr	r3, [pc, #84]	; (800181c <timer_run+0x11c>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	dd0b      	ble.n	80017e4 <timer_run+0xe4>
		timer6_counter--;
 80017cc:	4b13      	ldr	r3, [pc, #76]	; (800181c <timer_run+0x11c>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	3b01      	subs	r3, #1
 80017d2:	4a12      	ldr	r2, [pc, #72]	; (800181c <timer_run+0x11c>)
 80017d4:	6013      	str	r3, [r2, #0]
		if (timer6_counter == 0) timer6_flag = 1;
 80017d6:	4b11      	ldr	r3, [pc, #68]	; (800181c <timer_run+0x11c>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d102      	bne.n	80017e4 <timer_run+0xe4>
 80017de:	4b10      	ldr	r3, [pc, #64]	; (8001820 <timer_run+0x120>)
 80017e0:	2201      	movs	r2, #1
 80017e2:	601a      	str	r2, [r3, #0]
	}
}
 80017e4:	bf00      	nop
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bc80      	pop	{r7}
 80017ea:	4770      	bx	lr
 80017ec:	200001bc 	.word	0x200001bc
 80017f0:	200001d8 	.word	0x200001d8
 80017f4:	200001c0 	.word	0x200001c0
 80017f8:	200001dc 	.word	0x200001dc
 80017fc:	200001c4 	.word	0x200001c4
 8001800:	200001e0 	.word	0x200001e0
 8001804:	200001c8 	.word	0x200001c8
 8001808:	200001e4 	.word	0x200001e4
 800180c:	200001cc 	.word	0x200001cc
 8001810:	200001e8 	.word	0x200001e8
 8001814:	200001d0 	.word	0x200001d0
 8001818:	200001ec 	.word	0x200001ec
 800181c:	200001d4 	.word	0x200001d4
 8001820:	200001f0 	.word	0x200001f0

08001824 <disp_t_red_uart>:
#include "string.h"
#include "stdio.h"
#include "input_reading.h"
#include "input_processing.h"

void disp_t_red_uart() {
 8001824:	b580      	push	{r7, lr}
 8001826:	b084      	sub	sp, #16
 8001828:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart2, "!T_RED = ", 11, 50);
 800182a:	2332      	movs	r3, #50	; 0x32
 800182c:	220b      	movs	r2, #11
 800182e:	490b      	ldr	r1, [pc, #44]	; (800185c <disp_t_red_uart+0x38>)
 8001830:	480b      	ldr	r0, [pc, #44]	; (8001860 <disp_t_red_uart+0x3c>)
 8001832:	f002 f869 	bl	8003908 <HAL_UART_Transmit>
	char buffer[16];
	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, sprintf(buffer, "%d\n\r", T_RED), 50);
 8001836:	4b0b      	ldr	r3, [pc, #44]	; (8001864 <disp_t_red_uart+0x40>)
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	463b      	mov	r3, r7
 800183c:	490a      	ldr	r1, [pc, #40]	; (8001868 <disp_t_red_uart+0x44>)
 800183e:	4618      	mov	r0, r3
 8001840:	f002 fe36 	bl	80044b0 <siprintf>
 8001844:	4603      	mov	r3, r0
 8001846:	b29a      	uxth	r2, r3
 8001848:	4639      	mov	r1, r7
 800184a:	2332      	movs	r3, #50	; 0x32
 800184c:	4804      	ldr	r0, [pc, #16]	; (8001860 <disp_t_red_uart+0x3c>)
 800184e:	f002 f85b 	bl	8003908 <HAL_UART_Transmit>
}
 8001852:	bf00      	nop
 8001854:	3710      	adds	r7, #16
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	08004e8c 	.word	0x08004e8c
 8001860:	20000170 	.word	0x20000170
 8001864:	20000000 	.word	0x20000000
 8001868:	08004e98 	.word	0x08004e98

0800186c <disp_t_amber_uart>:

void disp_t_amber_uart() {
 800186c:	b580      	push	{r7, lr}
 800186e:	b084      	sub	sp, #16
 8001870:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart2, "!T_AMBER = ", 11, 50);
 8001872:	2332      	movs	r3, #50	; 0x32
 8001874:	220b      	movs	r2, #11
 8001876:	490b      	ldr	r1, [pc, #44]	; (80018a4 <disp_t_amber_uart+0x38>)
 8001878:	480b      	ldr	r0, [pc, #44]	; (80018a8 <disp_t_amber_uart+0x3c>)
 800187a:	f002 f845 	bl	8003908 <HAL_UART_Transmit>
	char buffer[16];
		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, sprintf(buffer, "%d\n\r", T_AMBER), 50);
 800187e:	4b0b      	ldr	r3, [pc, #44]	; (80018ac <disp_t_amber_uart+0x40>)
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	463b      	mov	r3, r7
 8001884:	490a      	ldr	r1, [pc, #40]	; (80018b0 <disp_t_amber_uart+0x44>)
 8001886:	4618      	mov	r0, r3
 8001888:	f002 fe12 	bl	80044b0 <siprintf>
 800188c:	4603      	mov	r3, r0
 800188e:	b29a      	uxth	r2, r3
 8001890:	4639      	mov	r1, r7
 8001892:	2332      	movs	r3, #50	; 0x32
 8001894:	4804      	ldr	r0, [pc, #16]	; (80018a8 <disp_t_amber_uart+0x3c>)
 8001896:	f002 f837 	bl	8003908 <HAL_UART_Transmit>
}
 800189a:	bf00      	nop
 800189c:	3710      	adds	r7, #16
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	08004ea0 	.word	0x08004ea0
 80018a8:	20000170 	.word	0x20000170
 80018ac:	20000004 	.word	0x20000004
 80018b0:	08004e98 	.word	0x08004e98

080018b4 <disp_t_green_uart>:

void disp_t_green_uart() {
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart2, "!T_GREEN = ", 11, 50);
 80018ba:	2332      	movs	r3, #50	; 0x32
 80018bc:	220b      	movs	r2, #11
 80018be:	490b      	ldr	r1, [pc, #44]	; (80018ec <disp_t_green_uart+0x38>)
 80018c0:	480b      	ldr	r0, [pc, #44]	; (80018f0 <disp_t_green_uart+0x3c>)
 80018c2:	f002 f821 	bl	8003908 <HAL_UART_Transmit>
	char buffer[16];
		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, sprintf(buffer, "%d\n\r", T_GREEN), 50);
 80018c6:	4b0b      	ldr	r3, [pc, #44]	; (80018f4 <disp_t_green_uart+0x40>)
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	463b      	mov	r3, r7
 80018cc:	490a      	ldr	r1, [pc, #40]	; (80018f8 <disp_t_green_uart+0x44>)
 80018ce:	4618      	mov	r0, r3
 80018d0:	f002 fdee 	bl	80044b0 <siprintf>
 80018d4:	4603      	mov	r3, r0
 80018d6:	b29a      	uxth	r2, r3
 80018d8:	4639      	mov	r1, r7
 80018da:	2332      	movs	r3, #50	; 0x32
 80018dc:	4804      	ldr	r0, [pc, #16]	; (80018f0 <disp_t_green_uart+0x3c>)
 80018de:	f002 f813 	bl	8003908 <HAL_UART_Transmit>
}
 80018e2:	bf00      	nop
 80018e4:	3710      	adds	r7, #16
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	08004eac 	.word	0x08004eac
 80018f0:	20000170 	.word	0x20000170
 80018f4:	20000008 	.word	0x20000008
 80018f8:	08004e98 	.word	0x08004e98

080018fc <disp_time_uart>:

void disp_time_uart(int t_road_1, int t_road_2) {
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b086      	sub	sp, #24
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	6039      	str	r1, [r7, #0]
	char buffer[16];
	HAL_UART_Transmit(&huart2, "!T_ROAD_1= ", 12, 50);
 8001906:	2332      	movs	r3, #50	; 0x32
 8001908:	220c      	movs	r2, #12
 800190a:	4919      	ldr	r1, [pc, #100]	; (8001970 <disp_time_uart+0x74>)
 800190c:	4819      	ldr	r0, [pc, #100]	; (8001974 <disp_time_uart+0x78>)
 800190e:	f001 fffb 	bl	8003908 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, sprintf(buffer, "%d\n\r", t_road_1), 50);
 8001912:	f107 0308 	add.w	r3, r7, #8
 8001916:	687a      	ldr	r2, [r7, #4]
 8001918:	4917      	ldr	r1, [pc, #92]	; (8001978 <disp_time_uart+0x7c>)
 800191a:	4618      	mov	r0, r3
 800191c:	f002 fdc8 	bl	80044b0 <siprintf>
 8001920:	4603      	mov	r3, r0
 8001922:	b29a      	uxth	r2, r3
 8001924:	f107 0108 	add.w	r1, r7, #8
 8001928:	2332      	movs	r3, #50	; 0x32
 800192a:	4812      	ldr	r0, [pc, #72]	; (8001974 <disp_time_uart+0x78>)
 800192c:	f001 ffec 	bl	8003908 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, "!T_ROAD_2= ", 12, 50);
 8001930:	2332      	movs	r3, #50	; 0x32
 8001932:	220c      	movs	r2, #12
 8001934:	4911      	ldr	r1, [pc, #68]	; (800197c <disp_time_uart+0x80>)
 8001936:	480f      	ldr	r0, [pc, #60]	; (8001974 <disp_time_uart+0x78>)
 8001938:	f001 ffe6 	bl	8003908 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, sprintf(buffer, "%d\n\r", t_road_2), 50);
 800193c:	f107 0308 	add.w	r3, r7, #8
 8001940:	683a      	ldr	r2, [r7, #0]
 8001942:	490d      	ldr	r1, [pc, #52]	; (8001978 <disp_time_uart+0x7c>)
 8001944:	4618      	mov	r0, r3
 8001946:	f002 fdb3 	bl	80044b0 <siprintf>
 800194a:	4603      	mov	r3, r0
 800194c:	b29a      	uxth	r2, r3
 800194e:	f107 0108 	add.w	r1, r7, #8
 8001952:	2332      	movs	r3, #50	; 0x32
 8001954:	4807      	ldr	r0, [pc, #28]	; (8001974 <disp_time_uart+0x78>)
 8001956:	f001 ffd7 	bl	8003908 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, "\n", 2, 50);
 800195a:	2332      	movs	r3, #50	; 0x32
 800195c:	2202      	movs	r2, #2
 800195e:	4908      	ldr	r1, [pc, #32]	; (8001980 <disp_time_uart+0x84>)
 8001960:	4804      	ldr	r0, [pc, #16]	; (8001974 <disp_time_uart+0x78>)
 8001962:	f001 ffd1 	bl	8003908 <HAL_UART_Transmit>
}
 8001966:	bf00      	nop
 8001968:	3718      	adds	r7, #24
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	08004eb8 	.word	0x08004eb8
 8001974:	20000170 	.word	0x20000170
 8001978:	08004e98 	.word	0x08004e98
 800197c:	08004ec4 	.word	0x08004ec4
 8001980:	08004ed0 	.word	0x08004ed0

08001984 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001984:	f7ff fe4e 	bl	8001624 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001988:	480b      	ldr	r0, [pc, #44]	; (80019b8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800198a:	490c      	ldr	r1, [pc, #48]	; (80019bc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800198c:	4a0c      	ldr	r2, [pc, #48]	; (80019c0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800198e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001990:	e002      	b.n	8001998 <LoopCopyDataInit>

08001992 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001992:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001994:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001996:	3304      	adds	r3, #4

08001998 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001998:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800199a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800199c:	d3f9      	bcc.n	8001992 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800199e:	4a09      	ldr	r2, [pc, #36]	; (80019c4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80019a0:	4c09      	ldr	r4, [pc, #36]	; (80019c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019a4:	e001      	b.n	80019aa <LoopFillZerobss>

080019a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019a8:	3204      	adds	r2, #4

080019aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019ac:	d3fb      	bcc.n	80019a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019ae:	f002 fdad 	bl	800450c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80019b2:	f7ff faed 	bl	8000f90 <main>
  bx lr
 80019b6:	4770      	bx	lr
  ldr r0, =_sdata
 80019b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019bc:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 80019c0:	08004f3c 	.word	0x08004f3c
  ldr r2, =_sbss
 80019c4:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 80019c8:	20000340 	.word	0x20000340

080019cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80019cc:	e7fe      	b.n	80019cc <ADC1_2_IRQHandler>
	...

080019d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019d4:	4b08      	ldr	r3, [pc, #32]	; (80019f8 <HAL_Init+0x28>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a07      	ldr	r2, [pc, #28]	; (80019f8 <HAL_Init+0x28>)
 80019da:	f043 0310 	orr.w	r3, r3, #16
 80019de:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019e0:	2003      	movs	r0, #3
 80019e2:	f000 f923 	bl	8001c2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019e6:	200f      	movs	r0, #15
 80019e8:	f000 f808 	bl	80019fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019ec:	f7ff fca8 	bl	8001340 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019f0:	2300      	movs	r3, #0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	40022000 	.word	0x40022000

080019fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a04:	4b12      	ldr	r3, [pc, #72]	; (8001a50 <HAL_InitTick+0x54>)
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	4b12      	ldr	r3, [pc, #72]	; (8001a54 <HAL_InitTick+0x58>)
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a12:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a16:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f000 f93b 	bl	8001c96 <HAL_SYSTICK_Config>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e00e      	b.n	8001a48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2b0f      	cmp	r3, #15
 8001a2e:	d80a      	bhi.n	8001a46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a30:	2200      	movs	r2, #0
 8001a32:	6879      	ldr	r1, [r7, #4]
 8001a34:	f04f 30ff 	mov.w	r0, #4294967295
 8001a38:	f000 f903 	bl	8001c42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a3c:	4a06      	ldr	r2, [pc, #24]	; (8001a58 <HAL_InitTick+0x5c>)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a42:	2300      	movs	r3, #0
 8001a44:	e000      	b.n	8001a48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3708      	adds	r7, #8
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	20000038 	.word	0x20000038
 8001a54:	20000044 	.word	0x20000044
 8001a58:	20000040 	.word	0x20000040

08001a5c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a60:	4b05      	ldr	r3, [pc, #20]	; (8001a78 <HAL_IncTick+0x1c>)
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	461a      	mov	r2, r3
 8001a66:	4b05      	ldr	r3, [pc, #20]	; (8001a7c <HAL_IncTick+0x20>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4413      	add	r3, r2
 8001a6c:	4a03      	ldr	r2, [pc, #12]	; (8001a7c <HAL_IncTick+0x20>)
 8001a6e:	6013      	str	r3, [r2, #0]
}
 8001a70:	bf00      	nop
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bc80      	pop	{r7}
 8001a76:	4770      	bx	lr
 8001a78:	20000044 	.word	0x20000044
 8001a7c:	200001f4 	.word	0x200001f4

08001a80 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  return uwTick;
 8001a84:	4b02      	ldr	r3, [pc, #8]	; (8001a90 <HAL_GetTick+0x10>)
 8001a86:	681b      	ldr	r3, [r3, #0]
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bc80      	pop	{r7}
 8001a8e:	4770      	bx	lr
 8001a90:	200001f4 	.word	0x200001f4

08001a94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b085      	sub	sp, #20
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	f003 0307 	and.w	r3, r3, #7
 8001aa2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001aa4:	4b0c      	ldr	r3, [pc, #48]	; (8001ad8 <__NVIC_SetPriorityGrouping+0x44>)
 8001aa6:	68db      	ldr	r3, [r3, #12]
 8001aa8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001aaa:	68ba      	ldr	r2, [r7, #8]
 8001aac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001abc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ac0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ac4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ac6:	4a04      	ldr	r2, [pc, #16]	; (8001ad8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	60d3      	str	r3, [r2, #12]
}
 8001acc:	bf00      	nop
 8001ace:	3714      	adds	r7, #20
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bc80      	pop	{r7}
 8001ad4:	4770      	bx	lr
 8001ad6:	bf00      	nop
 8001ad8:	e000ed00 	.word	0xe000ed00

08001adc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ae0:	4b04      	ldr	r3, [pc, #16]	; (8001af4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	0a1b      	lsrs	r3, r3, #8
 8001ae6:	f003 0307 	and.w	r3, r3, #7
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bc80      	pop	{r7}
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	e000ed00 	.word	0xe000ed00

08001af8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	4603      	mov	r3, r0
 8001b00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	db0b      	blt.n	8001b22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b0a:	79fb      	ldrb	r3, [r7, #7]
 8001b0c:	f003 021f 	and.w	r2, r3, #31
 8001b10:	4906      	ldr	r1, [pc, #24]	; (8001b2c <__NVIC_EnableIRQ+0x34>)
 8001b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b16:	095b      	lsrs	r3, r3, #5
 8001b18:	2001      	movs	r0, #1
 8001b1a:	fa00 f202 	lsl.w	r2, r0, r2
 8001b1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b22:	bf00      	nop
 8001b24:	370c      	adds	r7, #12
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bc80      	pop	{r7}
 8001b2a:	4770      	bx	lr
 8001b2c:	e000e100 	.word	0xe000e100

08001b30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	4603      	mov	r3, r0
 8001b38:	6039      	str	r1, [r7, #0]
 8001b3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	db0a      	blt.n	8001b5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	b2da      	uxtb	r2, r3
 8001b48:	490c      	ldr	r1, [pc, #48]	; (8001b7c <__NVIC_SetPriority+0x4c>)
 8001b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b4e:	0112      	lsls	r2, r2, #4
 8001b50:	b2d2      	uxtb	r2, r2
 8001b52:	440b      	add	r3, r1
 8001b54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b58:	e00a      	b.n	8001b70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	b2da      	uxtb	r2, r3
 8001b5e:	4908      	ldr	r1, [pc, #32]	; (8001b80 <__NVIC_SetPriority+0x50>)
 8001b60:	79fb      	ldrb	r3, [r7, #7]
 8001b62:	f003 030f 	and.w	r3, r3, #15
 8001b66:	3b04      	subs	r3, #4
 8001b68:	0112      	lsls	r2, r2, #4
 8001b6a:	b2d2      	uxtb	r2, r2
 8001b6c:	440b      	add	r3, r1
 8001b6e:	761a      	strb	r2, [r3, #24]
}
 8001b70:	bf00      	nop
 8001b72:	370c      	adds	r7, #12
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bc80      	pop	{r7}
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	e000e100 	.word	0xe000e100
 8001b80:	e000ed00 	.word	0xe000ed00

08001b84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b089      	sub	sp, #36	; 0x24
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	60f8      	str	r0, [r7, #12]
 8001b8c:	60b9      	str	r1, [r7, #8]
 8001b8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	f003 0307 	and.w	r3, r3, #7
 8001b96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	f1c3 0307 	rsb	r3, r3, #7
 8001b9e:	2b04      	cmp	r3, #4
 8001ba0:	bf28      	it	cs
 8001ba2:	2304      	movcs	r3, #4
 8001ba4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	3304      	adds	r3, #4
 8001baa:	2b06      	cmp	r3, #6
 8001bac:	d902      	bls.n	8001bb4 <NVIC_EncodePriority+0x30>
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	3b03      	subs	r3, #3
 8001bb2:	e000      	b.n	8001bb6 <NVIC_EncodePriority+0x32>
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bb8:	f04f 32ff 	mov.w	r2, #4294967295
 8001bbc:	69bb      	ldr	r3, [r7, #24]
 8001bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc2:	43da      	mvns	r2, r3
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	401a      	ands	r2, r3
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bcc:	f04f 31ff 	mov.w	r1, #4294967295
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	fa01 f303 	lsl.w	r3, r1, r3
 8001bd6:	43d9      	mvns	r1, r3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bdc:	4313      	orrs	r3, r2
         );
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3724      	adds	r7, #36	; 0x24
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bc80      	pop	{r7}
 8001be6:	4770      	bx	lr

08001be8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	3b01      	subs	r3, #1
 8001bf4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bf8:	d301      	bcc.n	8001bfe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e00f      	b.n	8001c1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bfe:	4a0a      	ldr	r2, [pc, #40]	; (8001c28 <SysTick_Config+0x40>)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	3b01      	subs	r3, #1
 8001c04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c06:	210f      	movs	r1, #15
 8001c08:	f04f 30ff 	mov.w	r0, #4294967295
 8001c0c:	f7ff ff90 	bl	8001b30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c10:	4b05      	ldr	r3, [pc, #20]	; (8001c28 <SysTick_Config+0x40>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c16:	4b04      	ldr	r3, [pc, #16]	; (8001c28 <SysTick_Config+0x40>)
 8001c18:	2207      	movs	r2, #7
 8001c1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c1c:	2300      	movs	r3, #0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3708      	adds	r7, #8
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	e000e010 	.word	0xe000e010

08001c2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c34:	6878      	ldr	r0, [r7, #4]
 8001c36:	f7ff ff2d 	bl	8001a94 <__NVIC_SetPriorityGrouping>
}
 8001c3a:	bf00      	nop
 8001c3c:	3708      	adds	r7, #8
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}

08001c42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c42:	b580      	push	{r7, lr}
 8001c44:	b086      	sub	sp, #24
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	4603      	mov	r3, r0
 8001c4a:	60b9      	str	r1, [r7, #8]
 8001c4c:	607a      	str	r2, [r7, #4]
 8001c4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c50:	2300      	movs	r3, #0
 8001c52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c54:	f7ff ff42 	bl	8001adc <__NVIC_GetPriorityGrouping>
 8001c58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c5a:	687a      	ldr	r2, [r7, #4]
 8001c5c:	68b9      	ldr	r1, [r7, #8]
 8001c5e:	6978      	ldr	r0, [r7, #20]
 8001c60:	f7ff ff90 	bl	8001b84 <NVIC_EncodePriority>
 8001c64:	4602      	mov	r2, r0
 8001c66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c6a:	4611      	mov	r1, r2
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f7ff ff5f 	bl	8001b30 <__NVIC_SetPriority>
}
 8001c72:	bf00      	nop
 8001c74:	3718      	adds	r7, #24
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}

08001c7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c7a:	b580      	push	{r7, lr}
 8001c7c:	b082      	sub	sp, #8
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	4603      	mov	r3, r0
 8001c82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f7ff ff35 	bl	8001af8 <__NVIC_EnableIRQ>
}
 8001c8e:	bf00      	nop
 8001c90:	3708      	adds	r7, #8
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}

08001c96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c96:	b580      	push	{r7, lr}
 8001c98:	b082      	sub	sp, #8
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f7ff ffa2 	bl	8001be8 <SysTick_Config>
 8001ca4:	4603      	mov	r3, r0
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}

08001cae <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001cae:	b480      	push	{r7}
 8001cb0:	b085      	sub	sp, #20
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	2b02      	cmp	r3, #2
 8001cc4:	d008      	beq.n	8001cd8 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2204      	movs	r2, #4
 8001cca:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e020      	b.n	8001d1a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f022 020e 	bic.w	r2, r2, #14
 8001ce6:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f022 0201 	bic.w	r2, r2, #1
 8001cf6:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d00:	2101      	movs	r1, #1
 8001d02:	fa01 f202 	lsl.w	r2, r1, r2
 8001d06:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2200      	movs	r2, #0
 8001d14:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001d18:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3714      	adds	r7, #20
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bc80      	pop	{r7}
 8001d22:	4770      	bx	lr

08001d24 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b084      	sub	sp, #16
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	2b02      	cmp	r3, #2
 8001d3a:	d005      	beq.n	8001d48 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2204      	movs	r2, #4
 8001d40:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	73fb      	strb	r3, [r7, #15]
 8001d46:	e051      	b.n	8001dec <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f022 020e 	bic.w	r2, r2, #14
 8001d56:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f022 0201 	bic.w	r2, r2, #1
 8001d66:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a22      	ldr	r2, [pc, #136]	; (8001df8 <HAL_DMA_Abort_IT+0xd4>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d029      	beq.n	8001dc6 <HAL_DMA_Abort_IT+0xa2>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a21      	ldr	r2, [pc, #132]	; (8001dfc <HAL_DMA_Abort_IT+0xd8>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d022      	beq.n	8001dc2 <HAL_DMA_Abort_IT+0x9e>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a1f      	ldr	r2, [pc, #124]	; (8001e00 <HAL_DMA_Abort_IT+0xdc>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d01a      	beq.n	8001dbc <HAL_DMA_Abort_IT+0x98>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a1e      	ldr	r2, [pc, #120]	; (8001e04 <HAL_DMA_Abort_IT+0xe0>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d012      	beq.n	8001db6 <HAL_DMA_Abort_IT+0x92>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a1c      	ldr	r2, [pc, #112]	; (8001e08 <HAL_DMA_Abort_IT+0xe4>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d00a      	beq.n	8001db0 <HAL_DMA_Abort_IT+0x8c>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a1b      	ldr	r2, [pc, #108]	; (8001e0c <HAL_DMA_Abort_IT+0xe8>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d102      	bne.n	8001daa <HAL_DMA_Abort_IT+0x86>
 8001da4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001da8:	e00e      	b.n	8001dc8 <HAL_DMA_Abort_IT+0xa4>
 8001daa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001dae:	e00b      	b.n	8001dc8 <HAL_DMA_Abort_IT+0xa4>
 8001db0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001db4:	e008      	b.n	8001dc8 <HAL_DMA_Abort_IT+0xa4>
 8001db6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dba:	e005      	b.n	8001dc8 <HAL_DMA_Abort_IT+0xa4>
 8001dbc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001dc0:	e002      	b.n	8001dc8 <HAL_DMA_Abort_IT+0xa4>
 8001dc2:	2310      	movs	r3, #16
 8001dc4:	e000      	b.n	8001dc8 <HAL_DMA_Abort_IT+0xa4>
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	4a11      	ldr	r2, [pc, #68]	; (8001e10 <HAL_DMA_Abort_IT+0xec>)
 8001dca:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2201      	movs	r2, #1
 8001dd0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d003      	beq.n	8001dec <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	4798      	blx	r3
    } 
  }
  return status;
 8001dec:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3710      	adds	r7, #16
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	40020008 	.word	0x40020008
 8001dfc:	4002001c 	.word	0x4002001c
 8001e00:	40020030 	.word	0x40020030
 8001e04:	40020044 	.word	0x40020044
 8001e08:	40020058 	.word	0x40020058
 8001e0c:	4002006c 	.word	0x4002006c
 8001e10:	40020000 	.word	0x40020000

08001e14 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b08b      	sub	sp, #44	; 0x2c
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001e22:	2300      	movs	r3, #0
 8001e24:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e26:	e169      	b.n	80020fc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e28:	2201      	movs	r2, #1
 8001e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e30:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	69fa      	ldr	r2, [r7, #28]
 8001e38:	4013      	ands	r3, r2
 8001e3a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001e3c:	69ba      	ldr	r2, [r7, #24]
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	f040 8158 	bne.w	80020f6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	4a9a      	ldr	r2, [pc, #616]	; (80020b4 <HAL_GPIO_Init+0x2a0>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d05e      	beq.n	8001f0e <HAL_GPIO_Init+0xfa>
 8001e50:	4a98      	ldr	r2, [pc, #608]	; (80020b4 <HAL_GPIO_Init+0x2a0>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d875      	bhi.n	8001f42 <HAL_GPIO_Init+0x12e>
 8001e56:	4a98      	ldr	r2, [pc, #608]	; (80020b8 <HAL_GPIO_Init+0x2a4>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d058      	beq.n	8001f0e <HAL_GPIO_Init+0xfa>
 8001e5c:	4a96      	ldr	r2, [pc, #600]	; (80020b8 <HAL_GPIO_Init+0x2a4>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d86f      	bhi.n	8001f42 <HAL_GPIO_Init+0x12e>
 8001e62:	4a96      	ldr	r2, [pc, #600]	; (80020bc <HAL_GPIO_Init+0x2a8>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d052      	beq.n	8001f0e <HAL_GPIO_Init+0xfa>
 8001e68:	4a94      	ldr	r2, [pc, #592]	; (80020bc <HAL_GPIO_Init+0x2a8>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d869      	bhi.n	8001f42 <HAL_GPIO_Init+0x12e>
 8001e6e:	4a94      	ldr	r2, [pc, #592]	; (80020c0 <HAL_GPIO_Init+0x2ac>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d04c      	beq.n	8001f0e <HAL_GPIO_Init+0xfa>
 8001e74:	4a92      	ldr	r2, [pc, #584]	; (80020c0 <HAL_GPIO_Init+0x2ac>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d863      	bhi.n	8001f42 <HAL_GPIO_Init+0x12e>
 8001e7a:	4a92      	ldr	r2, [pc, #584]	; (80020c4 <HAL_GPIO_Init+0x2b0>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d046      	beq.n	8001f0e <HAL_GPIO_Init+0xfa>
 8001e80:	4a90      	ldr	r2, [pc, #576]	; (80020c4 <HAL_GPIO_Init+0x2b0>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d85d      	bhi.n	8001f42 <HAL_GPIO_Init+0x12e>
 8001e86:	2b12      	cmp	r3, #18
 8001e88:	d82a      	bhi.n	8001ee0 <HAL_GPIO_Init+0xcc>
 8001e8a:	2b12      	cmp	r3, #18
 8001e8c:	d859      	bhi.n	8001f42 <HAL_GPIO_Init+0x12e>
 8001e8e:	a201      	add	r2, pc, #4	; (adr r2, 8001e94 <HAL_GPIO_Init+0x80>)
 8001e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e94:	08001f0f 	.word	0x08001f0f
 8001e98:	08001ee9 	.word	0x08001ee9
 8001e9c:	08001efb 	.word	0x08001efb
 8001ea0:	08001f3d 	.word	0x08001f3d
 8001ea4:	08001f43 	.word	0x08001f43
 8001ea8:	08001f43 	.word	0x08001f43
 8001eac:	08001f43 	.word	0x08001f43
 8001eb0:	08001f43 	.word	0x08001f43
 8001eb4:	08001f43 	.word	0x08001f43
 8001eb8:	08001f43 	.word	0x08001f43
 8001ebc:	08001f43 	.word	0x08001f43
 8001ec0:	08001f43 	.word	0x08001f43
 8001ec4:	08001f43 	.word	0x08001f43
 8001ec8:	08001f43 	.word	0x08001f43
 8001ecc:	08001f43 	.word	0x08001f43
 8001ed0:	08001f43 	.word	0x08001f43
 8001ed4:	08001f43 	.word	0x08001f43
 8001ed8:	08001ef1 	.word	0x08001ef1
 8001edc:	08001f05 	.word	0x08001f05
 8001ee0:	4a79      	ldr	r2, [pc, #484]	; (80020c8 <HAL_GPIO_Init+0x2b4>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d013      	beq.n	8001f0e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001ee6:	e02c      	b.n	8001f42 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	623b      	str	r3, [r7, #32]
          break;
 8001eee:	e029      	b.n	8001f44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	3304      	adds	r3, #4
 8001ef6:	623b      	str	r3, [r7, #32]
          break;
 8001ef8:	e024      	b.n	8001f44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	68db      	ldr	r3, [r3, #12]
 8001efe:	3308      	adds	r3, #8
 8001f00:	623b      	str	r3, [r7, #32]
          break;
 8001f02:	e01f      	b.n	8001f44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	330c      	adds	r3, #12
 8001f0a:	623b      	str	r3, [r7, #32]
          break;
 8001f0c:	e01a      	b.n	8001f44 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d102      	bne.n	8001f1c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f16:	2304      	movs	r3, #4
 8001f18:	623b      	str	r3, [r7, #32]
          break;
 8001f1a:	e013      	b.n	8001f44 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d105      	bne.n	8001f30 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f24:	2308      	movs	r3, #8
 8001f26:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	69fa      	ldr	r2, [r7, #28]
 8001f2c:	611a      	str	r2, [r3, #16]
          break;
 8001f2e:	e009      	b.n	8001f44 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f30:	2308      	movs	r3, #8
 8001f32:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	69fa      	ldr	r2, [r7, #28]
 8001f38:	615a      	str	r2, [r3, #20]
          break;
 8001f3a:	e003      	b.n	8001f44 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	623b      	str	r3, [r7, #32]
          break;
 8001f40:	e000      	b.n	8001f44 <HAL_GPIO_Init+0x130>
          break;
 8001f42:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f44:	69bb      	ldr	r3, [r7, #24]
 8001f46:	2bff      	cmp	r3, #255	; 0xff
 8001f48:	d801      	bhi.n	8001f4e <HAL_GPIO_Init+0x13a>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	e001      	b.n	8001f52 <HAL_GPIO_Init+0x13e>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	3304      	adds	r3, #4
 8001f52:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f54:	69bb      	ldr	r3, [r7, #24]
 8001f56:	2bff      	cmp	r3, #255	; 0xff
 8001f58:	d802      	bhi.n	8001f60 <HAL_GPIO_Init+0x14c>
 8001f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	e002      	b.n	8001f66 <HAL_GPIO_Init+0x152>
 8001f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f62:	3b08      	subs	r3, #8
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	210f      	movs	r1, #15
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	fa01 f303 	lsl.w	r3, r1, r3
 8001f74:	43db      	mvns	r3, r3
 8001f76:	401a      	ands	r2, r3
 8001f78:	6a39      	ldr	r1, [r7, #32]
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f80:	431a      	orrs	r2, r3
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	f000 80b1 	beq.w	80020f6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f94:	4b4d      	ldr	r3, [pc, #308]	; (80020cc <HAL_GPIO_Init+0x2b8>)
 8001f96:	699b      	ldr	r3, [r3, #24]
 8001f98:	4a4c      	ldr	r2, [pc, #304]	; (80020cc <HAL_GPIO_Init+0x2b8>)
 8001f9a:	f043 0301 	orr.w	r3, r3, #1
 8001f9e:	6193      	str	r3, [r2, #24]
 8001fa0:	4b4a      	ldr	r3, [pc, #296]	; (80020cc <HAL_GPIO_Init+0x2b8>)
 8001fa2:	699b      	ldr	r3, [r3, #24]
 8001fa4:	f003 0301 	and.w	r3, r3, #1
 8001fa8:	60bb      	str	r3, [r7, #8]
 8001faa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001fac:	4a48      	ldr	r2, [pc, #288]	; (80020d0 <HAL_GPIO_Init+0x2bc>)
 8001fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb0:	089b      	lsrs	r3, r3, #2
 8001fb2:	3302      	adds	r3, #2
 8001fb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fb8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fbc:	f003 0303 	and.w	r3, r3, #3
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	220f      	movs	r2, #15
 8001fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc8:	43db      	mvns	r3, r3
 8001fca:	68fa      	ldr	r2, [r7, #12]
 8001fcc:	4013      	ands	r3, r2
 8001fce:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	4a40      	ldr	r2, [pc, #256]	; (80020d4 <HAL_GPIO_Init+0x2c0>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d013      	beq.n	8002000 <HAL_GPIO_Init+0x1ec>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	4a3f      	ldr	r2, [pc, #252]	; (80020d8 <HAL_GPIO_Init+0x2c4>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d00d      	beq.n	8001ffc <HAL_GPIO_Init+0x1e8>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	4a3e      	ldr	r2, [pc, #248]	; (80020dc <HAL_GPIO_Init+0x2c8>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d007      	beq.n	8001ff8 <HAL_GPIO_Init+0x1e4>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	4a3d      	ldr	r2, [pc, #244]	; (80020e0 <HAL_GPIO_Init+0x2cc>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d101      	bne.n	8001ff4 <HAL_GPIO_Init+0x1e0>
 8001ff0:	2303      	movs	r3, #3
 8001ff2:	e006      	b.n	8002002 <HAL_GPIO_Init+0x1ee>
 8001ff4:	2304      	movs	r3, #4
 8001ff6:	e004      	b.n	8002002 <HAL_GPIO_Init+0x1ee>
 8001ff8:	2302      	movs	r3, #2
 8001ffa:	e002      	b.n	8002002 <HAL_GPIO_Init+0x1ee>
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e000      	b.n	8002002 <HAL_GPIO_Init+0x1ee>
 8002000:	2300      	movs	r3, #0
 8002002:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002004:	f002 0203 	and.w	r2, r2, #3
 8002008:	0092      	lsls	r2, r2, #2
 800200a:	4093      	lsls	r3, r2
 800200c:	68fa      	ldr	r2, [r7, #12]
 800200e:	4313      	orrs	r3, r2
 8002010:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002012:	492f      	ldr	r1, [pc, #188]	; (80020d0 <HAL_GPIO_Init+0x2bc>)
 8002014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002016:	089b      	lsrs	r3, r3, #2
 8002018:	3302      	adds	r3, #2
 800201a:	68fa      	ldr	r2, [r7, #12]
 800201c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002028:	2b00      	cmp	r3, #0
 800202a:	d006      	beq.n	800203a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800202c:	4b2d      	ldr	r3, [pc, #180]	; (80020e4 <HAL_GPIO_Init+0x2d0>)
 800202e:	689a      	ldr	r2, [r3, #8]
 8002030:	492c      	ldr	r1, [pc, #176]	; (80020e4 <HAL_GPIO_Init+0x2d0>)
 8002032:	69bb      	ldr	r3, [r7, #24]
 8002034:	4313      	orrs	r3, r2
 8002036:	608b      	str	r3, [r1, #8]
 8002038:	e006      	b.n	8002048 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800203a:	4b2a      	ldr	r3, [pc, #168]	; (80020e4 <HAL_GPIO_Init+0x2d0>)
 800203c:	689a      	ldr	r2, [r3, #8]
 800203e:	69bb      	ldr	r3, [r7, #24]
 8002040:	43db      	mvns	r3, r3
 8002042:	4928      	ldr	r1, [pc, #160]	; (80020e4 <HAL_GPIO_Init+0x2d0>)
 8002044:	4013      	ands	r3, r2
 8002046:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002050:	2b00      	cmp	r3, #0
 8002052:	d006      	beq.n	8002062 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002054:	4b23      	ldr	r3, [pc, #140]	; (80020e4 <HAL_GPIO_Init+0x2d0>)
 8002056:	68da      	ldr	r2, [r3, #12]
 8002058:	4922      	ldr	r1, [pc, #136]	; (80020e4 <HAL_GPIO_Init+0x2d0>)
 800205a:	69bb      	ldr	r3, [r7, #24]
 800205c:	4313      	orrs	r3, r2
 800205e:	60cb      	str	r3, [r1, #12]
 8002060:	e006      	b.n	8002070 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002062:	4b20      	ldr	r3, [pc, #128]	; (80020e4 <HAL_GPIO_Init+0x2d0>)
 8002064:	68da      	ldr	r2, [r3, #12]
 8002066:	69bb      	ldr	r3, [r7, #24]
 8002068:	43db      	mvns	r3, r3
 800206a:	491e      	ldr	r1, [pc, #120]	; (80020e4 <HAL_GPIO_Init+0x2d0>)
 800206c:	4013      	ands	r3, r2
 800206e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002078:	2b00      	cmp	r3, #0
 800207a:	d006      	beq.n	800208a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800207c:	4b19      	ldr	r3, [pc, #100]	; (80020e4 <HAL_GPIO_Init+0x2d0>)
 800207e:	685a      	ldr	r2, [r3, #4]
 8002080:	4918      	ldr	r1, [pc, #96]	; (80020e4 <HAL_GPIO_Init+0x2d0>)
 8002082:	69bb      	ldr	r3, [r7, #24]
 8002084:	4313      	orrs	r3, r2
 8002086:	604b      	str	r3, [r1, #4]
 8002088:	e006      	b.n	8002098 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800208a:	4b16      	ldr	r3, [pc, #88]	; (80020e4 <HAL_GPIO_Init+0x2d0>)
 800208c:	685a      	ldr	r2, [r3, #4]
 800208e:	69bb      	ldr	r3, [r7, #24]
 8002090:	43db      	mvns	r3, r3
 8002092:	4914      	ldr	r1, [pc, #80]	; (80020e4 <HAL_GPIO_Init+0x2d0>)
 8002094:	4013      	ands	r3, r2
 8002096:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d021      	beq.n	80020e8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80020a4:	4b0f      	ldr	r3, [pc, #60]	; (80020e4 <HAL_GPIO_Init+0x2d0>)
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	490e      	ldr	r1, [pc, #56]	; (80020e4 <HAL_GPIO_Init+0x2d0>)
 80020aa:	69bb      	ldr	r3, [r7, #24]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	600b      	str	r3, [r1, #0]
 80020b0:	e021      	b.n	80020f6 <HAL_GPIO_Init+0x2e2>
 80020b2:	bf00      	nop
 80020b4:	10320000 	.word	0x10320000
 80020b8:	10310000 	.word	0x10310000
 80020bc:	10220000 	.word	0x10220000
 80020c0:	10210000 	.word	0x10210000
 80020c4:	10120000 	.word	0x10120000
 80020c8:	10110000 	.word	0x10110000
 80020cc:	40021000 	.word	0x40021000
 80020d0:	40010000 	.word	0x40010000
 80020d4:	40010800 	.word	0x40010800
 80020d8:	40010c00 	.word	0x40010c00
 80020dc:	40011000 	.word	0x40011000
 80020e0:	40011400 	.word	0x40011400
 80020e4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80020e8:	4b0b      	ldr	r3, [pc, #44]	; (8002118 <HAL_GPIO_Init+0x304>)
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	43db      	mvns	r3, r3
 80020f0:	4909      	ldr	r1, [pc, #36]	; (8002118 <HAL_GPIO_Init+0x304>)
 80020f2:	4013      	ands	r3, r2
 80020f4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80020f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f8:	3301      	adds	r3, #1
 80020fa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002102:	fa22 f303 	lsr.w	r3, r2, r3
 8002106:	2b00      	cmp	r3, #0
 8002108:	f47f ae8e 	bne.w	8001e28 <HAL_GPIO_Init+0x14>
  }
}
 800210c:	bf00      	nop
 800210e:	bf00      	nop
 8002110:	372c      	adds	r7, #44	; 0x2c
 8002112:	46bd      	mov	sp, r7
 8002114:	bc80      	pop	{r7}
 8002116:	4770      	bx	lr
 8002118:	40010400 	.word	0x40010400

0800211c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800211c:	b480      	push	{r7}
 800211e:	b085      	sub	sp, #20
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	460b      	mov	r3, r1
 8002126:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	689a      	ldr	r2, [r3, #8]
 800212c:	887b      	ldrh	r3, [r7, #2]
 800212e:	4013      	ands	r3, r2
 8002130:	2b00      	cmp	r3, #0
 8002132:	d002      	beq.n	800213a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002134:	2301      	movs	r3, #1
 8002136:	73fb      	strb	r3, [r7, #15]
 8002138:	e001      	b.n	800213e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800213a:	2300      	movs	r3, #0
 800213c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800213e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002140:	4618      	mov	r0, r3
 8002142:	3714      	adds	r7, #20
 8002144:	46bd      	mov	sp, r7
 8002146:	bc80      	pop	{r7}
 8002148:	4770      	bx	lr

0800214a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800214a:	b480      	push	{r7}
 800214c:	b083      	sub	sp, #12
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]
 8002152:	460b      	mov	r3, r1
 8002154:	807b      	strh	r3, [r7, #2]
 8002156:	4613      	mov	r3, r2
 8002158:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800215a:	787b      	ldrb	r3, [r7, #1]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d003      	beq.n	8002168 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002160:	887a      	ldrh	r2, [r7, #2]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002166:	e003      	b.n	8002170 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002168:	887b      	ldrh	r3, [r7, #2]
 800216a:	041a      	lsls	r2, r3, #16
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	611a      	str	r2, [r3, #16]
}
 8002170:	bf00      	nop
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	bc80      	pop	{r7}
 8002178:	4770      	bx	lr
	...

0800217c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b086      	sub	sp, #24
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d101      	bne.n	800218e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e272      	b.n	8002674 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0301 	and.w	r3, r3, #1
 8002196:	2b00      	cmp	r3, #0
 8002198:	f000 8087 	beq.w	80022aa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800219c:	4b92      	ldr	r3, [pc, #584]	; (80023e8 <HAL_RCC_OscConfig+0x26c>)
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f003 030c 	and.w	r3, r3, #12
 80021a4:	2b04      	cmp	r3, #4
 80021a6:	d00c      	beq.n	80021c2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80021a8:	4b8f      	ldr	r3, [pc, #572]	; (80023e8 <HAL_RCC_OscConfig+0x26c>)
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f003 030c 	and.w	r3, r3, #12
 80021b0:	2b08      	cmp	r3, #8
 80021b2:	d112      	bne.n	80021da <HAL_RCC_OscConfig+0x5e>
 80021b4:	4b8c      	ldr	r3, [pc, #560]	; (80023e8 <HAL_RCC_OscConfig+0x26c>)
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021c0:	d10b      	bne.n	80021da <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021c2:	4b89      	ldr	r3, [pc, #548]	; (80023e8 <HAL_RCC_OscConfig+0x26c>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d06c      	beq.n	80022a8 <HAL_RCC_OscConfig+0x12c>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d168      	bne.n	80022a8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e24c      	b.n	8002674 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021e2:	d106      	bne.n	80021f2 <HAL_RCC_OscConfig+0x76>
 80021e4:	4b80      	ldr	r3, [pc, #512]	; (80023e8 <HAL_RCC_OscConfig+0x26c>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a7f      	ldr	r2, [pc, #508]	; (80023e8 <HAL_RCC_OscConfig+0x26c>)
 80021ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021ee:	6013      	str	r3, [r2, #0]
 80021f0:	e02e      	b.n	8002250 <HAL_RCC_OscConfig+0xd4>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d10c      	bne.n	8002214 <HAL_RCC_OscConfig+0x98>
 80021fa:	4b7b      	ldr	r3, [pc, #492]	; (80023e8 <HAL_RCC_OscConfig+0x26c>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a7a      	ldr	r2, [pc, #488]	; (80023e8 <HAL_RCC_OscConfig+0x26c>)
 8002200:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002204:	6013      	str	r3, [r2, #0]
 8002206:	4b78      	ldr	r3, [pc, #480]	; (80023e8 <HAL_RCC_OscConfig+0x26c>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a77      	ldr	r2, [pc, #476]	; (80023e8 <HAL_RCC_OscConfig+0x26c>)
 800220c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002210:	6013      	str	r3, [r2, #0]
 8002212:	e01d      	b.n	8002250 <HAL_RCC_OscConfig+0xd4>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800221c:	d10c      	bne.n	8002238 <HAL_RCC_OscConfig+0xbc>
 800221e:	4b72      	ldr	r3, [pc, #456]	; (80023e8 <HAL_RCC_OscConfig+0x26c>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a71      	ldr	r2, [pc, #452]	; (80023e8 <HAL_RCC_OscConfig+0x26c>)
 8002224:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002228:	6013      	str	r3, [r2, #0]
 800222a:	4b6f      	ldr	r3, [pc, #444]	; (80023e8 <HAL_RCC_OscConfig+0x26c>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a6e      	ldr	r2, [pc, #440]	; (80023e8 <HAL_RCC_OscConfig+0x26c>)
 8002230:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002234:	6013      	str	r3, [r2, #0]
 8002236:	e00b      	b.n	8002250 <HAL_RCC_OscConfig+0xd4>
 8002238:	4b6b      	ldr	r3, [pc, #428]	; (80023e8 <HAL_RCC_OscConfig+0x26c>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a6a      	ldr	r2, [pc, #424]	; (80023e8 <HAL_RCC_OscConfig+0x26c>)
 800223e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002242:	6013      	str	r3, [r2, #0]
 8002244:	4b68      	ldr	r3, [pc, #416]	; (80023e8 <HAL_RCC_OscConfig+0x26c>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a67      	ldr	r2, [pc, #412]	; (80023e8 <HAL_RCC_OscConfig+0x26c>)
 800224a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800224e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d013      	beq.n	8002280 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002258:	f7ff fc12 	bl	8001a80 <HAL_GetTick>
 800225c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800225e:	e008      	b.n	8002272 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002260:	f7ff fc0e 	bl	8001a80 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	2b64      	cmp	r3, #100	; 0x64
 800226c:	d901      	bls.n	8002272 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e200      	b.n	8002674 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002272:	4b5d      	ldr	r3, [pc, #372]	; (80023e8 <HAL_RCC_OscConfig+0x26c>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d0f0      	beq.n	8002260 <HAL_RCC_OscConfig+0xe4>
 800227e:	e014      	b.n	80022aa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002280:	f7ff fbfe 	bl	8001a80 <HAL_GetTick>
 8002284:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002286:	e008      	b.n	800229a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002288:	f7ff fbfa 	bl	8001a80 <HAL_GetTick>
 800228c:	4602      	mov	r2, r0
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	2b64      	cmp	r3, #100	; 0x64
 8002294:	d901      	bls.n	800229a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	e1ec      	b.n	8002674 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800229a:	4b53      	ldr	r3, [pc, #332]	; (80023e8 <HAL_RCC_OscConfig+0x26c>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d1f0      	bne.n	8002288 <HAL_RCC_OscConfig+0x10c>
 80022a6:	e000      	b.n	80022aa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0302 	and.w	r3, r3, #2
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d063      	beq.n	800237e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022b6:	4b4c      	ldr	r3, [pc, #304]	; (80023e8 <HAL_RCC_OscConfig+0x26c>)
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	f003 030c 	and.w	r3, r3, #12
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d00b      	beq.n	80022da <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80022c2:	4b49      	ldr	r3, [pc, #292]	; (80023e8 <HAL_RCC_OscConfig+0x26c>)
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	f003 030c 	and.w	r3, r3, #12
 80022ca:	2b08      	cmp	r3, #8
 80022cc:	d11c      	bne.n	8002308 <HAL_RCC_OscConfig+0x18c>
 80022ce:	4b46      	ldr	r3, [pc, #280]	; (80023e8 <HAL_RCC_OscConfig+0x26c>)
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d116      	bne.n	8002308 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022da:	4b43      	ldr	r3, [pc, #268]	; (80023e8 <HAL_RCC_OscConfig+0x26c>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0302 	and.w	r3, r3, #2
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d005      	beq.n	80022f2 <HAL_RCC_OscConfig+0x176>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	691b      	ldr	r3, [r3, #16]
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d001      	beq.n	80022f2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e1c0      	b.n	8002674 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022f2:	4b3d      	ldr	r3, [pc, #244]	; (80023e8 <HAL_RCC_OscConfig+0x26c>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	695b      	ldr	r3, [r3, #20]
 80022fe:	00db      	lsls	r3, r3, #3
 8002300:	4939      	ldr	r1, [pc, #228]	; (80023e8 <HAL_RCC_OscConfig+0x26c>)
 8002302:	4313      	orrs	r3, r2
 8002304:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002306:	e03a      	b.n	800237e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	691b      	ldr	r3, [r3, #16]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d020      	beq.n	8002352 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002310:	4b36      	ldr	r3, [pc, #216]	; (80023ec <HAL_RCC_OscConfig+0x270>)
 8002312:	2201      	movs	r2, #1
 8002314:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002316:	f7ff fbb3 	bl	8001a80 <HAL_GetTick>
 800231a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800231c:	e008      	b.n	8002330 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800231e:	f7ff fbaf 	bl	8001a80 <HAL_GetTick>
 8002322:	4602      	mov	r2, r0
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	1ad3      	subs	r3, r2, r3
 8002328:	2b02      	cmp	r3, #2
 800232a:	d901      	bls.n	8002330 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800232c:	2303      	movs	r3, #3
 800232e:	e1a1      	b.n	8002674 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002330:	4b2d      	ldr	r3, [pc, #180]	; (80023e8 <HAL_RCC_OscConfig+0x26c>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 0302 	and.w	r3, r3, #2
 8002338:	2b00      	cmp	r3, #0
 800233a:	d0f0      	beq.n	800231e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800233c:	4b2a      	ldr	r3, [pc, #168]	; (80023e8 <HAL_RCC_OscConfig+0x26c>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	695b      	ldr	r3, [r3, #20]
 8002348:	00db      	lsls	r3, r3, #3
 800234a:	4927      	ldr	r1, [pc, #156]	; (80023e8 <HAL_RCC_OscConfig+0x26c>)
 800234c:	4313      	orrs	r3, r2
 800234e:	600b      	str	r3, [r1, #0]
 8002350:	e015      	b.n	800237e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002352:	4b26      	ldr	r3, [pc, #152]	; (80023ec <HAL_RCC_OscConfig+0x270>)
 8002354:	2200      	movs	r2, #0
 8002356:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002358:	f7ff fb92 	bl	8001a80 <HAL_GetTick>
 800235c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800235e:	e008      	b.n	8002372 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002360:	f7ff fb8e 	bl	8001a80 <HAL_GetTick>
 8002364:	4602      	mov	r2, r0
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	2b02      	cmp	r3, #2
 800236c:	d901      	bls.n	8002372 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800236e:	2303      	movs	r3, #3
 8002370:	e180      	b.n	8002674 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002372:	4b1d      	ldr	r3, [pc, #116]	; (80023e8 <HAL_RCC_OscConfig+0x26c>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0302 	and.w	r3, r3, #2
 800237a:	2b00      	cmp	r3, #0
 800237c:	d1f0      	bne.n	8002360 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0308 	and.w	r3, r3, #8
 8002386:	2b00      	cmp	r3, #0
 8002388:	d03a      	beq.n	8002400 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	699b      	ldr	r3, [r3, #24]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d019      	beq.n	80023c6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002392:	4b17      	ldr	r3, [pc, #92]	; (80023f0 <HAL_RCC_OscConfig+0x274>)
 8002394:	2201      	movs	r2, #1
 8002396:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002398:	f7ff fb72 	bl	8001a80 <HAL_GetTick>
 800239c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800239e:	e008      	b.n	80023b2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023a0:	f7ff fb6e 	bl	8001a80 <HAL_GetTick>
 80023a4:	4602      	mov	r2, r0
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	d901      	bls.n	80023b2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80023ae:	2303      	movs	r3, #3
 80023b0:	e160      	b.n	8002674 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023b2:	4b0d      	ldr	r3, [pc, #52]	; (80023e8 <HAL_RCC_OscConfig+0x26c>)
 80023b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b6:	f003 0302 	and.w	r3, r3, #2
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d0f0      	beq.n	80023a0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80023be:	2001      	movs	r0, #1
 80023c0:	f000 face 	bl	8002960 <RCC_Delay>
 80023c4:	e01c      	b.n	8002400 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023c6:	4b0a      	ldr	r3, [pc, #40]	; (80023f0 <HAL_RCC_OscConfig+0x274>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023cc:	f7ff fb58 	bl	8001a80 <HAL_GetTick>
 80023d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023d2:	e00f      	b.n	80023f4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023d4:	f7ff fb54 	bl	8001a80 <HAL_GetTick>
 80023d8:	4602      	mov	r2, r0
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	2b02      	cmp	r3, #2
 80023e0:	d908      	bls.n	80023f4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80023e2:	2303      	movs	r3, #3
 80023e4:	e146      	b.n	8002674 <HAL_RCC_OscConfig+0x4f8>
 80023e6:	bf00      	nop
 80023e8:	40021000 	.word	0x40021000
 80023ec:	42420000 	.word	0x42420000
 80023f0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023f4:	4b92      	ldr	r3, [pc, #584]	; (8002640 <HAL_RCC_OscConfig+0x4c4>)
 80023f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f8:	f003 0302 	and.w	r3, r3, #2
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d1e9      	bne.n	80023d4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0304 	and.w	r3, r3, #4
 8002408:	2b00      	cmp	r3, #0
 800240a:	f000 80a6 	beq.w	800255a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800240e:	2300      	movs	r3, #0
 8002410:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002412:	4b8b      	ldr	r3, [pc, #556]	; (8002640 <HAL_RCC_OscConfig+0x4c4>)
 8002414:	69db      	ldr	r3, [r3, #28]
 8002416:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d10d      	bne.n	800243a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800241e:	4b88      	ldr	r3, [pc, #544]	; (8002640 <HAL_RCC_OscConfig+0x4c4>)
 8002420:	69db      	ldr	r3, [r3, #28]
 8002422:	4a87      	ldr	r2, [pc, #540]	; (8002640 <HAL_RCC_OscConfig+0x4c4>)
 8002424:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002428:	61d3      	str	r3, [r2, #28]
 800242a:	4b85      	ldr	r3, [pc, #532]	; (8002640 <HAL_RCC_OscConfig+0x4c4>)
 800242c:	69db      	ldr	r3, [r3, #28]
 800242e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002432:	60bb      	str	r3, [r7, #8]
 8002434:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002436:	2301      	movs	r3, #1
 8002438:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800243a:	4b82      	ldr	r3, [pc, #520]	; (8002644 <HAL_RCC_OscConfig+0x4c8>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002442:	2b00      	cmp	r3, #0
 8002444:	d118      	bne.n	8002478 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002446:	4b7f      	ldr	r3, [pc, #508]	; (8002644 <HAL_RCC_OscConfig+0x4c8>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a7e      	ldr	r2, [pc, #504]	; (8002644 <HAL_RCC_OscConfig+0x4c8>)
 800244c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002450:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002452:	f7ff fb15 	bl	8001a80 <HAL_GetTick>
 8002456:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002458:	e008      	b.n	800246c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800245a:	f7ff fb11 	bl	8001a80 <HAL_GetTick>
 800245e:	4602      	mov	r2, r0
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	1ad3      	subs	r3, r2, r3
 8002464:	2b64      	cmp	r3, #100	; 0x64
 8002466:	d901      	bls.n	800246c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002468:	2303      	movs	r3, #3
 800246a:	e103      	b.n	8002674 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800246c:	4b75      	ldr	r3, [pc, #468]	; (8002644 <HAL_RCC_OscConfig+0x4c8>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002474:	2b00      	cmp	r3, #0
 8002476:	d0f0      	beq.n	800245a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	2b01      	cmp	r3, #1
 800247e:	d106      	bne.n	800248e <HAL_RCC_OscConfig+0x312>
 8002480:	4b6f      	ldr	r3, [pc, #444]	; (8002640 <HAL_RCC_OscConfig+0x4c4>)
 8002482:	6a1b      	ldr	r3, [r3, #32]
 8002484:	4a6e      	ldr	r2, [pc, #440]	; (8002640 <HAL_RCC_OscConfig+0x4c4>)
 8002486:	f043 0301 	orr.w	r3, r3, #1
 800248a:	6213      	str	r3, [r2, #32]
 800248c:	e02d      	b.n	80024ea <HAL_RCC_OscConfig+0x36e>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	68db      	ldr	r3, [r3, #12]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d10c      	bne.n	80024b0 <HAL_RCC_OscConfig+0x334>
 8002496:	4b6a      	ldr	r3, [pc, #424]	; (8002640 <HAL_RCC_OscConfig+0x4c4>)
 8002498:	6a1b      	ldr	r3, [r3, #32]
 800249a:	4a69      	ldr	r2, [pc, #420]	; (8002640 <HAL_RCC_OscConfig+0x4c4>)
 800249c:	f023 0301 	bic.w	r3, r3, #1
 80024a0:	6213      	str	r3, [r2, #32]
 80024a2:	4b67      	ldr	r3, [pc, #412]	; (8002640 <HAL_RCC_OscConfig+0x4c4>)
 80024a4:	6a1b      	ldr	r3, [r3, #32]
 80024a6:	4a66      	ldr	r2, [pc, #408]	; (8002640 <HAL_RCC_OscConfig+0x4c4>)
 80024a8:	f023 0304 	bic.w	r3, r3, #4
 80024ac:	6213      	str	r3, [r2, #32]
 80024ae:	e01c      	b.n	80024ea <HAL_RCC_OscConfig+0x36e>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	2b05      	cmp	r3, #5
 80024b6:	d10c      	bne.n	80024d2 <HAL_RCC_OscConfig+0x356>
 80024b8:	4b61      	ldr	r3, [pc, #388]	; (8002640 <HAL_RCC_OscConfig+0x4c4>)
 80024ba:	6a1b      	ldr	r3, [r3, #32]
 80024bc:	4a60      	ldr	r2, [pc, #384]	; (8002640 <HAL_RCC_OscConfig+0x4c4>)
 80024be:	f043 0304 	orr.w	r3, r3, #4
 80024c2:	6213      	str	r3, [r2, #32]
 80024c4:	4b5e      	ldr	r3, [pc, #376]	; (8002640 <HAL_RCC_OscConfig+0x4c4>)
 80024c6:	6a1b      	ldr	r3, [r3, #32]
 80024c8:	4a5d      	ldr	r2, [pc, #372]	; (8002640 <HAL_RCC_OscConfig+0x4c4>)
 80024ca:	f043 0301 	orr.w	r3, r3, #1
 80024ce:	6213      	str	r3, [r2, #32]
 80024d0:	e00b      	b.n	80024ea <HAL_RCC_OscConfig+0x36e>
 80024d2:	4b5b      	ldr	r3, [pc, #364]	; (8002640 <HAL_RCC_OscConfig+0x4c4>)
 80024d4:	6a1b      	ldr	r3, [r3, #32]
 80024d6:	4a5a      	ldr	r2, [pc, #360]	; (8002640 <HAL_RCC_OscConfig+0x4c4>)
 80024d8:	f023 0301 	bic.w	r3, r3, #1
 80024dc:	6213      	str	r3, [r2, #32]
 80024de:	4b58      	ldr	r3, [pc, #352]	; (8002640 <HAL_RCC_OscConfig+0x4c4>)
 80024e0:	6a1b      	ldr	r3, [r3, #32]
 80024e2:	4a57      	ldr	r2, [pc, #348]	; (8002640 <HAL_RCC_OscConfig+0x4c4>)
 80024e4:	f023 0304 	bic.w	r3, r3, #4
 80024e8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	68db      	ldr	r3, [r3, #12]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d015      	beq.n	800251e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024f2:	f7ff fac5 	bl	8001a80 <HAL_GetTick>
 80024f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024f8:	e00a      	b.n	8002510 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024fa:	f7ff fac1 	bl	8001a80 <HAL_GetTick>
 80024fe:	4602      	mov	r2, r0
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	1ad3      	subs	r3, r2, r3
 8002504:	f241 3288 	movw	r2, #5000	; 0x1388
 8002508:	4293      	cmp	r3, r2
 800250a:	d901      	bls.n	8002510 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800250c:	2303      	movs	r3, #3
 800250e:	e0b1      	b.n	8002674 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002510:	4b4b      	ldr	r3, [pc, #300]	; (8002640 <HAL_RCC_OscConfig+0x4c4>)
 8002512:	6a1b      	ldr	r3, [r3, #32]
 8002514:	f003 0302 	and.w	r3, r3, #2
 8002518:	2b00      	cmp	r3, #0
 800251a:	d0ee      	beq.n	80024fa <HAL_RCC_OscConfig+0x37e>
 800251c:	e014      	b.n	8002548 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800251e:	f7ff faaf 	bl	8001a80 <HAL_GetTick>
 8002522:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002524:	e00a      	b.n	800253c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002526:	f7ff faab 	bl	8001a80 <HAL_GetTick>
 800252a:	4602      	mov	r2, r0
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	f241 3288 	movw	r2, #5000	; 0x1388
 8002534:	4293      	cmp	r3, r2
 8002536:	d901      	bls.n	800253c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002538:	2303      	movs	r3, #3
 800253a:	e09b      	b.n	8002674 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800253c:	4b40      	ldr	r3, [pc, #256]	; (8002640 <HAL_RCC_OscConfig+0x4c4>)
 800253e:	6a1b      	ldr	r3, [r3, #32]
 8002540:	f003 0302 	and.w	r3, r3, #2
 8002544:	2b00      	cmp	r3, #0
 8002546:	d1ee      	bne.n	8002526 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002548:	7dfb      	ldrb	r3, [r7, #23]
 800254a:	2b01      	cmp	r3, #1
 800254c:	d105      	bne.n	800255a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800254e:	4b3c      	ldr	r3, [pc, #240]	; (8002640 <HAL_RCC_OscConfig+0x4c4>)
 8002550:	69db      	ldr	r3, [r3, #28]
 8002552:	4a3b      	ldr	r2, [pc, #236]	; (8002640 <HAL_RCC_OscConfig+0x4c4>)
 8002554:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002558:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	69db      	ldr	r3, [r3, #28]
 800255e:	2b00      	cmp	r3, #0
 8002560:	f000 8087 	beq.w	8002672 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002564:	4b36      	ldr	r3, [pc, #216]	; (8002640 <HAL_RCC_OscConfig+0x4c4>)
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f003 030c 	and.w	r3, r3, #12
 800256c:	2b08      	cmp	r3, #8
 800256e:	d061      	beq.n	8002634 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	69db      	ldr	r3, [r3, #28]
 8002574:	2b02      	cmp	r3, #2
 8002576:	d146      	bne.n	8002606 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002578:	4b33      	ldr	r3, [pc, #204]	; (8002648 <HAL_RCC_OscConfig+0x4cc>)
 800257a:	2200      	movs	r2, #0
 800257c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800257e:	f7ff fa7f 	bl	8001a80 <HAL_GetTick>
 8002582:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002584:	e008      	b.n	8002598 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002586:	f7ff fa7b 	bl	8001a80 <HAL_GetTick>
 800258a:	4602      	mov	r2, r0
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	1ad3      	subs	r3, r2, r3
 8002590:	2b02      	cmp	r3, #2
 8002592:	d901      	bls.n	8002598 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002594:	2303      	movs	r3, #3
 8002596:	e06d      	b.n	8002674 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002598:	4b29      	ldr	r3, [pc, #164]	; (8002640 <HAL_RCC_OscConfig+0x4c4>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d1f0      	bne.n	8002586 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6a1b      	ldr	r3, [r3, #32]
 80025a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025ac:	d108      	bne.n	80025c0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80025ae:	4b24      	ldr	r3, [pc, #144]	; (8002640 <HAL_RCC_OscConfig+0x4c4>)
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	4921      	ldr	r1, [pc, #132]	; (8002640 <HAL_RCC_OscConfig+0x4c4>)
 80025bc:	4313      	orrs	r3, r2
 80025be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025c0:	4b1f      	ldr	r3, [pc, #124]	; (8002640 <HAL_RCC_OscConfig+0x4c4>)
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6a19      	ldr	r1, [r3, #32]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d0:	430b      	orrs	r3, r1
 80025d2:	491b      	ldr	r1, [pc, #108]	; (8002640 <HAL_RCC_OscConfig+0x4c4>)
 80025d4:	4313      	orrs	r3, r2
 80025d6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025d8:	4b1b      	ldr	r3, [pc, #108]	; (8002648 <HAL_RCC_OscConfig+0x4cc>)
 80025da:	2201      	movs	r2, #1
 80025dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025de:	f7ff fa4f 	bl	8001a80 <HAL_GetTick>
 80025e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025e4:	e008      	b.n	80025f8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025e6:	f7ff fa4b 	bl	8001a80 <HAL_GetTick>
 80025ea:	4602      	mov	r2, r0
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	1ad3      	subs	r3, r2, r3
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	d901      	bls.n	80025f8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80025f4:	2303      	movs	r3, #3
 80025f6:	e03d      	b.n	8002674 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025f8:	4b11      	ldr	r3, [pc, #68]	; (8002640 <HAL_RCC_OscConfig+0x4c4>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002600:	2b00      	cmp	r3, #0
 8002602:	d0f0      	beq.n	80025e6 <HAL_RCC_OscConfig+0x46a>
 8002604:	e035      	b.n	8002672 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002606:	4b10      	ldr	r3, [pc, #64]	; (8002648 <HAL_RCC_OscConfig+0x4cc>)
 8002608:	2200      	movs	r2, #0
 800260a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800260c:	f7ff fa38 	bl	8001a80 <HAL_GetTick>
 8002610:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002612:	e008      	b.n	8002626 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002614:	f7ff fa34 	bl	8001a80 <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	2b02      	cmp	r3, #2
 8002620:	d901      	bls.n	8002626 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e026      	b.n	8002674 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002626:	4b06      	ldr	r3, [pc, #24]	; (8002640 <HAL_RCC_OscConfig+0x4c4>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d1f0      	bne.n	8002614 <HAL_RCC_OscConfig+0x498>
 8002632:	e01e      	b.n	8002672 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	69db      	ldr	r3, [r3, #28]
 8002638:	2b01      	cmp	r3, #1
 800263a:	d107      	bne.n	800264c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e019      	b.n	8002674 <HAL_RCC_OscConfig+0x4f8>
 8002640:	40021000 	.word	0x40021000
 8002644:	40007000 	.word	0x40007000
 8002648:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800264c:	4b0b      	ldr	r3, [pc, #44]	; (800267c <HAL_RCC_OscConfig+0x500>)
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6a1b      	ldr	r3, [r3, #32]
 800265c:	429a      	cmp	r2, r3
 800265e:	d106      	bne.n	800266e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800266a:	429a      	cmp	r2, r3
 800266c:	d001      	beq.n	8002672 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e000      	b.n	8002674 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002672:	2300      	movs	r3, #0
}
 8002674:	4618      	mov	r0, r3
 8002676:	3718      	adds	r7, #24
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}
 800267c:	40021000 	.word	0x40021000

08002680 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b084      	sub	sp, #16
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d101      	bne.n	8002694 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	e0d0      	b.n	8002836 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002694:	4b6a      	ldr	r3, [pc, #424]	; (8002840 <HAL_RCC_ClockConfig+0x1c0>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0307 	and.w	r3, r3, #7
 800269c:	683a      	ldr	r2, [r7, #0]
 800269e:	429a      	cmp	r2, r3
 80026a0:	d910      	bls.n	80026c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026a2:	4b67      	ldr	r3, [pc, #412]	; (8002840 <HAL_RCC_ClockConfig+0x1c0>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f023 0207 	bic.w	r2, r3, #7
 80026aa:	4965      	ldr	r1, [pc, #404]	; (8002840 <HAL_RCC_ClockConfig+0x1c0>)
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	4313      	orrs	r3, r2
 80026b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026b2:	4b63      	ldr	r3, [pc, #396]	; (8002840 <HAL_RCC_ClockConfig+0x1c0>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0307 	and.w	r3, r3, #7
 80026ba:	683a      	ldr	r2, [r7, #0]
 80026bc:	429a      	cmp	r2, r3
 80026be:	d001      	beq.n	80026c4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	e0b8      	b.n	8002836 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0302 	and.w	r3, r3, #2
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d020      	beq.n	8002712 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 0304 	and.w	r3, r3, #4
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d005      	beq.n	80026e8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026dc:	4b59      	ldr	r3, [pc, #356]	; (8002844 <HAL_RCC_ClockConfig+0x1c4>)
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	4a58      	ldr	r2, [pc, #352]	; (8002844 <HAL_RCC_ClockConfig+0x1c4>)
 80026e2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80026e6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 0308 	and.w	r3, r3, #8
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d005      	beq.n	8002700 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026f4:	4b53      	ldr	r3, [pc, #332]	; (8002844 <HAL_RCC_ClockConfig+0x1c4>)
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	4a52      	ldr	r2, [pc, #328]	; (8002844 <HAL_RCC_ClockConfig+0x1c4>)
 80026fa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80026fe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002700:	4b50      	ldr	r3, [pc, #320]	; (8002844 <HAL_RCC_ClockConfig+0x1c4>)
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	494d      	ldr	r1, [pc, #308]	; (8002844 <HAL_RCC_ClockConfig+0x1c4>)
 800270e:	4313      	orrs	r3, r2
 8002710:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0301 	and.w	r3, r3, #1
 800271a:	2b00      	cmp	r3, #0
 800271c:	d040      	beq.n	80027a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	2b01      	cmp	r3, #1
 8002724:	d107      	bne.n	8002736 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002726:	4b47      	ldr	r3, [pc, #284]	; (8002844 <HAL_RCC_ClockConfig+0x1c4>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d115      	bne.n	800275e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e07f      	b.n	8002836 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	2b02      	cmp	r3, #2
 800273c:	d107      	bne.n	800274e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800273e:	4b41      	ldr	r3, [pc, #260]	; (8002844 <HAL_RCC_ClockConfig+0x1c4>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d109      	bne.n	800275e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e073      	b.n	8002836 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800274e:	4b3d      	ldr	r3, [pc, #244]	; (8002844 <HAL_RCC_ClockConfig+0x1c4>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 0302 	and.w	r3, r3, #2
 8002756:	2b00      	cmp	r3, #0
 8002758:	d101      	bne.n	800275e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e06b      	b.n	8002836 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800275e:	4b39      	ldr	r3, [pc, #228]	; (8002844 <HAL_RCC_ClockConfig+0x1c4>)
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	f023 0203 	bic.w	r2, r3, #3
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	4936      	ldr	r1, [pc, #216]	; (8002844 <HAL_RCC_ClockConfig+0x1c4>)
 800276c:	4313      	orrs	r3, r2
 800276e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002770:	f7ff f986 	bl	8001a80 <HAL_GetTick>
 8002774:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002776:	e00a      	b.n	800278e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002778:	f7ff f982 	bl	8001a80 <HAL_GetTick>
 800277c:	4602      	mov	r2, r0
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	f241 3288 	movw	r2, #5000	; 0x1388
 8002786:	4293      	cmp	r3, r2
 8002788:	d901      	bls.n	800278e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800278a:	2303      	movs	r3, #3
 800278c:	e053      	b.n	8002836 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800278e:	4b2d      	ldr	r3, [pc, #180]	; (8002844 <HAL_RCC_ClockConfig+0x1c4>)
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	f003 020c 	and.w	r2, r3, #12
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	429a      	cmp	r2, r3
 800279e:	d1eb      	bne.n	8002778 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027a0:	4b27      	ldr	r3, [pc, #156]	; (8002840 <HAL_RCC_ClockConfig+0x1c0>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 0307 	and.w	r3, r3, #7
 80027a8:	683a      	ldr	r2, [r7, #0]
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d210      	bcs.n	80027d0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ae:	4b24      	ldr	r3, [pc, #144]	; (8002840 <HAL_RCC_ClockConfig+0x1c0>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f023 0207 	bic.w	r2, r3, #7
 80027b6:	4922      	ldr	r1, [pc, #136]	; (8002840 <HAL_RCC_ClockConfig+0x1c0>)
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	4313      	orrs	r3, r2
 80027bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027be:	4b20      	ldr	r3, [pc, #128]	; (8002840 <HAL_RCC_ClockConfig+0x1c0>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0307 	and.w	r3, r3, #7
 80027c6:	683a      	ldr	r2, [r7, #0]
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d001      	beq.n	80027d0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e032      	b.n	8002836 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 0304 	and.w	r3, r3, #4
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d008      	beq.n	80027ee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027dc:	4b19      	ldr	r3, [pc, #100]	; (8002844 <HAL_RCC_ClockConfig+0x1c4>)
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	4916      	ldr	r1, [pc, #88]	; (8002844 <HAL_RCC_ClockConfig+0x1c4>)
 80027ea:	4313      	orrs	r3, r2
 80027ec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 0308 	and.w	r3, r3, #8
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d009      	beq.n	800280e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80027fa:	4b12      	ldr	r3, [pc, #72]	; (8002844 <HAL_RCC_ClockConfig+0x1c4>)
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	691b      	ldr	r3, [r3, #16]
 8002806:	00db      	lsls	r3, r3, #3
 8002808:	490e      	ldr	r1, [pc, #56]	; (8002844 <HAL_RCC_ClockConfig+0x1c4>)
 800280a:	4313      	orrs	r3, r2
 800280c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800280e:	f000 f821 	bl	8002854 <HAL_RCC_GetSysClockFreq>
 8002812:	4602      	mov	r2, r0
 8002814:	4b0b      	ldr	r3, [pc, #44]	; (8002844 <HAL_RCC_ClockConfig+0x1c4>)
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	091b      	lsrs	r3, r3, #4
 800281a:	f003 030f 	and.w	r3, r3, #15
 800281e:	490a      	ldr	r1, [pc, #40]	; (8002848 <HAL_RCC_ClockConfig+0x1c8>)
 8002820:	5ccb      	ldrb	r3, [r1, r3]
 8002822:	fa22 f303 	lsr.w	r3, r2, r3
 8002826:	4a09      	ldr	r2, [pc, #36]	; (800284c <HAL_RCC_ClockConfig+0x1cc>)
 8002828:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800282a:	4b09      	ldr	r3, [pc, #36]	; (8002850 <HAL_RCC_ClockConfig+0x1d0>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4618      	mov	r0, r3
 8002830:	f7ff f8e4 	bl	80019fc <HAL_InitTick>

  return HAL_OK;
 8002834:	2300      	movs	r3, #0
}
 8002836:	4618      	mov	r0, r3
 8002838:	3710      	adds	r7, #16
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	40022000 	.word	0x40022000
 8002844:	40021000 	.word	0x40021000
 8002848:	08004ed4 	.word	0x08004ed4
 800284c:	20000038 	.word	0x20000038
 8002850:	20000040 	.word	0x20000040

08002854 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002854:	b480      	push	{r7}
 8002856:	b087      	sub	sp, #28
 8002858:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800285a:	2300      	movs	r3, #0
 800285c:	60fb      	str	r3, [r7, #12]
 800285e:	2300      	movs	r3, #0
 8002860:	60bb      	str	r3, [r7, #8]
 8002862:	2300      	movs	r3, #0
 8002864:	617b      	str	r3, [r7, #20]
 8002866:	2300      	movs	r3, #0
 8002868:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800286a:	2300      	movs	r3, #0
 800286c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800286e:	4b1e      	ldr	r3, [pc, #120]	; (80028e8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	f003 030c 	and.w	r3, r3, #12
 800287a:	2b04      	cmp	r3, #4
 800287c:	d002      	beq.n	8002884 <HAL_RCC_GetSysClockFreq+0x30>
 800287e:	2b08      	cmp	r3, #8
 8002880:	d003      	beq.n	800288a <HAL_RCC_GetSysClockFreq+0x36>
 8002882:	e027      	b.n	80028d4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002884:	4b19      	ldr	r3, [pc, #100]	; (80028ec <HAL_RCC_GetSysClockFreq+0x98>)
 8002886:	613b      	str	r3, [r7, #16]
      break;
 8002888:	e027      	b.n	80028da <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	0c9b      	lsrs	r3, r3, #18
 800288e:	f003 030f 	and.w	r3, r3, #15
 8002892:	4a17      	ldr	r2, [pc, #92]	; (80028f0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002894:	5cd3      	ldrb	r3, [r2, r3]
 8002896:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d010      	beq.n	80028c4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80028a2:	4b11      	ldr	r3, [pc, #68]	; (80028e8 <HAL_RCC_GetSysClockFreq+0x94>)
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	0c5b      	lsrs	r3, r3, #17
 80028a8:	f003 0301 	and.w	r3, r3, #1
 80028ac:	4a11      	ldr	r2, [pc, #68]	; (80028f4 <HAL_RCC_GetSysClockFreq+0xa0>)
 80028ae:	5cd3      	ldrb	r3, [r2, r3]
 80028b0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4a0d      	ldr	r2, [pc, #52]	; (80028ec <HAL_RCC_GetSysClockFreq+0x98>)
 80028b6:	fb03 f202 	mul.w	r2, r3, r2
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80028c0:	617b      	str	r3, [r7, #20]
 80028c2:	e004      	b.n	80028ce <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	4a0c      	ldr	r2, [pc, #48]	; (80028f8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80028c8:	fb02 f303 	mul.w	r3, r2, r3
 80028cc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	613b      	str	r3, [r7, #16]
      break;
 80028d2:	e002      	b.n	80028da <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80028d4:	4b05      	ldr	r3, [pc, #20]	; (80028ec <HAL_RCC_GetSysClockFreq+0x98>)
 80028d6:	613b      	str	r3, [r7, #16]
      break;
 80028d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028da:	693b      	ldr	r3, [r7, #16]
}
 80028dc:	4618      	mov	r0, r3
 80028de:	371c      	adds	r7, #28
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bc80      	pop	{r7}
 80028e4:	4770      	bx	lr
 80028e6:	bf00      	nop
 80028e8:	40021000 	.word	0x40021000
 80028ec:	007a1200 	.word	0x007a1200
 80028f0:	08004eec 	.word	0x08004eec
 80028f4:	08004efc 	.word	0x08004efc
 80028f8:	003d0900 	.word	0x003d0900

080028fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028fc:	b480      	push	{r7}
 80028fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002900:	4b02      	ldr	r3, [pc, #8]	; (800290c <HAL_RCC_GetHCLKFreq+0x10>)
 8002902:	681b      	ldr	r3, [r3, #0]
}
 8002904:	4618      	mov	r0, r3
 8002906:	46bd      	mov	sp, r7
 8002908:	bc80      	pop	{r7}
 800290a:	4770      	bx	lr
 800290c:	20000038 	.word	0x20000038

08002910 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002914:	f7ff fff2 	bl	80028fc <HAL_RCC_GetHCLKFreq>
 8002918:	4602      	mov	r2, r0
 800291a:	4b05      	ldr	r3, [pc, #20]	; (8002930 <HAL_RCC_GetPCLK1Freq+0x20>)
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	0a1b      	lsrs	r3, r3, #8
 8002920:	f003 0307 	and.w	r3, r3, #7
 8002924:	4903      	ldr	r1, [pc, #12]	; (8002934 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002926:	5ccb      	ldrb	r3, [r1, r3]
 8002928:	fa22 f303 	lsr.w	r3, r2, r3
}
 800292c:	4618      	mov	r0, r3
 800292e:	bd80      	pop	{r7, pc}
 8002930:	40021000 	.word	0x40021000
 8002934:	08004ee4 	.word	0x08004ee4

08002938 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800293c:	f7ff ffde 	bl	80028fc <HAL_RCC_GetHCLKFreq>
 8002940:	4602      	mov	r2, r0
 8002942:	4b05      	ldr	r3, [pc, #20]	; (8002958 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	0adb      	lsrs	r3, r3, #11
 8002948:	f003 0307 	and.w	r3, r3, #7
 800294c:	4903      	ldr	r1, [pc, #12]	; (800295c <HAL_RCC_GetPCLK2Freq+0x24>)
 800294e:	5ccb      	ldrb	r3, [r1, r3]
 8002950:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002954:	4618      	mov	r0, r3
 8002956:	bd80      	pop	{r7, pc}
 8002958:	40021000 	.word	0x40021000
 800295c:	08004ee4 	.word	0x08004ee4

08002960 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002960:	b480      	push	{r7}
 8002962:	b085      	sub	sp, #20
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002968:	4b0a      	ldr	r3, [pc, #40]	; (8002994 <RCC_Delay+0x34>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a0a      	ldr	r2, [pc, #40]	; (8002998 <RCC_Delay+0x38>)
 800296e:	fba2 2303 	umull	r2, r3, r2, r3
 8002972:	0a5b      	lsrs	r3, r3, #9
 8002974:	687a      	ldr	r2, [r7, #4]
 8002976:	fb02 f303 	mul.w	r3, r2, r3
 800297a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800297c:	bf00      	nop
  }
  while (Delay --);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	1e5a      	subs	r2, r3, #1
 8002982:	60fa      	str	r2, [r7, #12]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d1f9      	bne.n	800297c <RCC_Delay+0x1c>
}
 8002988:	bf00      	nop
 800298a:	bf00      	nop
 800298c:	3714      	adds	r7, #20
 800298e:	46bd      	mov	sp, r7
 8002990:	bc80      	pop	{r7}
 8002992:	4770      	bx	lr
 8002994:	20000038 	.word	0x20000038
 8002998:	10624dd3 	.word	0x10624dd3

0800299c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b082      	sub	sp, #8
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d101      	bne.n	80029ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e041      	b.n	8002a32 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d106      	bne.n	80029c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2200      	movs	r2, #0
 80029be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f7fe fcee 	bl	80013a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2202      	movs	r2, #2
 80029cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	3304      	adds	r3, #4
 80029d8:	4619      	mov	r1, r3
 80029da:	4610      	mov	r0, r2
 80029dc:	f000 fc30 	bl	8003240 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2201      	movs	r2, #1
 80029e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2201      	movs	r2, #1
 80029ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2201      	movs	r2, #1
 80029f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2201      	movs	r2, #1
 80029fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2201      	movs	r2, #1
 8002a04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2201      	movs	r2, #1
 8002a14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2201      	movs	r2, #1
 8002a24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a30:	2300      	movs	r3, #0
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3708      	adds	r7, #8
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
	...

08002a3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b085      	sub	sp, #20
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d001      	beq.n	8002a54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	e03a      	b.n	8002aca <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2202      	movs	r2, #2
 8002a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	68da      	ldr	r2, [r3, #12]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f042 0201 	orr.w	r2, r2, #1
 8002a6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a18      	ldr	r2, [pc, #96]	; (8002ad4 <HAL_TIM_Base_Start_IT+0x98>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d00e      	beq.n	8002a94 <HAL_TIM_Base_Start_IT+0x58>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a7e:	d009      	beq.n	8002a94 <HAL_TIM_Base_Start_IT+0x58>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a14      	ldr	r2, [pc, #80]	; (8002ad8 <HAL_TIM_Base_Start_IT+0x9c>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d004      	beq.n	8002a94 <HAL_TIM_Base_Start_IT+0x58>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a13      	ldr	r2, [pc, #76]	; (8002adc <HAL_TIM_Base_Start_IT+0xa0>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d111      	bne.n	8002ab8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	f003 0307 	and.w	r3, r3, #7
 8002a9e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2b06      	cmp	r3, #6
 8002aa4:	d010      	beq.n	8002ac8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f042 0201 	orr.w	r2, r2, #1
 8002ab4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ab6:	e007      	b.n	8002ac8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f042 0201 	orr.w	r2, r2, #1
 8002ac6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ac8:	2300      	movs	r3, #0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3714      	adds	r7, #20
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bc80      	pop	{r7}
 8002ad2:	4770      	bx	lr
 8002ad4:	40012c00 	.word	0x40012c00
 8002ad8:	40000400 	.word	0x40000400
 8002adc:	40000800 	.word	0x40000800

08002ae0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b082      	sub	sp, #8
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d101      	bne.n	8002af2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e041      	b.n	8002b76 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d106      	bne.n	8002b0c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2200      	movs	r2, #0
 8002b02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f000 f839 	bl	8002b7e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2202      	movs	r2, #2
 8002b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	3304      	adds	r3, #4
 8002b1c:	4619      	mov	r1, r3
 8002b1e:	4610      	mov	r0, r2
 8002b20:	f000 fb8e 	bl	8003240 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2201      	movs	r2, #1
 8002b28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2201      	movs	r2, #1
 8002b30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2201      	movs	r2, #1
 8002b38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2201      	movs	r2, #1
 8002b40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2201      	movs	r2, #1
 8002b48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2201      	movs	r2, #1
 8002b58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2201      	movs	r2, #1
 8002b68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b74:	2300      	movs	r3, #0
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3708      	adds	r7, #8
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}

08002b7e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002b7e:	b480      	push	{r7}
 8002b80:	b083      	sub	sp, #12
 8002b82:	af00      	add	r7, sp, #0
 8002b84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002b86:	bf00      	nop
 8002b88:	370c      	adds	r7, #12
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bc80      	pop	{r7}
 8002b8e:	4770      	bx	lr

08002b90 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b084      	sub	sp, #16
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d109      	bne.n	8002bb4 <HAL_TIM_PWM_Start+0x24>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	bf14      	ite	ne
 8002bac:	2301      	movne	r3, #1
 8002bae:	2300      	moveq	r3, #0
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	e022      	b.n	8002bfa <HAL_TIM_PWM_Start+0x6a>
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	2b04      	cmp	r3, #4
 8002bb8:	d109      	bne.n	8002bce <HAL_TIM_PWM_Start+0x3e>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	bf14      	ite	ne
 8002bc6:	2301      	movne	r3, #1
 8002bc8:	2300      	moveq	r3, #0
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	e015      	b.n	8002bfa <HAL_TIM_PWM_Start+0x6a>
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	2b08      	cmp	r3, #8
 8002bd2:	d109      	bne.n	8002be8 <HAL_TIM_PWM_Start+0x58>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	bf14      	ite	ne
 8002be0:	2301      	movne	r3, #1
 8002be2:	2300      	moveq	r3, #0
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	e008      	b.n	8002bfa <HAL_TIM_PWM_Start+0x6a>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	bf14      	ite	ne
 8002bf4:	2301      	movne	r3, #1
 8002bf6:	2300      	moveq	r3, #0
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d001      	beq.n	8002c02 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e05e      	b.n	8002cc0 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d104      	bne.n	8002c12 <HAL_TIM_PWM_Start+0x82>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2202      	movs	r2, #2
 8002c0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c10:	e013      	b.n	8002c3a <HAL_TIM_PWM_Start+0xaa>
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	2b04      	cmp	r3, #4
 8002c16:	d104      	bne.n	8002c22 <HAL_TIM_PWM_Start+0x92>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2202      	movs	r2, #2
 8002c1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c20:	e00b      	b.n	8002c3a <HAL_TIM_PWM_Start+0xaa>
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	2b08      	cmp	r3, #8
 8002c26:	d104      	bne.n	8002c32 <HAL_TIM_PWM_Start+0xa2>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2202      	movs	r2, #2
 8002c2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c30:	e003      	b.n	8002c3a <HAL_TIM_PWM_Start+0xaa>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2202      	movs	r2, #2
 8002c36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	2201      	movs	r2, #1
 8002c40:	6839      	ldr	r1, [r7, #0]
 8002c42:	4618      	mov	r0, r3
 8002c44:	f000 fd7c 	bl	8003740 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a1e      	ldr	r2, [pc, #120]	; (8002cc8 <HAL_TIM_PWM_Start+0x138>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d107      	bne.n	8002c62 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c60:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a18      	ldr	r2, [pc, #96]	; (8002cc8 <HAL_TIM_PWM_Start+0x138>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d00e      	beq.n	8002c8a <HAL_TIM_PWM_Start+0xfa>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c74:	d009      	beq.n	8002c8a <HAL_TIM_PWM_Start+0xfa>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a14      	ldr	r2, [pc, #80]	; (8002ccc <HAL_TIM_PWM_Start+0x13c>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d004      	beq.n	8002c8a <HAL_TIM_PWM_Start+0xfa>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a12      	ldr	r2, [pc, #72]	; (8002cd0 <HAL_TIM_PWM_Start+0x140>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d111      	bne.n	8002cae <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	f003 0307 	and.w	r3, r3, #7
 8002c94:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2b06      	cmp	r3, #6
 8002c9a:	d010      	beq.n	8002cbe <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f042 0201 	orr.w	r2, r2, #1
 8002caa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cac:	e007      	b.n	8002cbe <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f042 0201 	orr.w	r2, r2, #1
 8002cbc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002cbe:	2300      	movs	r3, #0
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3710      	adds	r7, #16
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	40012c00 	.word	0x40012c00
 8002ccc:	40000400 	.word	0x40000400
 8002cd0:	40000800 	.word	0x40000800

08002cd4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b082      	sub	sp, #8
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	691b      	ldr	r3, [r3, #16]
 8002ce2:	f003 0302 	and.w	r3, r3, #2
 8002ce6:	2b02      	cmp	r3, #2
 8002ce8:	d122      	bne.n	8002d30 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	f003 0302 	and.w	r3, r3, #2
 8002cf4:	2b02      	cmp	r3, #2
 8002cf6:	d11b      	bne.n	8002d30 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f06f 0202 	mvn.w	r2, #2
 8002d00:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2201      	movs	r2, #1
 8002d06:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	699b      	ldr	r3, [r3, #24]
 8002d0e:	f003 0303 	and.w	r3, r3, #3
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d003      	beq.n	8002d1e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f000 fa76 	bl	8003208 <HAL_TIM_IC_CaptureCallback>
 8002d1c:	e005      	b.n	8002d2a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f000 fa69 	bl	80031f6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	f000 fa78 	bl	800321a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	691b      	ldr	r3, [r3, #16]
 8002d36:	f003 0304 	and.w	r3, r3, #4
 8002d3a:	2b04      	cmp	r3, #4
 8002d3c:	d122      	bne.n	8002d84 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	f003 0304 	and.w	r3, r3, #4
 8002d48:	2b04      	cmp	r3, #4
 8002d4a:	d11b      	bne.n	8002d84 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f06f 0204 	mvn.w	r2, #4
 8002d54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2202      	movs	r2, #2
 8002d5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	699b      	ldr	r3, [r3, #24]
 8002d62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d003      	beq.n	8002d72 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f000 fa4c 	bl	8003208 <HAL_TIM_IC_CaptureCallback>
 8002d70:	e005      	b.n	8002d7e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f000 fa3f 	bl	80031f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d78:	6878      	ldr	r0, [r7, #4]
 8002d7a:	f000 fa4e 	bl	800321a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2200      	movs	r2, #0
 8002d82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	691b      	ldr	r3, [r3, #16]
 8002d8a:	f003 0308 	and.w	r3, r3, #8
 8002d8e:	2b08      	cmp	r3, #8
 8002d90:	d122      	bne.n	8002dd8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	f003 0308 	and.w	r3, r3, #8
 8002d9c:	2b08      	cmp	r3, #8
 8002d9e:	d11b      	bne.n	8002dd8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f06f 0208 	mvn.w	r2, #8
 8002da8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2204      	movs	r2, #4
 8002dae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	69db      	ldr	r3, [r3, #28]
 8002db6:	f003 0303 	and.w	r3, r3, #3
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d003      	beq.n	8002dc6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f000 fa22 	bl	8003208 <HAL_TIM_IC_CaptureCallback>
 8002dc4:	e005      	b.n	8002dd2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f000 fa15 	bl	80031f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dcc:	6878      	ldr	r0, [r7, #4]
 8002dce:	f000 fa24 	bl	800321a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	691b      	ldr	r3, [r3, #16]
 8002dde:	f003 0310 	and.w	r3, r3, #16
 8002de2:	2b10      	cmp	r3, #16
 8002de4:	d122      	bne.n	8002e2c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	f003 0310 	and.w	r3, r3, #16
 8002df0:	2b10      	cmp	r3, #16
 8002df2:	d11b      	bne.n	8002e2c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f06f 0210 	mvn.w	r2, #16
 8002dfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2208      	movs	r2, #8
 8002e02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	69db      	ldr	r3, [r3, #28]
 8002e0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d003      	beq.n	8002e1a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f000 f9f8 	bl	8003208 <HAL_TIM_IC_CaptureCallback>
 8002e18:	e005      	b.n	8002e26 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f000 f9eb 	bl	80031f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e20:	6878      	ldr	r0, [r7, #4]
 8002e22:	f000 f9fa 	bl	800321a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	691b      	ldr	r3, [r3, #16]
 8002e32:	f003 0301 	and.w	r3, r3, #1
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d10e      	bne.n	8002e58 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	f003 0301 	and.w	r3, r3, #1
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	d107      	bne.n	8002e58 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f06f 0201 	mvn.w	r2, #1
 8002e50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f7fe fa62 	bl	800131c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	691b      	ldr	r3, [r3, #16]
 8002e5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e62:	2b80      	cmp	r3, #128	; 0x80
 8002e64:	d10e      	bne.n	8002e84 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e70:	2b80      	cmp	r3, #128	; 0x80
 8002e72:	d107      	bne.n	8002e84 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002e7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f000 fce9 	bl	8003856 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	691b      	ldr	r3, [r3, #16]
 8002e8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e8e:	2b40      	cmp	r3, #64	; 0x40
 8002e90:	d10e      	bne.n	8002eb0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e9c:	2b40      	cmp	r3, #64	; 0x40
 8002e9e:	d107      	bne.n	8002eb0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002ea8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f000 f9be 	bl	800322c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	691b      	ldr	r3, [r3, #16]
 8002eb6:	f003 0320 	and.w	r3, r3, #32
 8002eba:	2b20      	cmp	r3, #32
 8002ebc:	d10e      	bne.n	8002edc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	f003 0320 	and.w	r3, r3, #32
 8002ec8:	2b20      	cmp	r3, #32
 8002eca:	d107      	bne.n	8002edc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f06f 0220 	mvn.w	r2, #32
 8002ed4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f000 fcb4 	bl	8003844 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002edc:	bf00      	nop
 8002ede:	3708      	adds	r7, #8
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}

08002ee4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b086      	sub	sp, #24
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	60f8      	str	r0, [r7, #12]
 8002eec:	60b9      	str	r1, [r7, #8]
 8002eee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d101      	bne.n	8002f02 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002efe:	2302      	movs	r3, #2
 8002f00:	e0ae      	b.n	8003060 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2201      	movs	r2, #1
 8002f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2b0c      	cmp	r3, #12
 8002f0e:	f200 809f 	bhi.w	8003050 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002f12:	a201      	add	r2, pc, #4	; (adr r2, 8002f18 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f18:	08002f4d 	.word	0x08002f4d
 8002f1c:	08003051 	.word	0x08003051
 8002f20:	08003051 	.word	0x08003051
 8002f24:	08003051 	.word	0x08003051
 8002f28:	08002f8d 	.word	0x08002f8d
 8002f2c:	08003051 	.word	0x08003051
 8002f30:	08003051 	.word	0x08003051
 8002f34:	08003051 	.word	0x08003051
 8002f38:	08002fcf 	.word	0x08002fcf
 8002f3c:	08003051 	.word	0x08003051
 8002f40:	08003051 	.word	0x08003051
 8002f44:	08003051 	.word	0x08003051
 8002f48:	0800300f 	.word	0x0800300f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	68b9      	ldr	r1, [r7, #8]
 8002f52:	4618      	mov	r0, r3
 8002f54:	f000 f9d6 	bl	8003304 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	699a      	ldr	r2, [r3, #24]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f042 0208 	orr.w	r2, r2, #8
 8002f66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	699a      	ldr	r2, [r3, #24]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f022 0204 	bic.w	r2, r2, #4
 8002f76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	6999      	ldr	r1, [r3, #24]
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	691a      	ldr	r2, [r3, #16]
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	430a      	orrs	r2, r1
 8002f88:	619a      	str	r2, [r3, #24]
      break;
 8002f8a:	e064      	b.n	8003056 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	68b9      	ldr	r1, [r7, #8]
 8002f92:	4618      	mov	r0, r3
 8002f94:	f000 fa1c 	bl	80033d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	699a      	ldr	r2, [r3, #24]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002fa6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	699a      	ldr	r2, [r3, #24]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fb6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	6999      	ldr	r1, [r3, #24]
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	691b      	ldr	r3, [r3, #16]
 8002fc2:	021a      	lsls	r2, r3, #8
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	430a      	orrs	r2, r1
 8002fca:	619a      	str	r2, [r3, #24]
      break;
 8002fcc:	e043      	b.n	8003056 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	68b9      	ldr	r1, [r7, #8]
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f000 fa65 	bl	80034a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	69da      	ldr	r2, [r3, #28]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f042 0208 	orr.w	r2, r2, #8
 8002fe8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	69da      	ldr	r2, [r3, #28]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f022 0204 	bic.w	r2, r2, #4
 8002ff8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	69d9      	ldr	r1, [r3, #28]
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	691a      	ldr	r2, [r3, #16]
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	430a      	orrs	r2, r1
 800300a:	61da      	str	r2, [r3, #28]
      break;
 800300c:	e023      	b.n	8003056 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	68b9      	ldr	r1, [r7, #8]
 8003014:	4618      	mov	r0, r3
 8003016:	f000 faaf 	bl	8003578 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	69da      	ldr	r2, [r3, #28]
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003028:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	69da      	ldr	r2, [r3, #28]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003038:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	69d9      	ldr	r1, [r3, #28]
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	691b      	ldr	r3, [r3, #16]
 8003044:	021a      	lsls	r2, r3, #8
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	430a      	orrs	r2, r1
 800304c:	61da      	str	r2, [r3, #28]
      break;
 800304e:	e002      	b.n	8003056 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	75fb      	strb	r3, [r7, #23]
      break;
 8003054:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2200      	movs	r2, #0
 800305a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800305e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003060:	4618      	mov	r0, r3
 8003062:	3718      	adds	r7, #24
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}

08003068 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b084      	sub	sp, #16
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
 8003070:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003072:	2300      	movs	r3, #0
 8003074:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800307c:	2b01      	cmp	r3, #1
 800307e:	d101      	bne.n	8003084 <HAL_TIM_ConfigClockSource+0x1c>
 8003080:	2302      	movs	r3, #2
 8003082:	e0b4      	b.n	80031ee <HAL_TIM_ConfigClockSource+0x186>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2201      	movs	r2, #1
 8003088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2202      	movs	r2, #2
 8003090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80030a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80030aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	68ba      	ldr	r2, [r7, #8]
 80030b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030bc:	d03e      	beq.n	800313c <HAL_TIM_ConfigClockSource+0xd4>
 80030be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030c2:	f200 8087 	bhi.w	80031d4 <HAL_TIM_ConfigClockSource+0x16c>
 80030c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030ca:	f000 8086 	beq.w	80031da <HAL_TIM_ConfigClockSource+0x172>
 80030ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030d2:	d87f      	bhi.n	80031d4 <HAL_TIM_ConfigClockSource+0x16c>
 80030d4:	2b70      	cmp	r3, #112	; 0x70
 80030d6:	d01a      	beq.n	800310e <HAL_TIM_ConfigClockSource+0xa6>
 80030d8:	2b70      	cmp	r3, #112	; 0x70
 80030da:	d87b      	bhi.n	80031d4 <HAL_TIM_ConfigClockSource+0x16c>
 80030dc:	2b60      	cmp	r3, #96	; 0x60
 80030de:	d050      	beq.n	8003182 <HAL_TIM_ConfigClockSource+0x11a>
 80030e0:	2b60      	cmp	r3, #96	; 0x60
 80030e2:	d877      	bhi.n	80031d4 <HAL_TIM_ConfigClockSource+0x16c>
 80030e4:	2b50      	cmp	r3, #80	; 0x50
 80030e6:	d03c      	beq.n	8003162 <HAL_TIM_ConfigClockSource+0xfa>
 80030e8:	2b50      	cmp	r3, #80	; 0x50
 80030ea:	d873      	bhi.n	80031d4 <HAL_TIM_ConfigClockSource+0x16c>
 80030ec:	2b40      	cmp	r3, #64	; 0x40
 80030ee:	d058      	beq.n	80031a2 <HAL_TIM_ConfigClockSource+0x13a>
 80030f0:	2b40      	cmp	r3, #64	; 0x40
 80030f2:	d86f      	bhi.n	80031d4 <HAL_TIM_ConfigClockSource+0x16c>
 80030f4:	2b30      	cmp	r3, #48	; 0x30
 80030f6:	d064      	beq.n	80031c2 <HAL_TIM_ConfigClockSource+0x15a>
 80030f8:	2b30      	cmp	r3, #48	; 0x30
 80030fa:	d86b      	bhi.n	80031d4 <HAL_TIM_ConfigClockSource+0x16c>
 80030fc:	2b20      	cmp	r3, #32
 80030fe:	d060      	beq.n	80031c2 <HAL_TIM_ConfigClockSource+0x15a>
 8003100:	2b20      	cmp	r3, #32
 8003102:	d867      	bhi.n	80031d4 <HAL_TIM_ConfigClockSource+0x16c>
 8003104:	2b00      	cmp	r3, #0
 8003106:	d05c      	beq.n	80031c2 <HAL_TIM_ConfigClockSource+0x15a>
 8003108:	2b10      	cmp	r3, #16
 800310a:	d05a      	beq.n	80031c2 <HAL_TIM_ConfigClockSource+0x15a>
 800310c:	e062      	b.n	80031d4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800311e:	f000 faf0 	bl	8003702 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003130:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	68ba      	ldr	r2, [r7, #8]
 8003138:	609a      	str	r2, [r3, #8]
      break;
 800313a:	e04f      	b.n	80031dc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800314c:	f000 fad9 	bl	8003702 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	689a      	ldr	r2, [r3, #8]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800315e:	609a      	str	r2, [r3, #8]
      break;
 8003160:	e03c      	b.n	80031dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800316e:	461a      	mov	r2, r3
 8003170:	f000 fa50 	bl	8003614 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	2150      	movs	r1, #80	; 0x50
 800317a:	4618      	mov	r0, r3
 800317c:	f000 faa7 	bl	80036ce <TIM_ITRx_SetConfig>
      break;
 8003180:	e02c      	b.n	80031dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800318e:	461a      	mov	r2, r3
 8003190:	f000 fa6e 	bl	8003670 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	2160      	movs	r1, #96	; 0x60
 800319a:	4618      	mov	r0, r3
 800319c:	f000 fa97 	bl	80036ce <TIM_ITRx_SetConfig>
      break;
 80031a0:	e01c      	b.n	80031dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80031ae:	461a      	mov	r2, r3
 80031b0:	f000 fa30 	bl	8003614 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	2140      	movs	r1, #64	; 0x40
 80031ba:	4618      	mov	r0, r3
 80031bc:	f000 fa87 	bl	80036ce <TIM_ITRx_SetConfig>
      break;
 80031c0:	e00c      	b.n	80031dc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4619      	mov	r1, r3
 80031cc:	4610      	mov	r0, r2
 80031ce:	f000 fa7e 	bl	80036ce <TIM_ITRx_SetConfig>
      break;
 80031d2:	e003      	b.n	80031dc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	73fb      	strb	r3, [r7, #15]
      break;
 80031d8:	e000      	b.n	80031dc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80031da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2201      	movs	r2, #1
 80031e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2200      	movs	r2, #0
 80031e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80031ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3710      	adds	r7, #16
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}

080031f6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031f6:	b480      	push	{r7}
 80031f8:	b083      	sub	sp, #12
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80031fe:	bf00      	nop
 8003200:	370c      	adds	r7, #12
 8003202:	46bd      	mov	sp, r7
 8003204:	bc80      	pop	{r7}
 8003206:	4770      	bx	lr

08003208 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003210:	bf00      	nop
 8003212:	370c      	adds	r7, #12
 8003214:	46bd      	mov	sp, r7
 8003216:	bc80      	pop	{r7}
 8003218:	4770      	bx	lr

0800321a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800321a:	b480      	push	{r7}
 800321c:	b083      	sub	sp, #12
 800321e:	af00      	add	r7, sp, #0
 8003220:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003222:	bf00      	nop
 8003224:	370c      	adds	r7, #12
 8003226:	46bd      	mov	sp, r7
 8003228:	bc80      	pop	{r7}
 800322a:	4770      	bx	lr

0800322c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800322c:	b480      	push	{r7}
 800322e:	b083      	sub	sp, #12
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003234:	bf00      	nop
 8003236:	370c      	adds	r7, #12
 8003238:	46bd      	mov	sp, r7
 800323a:	bc80      	pop	{r7}
 800323c:	4770      	bx	lr
	...

08003240 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003240:	b480      	push	{r7}
 8003242:	b085      	sub	sp, #20
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
 8003248:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	4a29      	ldr	r2, [pc, #164]	; (80032f8 <TIM_Base_SetConfig+0xb8>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d00b      	beq.n	8003270 <TIM_Base_SetConfig+0x30>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800325e:	d007      	beq.n	8003270 <TIM_Base_SetConfig+0x30>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	4a26      	ldr	r2, [pc, #152]	; (80032fc <TIM_Base_SetConfig+0xbc>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d003      	beq.n	8003270 <TIM_Base_SetConfig+0x30>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	4a25      	ldr	r2, [pc, #148]	; (8003300 <TIM_Base_SetConfig+0xc0>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d108      	bne.n	8003282 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003276:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	68fa      	ldr	r2, [r7, #12]
 800327e:	4313      	orrs	r3, r2
 8003280:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	4a1c      	ldr	r2, [pc, #112]	; (80032f8 <TIM_Base_SetConfig+0xb8>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d00b      	beq.n	80032a2 <TIM_Base_SetConfig+0x62>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003290:	d007      	beq.n	80032a2 <TIM_Base_SetConfig+0x62>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4a19      	ldr	r2, [pc, #100]	; (80032fc <TIM_Base_SetConfig+0xbc>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d003      	beq.n	80032a2 <TIM_Base_SetConfig+0x62>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4a18      	ldr	r2, [pc, #96]	; (8003300 <TIM_Base_SetConfig+0xc0>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d108      	bne.n	80032b4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	68db      	ldr	r3, [r3, #12]
 80032ae:	68fa      	ldr	r2, [r7, #12]
 80032b0:	4313      	orrs	r3, r2
 80032b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	695b      	ldr	r3, [r3, #20]
 80032be:	4313      	orrs	r3, r2
 80032c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	68fa      	ldr	r2, [r7, #12]
 80032c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	689a      	ldr	r2, [r3, #8]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	4a07      	ldr	r2, [pc, #28]	; (80032f8 <TIM_Base_SetConfig+0xb8>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d103      	bne.n	80032e8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	691a      	ldr	r2, [r3, #16]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2201      	movs	r2, #1
 80032ec:	615a      	str	r2, [r3, #20]
}
 80032ee:	bf00      	nop
 80032f0:	3714      	adds	r7, #20
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bc80      	pop	{r7}
 80032f6:	4770      	bx	lr
 80032f8:	40012c00 	.word	0x40012c00
 80032fc:	40000400 	.word	0x40000400
 8003300:	40000800 	.word	0x40000800

08003304 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003304:	b480      	push	{r7}
 8003306:	b087      	sub	sp, #28
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6a1b      	ldr	r3, [r3, #32]
 8003312:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6a1b      	ldr	r3, [r3, #32]
 8003318:	f023 0201 	bic.w	r2, r3, #1
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	699b      	ldr	r3, [r3, #24]
 800332a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003332:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	f023 0303 	bic.w	r3, r3, #3
 800333a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	68fa      	ldr	r2, [r7, #12]
 8003342:	4313      	orrs	r3, r2
 8003344:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	f023 0302 	bic.w	r3, r3, #2
 800334c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	697a      	ldr	r2, [r7, #20]
 8003354:	4313      	orrs	r3, r2
 8003356:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	4a1c      	ldr	r2, [pc, #112]	; (80033cc <TIM_OC1_SetConfig+0xc8>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d10c      	bne.n	800337a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	f023 0308 	bic.w	r3, r3, #8
 8003366:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	697a      	ldr	r2, [r7, #20]
 800336e:	4313      	orrs	r3, r2
 8003370:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	f023 0304 	bic.w	r3, r3, #4
 8003378:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4a13      	ldr	r2, [pc, #76]	; (80033cc <TIM_OC1_SetConfig+0xc8>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d111      	bne.n	80033a6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003388:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003390:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	695b      	ldr	r3, [r3, #20]
 8003396:	693a      	ldr	r2, [r7, #16]
 8003398:	4313      	orrs	r3, r2
 800339a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	699b      	ldr	r3, [r3, #24]
 80033a0:	693a      	ldr	r2, [r7, #16]
 80033a2:	4313      	orrs	r3, r2
 80033a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	693a      	ldr	r2, [r7, #16]
 80033aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	68fa      	ldr	r2, [r7, #12]
 80033b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	685a      	ldr	r2, [r3, #4]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	697a      	ldr	r2, [r7, #20]
 80033be:	621a      	str	r2, [r3, #32]
}
 80033c0:	bf00      	nop
 80033c2:	371c      	adds	r7, #28
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bc80      	pop	{r7}
 80033c8:	4770      	bx	lr
 80033ca:	bf00      	nop
 80033cc:	40012c00 	.word	0x40012c00

080033d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b087      	sub	sp, #28
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a1b      	ldr	r3, [r3, #32]
 80033de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6a1b      	ldr	r3, [r3, #32]
 80033e4:	f023 0210 	bic.w	r2, r3, #16
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	699b      	ldr	r3, [r3, #24]
 80033f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003406:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	021b      	lsls	r3, r3, #8
 800340e:	68fa      	ldr	r2, [r7, #12]
 8003410:	4313      	orrs	r3, r2
 8003412:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	f023 0320 	bic.w	r3, r3, #32
 800341a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	011b      	lsls	r3, r3, #4
 8003422:	697a      	ldr	r2, [r7, #20]
 8003424:	4313      	orrs	r3, r2
 8003426:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	4a1d      	ldr	r2, [pc, #116]	; (80034a0 <TIM_OC2_SetConfig+0xd0>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d10d      	bne.n	800344c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003436:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	011b      	lsls	r3, r3, #4
 800343e:	697a      	ldr	r2, [r7, #20]
 8003440:	4313      	orrs	r3, r2
 8003442:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800344a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	4a14      	ldr	r2, [pc, #80]	; (80034a0 <TIM_OC2_SetConfig+0xd0>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d113      	bne.n	800347c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800345a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003462:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	695b      	ldr	r3, [r3, #20]
 8003468:	009b      	lsls	r3, r3, #2
 800346a:	693a      	ldr	r2, [r7, #16]
 800346c:	4313      	orrs	r3, r2
 800346e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	699b      	ldr	r3, [r3, #24]
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	693a      	ldr	r2, [r7, #16]
 8003478:	4313      	orrs	r3, r2
 800347a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	693a      	ldr	r2, [r7, #16]
 8003480:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	68fa      	ldr	r2, [r7, #12]
 8003486:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	685a      	ldr	r2, [r3, #4]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	697a      	ldr	r2, [r7, #20]
 8003494:	621a      	str	r2, [r3, #32]
}
 8003496:	bf00      	nop
 8003498:	371c      	adds	r7, #28
 800349a:	46bd      	mov	sp, r7
 800349c:	bc80      	pop	{r7}
 800349e:	4770      	bx	lr
 80034a0:	40012c00 	.word	0x40012c00

080034a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b087      	sub	sp, #28
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6a1b      	ldr	r3, [r3, #32]
 80034b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6a1b      	ldr	r3, [r3, #32]
 80034b8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	69db      	ldr	r3, [r3, #28]
 80034ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f023 0303 	bic.w	r3, r3, #3
 80034da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	68fa      	ldr	r2, [r7, #12]
 80034e2:	4313      	orrs	r3, r2
 80034e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80034ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	021b      	lsls	r3, r3, #8
 80034f4:	697a      	ldr	r2, [r7, #20]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4a1d      	ldr	r2, [pc, #116]	; (8003574 <TIM_OC3_SetConfig+0xd0>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d10d      	bne.n	800351e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003508:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	68db      	ldr	r3, [r3, #12]
 800350e:	021b      	lsls	r3, r3, #8
 8003510:	697a      	ldr	r2, [r7, #20]
 8003512:	4313      	orrs	r3, r2
 8003514:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800351c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	4a14      	ldr	r2, [pc, #80]	; (8003574 <TIM_OC3_SetConfig+0xd0>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d113      	bne.n	800354e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800352c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003534:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	695b      	ldr	r3, [r3, #20]
 800353a:	011b      	lsls	r3, r3, #4
 800353c:	693a      	ldr	r2, [r7, #16]
 800353e:	4313      	orrs	r3, r2
 8003540:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	699b      	ldr	r3, [r3, #24]
 8003546:	011b      	lsls	r3, r3, #4
 8003548:	693a      	ldr	r2, [r7, #16]
 800354a:	4313      	orrs	r3, r2
 800354c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	693a      	ldr	r2, [r7, #16]
 8003552:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	68fa      	ldr	r2, [r7, #12]
 8003558:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	685a      	ldr	r2, [r3, #4]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	697a      	ldr	r2, [r7, #20]
 8003566:	621a      	str	r2, [r3, #32]
}
 8003568:	bf00      	nop
 800356a:	371c      	adds	r7, #28
 800356c:	46bd      	mov	sp, r7
 800356e:	bc80      	pop	{r7}
 8003570:	4770      	bx	lr
 8003572:	bf00      	nop
 8003574:	40012c00 	.word	0x40012c00

08003578 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003578:	b480      	push	{r7}
 800357a:	b087      	sub	sp, #28
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6a1b      	ldr	r3, [r3, #32]
 8003586:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6a1b      	ldr	r3, [r3, #32]
 800358c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	69db      	ldr	r3, [r3, #28]
 800359e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	021b      	lsls	r3, r3, #8
 80035b6:	68fa      	ldr	r2, [r7, #12]
 80035b8:	4313      	orrs	r3, r2
 80035ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80035c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	031b      	lsls	r3, r3, #12
 80035ca:	693a      	ldr	r2, [r7, #16]
 80035cc:	4313      	orrs	r3, r2
 80035ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	4a0f      	ldr	r2, [pc, #60]	; (8003610 <TIM_OC4_SetConfig+0x98>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d109      	bne.n	80035ec <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80035de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	695b      	ldr	r3, [r3, #20]
 80035e4:	019b      	lsls	r3, r3, #6
 80035e6:	697a      	ldr	r2, [r7, #20]
 80035e8:	4313      	orrs	r3, r2
 80035ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	697a      	ldr	r2, [r7, #20]
 80035f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	68fa      	ldr	r2, [r7, #12]
 80035f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	685a      	ldr	r2, [r3, #4]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	693a      	ldr	r2, [r7, #16]
 8003604:	621a      	str	r2, [r3, #32]
}
 8003606:	bf00      	nop
 8003608:	371c      	adds	r7, #28
 800360a:	46bd      	mov	sp, r7
 800360c:	bc80      	pop	{r7}
 800360e:	4770      	bx	lr
 8003610:	40012c00 	.word	0x40012c00

08003614 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003614:	b480      	push	{r7}
 8003616:	b087      	sub	sp, #28
 8003618:	af00      	add	r7, sp, #0
 800361a:	60f8      	str	r0, [r7, #12]
 800361c:	60b9      	str	r1, [r7, #8]
 800361e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	6a1b      	ldr	r3, [r3, #32]
 8003624:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	6a1b      	ldr	r3, [r3, #32]
 800362a:	f023 0201 	bic.w	r2, r3, #1
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	699b      	ldr	r3, [r3, #24]
 8003636:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800363e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	011b      	lsls	r3, r3, #4
 8003644:	693a      	ldr	r2, [r7, #16]
 8003646:	4313      	orrs	r3, r2
 8003648:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	f023 030a 	bic.w	r3, r3, #10
 8003650:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003652:	697a      	ldr	r2, [r7, #20]
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	4313      	orrs	r3, r2
 8003658:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	693a      	ldr	r2, [r7, #16]
 800365e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	697a      	ldr	r2, [r7, #20]
 8003664:	621a      	str	r2, [r3, #32]
}
 8003666:	bf00      	nop
 8003668:	371c      	adds	r7, #28
 800366a:	46bd      	mov	sp, r7
 800366c:	bc80      	pop	{r7}
 800366e:	4770      	bx	lr

08003670 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003670:	b480      	push	{r7}
 8003672:	b087      	sub	sp, #28
 8003674:	af00      	add	r7, sp, #0
 8003676:	60f8      	str	r0, [r7, #12]
 8003678:	60b9      	str	r1, [r7, #8]
 800367a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	6a1b      	ldr	r3, [r3, #32]
 8003680:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	6a1b      	ldr	r3, [r3, #32]
 8003686:	f023 0210 	bic.w	r2, r3, #16
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	699b      	ldr	r3, [r3, #24]
 8003692:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800369a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	031b      	lsls	r3, r3, #12
 80036a0:	693a      	ldr	r2, [r7, #16]
 80036a2:	4313      	orrs	r3, r2
 80036a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80036ac:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	011b      	lsls	r3, r3, #4
 80036b2:	697a      	ldr	r2, [r7, #20]
 80036b4:	4313      	orrs	r3, r2
 80036b6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	693a      	ldr	r2, [r7, #16]
 80036bc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	697a      	ldr	r2, [r7, #20]
 80036c2:	621a      	str	r2, [r3, #32]
}
 80036c4:	bf00      	nop
 80036c6:	371c      	adds	r7, #28
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bc80      	pop	{r7}
 80036cc:	4770      	bx	lr

080036ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80036ce:	b480      	push	{r7}
 80036d0:	b085      	sub	sp, #20
 80036d2:	af00      	add	r7, sp, #0
 80036d4:	6078      	str	r0, [r7, #4]
 80036d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80036e6:	683a      	ldr	r2, [r7, #0]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	f043 0307 	orr.w	r3, r3, #7
 80036f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	68fa      	ldr	r2, [r7, #12]
 80036f6:	609a      	str	r2, [r3, #8]
}
 80036f8:	bf00      	nop
 80036fa:	3714      	adds	r7, #20
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bc80      	pop	{r7}
 8003700:	4770      	bx	lr

08003702 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003702:	b480      	push	{r7}
 8003704:	b087      	sub	sp, #28
 8003706:	af00      	add	r7, sp, #0
 8003708:	60f8      	str	r0, [r7, #12]
 800370a:	60b9      	str	r1, [r7, #8]
 800370c:	607a      	str	r2, [r7, #4]
 800370e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800371c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	021a      	lsls	r2, r3, #8
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	431a      	orrs	r2, r3
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	4313      	orrs	r3, r2
 800372a:	697a      	ldr	r2, [r7, #20]
 800372c:	4313      	orrs	r3, r2
 800372e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	697a      	ldr	r2, [r7, #20]
 8003734:	609a      	str	r2, [r3, #8]
}
 8003736:	bf00      	nop
 8003738:	371c      	adds	r7, #28
 800373a:	46bd      	mov	sp, r7
 800373c:	bc80      	pop	{r7}
 800373e:	4770      	bx	lr

08003740 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003740:	b480      	push	{r7}
 8003742:	b087      	sub	sp, #28
 8003744:	af00      	add	r7, sp, #0
 8003746:	60f8      	str	r0, [r7, #12]
 8003748:	60b9      	str	r1, [r7, #8]
 800374a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	f003 031f 	and.w	r3, r3, #31
 8003752:	2201      	movs	r2, #1
 8003754:	fa02 f303 	lsl.w	r3, r2, r3
 8003758:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	6a1a      	ldr	r2, [r3, #32]
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	43db      	mvns	r3, r3
 8003762:	401a      	ands	r2, r3
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	6a1a      	ldr	r2, [r3, #32]
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	f003 031f 	and.w	r3, r3, #31
 8003772:	6879      	ldr	r1, [r7, #4]
 8003774:	fa01 f303 	lsl.w	r3, r1, r3
 8003778:	431a      	orrs	r2, r3
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	621a      	str	r2, [r3, #32]
}
 800377e:	bf00      	nop
 8003780:	371c      	adds	r7, #28
 8003782:	46bd      	mov	sp, r7
 8003784:	bc80      	pop	{r7}
 8003786:	4770      	bx	lr

08003788 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003788:	b480      	push	{r7}
 800378a:	b085      	sub	sp, #20
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
 8003790:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003798:	2b01      	cmp	r3, #1
 800379a:	d101      	bne.n	80037a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800379c:	2302      	movs	r3, #2
 800379e:	e046      	b.n	800382e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2201      	movs	r2, #1
 80037a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2202      	movs	r2, #2
 80037ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	68fa      	ldr	r2, [r7, #12]
 80037ce:	4313      	orrs	r3, r2
 80037d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	68fa      	ldr	r2, [r7, #12]
 80037d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a16      	ldr	r2, [pc, #88]	; (8003838 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d00e      	beq.n	8003802 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037ec:	d009      	beq.n	8003802 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a12      	ldr	r2, [pc, #72]	; (800383c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d004      	beq.n	8003802 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a10      	ldr	r2, [pc, #64]	; (8003840 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d10c      	bne.n	800381c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003808:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	68ba      	ldr	r2, [r7, #8]
 8003810:	4313      	orrs	r3, r2
 8003812:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	68ba      	ldr	r2, [r7, #8]
 800381a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2201      	movs	r2, #1
 8003820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2200      	movs	r2, #0
 8003828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800382c:	2300      	movs	r3, #0
}
 800382e:	4618      	mov	r0, r3
 8003830:	3714      	adds	r7, #20
 8003832:	46bd      	mov	sp, r7
 8003834:	bc80      	pop	{r7}
 8003836:	4770      	bx	lr
 8003838:	40012c00 	.word	0x40012c00
 800383c:	40000400 	.word	0x40000400
 8003840:	40000800 	.word	0x40000800

08003844 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003844:	b480      	push	{r7}
 8003846:	b083      	sub	sp, #12
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800384c:	bf00      	nop
 800384e:	370c      	adds	r7, #12
 8003850:	46bd      	mov	sp, r7
 8003852:	bc80      	pop	{r7}
 8003854:	4770      	bx	lr

08003856 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003856:	b480      	push	{r7}
 8003858:	b083      	sub	sp, #12
 800385a:	af00      	add	r7, sp, #0
 800385c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800385e:	bf00      	nop
 8003860:	370c      	adds	r7, #12
 8003862:	46bd      	mov	sp, r7
 8003864:	bc80      	pop	{r7}
 8003866:	4770      	bx	lr

08003868 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b082      	sub	sp, #8
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d101      	bne.n	800387a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e042      	b.n	8003900 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003880:	b2db      	uxtb	r3, r3
 8003882:	2b00      	cmp	r3, #0
 8003884:	d106      	bne.n	8003894 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2200      	movs	r2, #0
 800388a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f7fd fdfa 	bl	8001488 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2224      	movs	r2, #36	; 0x24
 8003898:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	68da      	ldr	r2, [r3, #12]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80038aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	f000 fd71 	bl	8004394 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	691a      	ldr	r2, [r3, #16]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80038c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	695a      	ldr	r2, [r3, #20]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80038d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	68da      	ldr	r2, [r3, #12]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2200      	movs	r2, #0
 80038e6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2220      	movs	r2, #32
 80038ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2220      	movs	r2, #32
 80038f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2200      	movs	r2, #0
 80038fc:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80038fe:	2300      	movs	r3, #0
}
 8003900:	4618      	mov	r0, r3
 8003902:	3708      	adds	r7, #8
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}

08003908 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b08a      	sub	sp, #40	; 0x28
 800390c:	af02      	add	r7, sp, #8
 800390e:	60f8      	str	r0, [r7, #12]
 8003910:	60b9      	str	r1, [r7, #8]
 8003912:	603b      	str	r3, [r7, #0]
 8003914:	4613      	mov	r3, r2
 8003916:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003918:	2300      	movs	r3, #0
 800391a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003922:	b2db      	uxtb	r3, r3
 8003924:	2b20      	cmp	r3, #32
 8003926:	d16d      	bne.n	8003a04 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d002      	beq.n	8003934 <HAL_UART_Transmit+0x2c>
 800392e:	88fb      	ldrh	r3, [r7, #6]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d101      	bne.n	8003938 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	e066      	b.n	8003a06 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2200      	movs	r2, #0
 800393c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2221      	movs	r2, #33	; 0x21
 8003942:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003946:	f7fe f89b 	bl	8001a80 <HAL_GetTick>
 800394a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	88fa      	ldrh	r2, [r7, #6]
 8003950:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	88fa      	ldrh	r2, [r7, #6]
 8003956:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003960:	d108      	bne.n	8003974 <HAL_UART_Transmit+0x6c>
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	691b      	ldr	r3, [r3, #16]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d104      	bne.n	8003974 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800396a:	2300      	movs	r3, #0
 800396c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	61bb      	str	r3, [r7, #24]
 8003972:	e003      	b.n	800397c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003978:	2300      	movs	r3, #0
 800397a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800397c:	e02a      	b.n	80039d4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	9300      	str	r3, [sp, #0]
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	2200      	movs	r2, #0
 8003986:	2180      	movs	r1, #128	; 0x80
 8003988:	68f8      	ldr	r0, [r7, #12]
 800398a:	f000 faf9 	bl	8003f80 <UART_WaitOnFlagUntilTimeout>
 800398e:	4603      	mov	r3, r0
 8003990:	2b00      	cmp	r3, #0
 8003992:	d001      	beq.n	8003998 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003994:	2303      	movs	r3, #3
 8003996:	e036      	b.n	8003a06 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003998:	69fb      	ldr	r3, [r7, #28]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d10b      	bne.n	80039b6 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800399e:	69bb      	ldr	r3, [r7, #24]
 80039a0:	881b      	ldrh	r3, [r3, #0]
 80039a2:	461a      	mov	r2, r3
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039ac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80039ae:	69bb      	ldr	r3, [r7, #24]
 80039b0:	3302      	adds	r3, #2
 80039b2:	61bb      	str	r3, [r7, #24]
 80039b4:	e007      	b.n	80039c6 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80039b6:	69fb      	ldr	r3, [r7, #28]
 80039b8:	781a      	ldrb	r2, [r3, #0]
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80039c0:	69fb      	ldr	r3, [r7, #28]
 80039c2:	3301      	adds	r3, #1
 80039c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039ca:	b29b      	uxth	r3, r3
 80039cc:	3b01      	subs	r3, #1
 80039ce:	b29a      	uxth	r2, r3
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039d8:	b29b      	uxth	r3, r3
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d1cf      	bne.n	800397e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	9300      	str	r3, [sp, #0]
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	2200      	movs	r2, #0
 80039e6:	2140      	movs	r1, #64	; 0x40
 80039e8:	68f8      	ldr	r0, [r7, #12]
 80039ea:	f000 fac9 	bl	8003f80 <UART_WaitOnFlagUntilTimeout>
 80039ee:	4603      	mov	r3, r0
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d001      	beq.n	80039f8 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80039f4:	2303      	movs	r3, #3
 80039f6:	e006      	b.n	8003a06 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2220      	movs	r2, #32
 80039fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003a00:	2300      	movs	r3, #0
 8003a02:	e000      	b.n	8003a06 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003a04:	2302      	movs	r3, #2
  }
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3720      	adds	r7, #32
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}
	...

08003a10 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b0ba      	sub	sp, #232	; 0xe8
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	68db      	ldr	r3, [r3, #12]
 8003a28:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	695b      	ldr	r3, [r3, #20]
 8003a32:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003a36:	2300      	movs	r3, #0
 8003a38:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003a42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a46:	f003 030f 	and.w	r3, r3, #15
 8003a4a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003a4e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d10f      	bne.n	8003a76 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a5a:	f003 0320 	and.w	r3, r3, #32
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d009      	beq.n	8003a76 <HAL_UART_IRQHandler+0x66>
 8003a62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a66:	f003 0320 	and.w	r3, r3, #32
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d003      	beq.n	8003a76 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f000 fbd1 	bl	8004216 <UART_Receive_IT>
      return;
 8003a74:	e25b      	b.n	8003f2e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003a76:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	f000 80de 	beq.w	8003c3c <HAL_UART_IRQHandler+0x22c>
 8003a80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a84:	f003 0301 	and.w	r3, r3, #1
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d106      	bne.n	8003a9a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003a8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a90:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	f000 80d1 	beq.w	8003c3c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003a9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a9e:	f003 0301 	and.w	r3, r3, #1
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d00b      	beq.n	8003abe <HAL_UART_IRQHandler+0xae>
 8003aa6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003aaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d005      	beq.n	8003abe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ab6:	f043 0201 	orr.w	r2, r3, #1
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003abe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ac2:	f003 0304 	and.w	r3, r3, #4
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d00b      	beq.n	8003ae2 <HAL_UART_IRQHandler+0xd2>
 8003aca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ace:	f003 0301 	and.w	r3, r3, #1
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d005      	beq.n	8003ae2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ada:	f043 0202 	orr.w	r2, r3, #2
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ae2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ae6:	f003 0302 	and.w	r3, r3, #2
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d00b      	beq.n	8003b06 <HAL_UART_IRQHandler+0xf6>
 8003aee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003af2:	f003 0301 	and.w	r3, r3, #1
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d005      	beq.n	8003b06 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003afe:	f043 0204 	orr.w	r2, r3, #4
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003b06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b0a:	f003 0308 	and.w	r3, r3, #8
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d011      	beq.n	8003b36 <HAL_UART_IRQHandler+0x126>
 8003b12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b16:	f003 0320 	and.w	r3, r3, #32
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d105      	bne.n	8003b2a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003b1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b22:	f003 0301 	and.w	r3, r3, #1
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d005      	beq.n	8003b36 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b2e:	f043 0208 	orr.w	r2, r3, #8
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	f000 81f2 	beq.w	8003f24 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b44:	f003 0320 	and.w	r3, r3, #32
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d008      	beq.n	8003b5e <HAL_UART_IRQHandler+0x14e>
 8003b4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b50:	f003 0320 	and.w	r3, r3, #32
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d002      	beq.n	8003b5e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	f000 fb5c 	bl	8004216 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	695b      	ldr	r3, [r3, #20]
 8003b64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	bf14      	ite	ne
 8003b6c:	2301      	movne	r3, #1
 8003b6e:	2300      	moveq	r3, #0
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b7a:	f003 0308 	and.w	r3, r3, #8
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d103      	bne.n	8003b8a <HAL_UART_IRQHandler+0x17a>
 8003b82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d04f      	beq.n	8003c2a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f000 fa66 	bl	800405c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	695b      	ldr	r3, [r3, #20]
 8003b96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d041      	beq.n	8003c22 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	3314      	adds	r3, #20
 8003ba4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ba8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003bac:	e853 3f00 	ldrex	r3, [r3]
 8003bb0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003bb4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003bb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bbc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	3314      	adds	r3, #20
 8003bc6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003bca:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003bce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bd2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003bd6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003bda:	e841 2300 	strex	r3, r2, [r1]
 8003bde:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003be2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d1d9      	bne.n	8003b9e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d013      	beq.n	8003c1a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bf6:	4a7e      	ldr	r2, [pc, #504]	; (8003df0 <HAL_UART_IRQHandler+0x3e0>)
 8003bf8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f7fe f890 	bl	8001d24 <HAL_DMA_Abort_IT>
 8003c04:	4603      	mov	r3, r0
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d016      	beq.n	8003c38 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c10:	687a      	ldr	r2, [r7, #4]
 8003c12:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003c14:	4610      	mov	r0, r2
 8003c16:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c18:	e00e      	b.n	8003c38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f000 f99c 	bl	8003f58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c20:	e00a      	b.n	8003c38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f000 f998 	bl	8003f58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c28:	e006      	b.n	8003c38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f000 f994 	bl	8003f58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2200      	movs	r2, #0
 8003c34:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003c36:	e175      	b.n	8003f24 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c38:	bf00      	nop
    return;
 8003c3a:	e173      	b.n	8003f24 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	f040 814f 	bne.w	8003ee4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003c46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c4a:	f003 0310 	and.w	r3, r3, #16
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	f000 8148 	beq.w	8003ee4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003c54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c58:	f003 0310 	and.w	r3, r3, #16
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	f000 8141 	beq.w	8003ee4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003c62:	2300      	movs	r3, #0
 8003c64:	60bb      	str	r3, [r7, #8]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	60bb      	str	r3, [r7, #8]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	60bb      	str	r3, [r7, #8]
 8003c76:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	695b      	ldr	r3, [r3, #20]
 8003c7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	f000 80b6 	beq.w	8003df4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003c94:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	f000 8145 	beq.w	8003f28 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003ca2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003ca6:	429a      	cmp	r2, r3
 8003ca8:	f080 813e 	bcs.w	8003f28 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003cb2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cb8:	699b      	ldr	r3, [r3, #24]
 8003cba:	2b20      	cmp	r3, #32
 8003cbc:	f000 8088 	beq.w	8003dd0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	330c      	adds	r3, #12
 8003cc6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003cce:	e853 3f00 	ldrex	r3, [r3]
 8003cd2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003cd6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003cda:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003cde:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	330c      	adds	r3, #12
 8003ce8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003cec:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003cf0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cf4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003cf8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003cfc:	e841 2300 	strex	r3, r2, [r1]
 8003d00:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003d04:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d1d9      	bne.n	8003cc0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	3314      	adds	r3, #20
 8003d12:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d16:	e853 3f00 	ldrex	r3, [r3]
 8003d1a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003d1c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d1e:	f023 0301 	bic.w	r3, r3, #1
 8003d22:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	3314      	adds	r3, #20
 8003d2c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003d30:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003d34:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d36:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003d38:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003d3c:	e841 2300 	strex	r3, r2, [r1]
 8003d40:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003d42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d1e1      	bne.n	8003d0c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	3314      	adds	r3, #20
 8003d4e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d50:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d52:	e853 3f00 	ldrex	r3, [r3]
 8003d56:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003d58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d5e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	3314      	adds	r3, #20
 8003d68:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003d6c:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003d6e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d70:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003d72:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003d74:	e841 2300 	strex	r3, r2, [r1]
 8003d78:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003d7a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d1e3      	bne.n	8003d48 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2220      	movs	r2, #32
 8003d84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	330c      	adds	r3, #12
 8003d94:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d98:	e853 3f00 	ldrex	r3, [r3]
 8003d9c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003d9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003da0:	f023 0310 	bic.w	r3, r3, #16
 8003da4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	330c      	adds	r3, #12
 8003dae:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003db2:	65ba      	str	r2, [r7, #88]	; 0x58
 8003db4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003db6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003db8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003dba:	e841 2300 	strex	r3, r2, [r1]
 8003dbe:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003dc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d1e3      	bne.n	8003d8e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f7fd ff6f 	bl	8001cae <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2202      	movs	r2, #2
 8003dd4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003dde:	b29b      	uxth	r3, r3
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	b29b      	uxth	r3, r3
 8003de4:	4619      	mov	r1, r3
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f000 f8bf 	bl	8003f6a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003dec:	e09c      	b.n	8003f28 <HAL_UART_IRQHandler+0x518>
 8003dee:	bf00      	nop
 8003df0:	08004121 	.word	0x08004121
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003dfc:	b29b      	uxth	r3, r3
 8003dfe:	1ad3      	subs	r3, r2, r3
 8003e00:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e08:	b29b      	uxth	r3, r3
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	f000 808e 	beq.w	8003f2c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003e10:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	f000 8089 	beq.w	8003f2c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	330c      	adds	r3, #12
 8003e20:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e24:	e853 3f00 	ldrex	r3, [r3]
 8003e28:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003e2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e2c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e30:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	330c      	adds	r3, #12
 8003e3a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003e3e:	647a      	str	r2, [r7, #68]	; 0x44
 8003e40:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e42:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003e44:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e46:	e841 2300 	strex	r3, r2, [r1]
 8003e4a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003e4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d1e3      	bne.n	8003e1a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	3314      	adds	r3, #20
 8003e58:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5c:	e853 3f00 	ldrex	r3, [r3]
 8003e60:	623b      	str	r3, [r7, #32]
   return(result);
 8003e62:	6a3b      	ldr	r3, [r7, #32]
 8003e64:	f023 0301 	bic.w	r3, r3, #1
 8003e68:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	3314      	adds	r3, #20
 8003e72:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003e76:	633a      	str	r2, [r7, #48]	; 0x30
 8003e78:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e7a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e7e:	e841 2300 	strex	r3, r2, [r1]
 8003e82:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d1e3      	bne.n	8003e52 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2220      	movs	r2, #32
 8003e8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2200      	movs	r2, #0
 8003e96:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	330c      	adds	r3, #12
 8003e9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	e853 3f00 	ldrex	r3, [r3]
 8003ea6:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	f023 0310 	bic.w	r3, r3, #16
 8003eae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	330c      	adds	r3, #12
 8003eb8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003ebc:	61fa      	str	r2, [r7, #28]
 8003ebe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ec0:	69b9      	ldr	r1, [r7, #24]
 8003ec2:	69fa      	ldr	r2, [r7, #28]
 8003ec4:	e841 2300 	strex	r3, r2, [r1]
 8003ec8:	617b      	str	r3, [r7, #20]
   return(result);
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d1e3      	bne.n	8003e98 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2202      	movs	r2, #2
 8003ed4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003ed6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003eda:	4619      	mov	r1, r3
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	f000 f844 	bl	8003f6a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003ee2:	e023      	b.n	8003f2c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003ee4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ee8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d009      	beq.n	8003f04 <HAL_UART_IRQHandler+0x4f4>
 8003ef0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ef4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d003      	beq.n	8003f04 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003efc:	6878      	ldr	r0, [r7, #4]
 8003efe:	f000 f923 	bl	8004148 <UART_Transmit_IT>
    return;
 8003f02:	e014      	b.n	8003f2e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003f04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d00e      	beq.n	8003f2e <HAL_UART_IRQHandler+0x51e>
 8003f10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d008      	beq.n	8003f2e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	f000 f962 	bl	80041e6 <UART_EndTransmit_IT>
    return;
 8003f22:	e004      	b.n	8003f2e <HAL_UART_IRQHandler+0x51e>
    return;
 8003f24:	bf00      	nop
 8003f26:	e002      	b.n	8003f2e <HAL_UART_IRQHandler+0x51e>
      return;
 8003f28:	bf00      	nop
 8003f2a:	e000      	b.n	8003f2e <HAL_UART_IRQHandler+0x51e>
      return;
 8003f2c:	bf00      	nop
  }
}
 8003f2e:	37e8      	adds	r7, #232	; 0xe8
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}

08003f34 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b083      	sub	sp, #12
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003f3c:	bf00      	nop
 8003f3e:	370c      	adds	r7, #12
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bc80      	pop	{r7}
 8003f44:	4770      	bx	lr

08003f46 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f46:	b480      	push	{r7}
 8003f48:	b083      	sub	sp, #12
 8003f4a:	af00      	add	r7, sp, #0
 8003f4c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003f4e:	bf00      	nop
 8003f50:	370c      	adds	r7, #12
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bc80      	pop	{r7}
 8003f56:	4770      	bx	lr

08003f58 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b083      	sub	sp, #12
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003f60:	bf00      	nop
 8003f62:	370c      	adds	r7, #12
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bc80      	pop	{r7}
 8003f68:	4770      	bx	lr

08003f6a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003f6a:	b480      	push	{r7}
 8003f6c:	b083      	sub	sp, #12
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	6078      	str	r0, [r7, #4]
 8003f72:	460b      	mov	r3, r1
 8003f74:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003f76:	bf00      	nop
 8003f78:	370c      	adds	r7, #12
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bc80      	pop	{r7}
 8003f7e:	4770      	bx	lr

08003f80 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b090      	sub	sp, #64	; 0x40
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	60f8      	str	r0, [r7, #12]
 8003f88:	60b9      	str	r1, [r7, #8]
 8003f8a:	603b      	str	r3, [r7, #0]
 8003f8c:	4613      	mov	r3, r2
 8003f8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f90:	e050      	b.n	8004034 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f98:	d04c      	beq.n	8004034 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003f9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d007      	beq.n	8003fb0 <UART_WaitOnFlagUntilTimeout+0x30>
 8003fa0:	f7fd fd6e 	bl	8001a80 <HAL_GetTick>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	1ad3      	subs	r3, r2, r3
 8003faa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d241      	bcs.n	8004034 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	330c      	adds	r3, #12
 8003fb6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fba:	e853 3f00 	ldrex	r3, [r3]
 8003fbe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	330c      	adds	r3, #12
 8003fce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003fd0:	637a      	str	r2, [r7, #52]	; 0x34
 8003fd2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fd4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003fd6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003fd8:	e841 2300 	strex	r3, r2, [r1]
 8003fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d1e5      	bne.n	8003fb0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	3314      	adds	r3, #20
 8003fea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	e853 3f00 	ldrex	r3, [r3]
 8003ff2:	613b      	str	r3, [r7, #16]
   return(result);
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	f023 0301 	bic.w	r3, r3, #1
 8003ffa:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	3314      	adds	r3, #20
 8004002:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004004:	623a      	str	r2, [r7, #32]
 8004006:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004008:	69f9      	ldr	r1, [r7, #28]
 800400a:	6a3a      	ldr	r2, [r7, #32]
 800400c:	e841 2300 	strex	r3, r2, [r1]
 8004010:	61bb      	str	r3, [r7, #24]
   return(result);
 8004012:	69bb      	ldr	r3, [r7, #24]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d1e5      	bne.n	8003fe4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2220      	movs	r2, #32
 800401c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2220      	movs	r2, #32
 8004024:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2200      	movs	r2, #0
 800402c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8004030:	2303      	movs	r3, #3
 8004032:	e00f      	b.n	8004054 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	4013      	ands	r3, r2
 800403e:	68ba      	ldr	r2, [r7, #8]
 8004040:	429a      	cmp	r2, r3
 8004042:	bf0c      	ite	eq
 8004044:	2301      	moveq	r3, #1
 8004046:	2300      	movne	r3, #0
 8004048:	b2db      	uxtb	r3, r3
 800404a:	461a      	mov	r2, r3
 800404c:	79fb      	ldrb	r3, [r7, #7]
 800404e:	429a      	cmp	r2, r3
 8004050:	d09f      	beq.n	8003f92 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004052:	2300      	movs	r3, #0
}
 8004054:	4618      	mov	r0, r3
 8004056:	3740      	adds	r7, #64	; 0x40
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}

0800405c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800405c:	b480      	push	{r7}
 800405e:	b095      	sub	sp, #84	; 0x54
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	330c      	adds	r3, #12
 800406a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800406c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800406e:	e853 3f00 	ldrex	r3, [r3]
 8004072:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004076:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800407a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	330c      	adds	r3, #12
 8004082:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004084:	643a      	str	r2, [r7, #64]	; 0x40
 8004086:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004088:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800408a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800408c:	e841 2300 	strex	r3, r2, [r1]
 8004090:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004094:	2b00      	cmp	r3, #0
 8004096:	d1e5      	bne.n	8004064 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	3314      	adds	r3, #20
 800409e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040a0:	6a3b      	ldr	r3, [r7, #32]
 80040a2:	e853 3f00 	ldrex	r3, [r3]
 80040a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80040a8:	69fb      	ldr	r3, [r7, #28]
 80040aa:	f023 0301 	bic.w	r3, r3, #1
 80040ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	3314      	adds	r3, #20
 80040b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80040b8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80040ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80040be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040c0:	e841 2300 	strex	r3, r2, [r1]
 80040c4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80040c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d1e5      	bne.n	8004098 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d119      	bne.n	8004108 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	330c      	adds	r3, #12
 80040da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	e853 3f00 	ldrex	r3, [r3]
 80040e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	f023 0310 	bic.w	r3, r3, #16
 80040ea:	647b      	str	r3, [r7, #68]	; 0x44
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	330c      	adds	r3, #12
 80040f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80040f4:	61ba      	str	r2, [r7, #24]
 80040f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040f8:	6979      	ldr	r1, [r7, #20]
 80040fa:	69ba      	ldr	r2, [r7, #24]
 80040fc:	e841 2300 	strex	r3, r2, [r1]
 8004100:	613b      	str	r3, [r7, #16]
   return(result);
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d1e5      	bne.n	80040d4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2220      	movs	r2, #32
 800410c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2200      	movs	r2, #0
 8004114:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004116:	bf00      	nop
 8004118:	3754      	adds	r7, #84	; 0x54
 800411a:	46bd      	mov	sp, r7
 800411c:	bc80      	pop	{r7}
 800411e:	4770      	bx	lr

08004120 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b084      	sub	sp, #16
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800412c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2200      	movs	r2, #0
 8004132:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2200      	movs	r2, #0
 8004138:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800413a:	68f8      	ldr	r0, [r7, #12]
 800413c:	f7ff ff0c 	bl	8003f58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004140:	bf00      	nop
 8004142:	3710      	adds	r7, #16
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}

08004148 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004148:	b480      	push	{r7}
 800414a:	b085      	sub	sp, #20
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004156:	b2db      	uxtb	r3, r3
 8004158:	2b21      	cmp	r3, #33	; 0x21
 800415a:	d13e      	bne.n	80041da <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004164:	d114      	bne.n	8004190 <UART_Transmit_IT+0x48>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	691b      	ldr	r3, [r3, #16]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d110      	bne.n	8004190 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6a1b      	ldr	r3, [r3, #32]
 8004172:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	881b      	ldrh	r3, [r3, #0]
 8004178:	461a      	mov	r2, r3
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004182:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6a1b      	ldr	r3, [r3, #32]
 8004188:	1c9a      	adds	r2, r3, #2
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	621a      	str	r2, [r3, #32]
 800418e:	e008      	b.n	80041a2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6a1b      	ldr	r3, [r3, #32]
 8004194:	1c59      	adds	r1, r3, #1
 8004196:	687a      	ldr	r2, [r7, #4]
 8004198:	6211      	str	r1, [r2, #32]
 800419a:	781a      	ldrb	r2, [r3, #0]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80041a6:	b29b      	uxth	r3, r3
 80041a8:	3b01      	subs	r3, #1
 80041aa:	b29b      	uxth	r3, r3
 80041ac:	687a      	ldr	r2, [r7, #4]
 80041ae:	4619      	mov	r1, r3
 80041b0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d10f      	bne.n	80041d6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	68da      	ldr	r2, [r3, #12]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80041c4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	68da      	ldr	r2, [r3, #12]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041d4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80041d6:	2300      	movs	r3, #0
 80041d8:	e000      	b.n	80041dc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80041da:	2302      	movs	r3, #2
  }
}
 80041dc:	4618      	mov	r0, r3
 80041de:	3714      	adds	r7, #20
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bc80      	pop	{r7}
 80041e4:	4770      	bx	lr

080041e6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80041e6:	b580      	push	{r7, lr}
 80041e8:	b082      	sub	sp, #8
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	68da      	ldr	r2, [r3, #12]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041fc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2220      	movs	r2, #32
 8004202:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f7ff fe94 	bl	8003f34 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800420c:	2300      	movs	r3, #0
}
 800420e:	4618      	mov	r0, r3
 8004210:	3708      	adds	r7, #8
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}

08004216 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004216:	b580      	push	{r7, lr}
 8004218:	b08c      	sub	sp, #48	; 0x30
 800421a:	af00      	add	r7, sp, #0
 800421c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004224:	b2db      	uxtb	r3, r3
 8004226:	2b22      	cmp	r3, #34	; 0x22
 8004228:	f040 80ae 	bne.w	8004388 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004234:	d117      	bne.n	8004266 <UART_Receive_IT+0x50>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	691b      	ldr	r3, [r3, #16]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d113      	bne.n	8004266 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800423e:	2300      	movs	r3, #0
 8004240:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004246:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	b29b      	uxth	r3, r3
 8004250:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004254:	b29a      	uxth	r2, r3
 8004256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004258:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800425e:	1c9a      	adds	r2, r3, #2
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	629a      	str	r2, [r3, #40]	; 0x28
 8004264:	e026      	b.n	80042b4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800426a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800426c:	2300      	movs	r3, #0
 800426e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004278:	d007      	beq.n	800428a <UART_Receive_IT+0x74>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d10a      	bne.n	8004298 <UART_Receive_IT+0x82>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	691b      	ldr	r3, [r3, #16]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d106      	bne.n	8004298 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	b2da      	uxtb	r2, r3
 8004292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004294:	701a      	strb	r2, [r3, #0]
 8004296:	e008      	b.n	80042aa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	b2db      	uxtb	r3, r3
 80042a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042a4:	b2da      	uxtb	r2, r3
 80042a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042a8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ae:	1c5a      	adds	r2, r3, #1
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80042b8:	b29b      	uxth	r3, r3
 80042ba:	3b01      	subs	r3, #1
 80042bc:	b29b      	uxth	r3, r3
 80042be:	687a      	ldr	r2, [r7, #4]
 80042c0:	4619      	mov	r1, r3
 80042c2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d15d      	bne.n	8004384 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	68da      	ldr	r2, [r3, #12]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f022 0220 	bic.w	r2, r2, #32
 80042d6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	68da      	ldr	r2, [r3, #12]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80042e6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	695a      	ldr	r2, [r3, #20]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f022 0201 	bic.w	r2, r2, #1
 80042f6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2220      	movs	r2, #32
 80042fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2200      	movs	r2, #0
 8004304:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800430a:	2b01      	cmp	r3, #1
 800430c:	d135      	bne.n	800437a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2200      	movs	r2, #0
 8004312:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	330c      	adds	r3, #12
 800431a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	e853 3f00 	ldrex	r3, [r3]
 8004322:	613b      	str	r3, [r7, #16]
   return(result);
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	f023 0310 	bic.w	r3, r3, #16
 800432a:	627b      	str	r3, [r7, #36]	; 0x24
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	330c      	adds	r3, #12
 8004332:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004334:	623a      	str	r2, [r7, #32]
 8004336:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004338:	69f9      	ldr	r1, [r7, #28]
 800433a:	6a3a      	ldr	r2, [r7, #32]
 800433c:	e841 2300 	strex	r3, r2, [r1]
 8004340:	61bb      	str	r3, [r7, #24]
   return(result);
 8004342:	69bb      	ldr	r3, [r7, #24]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d1e5      	bne.n	8004314 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 0310 	and.w	r3, r3, #16
 8004352:	2b10      	cmp	r3, #16
 8004354:	d10a      	bne.n	800436c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004356:	2300      	movs	r3, #0
 8004358:	60fb      	str	r3, [r7, #12]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	60fb      	str	r3, [r7, #12]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	60fb      	str	r3, [r7, #12]
 800436a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004370:	4619      	mov	r1, r3
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f7ff fdf9 	bl	8003f6a <HAL_UARTEx_RxEventCallback>
 8004378:	e002      	b.n	8004380 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f7ff fde3 	bl	8003f46 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004380:	2300      	movs	r3, #0
 8004382:	e002      	b.n	800438a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004384:	2300      	movs	r3, #0
 8004386:	e000      	b.n	800438a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004388:	2302      	movs	r3, #2
  }
}
 800438a:	4618      	mov	r0, r3
 800438c:	3730      	adds	r7, #48	; 0x30
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}
	...

08004394 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b084      	sub	sp, #16
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	691b      	ldr	r3, [r3, #16]
 80043a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	68da      	ldr	r2, [r3, #12]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	430a      	orrs	r2, r1
 80043b0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	689a      	ldr	r2, [r3, #8]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	691b      	ldr	r3, [r3, #16]
 80043ba:	431a      	orrs	r2, r3
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	695b      	ldr	r3, [r3, #20]
 80043c0:	4313      	orrs	r3, r2
 80043c2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	68db      	ldr	r3, [r3, #12]
 80043ca:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80043ce:	f023 030c 	bic.w	r3, r3, #12
 80043d2:	687a      	ldr	r2, [r7, #4]
 80043d4:	6812      	ldr	r2, [r2, #0]
 80043d6:	68b9      	ldr	r1, [r7, #8]
 80043d8:	430b      	orrs	r3, r1
 80043da:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	695b      	ldr	r3, [r3, #20]
 80043e2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	699a      	ldr	r2, [r3, #24]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	430a      	orrs	r2, r1
 80043f0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a2c      	ldr	r2, [pc, #176]	; (80044a8 <UART_SetConfig+0x114>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d103      	bne.n	8004404 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80043fc:	f7fe fa9c 	bl	8002938 <HAL_RCC_GetPCLK2Freq>
 8004400:	60f8      	str	r0, [r7, #12]
 8004402:	e002      	b.n	800440a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004404:	f7fe fa84 	bl	8002910 <HAL_RCC_GetPCLK1Freq>
 8004408:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800440a:	68fa      	ldr	r2, [r7, #12]
 800440c:	4613      	mov	r3, r2
 800440e:	009b      	lsls	r3, r3, #2
 8004410:	4413      	add	r3, r2
 8004412:	009a      	lsls	r2, r3, #2
 8004414:	441a      	add	r2, r3
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	009b      	lsls	r3, r3, #2
 800441c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004420:	4a22      	ldr	r2, [pc, #136]	; (80044ac <UART_SetConfig+0x118>)
 8004422:	fba2 2303 	umull	r2, r3, r2, r3
 8004426:	095b      	lsrs	r3, r3, #5
 8004428:	0119      	lsls	r1, r3, #4
 800442a:	68fa      	ldr	r2, [r7, #12]
 800442c:	4613      	mov	r3, r2
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	4413      	add	r3, r2
 8004432:	009a      	lsls	r2, r3, #2
 8004434:	441a      	add	r2, r3
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004440:	4b1a      	ldr	r3, [pc, #104]	; (80044ac <UART_SetConfig+0x118>)
 8004442:	fba3 0302 	umull	r0, r3, r3, r2
 8004446:	095b      	lsrs	r3, r3, #5
 8004448:	2064      	movs	r0, #100	; 0x64
 800444a:	fb00 f303 	mul.w	r3, r0, r3
 800444e:	1ad3      	subs	r3, r2, r3
 8004450:	011b      	lsls	r3, r3, #4
 8004452:	3332      	adds	r3, #50	; 0x32
 8004454:	4a15      	ldr	r2, [pc, #84]	; (80044ac <UART_SetConfig+0x118>)
 8004456:	fba2 2303 	umull	r2, r3, r2, r3
 800445a:	095b      	lsrs	r3, r3, #5
 800445c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004460:	4419      	add	r1, r3
 8004462:	68fa      	ldr	r2, [r7, #12]
 8004464:	4613      	mov	r3, r2
 8004466:	009b      	lsls	r3, r3, #2
 8004468:	4413      	add	r3, r2
 800446a:	009a      	lsls	r2, r3, #2
 800446c:	441a      	add	r2, r3
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	009b      	lsls	r3, r3, #2
 8004474:	fbb2 f2f3 	udiv	r2, r2, r3
 8004478:	4b0c      	ldr	r3, [pc, #48]	; (80044ac <UART_SetConfig+0x118>)
 800447a:	fba3 0302 	umull	r0, r3, r3, r2
 800447e:	095b      	lsrs	r3, r3, #5
 8004480:	2064      	movs	r0, #100	; 0x64
 8004482:	fb00 f303 	mul.w	r3, r0, r3
 8004486:	1ad3      	subs	r3, r2, r3
 8004488:	011b      	lsls	r3, r3, #4
 800448a:	3332      	adds	r3, #50	; 0x32
 800448c:	4a07      	ldr	r2, [pc, #28]	; (80044ac <UART_SetConfig+0x118>)
 800448e:	fba2 2303 	umull	r2, r3, r2, r3
 8004492:	095b      	lsrs	r3, r3, #5
 8004494:	f003 020f 	and.w	r2, r3, #15
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	440a      	add	r2, r1
 800449e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80044a0:	bf00      	nop
 80044a2:	3710      	adds	r7, #16
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}
 80044a8:	40013800 	.word	0x40013800
 80044ac:	51eb851f 	.word	0x51eb851f

080044b0 <siprintf>:
 80044b0:	b40e      	push	{r1, r2, r3}
 80044b2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80044b6:	b500      	push	{lr}
 80044b8:	b09c      	sub	sp, #112	; 0x70
 80044ba:	ab1d      	add	r3, sp, #116	; 0x74
 80044bc:	9002      	str	r0, [sp, #8]
 80044be:	9006      	str	r0, [sp, #24]
 80044c0:	9107      	str	r1, [sp, #28]
 80044c2:	9104      	str	r1, [sp, #16]
 80044c4:	4808      	ldr	r0, [pc, #32]	; (80044e8 <siprintf+0x38>)
 80044c6:	4909      	ldr	r1, [pc, #36]	; (80044ec <siprintf+0x3c>)
 80044c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80044cc:	9105      	str	r1, [sp, #20]
 80044ce:	6800      	ldr	r0, [r0, #0]
 80044d0:	a902      	add	r1, sp, #8
 80044d2:	9301      	str	r3, [sp, #4]
 80044d4:	f000 f98e 	bl	80047f4 <_svfiprintf_r>
 80044d8:	2200      	movs	r2, #0
 80044da:	9b02      	ldr	r3, [sp, #8]
 80044dc:	701a      	strb	r2, [r3, #0]
 80044de:	b01c      	add	sp, #112	; 0x70
 80044e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80044e4:	b003      	add	sp, #12
 80044e6:	4770      	bx	lr
 80044e8:	20000094 	.word	0x20000094
 80044ec:	ffff0208 	.word	0xffff0208

080044f0 <memset>:
 80044f0:	4603      	mov	r3, r0
 80044f2:	4402      	add	r2, r0
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d100      	bne.n	80044fa <memset+0xa>
 80044f8:	4770      	bx	lr
 80044fa:	f803 1b01 	strb.w	r1, [r3], #1
 80044fe:	e7f9      	b.n	80044f4 <memset+0x4>

08004500 <__errno>:
 8004500:	4b01      	ldr	r3, [pc, #4]	; (8004508 <__errno+0x8>)
 8004502:	6818      	ldr	r0, [r3, #0]
 8004504:	4770      	bx	lr
 8004506:	bf00      	nop
 8004508:	20000094 	.word	0x20000094

0800450c <__libc_init_array>:
 800450c:	b570      	push	{r4, r5, r6, lr}
 800450e:	2600      	movs	r6, #0
 8004510:	4d0c      	ldr	r5, [pc, #48]	; (8004544 <__libc_init_array+0x38>)
 8004512:	4c0d      	ldr	r4, [pc, #52]	; (8004548 <__libc_init_array+0x3c>)
 8004514:	1b64      	subs	r4, r4, r5
 8004516:	10a4      	asrs	r4, r4, #2
 8004518:	42a6      	cmp	r6, r4
 800451a:	d109      	bne.n	8004530 <__libc_init_array+0x24>
 800451c:	f000 fc7a 	bl	8004e14 <_init>
 8004520:	2600      	movs	r6, #0
 8004522:	4d0a      	ldr	r5, [pc, #40]	; (800454c <__libc_init_array+0x40>)
 8004524:	4c0a      	ldr	r4, [pc, #40]	; (8004550 <__libc_init_array+0x44>)
 8004526:	1b64      	subs	r4, r4, r5
 8004528:	10a4      	asrs	r4, r4, #2
 800452a:	42a6      	cmp	r6, r4
 800452c:	d105      	bne.n	800453a <__libc_init_array+0x2e>
 800452e:	bd70      	pop	{r4, r5, r6, pc}
 8004530:	f855 3b04 	ldr.w	r3, [r5], #4
 8004534:	4798      	blx	r3
 8004536:	3601      	adds	r6, #1
 8004538:	e7ee      	b.n	8004518 <__libc_init_array+0xc>
 800453a:	f855 3b04 	ldr.w	r3, [r5], #4
 800453e:	4798      	blx	r3
 8004540:	3601      	adds	r6, #1
 8004542:	e7f2      	b.n	800452a <__libc_init_array+0x1e>
 8004544:	08004f34 	.word	0x08004f34
 8004548:	08004f34 	.word	0x08004f34
 800454c:	08004f34 	.word	0x08004f34
 8004550:	08004f38 	.word	0x08004f38

08004554 <__retarget_lock_acquire_recursive>:
 8004554:	4770      	bx	lr

08004556 <__retarget_lock_release_recursive>:
 8004556:	4770      	bx	lr

08004558 <_free_r>:
 8004558:	b538      	push	{r3, r4, r5, lr}
 800455a:	4605      	mov	r5, r0
 800455c:	2900      	cmp	r1, #0
 800455e:	d040      	beq.n	80045e2 <_free_r+0x8a>
 8004560:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004564:	1f0c      	subs	r4, r1, #4
 8004566:	2b00      	cmp	r3, #0
 8004568:	bfb8      	it	lt
 800456a:	18e4      	addlt	r4, r4, r3
 800456c:	f000 f8dc 	bl	8004728 <__malloc_lock>
 8004570:	4a1c      	ldr	r2, [pc, #112]	; (80045e4 <_free_r+0x8c>)
 8004572:	6813      	ldr	r3, [r2, #0]
 8004574:	b933      	cbnz	r3, 8004584 <_free_r+0x2c>
 8004576:	6063      	str	r3, [r4, #4]
 8004578:	6014      	str	r4, [r2, #0]
 800457a:	4628      	mov	r0, r5
 800457c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004580:	f000 b8d8 	b.w	8004734 <__malloc_unlock>
 8004584:	42a3      	cmp	r3, r4
 8004586:	d908      	bls.n	800459a <_free_r+0x42>
 8004588:	6820      	ldr	r0, [r4, #0]
 800458a:	1821      	adds	r1, r4, r0
 800458c:	428b      	cmp	r3, r1
 800458e:	bf01      	itttt	eq
 8004590:	6819      	ldreq	r1, [r3, #0]
 8004592:	685b      	ldreq	r3, [r3, #4]
 8004594:	1809      	addeq	r1, r1, r0
 8004596:	6021      	streq	r1, [r4, #0]
 8004598:	e7ed      	b.n	8004576 <_free_r+0x1e>
 800459a:	461a      	mov	r2, r3
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	b10b      	cbz	r3, 80045a4 <_free_r+0x4c>
 80045a0:	42a3      	cmp	r3, r4
 80045a2:	d9fa      	bls.n	800459a <_free_r+0x42>
 80045a4:	6811      	ldr	r1, [r2, #0]
 80045a6:	1850      	adds	r0, r2, r1
 80045a8:	42a0      	cmp	r0, r4
 80045aa:	d10b      	bne.n	80045c4 <_free_r+0x6c>
 80045ac:	6820      	ldr	r0, [r4, #0]
 80045ae:	4401      	add	r1, r0
 80045b0:	1850      	adds	r0, r2, r1
 80045b2:	4283      	cmp	r3, r0
 80045b4:	6011      	str	r1, [r2, #0]
 80045b6:	d1e0      	bne.n	800457a <_free_r+0x22>
 80045b8:	6818      	ldr	r0, [r3, #0]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	4408      	add	r0, r1
 80045be:	6010      	str	r0, [r2, #0]
 80045c0:	6053      	str	r3, [r2, #4]
 80045c2:	e7da      	b.n	800457a <_free_r+0x22>
 80045c4:	d902      	bls.n	80045cc <_free_r+0x74>
 80045c6:	230c      	movs	r3, #12
 80045c8:	602b      	str	r3, [r5, #0]
 80045ca:	e7d6      	b.n	800457a <_free_r+0x22>
 80045cc:	6820      	ldr	r0, [r4, #0]
 80045ce:	1821      	adds	r1, r4, r0
 80045d0:	428b      	cmp	r3, r1
 80045d2:	bf01      	itttt	eq
 80045d4:	6819      	ldreq	r1, [r3, #0]
 80045d6:	685b      	ldreq	r3, [r3, #4]
 80045d8:	1809      	addeq	r1, r1, r0
 80045da:	6021      	streq	r1, [r4, #0]
 80045dc:	6063      	str	r3, [r4, #4]
 80045de:	6054      	str	r4, [r2, #4]
 80045e0:	e7cb      	b.n	800457a <_free_r+0x22>
 80045e2:	bd38      	pop	{r3, r4, r5, pc}
 80045e4:	20000338 	.word	0x20000338

080045e8 <sbrk_aligned>:
 80045e8:	b570      	push	{r4, r5, r6, lr}
 80045ea:	4e0e      	ldr	r6, [pc, #56]	; (8004624 <sbrk_aligned+0x3c>)
 80045ec:	460c      	mov	r4, r1
 80045ee:	6831      	ldr	r1, [r6, #0]
 80045f0:	4605      	mov	r5, r0
 80045f2:	b911      	cbnz	r1, 80045fa <sbrk_aligned+0x12>
 80045f4:	f000 fbaa 	bl	8004d4c <_sbrk_r>
 80045f8:	6030      	str	r0, [r6, #0]
 80045fa:	4621      	mov	r1, r4
 80045fc:	4628      	mov	r0, r5
 80045fe:	f000 fba5 	bl	8004d4c <_sbrk_r>
 8004602:	1c43      	adds	r3, r0, #1
 8004604:	d00a      	beq.n	800461c <sbrk_aligned+0x34>
 8004606:	1cc4      	adds	r4, r0, #3
 8004608:	f024 0403 	bic.w	r4, r4, #3
 800460c:	42a0      	cmp	r0, r4
 800460e:	d007      	beq.n	8004620 <sbrk_aligned+0x38>
 8004610:	1a21      	subs	r1, r4, r0
 8004612:	4628      	mov	r0, r5
 8004614:	f000 fb9a 	bl	8004d4c <_sbrk_r>
 8004618:	3001      	adds	r0, #1
 800461a:	d101      	bne.n	8004620 <sbrk_aligned+0x38>
 800461c:	f04f 34ff 	mov.w	r4, #4294967295
 8004620:	4620      	mov	r0, r4
 8004622:	bd70      	pop	{r4, r5, r6, pc}
 8004624:	2000033c 	.word	0x2000033c

08004628 <_malloc_r>:
 8004628:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800462c:	1ccd      	adds	r5, r1, #3
 800462e:	f025 0503 	bic.w	r5, r5, #3
 8004632:	3508      	adds	r5, #8
 8004634:	2d0c      	cmp	r5, #12
 8004636:	bf38      	it	cc
 8004638:	250c      	movcc	r5, #12
 800463a:	2d00      	cmp	r5, #0
 800463c:	4607      	mov	r7, r0
 800463e:	db01      	blt.n	8004644 <_malloc_r+0x1c>
 8004640:	42a9      	cmp	r1, r5
 8004642:	d905      	bls.n	8004650 <_malloc_r+0x28>
 8004644:	230c      	movs	r3, #12
 8004646:	2600      	movs	r6, #0
 8004648:	603b      	str	r3, [r7, #0]
 800464a:	4630      	mov	r0, r6
 800464c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004650:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004724 <_malloc_r+0xfc>
 8004654:	f000 f868 	bl	8004728 <__malloc_lock>
 8004658:	f8d8 3000 	ldr.w	r3, [r8]
 800465c:	461c      	mov	r4, r3
 800465e:	bb5c      	cbnz	r4, 80046b8 <_malloc_r+0x90>
 8004660:	4629      	mov	r1, r5
 8004662:	4638      	mov	r0, r7
 8004664:	f7ff ffc0 	bl	80045e8 <sbrk_aligned>
 8004668:	1c43      	adds	r3, r0, #1
 800466a:	4604      	mov	r4, r0
 800466c:	d155      	bne.n	800471a <_malloc_r+0xf2>
 800466e:	f8d8 4000 	ldr.w	r4, [r8]
 8004672:	4626      	mov	r6, r4
 8004674:	2e00      	cmp	r6, #0
 8004676:	d145      	bne.n	8004704 <_malloc_r+0xdc>
 8004678:	2c00      	cmp	r4, #0
 800467a:	d048      	beq.n	800470e <_malloc_r+0xe6>
 800467c:	6823      	ldr	r3, [r4, #0]
 800467e:	4631      	mov	r1, r6
 8004680:	4638      	mov	r0, r7
 8004682:	eb04 0903 	add.w	r9, r4, r3
 8004686:	f000 fb61 	bl	8004d4c <_sbrk_r>
 800468a:	4581      	cmp	r9, r0
 800468c:	d13f      	bne.n	800470e <_malloc_r+0xe6>
 800468e:	6821      	ldr	r1, [r4, #0]
 8004690:	4638      	mov	r0, r7
 8004692:	1a6d      	subs	r5, r5, r1
 8004694:	4629      	mov	r1, r5
 8004696:	f7ff ffa7 	bl	80045e8 <sbrk_aligned>
 800469a:	3001      	adds	r0, #1
 800469c:	d037      	beq.n	800470e <_malloc_r+0xe6>
 800469e:	6823      	ldr	r3, [r4, #0]
 80046a0:	442b      	add	r3, r5
 80046a2:	6023      	str	r3, [r4, #0]
 80046a4:	f8d8 3000 	ldr.w	r3, [r8]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d038      	beq.n	800471e <_malloc_r+0xf6>
 80046ac:	685a      	ldr	r2, [r3, #4]
 80046ae:	42a2      	cmp	r2, r4
 80046b0:	d12b      	bne.n	800470a <_malloc_r+0xe2>
 80046b2:	2200      	movs	r2, #0
 80046b4:	605a      	str	r2, [r3, #4]
 80046b6:	e00f      	b.n	80046d8 <_malloc_r+0xb0>
 80046b8:	6822      	ldr	r2, [r4, #0]
 80046ba:	1b52      	subs	r2, r2, r5
 80046bc:	d41f      	bmi.n	80046fe <_malloc_r+0xd6>
 80046be:	2a0b      	cmp	r2, #11
 80046c0:	d917      	bls.n	80046f2 <_malloc_r+0xca>
 80046c2:	1961      	adds	r1, r4, r5
 80046c4:	42a3      	cmp	r3, r4
 80046c6:	6025      	str	r5, [r4, #0]
 80046c8:	bf18      	it	ne
 80046ca:	6059      	strne	r1, [r3, #4]
 80046cc:	6863      	ldr	r3, [r4, #4]
 80046ce:	bf08      	it	eq
 80046d0:	f8c8 1000 	streq.w	r1, [r8]
 80046d4:	5162      	str	r2, [r4, r5]
 80046d6:	604b      	str	r3, [r1, #4]
 80046d8:	4638      	mov	r0, r7
 80046da:	f104 060b 	add.w	r6, r4, #11
 80046de:	f000 f829 	bl	8004734 <__malloc_unlock>
 80046e2:	f026 0607 	bic.w	r6, r6, #7
 80046e6:	1d23      	adds	r3, r4, #4
 80046e8:	1af2      	subs	r2, r6, r3
 80046ea:	d0ae      	beq.n	800464a <_malloc_r+0x22>
 80046ec:	1b9b      	subs	r3, r3, r6
 80046ee:	50a3      	str	r3, [r4, r2]
 80046f0:	e7ab      	b.n	800464a <_malloc_r+0x22>
 80046f2:	42a3      	cmp	r3, r4
 80046f4:	6862      	ldr	r2, [r4, #4]
 80046f6:	d1dd      	bne.n	80046b4 <_malloc_r+0x8c>
 80046f8:	f8c8 2000 	str.w	r2, [r8]
 80046fc:	e7ec      	b.n	80046d8 <_malloc_r+0xb0>
 80046fe:	4623      	mov	r3, r4
 8004700:	6864      	ldr	r4, [r4, #4]
 8004702:	e7ac      	b.n	800465e <_malloc_r+0x36>
 8004704:	4634      	mov	r4, r6
 8004706:	6876      	ldr	r6, [r6, #4]
 8004708:	e7b4      	b.n	8004674 <_malloc_r+0x4c>
 800470a:	4613      	mov	r3, r2
 800470c:	e7cc      	b.n	80046a8 <_malloc_r+0x80>
 800470e:	230c      	movs	r3, #12
 8004710:	4638      	mov	r0, r7
 8004712:	603b      	str	r3, [r7, #0]
 8004714:	f000 f80e 	bl	8004734 <__malloc_unlock>
 8004718:	e797      	b.n	800464a <_malloc_r+0x22>
 800471a:	6025      	str	r5, [r4, #0]
 800471c:	e7dc      	b.n	80046d8 <_malloc_r+0xb0>
 800471e:	605b      	str	r3, [r3, #4]
 8004720:	deff      	udf	#255	; 0xff
 8004722:	bf00      	nop
 8004724:	20000338 	.word	0x20000338

08004728 <__malloc_lock>:
 8004728:	4801      	ldr	r0, [pc, #4]	; (8004730 <__malloc_lock+0x8>)
 800472a:	f7ff bf13 	b.w	8004554 <__retarget_lock_acquire_recursive>
 800472e:	bf00      	nop
 8004730:	20000334 	.word	0x20000334

08004734 <__malloc_unlock>:
 8004734:	4801      	ldr	r0, [pc, #4]	; (800473c <__malloc_unlock+0x8>)
 8004736:	f7ff bf0e 	b.w	8004556 <__retarget_lock_release_recursive>
 800473a:	bf00      	nop
 800473c:	20000334 	.word	0x20000334

08004740 <__ssputs_r>:
 8004740:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004744:	461f      	mov	r7, r3
 8004746:	688e      	ldr	r6, [r1, #8]
 8004748:	4682      	mov	sl, r0
 800474a:	42be      	cmp	r6, r7
 800474c:	460c      	mov	r4, r1
 800474e:	4690      	mov	r8, r2
 8004750:	680b      	ldr	r3, [r1, #0]
 8004752:	d82c      	bhi.n	80047ae <__ssputs_r+0x6e>
 8004754:	898a      	ldrh	r2, [r1, #12]
 8004756:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800475a:	d026      	beq.n	80047aa <__ssputs_r+0x6a>
 800475c:	6965      	ldr	r5, [r4, #20]
 800475e:	6909      	ldr	r1, [r1, #16]
 8004760:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004764:	eba3 0901 	sub.w	r9, r3, r1
 8004768:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800476c:	1c7b      	adds	r3, r7, #1
 800476e:	444b      	add	r3, r9
 8004770:	106d      	asrs	r5, r5, #1
 8004772:	429d      	cmp	r5, r3
 8004774:	bf38      	it	cc
 8004776:	461d      	movcc	r5, r3
 8004778:	0553      	lsls	r3, r2, #21
 800477a:	d527      	bpl.n	80047cc <__ssputs_r+0x8c>
 800477c:	4629      	mov	r1, r5
 800477e:	f7ff ff53 	bl	8004628 <_malloc_r>
 8004782:	4606      	mov	r6, r0
 8004784:	b360      	cbz	r0, 80047e0 <__ssputs_r+0xa0>
 8004786:	464a      	mov	r2, r9
 8004788:	6921      	ldr	r1, [r4, #16]
 800478a:	f000 fafd 	bl	8004d88 <memcpy>
 800478e:	89a3      	ldrh	r3, [r4, #12]
 8004790:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004794:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004798:	81a3      	strh	r3, [r4, #12]
 800479a:	6126      	str	r6, [r4, #16]
 800479c:	444e      	add	r6, r9
 800479e:	6026      	str	r6, [r4, #0]
 80047a0:	463e      	mov	r6, r7
 80047a2:	6165      	str	r5, [r4, #20]
 80047a4:	eba5 0509 	sub.w	r5, r5, r9
 80047a8:	60a5      	str	r5, [r4, #8]
 80047aa:	42be      	cmp	r6, r7
 80047ac:	d900      	bls.n	80047b0 <__ssputs_r+0x70>
 80047ae:	463e      	mov	r6, r7
 80047b0:	4632      	mov	r2, r6
 80047b2:	4641      	mov	r1, r8
 80047b4:	6820      	ldr	r0, [r4, #0]
 80047b6:	f000 faaf 	bl	8004d18 <memmove>
 80047ba:	2000      	movs	r0, #0
 80047bc:	68a3      	ldr	r3, [r4, #8]
 80047be:	1b9b      	subs	r3, r3, r6
 80047c0:	60a3      	str	r3, [r4, #8]
 80047c2:	6823      	ldr	r3, [r4, #0]
 80047c4:	4433      	add	r3, r6
 80047c6:	6023      	str	r3, [r4, #0]
 80047c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047cc:	462a      	mov	r2, r5
 80047ce:	f000 fae9 	bl	8004da4 <_realloc_r>
 80047d2:	4606      	mov	r6, r0
 80047d4:	2800      	cmp	r0, #0
 80047d6:	d1e0      	bne.n	800479a <__ssputs_r+0x5a>
 80047d8:	4650      	mov	r0, sl
 80047da:	6921      	ldr	r1, [r4, #16]
 80047dc:	f7ff febc 	bl	8004558 <_free_r>
 80047e0:	230c      	movs	r3, #12
 80047e2:	f8ca 3000 	str.w	r3, [sl]
 80047e6:	89a3      	ldrh	r3, [r4, #12]
 80047e8:	f04f 30ff 	mov.w	r0, #4294967295
 80047ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047f0:	81a3      	strh	r3, [r4, #12]
 80047f2:	e7e9      	b.n	80047c8 <__ssputs_r+0x88>

080047f4 <_svfiprintf_r>:
 80047f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047f8:	4698      	mov	r8, r3
 80047fa:	898b      	ldrh	r3, [r1, #12]
 80047fc:	4607      	mov	r7, r0
 80047fe:	061b      	lsls	r3, r3, #24
 8004800:	460d      	mov	r5, r1
 8004802:	4614      	mov	r4, r2
 8004804:	b09d      	sub	sp, #116	; 0x74
 8004806:	d50e      	bpl.n	8004826 <_svfiprintf_r+0x32>
 8004808:	690b      	ldr	r3, [r1, #16]
 800480a:	b963      	cbnz	r3, 8004826 <_svfiprintf_r+0x32>
 800480c:	2140      	movs	r1, #64	; 0x40
 800480e:	f7ff ff0b 	bl	8004628 <_malloc_r>
 8004812:	6028      	str	r0, [r5, #0]
 8004814:	6128      	str	r0, [r5, #16]
 8004816:	b920      	cbnz	r0, 8004822 <_svfiprintf_r+0x2e>
 8004818:	230c      	movs	r3, #12
 800481a:	603b      	str	r3, [r7, #0]
 800481c:	f04f 30ff 	mov.w	r0, #4294967295
 8004820:	e0d0      	b.n	80049c4 <_svfiprintf_r+0x1d0>
 8004822:	2340      	movs	r3, #64	; 0x40
 8004824:	616b      	str	r3, [r5, #20]
 8004826:	2300      	movs	r3, #0
 8004828:	9309      	str	r3, [sp, #36]	; 0x24
 800482a:	2320      	movs	r3, #32
 800482c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004830:	2330      	movs	r3, #48	; 0x30
 8004832:	f04f 0901 	mov.w	r9, #1
 8004836:	f8cd 800c 	str.w	r8, [sp, #12]
 800483a:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80049dc <_svfiprintf_r+0x1e8>
 800483e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004842:	4623      	mov	r3, r4
 8004844:	469a      	mov	sl, r3
 8004846:	f813 2b01 	ldrb.w	r2, [r3], #1
 800484a:	b10a      	cbz	r2, 8004850 <_svfiprintf_r+0x5c>
 800484c:	2a25      	cmp	r2, #37	; 0x25
 800484e:	d1f9      	bne.n	8004844 <_svfiprintf_r+0x50>
 8004850:	ebba 0b04 	subs.w	fp, sl, r4
 8004854:	d00b      	beq.n	800486e <_svfiprintf_r+0x7a>
 8004856:	465b      	mov	r3, fp
 8004858:	4622      	mov	r2, r4
 800485a:	4629      	mov	r1, r5
 800485c:	4638      	mov	r0, r7
 800485e:	f7ff ff6f 	bl	8004740 <__ssputs_r>
 8004862:	3001      	adds	r0, #1
 8004864:	f000 80a9 	beq.w	80049ba <_svfiprintf_r+0x1c6>
 8004868:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800486a:	445a      	add	r2, fp
 800486c:	9209      	str	r2, [sp, #36]	; 0x24
 800486e:	f89a 3000 	ldrb.w	r3, [sl]
 8004872:	2b00      	cmp	r3, #0
 8004874:	f000 80a1 	beq.w	80049ba <_svfiprintf_r+0x1c6>
 8004878:	2300      	movs	r3, #0
 800487a:	f04f 32ff 	mov.w	r2, #4294967295
 800487e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004882:	f10a 0a01 	add.w	sl, sl, #1
 8004886:	9304      	str	r3, [sp, #16]
 8004888:	9307      	str	r3, [sp, #28]
 800488a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800488e:	931a      	str	r3, [sp, #104]	; 0x68
 8004890:	4654      	mov	r4, sl
 8004892:	2205      	movs	r2, #5
 8004894:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004898:	4850      	ldr	r0, [pc, #320]	; (80049dc <_svfiprintf_r+0x1e8>)
 800489a:	f000 fa67 	bl	8004d6c <memchr>
 800489e:	9a04      	ldr	r2, [sp, #16]
 80048a0:	b9d8      	cbnz	r0, 80048da <_svfiprintf_r+0xe6>
 80048a2:	06d0      	lsls	r0, r2, #27
 80048a4:	bf44      	itt	mi
 80048a6:	2320      	movmi	r3, #32
 80048a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80048ac:	0711      	lsls	r1, r2, #28
 80048ae:	bf44      	itt	mi
 80048b0:	232b      	movmi	r3, #43	; 0x2b
 80048b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80048b6:	f89a 3000 	ldrb.w	r3, [sl]
 80048ba:	2b2a      	cmp	r3, #42	; 0x2a
 80048bc:	d015      	beq.n	80048ea <_svfiprintf_r+0xf6>
 80048be:	4654      	mov	r4, sl
 80048c0:	2000      	movs	r0, #0
 80048c2:	f04f 0c0a 	mov.w	ip, #10
 80048c6:	9a07      	ldr	r2, [sp, #28]
 80048c8:	4621      	mov	r1, r4
 80048ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80048ce:	3b30      	subs	r3, #48	; 0x30
 80048d0:	2b09      	cmp	r3, #9
 80048d2:	d94d      	bls.n	8004970 <_svfiprintf_r+0x17c>
 80048d4:	b1b0      	cbz	r0, 8004904 <_svfiprintf_r+0x110>
 80048d6:	9207      	str	r2, [sp, #28]
 80048d8:	e014      	b.n	8004904 <_svfiprintf_r+0x110>
 80048da:	eba0 0308 	sub.w	r3, r0, r8
 80048de:	fa09 f303 	lsl.w	r3, r9, r3
 80048e2:	4313      	orrs	r3, r2
 80048e4:	46a2      	mov	sl, r4
 80048e6:	9304      	str	r3, [sp, #16]
 80048e8:	e7d2      	b.n	8004890 <_svfiprintf_r+0x9c>
 80048ea:	9b03      	ldr	r3, [sp, #12]
 80048ec:	1d19      	adds	r1, r3, #4
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	9103      	str	r1, [sp, #12]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	bfbb      	ittet	lt
 80048f6:	425b      	neglt	r3, r3
 80048f8:	f042 0202 	orrlt.w	r2, r2, #2
 80048fc:	9307      	strge	r3, [sp, #28]
 80048fe:	9307      	strlt	r3, [sp, #28]
 8004900:	bfb8      	it	lt
 8004902:	9204      	strlt	r2, [sp, #16]
 8004904:	7823      	ldrb	r3, [r4, #0]
 8004906:	2b2e      	cmp	r3, #46	; 0x2e
 8004908:	d10c      	bne.n	8004924 <_svfiprintf_r+0x130>
 800490a:	7863      	ldrb	r3, [r4, #1]
 800490c:	2b2a      	cmp	r3, #42	; 0x2a
 800490e:	d134      	bne.n	800497a <_svfiprintf_r+0x186>
 8004910:	9b03      	ldr	r3, [sp, #12]
 8004912:	3402      	adds	r4, #2
 8004914:	1d1a      	adds	r2, r3, #4
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	9203      	str	r2, [sp, #12]
 800491a:	2b00      	cmp	r3, #0
 800491c:	bfb8      	it	lt
 800491e:	f04f 33ff 	movlt.w	r3, #4294967295
 8004922:	9305      	str	r3, [sp, #20]
 8004924:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80049e0 <_svfiprintf_r+0x1ec>
 8004928:	2203      	movs	r2, #3
 800492a:	4650      	mov	r0, sl
 800492c:	7821      	ldrb	r1, [r4, #0]
 800492e:	f000 fa1d 	bl	8004d6c <memchr>
 8004932:	b138      	cbz	r0, 8004944 <_svfiprintf_r+0x150>
 8004934:	2240      	movs	r2, #64	; 0x40
 8004936:	9b04      	ldr	r3, [sp, #16]
 8004938:	eba0 000a 	sub.w	r0, r0, sl
 800493c:	4082      	lsls	r2, r0
 800493e:	4313      	orrs	r3, r2
 8004940:	3401      	adds	r4, #1
 8004942:	9304      	str	r3, [sp, #16]
 8004944:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004948:	2206      	movs	r2, #6
 800494a:	4826      	ldr	r0, [pc, #152]	; (80049e4 <_svfiprintf_r+0x1f0>)
 800494c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004950:	f000 fa0c 	bl	8004d6c <memchr>
 8004954:	2800      	cmp	r0, #0
 8004956:	d038      	beq.n	80049ca <_svfiprintf_r+0x1d6>
 8004958:	4b23      	ldr	r3, [pc, #140]	; (80049e8 <_svfiprintf_r+0x1f4>)
 800495a:	bb1b      	cbnz	r3, 80049a4 <_svfiprintf_r+0x1b0>
 800495c:	9b03      	ldr	r3, [sp, #12]
 800495e:	3307      	adds	r3, #7
 8004960:	f023 0307 	bic.w	r3, r3, #7
 8004964:	3308      	adds	r3, #8
 8004966:	9303      	str	r3, [sp, #12]
 8004968:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800496a:	4433      	add	r3, r6
 800496c:	9309      	str	r3, [sp, #36]	; 0x24
 800496e:	e768      	b.n	8004842 <_svfiprintf_r+0x4e>
 8004970:	460c      	mov	r4, r1
 8004972:	2001      	movs	r0, #1
 8004974:	fb0c 3202 	mla	r2, ip, r2, r3
 8004978:	e7a6      	b.n	80048c8 <_svfiprintf_r+0xd4>
 800497a:	2300      	movs	r3, #0
 800497c:	f04f 0c0a 	mov.w	ip, #10
 8004980:	4619      	mov	r1, r3
 8004982:	3401      	adds	r4, #1
 8004984:	9305      	str	r3, [sp, #20]
 8004986:	4620      	mov	r0, r4
 8004988:	f810 2b01 	ldrb.w	r2, [r0], #1
 800498c:	3a30      	subs	r2, #48	; 0x30
 800498e:	2a09      	cmp	r2, #9
 8004990:	d903      	bls.n	800499a <_svfiprintf_r+0x1a6>
 8004992:	2b00      	cmp	r3, #0
 8004994:	d0c6      	beq.n	8004924 <_svfiprintf_r+0x130>
 8004996:	9105      	str	r1, [sp, #20]
 8004998:	e7c4      	b.n	8004924 <_svfiprintf_r+0x130>
 800499a:	4604      	mov	r4, r0
 800499c:	2301      	movs	r3, #1
 800499e:	fb0c 2101 	mla	r1, ip, r1, r2
 80049a2:	e7f0      	b.n	8004986 <_svfiprintf_r+0x192>
 80049a4:	ab03      	add	r3, sp, #12
 80049a6:	9300      	str	r3, [sp, #0]
 80049a8:	462a      	mov	r2, r5
 80049aa:	4638      	mov	r0, r7
 80049ac:	4b0f      	ldr	r3, [pc, #60]	; (80049ec <_svfiprintf_r+0x1f8>)
 80049ae:	a904      	add	r1, sp, #16
 80049b0:	f3af 8000 	nop.w
 80049b4:	1c42      	adds	r2, r0, #1
 80049b6:	4606      	mov	r6, r0
 80049b8:	d1d6      	bne.n	8004968 <_svfiprintf_r+0x174>
 80049ba:	89ab      	ldrh	r3, [r5, #12]
 80049bc:	065b      	lsls	r3, r3, #25
 80049be:	f53f af2d 	bmi.w	800481c <_svfiprintf_r+0x28>
 80049c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80049c4:	b01d      	add	sp, #116	; 0x74
 80049c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049ca:	ab03      	add	r3, sp, #12
 80049cc:	9300      	str	r3, [sp, #0]
 80049ce:	462a      	mov	r2, r5
 80049d0:	4638      	mov	r0, r7
 80049d2:	4b06      	ldr	r3, [pc, #24]	; (80049ec <_svfiprintf_r+0x1f8>)
 80049d4:	a904      	add	r1, sp, #16
 80049d6:	f000 f87d 	bl	8004ad4 <_printf_i>
 80049da:	e7eb      	b.n	80049b4 <_svfiprintf_r+0x1c0>
 80049dc:	08004efe 	.word	0x08004efe
 80049e0:	08004f04 	.word	0x08004f04
 80049e4:	08004f08 	.word	0x08004f08
 80049e8:	00000000 	.word	0x00000000
 80049ec:	08004741 	.word	0x08004741

080049f0 <_printf_common>:
 80049f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049f4:	4616      	mov	r6, r2
 80049f6:	4699      	mov	r9, r3
 80049f8:	688a      	ldr	r2, [r1, #8]
 80049fa:	690b      	ldr	r3, [r1, #16]
 80049fc:	4607      	mov	r7, r0
 80049fe:	4293      	cmp	r3, r2
 8004a00:	bfb8      	it	lt
 8004a02:	4613      	movlt	r3, r2
 8004a04:	6033      	str	r3, [r6, #0]
 8004a06:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004a0a:	460c      	mov	r4, r1
 8004a0c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004a10:	b10a      	cbz	r2, 8004a16 <_printf_common+0x26>
 8004a12:	3301      	adds	r3, #1
 8004a14:	6033      	str	r3, [r6, #0]
 8004a16:	6823      	ldr	r3, [r4, #0]
 8004a18:	0699      	lsls	r1, r3, #26
 8004a1a:	bf42      	ittt	mi
 8004a1c:	6833      	ldrmi	r3, [r6, #0]
 8004a1e:	3302      	addmi	r3, #2
 8004a20:	6033      	strmi	r3, [r6, #0]
 8004a22:	6825      	ldr	r5, [r4, #0]
 8004a24:	f015 0506 	ands.w	r5, r5, #6
 8004a28:	d106      	bne.n	8004a38 <_printf_common+0x48>
 8004a2a:	f104 0a19 	add.w	sl, r4, #25
 8004a2e:	68e3      	ldr	r3, [r4, #12]
 8004a30:	6832      	ldr	r2, [r6, #0]
 8004a32:	1a9b      	subs	r3, r3, r2
 8004a34:	42ab      	cmp	r3, r5
 8004a36:	dc2b      	bgt.n	8004a90 <_printf_common+0xa0>
 8004a38:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004a3c:	1e13      	subs	r3, r2, #0
 8004a3e:	6822      	ldr	r2, [r4, #0]
 8004a40:	bf18      	it	ne
 8004a42:	2301      	movne	r3, #1
 8004a44:	0692      	lsls	r2, r2, #26
 8004a46:	d430      	bmi.n	8004aaa <_printf_common+0xba>
 8004a48:	4649      	mov	r1, r9
 8004a4a:	4638      	mov	r0, r7
 8004a4c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004a50:	47c0      	blx	r8
 8004a52:	3001      	adds	r0, #1
 8004a54:	d023      	beq.n	8004a9e <_printf_common+0xae>
 8004a56:	6823      	ldr	r3, [r4, #0]
 8004a58:	6922      	ldr	r2, [r4, #16]
 8004a5a:	f003 0306 	and.w	r3, r3, #6
 8004a5e:	2b04      	cmp	r3, #4
 8004a60:	bf14      	ite	ne
 8004a62:	2500      	movne	r5, #0
 8004a64:	6833      	ldreq	r3, [r6, #0]
 8004a66:	f04f 0600 	mov.w	r6, #0
 8004a6a:	bf08      	it	eq
 8004a6c:	68e5      	ldreq	r5, [r4, #12]
 8004a6e:	f104 041a 	add.w	r4, r4, #26
 8004a72:	bf08      	it	eq
 8004a74:	1aed      	subeq	r5, r5, r3
 8004a76:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004a7a:	bf08      	it	eq
 8004a7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004a80:	4293      	cmp	r3, r2
 8004a82:	bfc4      	itt	gt
 8004a84:	1a9b      	subgt	r3, r3, r2
 8004a86:	18ed      	addgt	r5, r5, r3
 8004a88:	42b5      	cmp	r5, r6
 8004a8a:	d11a      	bne.n	8004ac2 <_printf_common+0xd2>
 8004a8c:	2000      	movs	r0, #0
 8004a8e:	e008      	b.n	8004aa2 <_printf_common+0xb2>
 8004a90:	2301      	movs	r3, #1
 8004a92:	4652      	mov	r2, sl
 8004a94:	4649      	mov	r1, r9
 8004a96:	4638      	mov	r0, r7
 8004a98:	47c0      	blx	r8
 8004a9a:	3001      	adds	r0, #1
 8004a9c:	d103      	bne.n	8004aa6 <_printf_common+0xb6>
 8004a9e:	f04f 30ff 	mov.w	r0, #4294967295
 8004aa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004aa6:	3501      	adds	r5, #1
 8004aa8:	e7c1      	b.n	8004a2e <_printf_common+0x3e>
 8004aaa:	2030      	movs	r0, #48	; 0x30
 8004aac:	18e1      	adds	r1, r4, r3
 8004aae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004ab2:	1c5a      	adds	r2, r3, #1
 8004ab4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004ab8:	4422      	add	r2, r4
 8004aba:	3302      	adds	r3, #2
 8004abc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004ac0:	e7c2      	b.n	8004a48 <_printf_common+0x58>
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	4622      	mov	r2, r4
 8004ac6:	4649      	mov	r1, r9
 8004ac8:	4638      	mov	r0, r7
 8004aca:	47c0      	blx	r8
 8004acc:	3001      	adds	r0, #1
 8004ace:	d0e6      	beq.n	8004a9e <_printf_common+0xae>
 8004ad0:	3601      	adds	r6, #1
 8004ad2:	e7d9      	b.n	8004a88 <_printf_common+0x98>

08004ad4 <_printf_i>:
 8004ad4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ad8:	7e0f      	ldrb	r7, [r1, #24]
 8004ada:	4691      	mov	r9, r2
 8004adc:	2f78      	cmp	r7, #120	; 0x78
 8004ade:	4680      	mov	r8, r0
 8004ae0:	460c      	mov	r4, r1
 8004ae2:	469a      	mov	sl, r3
 8004ae4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004ae6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004aea:	d807      	bhi.n	8004afc <_printf_i+0x28>
 8004aec:	2f62      	cmp	r7, #98	; 0x62
 8004aee:	d80a      	bhi.n	8004b06 <_printf_i+0x32>
 8004af0:	2f00      	cmp	r7, #0
 8004af2:	f000 80d5 	beq.w	8004ca0 <_printf_i+0x1cc>
 8004af6:	2f58      	cmp	r7, #88	; 0x58
 8004af8:	f000 80c1 	beq.w	8004c7e <_printf_i+0x1aa>
 8004afc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b00:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004b04:	e03a      	b.n	8004b7c <_printf_i+0xa8>
 8004b06:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004b0a:	2b15      	cmp	r3, #21
 8004b0c:	d8f6      	bhi.n	8004afc <_printf_i+0x28>
 8004b0e:	a101      	add	r1, pc, #4	; (adr r1, 8004b14 <_printf_i+0x40>)
 8004b10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004b14:	08004b6d 	.word	0x08004b6d
 8004b18:	08004b81 	.word	0x08004b81
 8004b1c:	08004afd 	.word	0x08004afd
 8004b20:	08004afd 	.word	0x08004afd
 8004b24:	08004afd 	.word	0x08004afd
 8004b28:	08004afd 	.word	0x08004afd
 8004b2c:	08004b81 	.word	0x08004b81
 8004b30:	08004afd 	.word	0x08004afd
 8004b34:	08004afd 	.word	0x08004afd
 8004b38:	08004afd 	.word	0x08004afd
 8004b3c:	08004afd 	.word	0x08004afd
 8004b40:	08004c87 	.word	0x08004c87
 8004b44:	08004bad 	.word	0x08004bad
 8004b48:	08004c41 	.word	0x08004c41
 8004b4c:	08004afd 	.word	0x08004afd
 8004b50:	08004afd 	.word	0x08004afd
 8004b54:	08004ca9 	.word	0x08004ca9
 8004b58:	08004afd 	.word	0x08004afd
 8004b5c:	08004bad 	.word	0x08004bad
 8004b60:	08004afd 	.word	0x08004afd
 8004b64:	08004afd 	.word	0x08004afd
 8004b68:	08004c49 	.word	0x08004c49
 8004b6c:	682b      	ldr	r3, [r5, #0]
 8004b6e:	1d1a      	adds	r2, r3, #4
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	602a      	str	r2, [r5, #0]
 8004b74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	e0a0      	b.n	8004cc2 <_printf_i+0x1ee>
 8004b80:	6820      	ldr	r0, [r4, #0]
 8004b82:	682b      	ldr	r3, [r5, #0]
 8004b84:	0607      	lsls	r7, r0, #24
 8004b86:	f103 0104 	add.w	r1, r3, #4
 8004b8a:	6029      	str	r1, [r5, #0]
 8004b8c:	d501      	bpl.n	8004b92 <_printf_i+0xbe>
 8004b8e:	681e      	ldr	r6, [r3, #0]
 8004b90:	e003      	b.n	8004b9a <_printf_i+0xc6>
 8004b92:	0646      	lsls	r6, r0, #25
 8004b94:	d5fb      	bpl.n	8004b8e <_printf_i+0xba>
 8004b96:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004b9a:	2e00      	cmp	r6, #0
 8004b9c:	da03      	bge.n	8004ba6 <_printf_i+0xd2>
 8004b9e:	232d      	movs	r3, #45	; 0x2d
 8004ba0:	4276      	negs	r6, r6
 8004ba2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ba6:	230a      	movs	r3, #10
 8004ba8:	4859      	ldr	r0, [pc, #356]	; (8004d10 <_printf_i+0x23c>)
 8004baa:	e012      	b.n	8004bd2 <_printf_i+0xfe>
 8004bac:	682b      	ldr	r3, [r5, #0]
 8004bae:	6820      	ldr	r0, [r4, #0]
 8004bb0:	1d19      	adds	r1, r3, #4
 8004bb2:	6029      	str	r1, [r5, #0]
 8004bb4:	0605      	lsls	r5, r0, #24
 8004bb6:	d501      	bpl.n	8004bbc <_printf_i+0xe8>
 8004bb8:	681e      	ldr	r6, [r3, #0]
 8004bba:	e002      	b.n	8004bc2 <_printf_i+0xee>
 8004bbc:	0641      	lsls	r1, r0, #25
 8004bbe:	d5fb      	bpl.n	8004bb8 <_printf_i+0xe4>
 8004bc0:	881e      	ldrh	r6, [r3, #0]
 8004bc2:	2f6f      	cmp	r7, #111	; 0x6f
 8004bc4:	bf0c      	ite	eq
 8004bc6:	2308      	moveq	r3, #8
 8004bc8:	230a      	movne	r3, #10
 8004bca:	4851      	ldr	r0, [pc, #324]	; (8004d10 <_printf_i+0x23c>)
 8004bcc:	2100      	movs	r1, #0
 8004bce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004bd2:	6865      	ldr	r5, [r4, #4]
 8004bd4:	2d00      	cmp	r5, #0
 8004bd6:	bfa8      	it	ge
 8004bd8:	6821      	ldrge	r1, [r4, #0]
 8004bda:	60a5      	str	r5, [r4, #8]
 8004bdc:	bfa4      	itt	ge
 8004bde:	f021 0104 	bicge.w	r1, r1, #4
 8004be2:	6021      	strge	r1, [r4, #0]
 8004be4:	b90e      	cbnz	r6, 8004bea <_printf_i+0x116>
 8004be6:	2d00      	cmp	r5, #0
 8004be8:	d04b      	beq.n	8004c82 <_printf_i+0x1ae>
 8004bea:	4615      	mov	r5, r2
 8004bec:	fbb6 f1f3 	udiv	r1, r6, r3
 8004bf0:	fb03 6711 	mls	r7, r3, r1, r6
 8004bf4:	5dc7      	ldrb	r7, [r0, r7]
 8004bf6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004bfa:	4637      	mov	r7, r6
 8004bfc:	42bb      	cmp	r3, r7
 8004bfe:	460e      	mov	r6, r1
 8004c00:	d9f4      	bls.n	8004bec <_printf_i+0x118>
 8004c02:	2b08      	cmp	r3, #8
 8004c04:	d10b      	bne.n	8004c1e <_printf_i+0x14a>
 8004c06:	6823      	ldr	r3, [r4, #0]
 8004c08:	07de      	lsls	r6, r3, #31
 8004c0a:	d508      	bpl.n	8004c1e <_printf_i+0x14a>
 8004c0c:	6923      	ldr	r3, [r4, #16]
 8004c0e:	6861      	ldr	r1, [r4, #4]
 8004c10:	4299      	cmp	r1, r3
 8004c12:	bfde      	ittt	le
 8004c14:	2330      	movle	r3, #48	; 0x30
 8004c16:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004c1a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004c1e:	1b52      	subs	r2, r2, r5
 8004c20:	6122      	str	r2, [r4, #16]
 8004c22:	464b      	mov	r3, r9
 8004c24:	4621      	mov	r1, r4
 8004c26:	4640      	mov	r0, r8
 8004c28:	f8cd a000 	str.w	sl, [sp]
 8004c2c:	aa03      	add	r2, sp, #12
 8004c2e:	f7ff fedf 	bl	80049f0 <_printf_common>
 8004c32:	3001      	adds	r0, #1
 8004c34:	d14a      	bne.n	8004ccc <_printf_i+0x1f8>
 8004c36:	f04f 30ff 	mov.w	r0, #4294967295
 8004c3a:	b004      	add	sp, #16
 8004c3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c40:	6823      	ldr	r3, [r4, #0]
 8004c42:	f043 0320 	orr.w	r3, r3, #32
 8004c46:	6023      	str	r3, [r4, #0]
 8004c48:	2778      	movs	r7, #120	; 0x78
 8004c4a:	4832      	ldr	r0, [pc, #200]	; (8004d14 <_printf_i+0x240>)
 8004c4c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004c50:	6823      	ldr	r3, [r4, #0]
 8004c52:	6829      	ldr	r1, [r5, #0]
 8004c54:	061f      	lsls	r7, r3, #24
 8004c56:	f851 6b04 	ldr.w	r6, [r1], #4
 8004c5a:	d402      	bmi.n	8004c62 <_printf_i+0x18e>
 8004c5c:	065f      	lsls	r7, r3, #25
 8004c5e:	bf48      	it	mi
 8004c60:	b2b6      	uxthmi	r6, r6
 8004c62:	07df      	lsls	r7, r3, #31
 8004c64:	bf48      	it	mi
 8004c66:	f043 0320 	orrmi.w	r3, r3, #32
 8004c6a:	6029      	str	r1, [r5, #0]
 8004c6c:	bf48      	it	mi
 8004c6e:	6023      	strmi	r3, [r4, #0]
 8004c70:	b91e      	cbnz	r6, 8004c7a <_printf_i+0x1a6>
 8004c72:	6823      	ldr	r3, [r4, #0]
 8004c74:	f023 0320 	bic.w	r3, r3, #32
 8004c78:	6023      	str	r3, [r4, #0]
 8004c7a:	2310      	movs	r3, #16
 8004c7c:	e7a6      	b.n	8004bcc <_printf_i+0xf8>
 8004c7e:	4824      	ldr	r0, [pc, #144]	; (8004d10 <_printf_i+0x23c>)
 8004c80:	e7e4      	b.n	8004c4c <_printf_i+0x178>
 8004c82:	4615      	mov	r5, r2
 8004c84:	e7bd      	b.n	8004c02 <_printf_i+0x12e>
 8004c86:	682b      	ldr	r3, [r5, #0]
 8004c88:	6826      	ldr	r6, [r4, #0]
 8004c8a:	1d18      	adds	r0, r3, #4
 8004c8c:	6961      	ldr	r1, [r4, #20]
 8004c8e:	6028      	str	r0, [r5, #0]
 8004c90:	0635      	lsls	r5, r6, #24
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	d501      	bpl.n	8004c9a <_printf_i+0x1c6>
 8004c96:	6019      	str	r1, [r3, #0]
 8004c98:	e002      	b.n	8004ca0 <_printf_i+0x1cc>
 8004c9a:	0670      	lsls	r0, r6, #25
 8004c9c:	d5fb      	bpl.n	8004c96 <_printf_i+0x1c2>
 8004c9e:	8019      	strh	r1, [r3, #0]
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	4615      	mov	r5, r2
 8004ca4:	6123      	str	r3, [r4, #16]
 8004ca6:	e7bc      	b.n	8004c22 <_printf_i+0x14e>
 8004ca8:	682b      	ldr	r3, [r5, #0]
 8004caa:	2100      	movs	r1, #0
 8004cac:	1d1a      	adds	r2, r3, #4
 8004cae:	602a      	str	r2, [r5, #0]
 8004cb0:	681d      	ldr	r5, [r3, #0]
 8004cb2:	6862      	ldr	r2, [r4, #4]
 8004cb4:	4628      	mov	r0, r5
 8004cb6:	f000 f859 	bl	8004d6c <memchr>
 8004cba:	b108      	cbz	r0, 8004cc0 <_printf_i+0x1ec>
 8004cbc:	1b40      	subs	r0, r0, r5
 8004cbe:	6060      	str	r0, [r4, #4]
 8004cc0:	6863      	ldr	r3, [r4, #4]
 8004cc2:	6123      	str	r3, [r4, #16]
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004cca:	e7aa      	b.n	8004c22 <_printf_i+0x14e>
 8004ccc:	462a      	mov	r2, r5
 8004cce:	4649      	mov	r1, r9
 8004cd0:	4640      	mov	r0, r8
 8004cd2:	6923      	ldr	r3, [r4, #16]
 8004cd4:	47d0      	blx	sl
 8004cd6:	3001      	adds	r0, #1
 8004cd8:	d0ad      	beq.n	8004c36 <_printf_i+0x162>
 8004cda:	6823      	ldr	r3, [r4, #0]
 8004cdc:	079b      	lsls	r3, r3, #30
 8004cde:	d413      	bmi.n	8004d08 <_printf_i+0x234>
 8004ce0:	68e0      	ldr	r0, [r4, #12]
 8004ce2:	9b03      	ldr	r3, [sp, #12]
 8004ce4:	4298      	cmp	r0, r3
 8004ce6:	bfb8      	it	lt
 8004ce8:	4618      	movlt	r0, r3
 8004cea:	e7a6      	b.n	8004c3a <_printf_i+0x166>
 8004cec:	2301      	movs	r3, #1
 8004cee:	4632      	mov	r2, r6
 8004cf0:	4649      	mov	r1, r9
 8004cf2:	4640      	mov	r0, r8
 8004cf4:	47d0      	blx	sl
 8004cf6:	3001      	adds	r0, #1
 8004cf8:	d09d      	beq.n	8004c36 <_printf_i+0x162>
 8004cfa:	3501      	adds	r5, #1
 8004cfc:	68e3      	ldr	r3, [r4, #12]
 8004cfe:	9903      	ldr	r1, [sp, #12]
 8004d00:	1a5b      	subs	r3, r3, r1
 8004d02:	42ab      	cmp	r3, r5
 8004d04:	dcf2      	bgt.n	8004cec <_printf_i+0x218>
 8004d06:	e7eb      	b.n	8004ce0 <_printf_i+0x20c>
 8004d08:	2500      	movs	r5, #0
 8004d0a:	f104 0619 	add.w	r6, r4, #25
 8004d0e:	e7f5      	b.n	8004cfc <_printf_i+0x228>
 8004d10:	08004f0f 	.word	0x08004f0f
 8004d14:	08004f20 	.word	0x08004f20

08004d18 <memmove>:
 8004d18:	4288      	cmp	r0, r1
 8004d1a:	b510      	push	{r4, lr}
 8004d1c:	eb01 0402 	add.w	r4, r1, r2
 8004d20:	d902      	bls.n	8004d28 <memmove+0x10>
 8004d22:	4284      	cmp	r4, r0
 8004d24:	4623      	mov	r3, r4
 8004d26:	d807      	bhi.n	8004d38 <memmove+0x20>
 8004d28:	1e43      	subs	r3, r0, #1
 8004d2a:	42a1      	cmp	r1, r4
 8004d2c:	d008      	beq.n	8004d40 <memmove+0x28>
 8004d2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004d32:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004d36:	e7f8      	b.n	8004d2a <memmove+0x12>
 8004d38:	4601      	mov	r1, r0
 8004d3a:	4402      	add	r2, r0
 8004d3c:	428a      	cmp	r2, r1
 8004d3e:	d100      	bne.n	8004d42 <memmove+0x2a>
 8004d40:	bd10      	pop	{r4, pc}
 8004d42:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004d46:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004d4a:	e7f7      	b.n	8004d3c <memmove+0x24>

08004d4c <_sbrk_r>:
 8004d4c:	b538      	push	{r3, r4, r5, lr}
 8004d4e:	2300      	movs	r3, #0
 8004d50:	4d05      	ldr	r5, [pc, #20]	; (8004d68 <_sbrk_r+0x1c>)
 8004d52:	4604      	mov	r4, r0
 8004d54:	4608      	mov	r0, r1
 8004d56:	602b      	str	r3, [r5, #0]
 8004d58:	f7fc fc2e 	bl	80015b8 <_sbrk>
 8004d5c:	1c43      	adds	r3, r0, #1
 8004d5e:	d102      	bne.n	8004d66 <_sbrk_r+0x1a>
 8004d60:	682b      	ldr	r3, [r5, #0]
 8004d62:	b103      	cbz	r3, 8004d66 <_sbrk_r+0x1a>
 8004d64:	6023      	str	r3, [r4, #0]
 8004d66:	bd38      	pop	{r3, r4, r5, pc}
 8004d68:	20000330 	.word	0x20000330

08004d6c <memchr>:
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	b510      	push	{r4, lr}
 8004d70:	b2c9      	uxtb	r1, r1
 8004d72:	4402      	add	r2, r0
 8004d74:	4293      	cmp	r3, r2
 8004d76:	4618      	mov	r0, r3
 8004d78:	d101      	bne.n	8004d7e <memchr+0x12>
 8004d7a:	2000      	movs	r0, #0
 8004d7c:	e003      	b.n	8004d86 <memchr+0x1a>
 8004d7e:	7804      	ldrb	r4, [r0, #0]
 8004d80:	3301      	adds	r3, #1
 8004d82:	428c      	cmp	r4, r1
 8004d84:	d1f6      	bne.n	8004d74 <memchr+0x8>
 8004d86:	bd10      	pop	{r4, pc}

08004d88 <memcpy>:
 8004d88:	440a      	add	r2, r1
 8004d8a:	4291      	cmp	r1, r2
 8004d8c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004d90:	d100      	bne.n	8004d94 <memcpy+0xc>
 8004d92:	4770      	bx	lr
 8004d94:	b510      	push	{r4, lr}
 8004d96:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d9a:	4291      	cmp	r1, r2
 8004d9c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004da0:	d1f9      	bne.n	8004d96 <memcpy+0xe>
 8004da2:	bd10      	pop	{r4, pc}

08004da4 <_realloc_r>:
 8004da4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004da8:	4680      	mov	r8, r0
 8004daa:	4614      	mov	r4, r2
 8004dac:	460e      	mov	r6, r1
 8004dae:	b921      	cbnz	r1, 8004dba <_realloc_r+0x16>
 8004db0:	4611      	mov	r1, r2
 8004db2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004db6:	f7ff bc37 	b.w	8004628 <_malloc_r>
 8004dba:	b92a      	cbnz	r2, 8004dc8 <_realloc_r+0x24>
 8004dbc:	f7ff fbcc 	bl	8004558 <_free_r>
 8004dc0:	4625      	mov	r5, r4
 8004dc2:	4628      	mov	r0, r5
 8004dc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004dc8:	f000 f81b 	bl	8004e02 <_malloc_usable_size_r>
 8004dcc:	4284      	cmp	r4, r0
 8004dce:	4607      	mov	r7, r0
 8004dd0:	d802      	bhi.n	8004dd8 <_realloc_r+0x34>
 8004dd2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004dd6:	d812      	bhi.n	8004dfe <_realloc_r+0x5a>
 8004dd8:	4621      	mov	r1, r4
 8004dda:	4640      	mov	r0, r8
 8004ddc:	f7ff fc24 	bl	8004628 <_malloc_r>
 8004de0:	4605      	mov	r5, r0
 8004de2:	2800      	cmp	r0, #0
 8004de4:	d0ed      	beq.n	8004dc2 <_realloc_r+0x1e>
 8004de6:	42bc      	cmp	r4, r7
 8004de8:	4622      	mov	r2, r4
 8004dea:	4631      	mov	r1, r6
 8004dec:	bf28      	it	cs
 8004dee:	463a      	movcs	r2, r7
 8004df0:	f7ff ffca 	bl	8004d88 <memcpy>
 8004df4:	4631      	mov	r1, r6
 8004df6:	4640      	mov	r0, r8
 8004df8:	f7ff fbae 	bl	8004558 <_free_r>
 8004dfc:	e7e1      	b.n	8004dc2 <_realloc_r+0x1e>
 8004dfe:	4635      	mov	r5, r6
 8004e00:	e7df      	b.n	8004dc2 <_realloc_r+0x1e>

08004e02 <_malloc_usable_size_r>:
 8004e02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e06:	1f18      	subs	r0, r3, #4
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	bfbc      	itt	lt
 8004e0c:	580b      	ldrlt	r3, [r1, r0]
 8004e0e:	18c0      	addlt	r0, r0, r3
 8004e10:	4770      	bx	lr
	...

08004e14 <_init>:
 8004e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e16:	bf00      	nop
 8004e18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e1a:	bc08      	pop	{r3}
 8004e1c:	469e      	mov	lr, r3
 8004e1e:	4770      	bx	lr

08004e20 <_fini>:
 8004e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e22:	bf00      	nop
 8004e24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e26:	bc08      	pop	{r3}
 8004e28:	469e      	mov	lr, r3
 8004e2a:	4770      	bx	lr
