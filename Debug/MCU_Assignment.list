
MCU_Assignment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000271c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002828  08002828  00012828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800284c  0800284c  00020040  2**0
                  CONTENTS
  4 .ARM          00000000  0800284c  0800284c  00020040  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800284c  0800284c  00020040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800284c  0800284c  0001284c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002850  08002850  00012850  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000040  20000000  08002854  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  20000040  08002894  00020040  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000f4  08002894  000200f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 12 .debug_info   000097d1  00000000  00000000  00020069  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b54  00000000  00000000  0002983a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ab8  00000000  00000000  0002b390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009b0  00000000  00000000  0002be48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017199  00000000  00000000  0002c7f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d2e3  00000000  00000000  00043991  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000848ac  00000000  00000000  00050c74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d5520  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029fc  00000000  00000000  000d5574  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000040 	.word	0x20000040
 8000128:	00000000 	.word	0x00000000
 800012c:	08002810 	.word	0x08002810

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000044 	.word	0x20000044
 8000148:	08002810 	.word	0x08002810

0800014c <fsm_automatic>:
#include "timer.h"
#include "input_reading.h"
//#include "seven_seg.h"

//int counter_1 = 0, counter_2 = 0;
void fsm_automatic() {
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	switch (status) {
 8000150:	4b3e      	ldr	r3, [pc, #248]	; (800024c <fsm_automatic+0x100>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	3301      	adds	r3, #1
 8000156:	2b05      	cmp	r3, #5
 8000158:	d86d      	bhi.n	8000236 <fsm_automatic+0xea>
 800015a:	a201      	add	r2, pc, #4	; (adr r2, 8000160 <fsm_automatic+0x14>)
 800015c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000160:	08000179 	.word	0x08000179
 8000164:	08000181 	.word	0x08000181
 8000168:	0800019f 	.word	0x0800019f
 800016c:	080001c5 	.word	0x080001c5
 8000170:	080001eb 	.word	0x080001eb
 8000174:	08000211 	.word	0x08000211
		case INIT:
			status = MODE1;
 8000178:	4b34      	ldr	r3, [pc, #208]	; (800024c <fsm_automatic+0x100>)
 800017a:	2200      	movs	r2, #0
 800017c:	601a      	str	r2, [r3, #0]
			break;
 800017e:	e063      	b.n	8000248 <fsm_automatic+0xfc>
		case MODE1:
			led_config();
 8000180:	f000 f914 	bl	80003ac <led_config>
//			counter_1 = T_RED;
//			counter_2 = T_GREEN;
//			update7SEG_buffer_auto(counter_1, counter_2);
			setTimer0(T_GREEN*1000);
 8000184:	4b32      	ldr	r3, [pc, #200]	; (8000250 <fsm_automatic+0x104>)
 8000186:	681b      	ldr	r3, [r3, #0]
 8000188:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800018c:	fb02 f303 	mul.w	r3, r2, r3
 8000190:	4618      	mov	r0, r3
 8000192:	f000 ff21 	bl	8000fd8 <setTimer0>
//			setTimer4(1000);
			status = RED_GREEN;
 8000196:	4b2d      	ldr	r3, [pc, #180]	; (800024c <fsm_automatic+0x100>)
 8000198:	2201      	movs	r2, #1
 800019a:	601a      	str	r2, [r3, #0]
			break;
 800019c:	e054      	b.n	8000248 <fsm_automatic+0xfc>
		case RED_GREEN:
			led_config();
 800019e:	f000 f905 	bl	80003ac <led_config>
//				counter_2--;
//				if (counter_2 <= 0) counter_2 = T_AMBER;
//				update7SEG_buffer_auto(counter_1, counter_2);
//				setTimer4(1000);
//			}
			if (timer0_flag == 1) {
 80001a2:	4b2c      	ldr	r3, [pc, #176]	; (8000254 <fsm_automatic+0x108>)
 80001a4:	681b      	ldr	r3, [r3, #0]
 80001a6:	2b01      	cmp	r3, #1
 80001a8:	d147      	bne.n	800023a <fsm_automatic+0xee>
				setTimer0(T_AMBER*1000);
 80001aa:	4b2b      	ldr	r3, [pc, #172]	; (8000258 <fsm_automatic+0x10c>)
 80001ac:	681b      	ldr	r3, [r3, #0]
 80001ae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80001b2:	fb02 f303 	mul.w	r3, r2, r3
 80001b6:	4618      	mov	r0, r3
 80001b8:	f000 ff0e 	bl	8000fd8 <setTimer0>
				status = RED_AMBER;
 80001bc:	4b23      	ldr	r3, [pc, #140]	; (800024c <fsm_automatic+0x100>)
 80001be:	2202      	movs	r2, #2
 80001c0:	601a      	str	r2, [r3, #0]
			}
			break;
 80001c2:	e03a      	b.n	800023a <fsm_automatic+0xee>
		case RED_AMBER:
			led_config();
 80001c4:	f000 f8f2 	bl	80003ac <led_config>
//					counter_2 = T_RED;
//				}
//				update7SEG_buffer_auto(counter_1, counter_2);
//				setTimer4(1000);
//			}
			if (timer0_flag == 1) {
 80001c8:	4b22      	ldr	r3, [pc, #136]	; (8000254 <fsm_automatic+0x108>)
 80001ca:	681b      	ldr	r3, [r3, #0]
 80001cc:	2b01      	cmp	r3, #1
 80001ce:	d136      	bne.n	800023e <fsm_automatic+0xf2>
				setTimer0(T_GREEN*1000);
 80001d0:	4b1f      	ldr	r3, [pc, #124]	; (8000250 <fsm_automatic+0x104>)
 80001d2:	681b      	ldr	r3, [r3, #0]
 80001d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80001d8:	fb02 f303 	mul.w	r3, r2, r3
 80001dc:	4618      	mov	r0, r3
 80001de:	f000 fefb 	bl	8000fd8 <setTimer0>
				status = GREEN_RED;
 80001e2:	4b1a      	ldr	r3, [pc, #104]	; (800024c <fsm_automatic+0x100>)
 80001e4:	2203      	movs	r2, #3
 80001e6:	601a      	str	r2, [r3, #0]
			}
			break;
 80001e8:	e029      	b.n	800023e <fsm_automatic+0xf2>
		case GREEN_RED:
			led_config();
 80001ea:	f000 f8df 	bl	80003ac <led_config>
//				counter_2--;
//				if (counter_1 <= 0) counter_1 = T_AMBER;
//				update7SEG_buffer_auto(counter_1, counter_2);
//				setTimer4(1000);
//			}
			if (timer0_flag == 1) {
 80001ee:	4b19      	ldr	r3, [pc, #100]	; (8000254 <fsm_automatic+0x108>)
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	2b01      	cmp	r3, #1
 80001f4:	d125      	bne.n	8000242 <fsm_automatic+0xf6>
				setTimer0(T_AMBER*1000);
 80001f6:	4b18      	ldr	r3, [pc, #96]	; (8000258 <fsm_automatic+0x10c>)
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80001fe:	fb02 f303 	mul.w	r3, r2, r3
 8000202:	4618      	mov	r0, r3
 8000204:	f000 fee8 	bl	8000fd8 <setTimer0>
				status = AMBER_RED;
 8000208:	4b10      	ldr	r3, [pc, #64]	; (800024c <fsm_automatic+0x100>)
 800020a:	2204      	movs	r2, #4
 800020c:	601a      	str	r2, [r3, #0]
			}
			break;
 800020e:	e018      	b.n	8000242 <fsm_automatic+0xf6>
		case AMBER_RED:
			led_config();
 8000210:	f000 f8cc 	bl	80003ac <led_config>
//					counter_2 = T_GREEN;
//				}
//				update7SEG_buffer_auto(counter_1, counter_2);
//				setTimer4(1000);
//			}
			if (timer0_flag == 1) {
 8000214:	4b0f      	ldr	r3, [pc, #60]	; (8000254 <fsm_automatic+0x108>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	2b01      	cmp	r3, #1
 800021a:	d114      	bne.n	8000246 <fsm_automatic+0xfa>
				setTimer0(T_GREEN*1000);
 800021c:	4b0c      	ldr	r3, [pc, #48]	; (8000250 <fsm_automatic+0x104>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000224:	fb02 f303 	mul.w	r3, r2, r3
 8000228:	4618      	mov	r0, r3
 800022a:	f000 fed5 	bl	8000fd8 <setTimer0>
				status = RED_GREEN;
 800022e:	4b07      	ldr	r3, [pc, #28]	; (800024c <fsm_automatic+0x100>)
 8000230:	2201      	movs	r2, #1
 8000232:	601a      	str	r2, [r3, #0]
			}
			break;
 8000234:	e007      	b.n	8000246 <fsm_automatic+0xfa>
		default:
			break;
 8000236:	bf00      	nop
 8000238:	e006      	b.n	8000248 <fsm_automatic+0xfc>
			break;
 800023a:	bf00      	nop
 800023c:	e004      	b.n	8000248 <fsm_automatic+0xfc>
			break;
 800023e:	bf00      	nop
 8000240:	e002      	b.n	8000248 <fsm_automatic+0xfc>
			break;
 8000242:	bf00      	nop
 8000244:	e000      	b.n	8000248 <fsm_automatic+0xfc>
			break;
 8000246:	bf00      	nop
	}
}
 8000248:	bf00      	nop
 800024a:	bd80      	pop	{r7, pc}
 800024c:	2000000c 	.word	0x2000000c
 8000250:	20000008 	.word	0x20000008
 8000254:	2000008c 	.word	0x2000008c
 8000258:	20000004 	.word	0x20000004

0800025c <fsm_red_manual>:
#include "global.h"
#include "fsm_manual.h"
#include "timer.h"
//#include "seven_seg.h"

void fsm_red_manual() {
 800025c:	b580      	push	{r7, lr}
 800025e:	af00      	add	r7, sp, #0
	switch(status) {
 8000260:	4b18      	ldr	r3, [pc, #96]	; (80002c4 <fsm_red_manual+0x68>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	2b07      	cmp	r3, #7
 8000266:	d01b      	beq.n	80002a0 <fsm_red_manual+0x44>
 8000268:	2b07      	cmp	r3, #7
 800026a:	dc24      	bgt.n	80002b6 <fsm_red_manual+0x5a>
 800026c:	2b05      	cmp	r3, #5
 800026e:	d002      	beq.n	8000276 <fsm_red_manual+0x1a>
 8000270:	2b06      	cmp	r3, #6
 8000272:	d00a      	beq.n	800028a <fsm_red_manual+0x2e>
				toggle_red();
				setTimer1(500);
			}
			break;
		default:
			break;
 8000274:	e01f      	b.n	80002b6 <fsm_red_manual+0x5a>
			led_config();
 8000276:	f000 f899 	bl	80003ac <led_config>
			setTimer1(500);
 800027a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800027e:	f000 fec5 	bl	800100c <setTimer1>
			status = AUTO_RED;
 8000282:	4b10      	ldr	r3, [pc, #64]	; (80002c4 <fsm_red_manual+0x68>)
 8000284:	2206      	movs	r2, #6
 8000286:	601a      	str	r2, [r3, #0]
			break;
 8000288:	e01a      	b.n	80002c0 <fsm_red_manual+0x64>
			if (timer1_flag == 1) {
 800028a:	4b0f      	ldr	r3, [pc, #60]	; (80002c8 <fsm_red_manual+0x6c>)
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	2b01      	cmp	r3, #1
 8000290:	d113      	bne.n	80002ba <fsm_red_manual+0x5e>
				toggle_red();
 8000292:	f000 f9db 	bl	800064c <toggle_red>
				setTimer1(500);
 8000296:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800029a:	f000 feb7 	bl	800100c <setTimer1>
			break;
 800029e:	e00c      	b.n	80002ba <fsm_red_manual+0x5e>
			if (timer1_flag == 1) {
 80002a0:	4b09      	ldr	r3, [pc, #36]	; (80002c8 <fsm_red_manual+0x6c>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	2b01      	cmp	r3, #1
 80002a6:	d10a      	bne.n	80002be <fsm_red_manual+0x62>
				toggle_red();
 80002a8:	f000 f9d0 	bl	800064c <toggle_red>
				setTimer1(500);
 80002ac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80002b0:	f000 feac 	bl	800100c <setTimer1>
			break;
 80002b4:	e003      	b.n	80002be <fsm_red_manual+0x62>
			break;
 80002b6:	bf00      	nop
 80002b8:	e002      	b.n	80002c0 <fsm_red_manual+0x64>
			break;
 80002ba:	bf00      	nop
 80002bc:	e000      	b.n	80002c0 <fsm_red_manual+0x64>
			break;
 80002be:	bf00      	nop
	}
}
 80002c0:	bf00      	nop
 80002c2:	bd80      	pop	{r7, pc}
 80002c4:	2000000c 	.word	0x2000000c
 80002c8:	20000090 	.word	0x20000090

080002cc <fsm_amber_manual>:

void fsm_amber_manual() {
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
	switch(status) {
 80002d0:	4b18      	ldr	r3, [pc, #96]	; (8000334 <fsm_amber_manual+0x68>)
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	2b0a      	cmp	r3, #10
 80002d6:	d01b      	beq.n	8000310 <fsm_amber_manual+0x44>
 80002d8:	2b0a      	cmp	r3, #10
 80002da:	dc24      	bgt.n	8000326 <fsm_amber_manual+0x5a>
 80002dc:	2b08      	cmp	r3, #8
 80002de:	d002      	beq.n	80002e6 <fsm_amber_manual+0x1a>
 80002e0:	2b09      	cmp	r3, #9
 80002e2:	d00a      	beq.n	80002fa <fsm_amber_manual+0x2e>
				toggle_amber();
				setTimer1(500);
			}
			break;
		default:
			break;
 80002e4:	e01f      	b.n	8000326 <fsm_amber_manual+0x5a>
			led_config();
 80002e6:	f000 f861 	bl	80003ac <led_config>
			setTimer1(500);
 80002ea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80002ee:	f000 fe8d 	bl	800100c <setTimer1>
			status = AUTO_AMBER;
 80002f2:	4b10      	ldr	r3, [pc, #64]	; (8000334 <fsm_amber_manual+0x68>)
 80002f4:	2209      	movs	r2, #9
 80002f6:	601a      	str	r2, [r3, #0]
			break;
 80002f8:	e01a      	b.n	8000330 <fsm_amber_manual+0x64>
			if (timer1_flag == 1) {
 80002fa:	4b0f      	ldr	r3, [pc, #60]	; (8000338 <fsm_amber_manual+0x6c>)
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	2b01      	cmp	r3, #1
 8000300:	d113      	bne.n	800032a <fsm_amber_manual+0x5e>
				toggle_amber();
 8000302:	f000 f9bd 	bl	8000680 <toggle_amber>
				setTimer1(500);
 8000306:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800030a:	f000 fe7f 	bl	800100c <setTimer1>
			break;
 800030e:	e00c      	b.n	800032a <fsm_amber_manual+0x5e>
			if (timer1_flag == 1) {
 8000310:	4b09      	ldr	r3, [pc, #36]	; (8000338 <fsm_amber_manual+0x6c>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	2b01      	cmp	r3, #1
 8000316:	d10a      	bne.n	800032e <fsm_amber_manual+0x62>
				toggle_amber();
 8000318:	f000 f9b2 	bl	8000680 <toggle_amber>
				setTimer1(500);
 800031c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000320:	f000 fe74 	bl	800100c <setTimer1>
			break;
 8000324:	e003      	b.n	800032e <fsm_amber_manual+0x62>
			break;
 8000326:	bf00      	nop
 8000328:	e002      	b.n	8000330 <fsm_amber_manual+0x64>
			break;
 800032a:	bf00      	nop
 800032c:	e000      	b.n	8000330 <fsm_amber_manual+0x64>
			break;
 800032e:	bf00      	nop
	}
}
 8000330:	bf00      	nop
 8000332:	bd80      	pop	{r7, pc}
 8000334:	2000000c 	.word	0x2000000c
 8000338:	20000090 	.word	0x20000090

0800033c <fsm_green_manual>:

void fsm_green_manual() {
 800033c:	b580      	push	{r7, lr}
 800033e:	af00      	add	r7, sp, #0
	switch(status) {
 8000340:	4b18      	ldr	r3, [pc, #96]	; (80003a4 <fsm_green_manual+0x68>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	2b0d      	cmp	r3, #13
 8000346:	d01b      	beq.n	8000380 <fsm_green_manual+0x44>
 8000348:	2b0d      	cmp	r3, #13
 800034a:	dc24      	bgt.n	8000396 <fsm_green_manual+0x5a>
 800034c:	2b0b      	cmp	r3, #11
 800034e:	d002      	beq.n	8000356 <fsm_green_manual+0x1a>
 8000350:	2b0c      	cmp	r3, #12
 8000352:	d00a      	beq.n	800036a <fsm_green_manual+0x2e>
				toggle_green();
				setTimer1(500);
			}
			break;
		default:
			break;
 8000354:	e01f      	b.n	8000396 <fsm_green_manual+0x5a>
			led_config();
 8000356:	f000 f829 	bl	80003ac <led_config>
			setTimer1(500);
 800035a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800035e:	f000 fe55 	bl	800100c <setTimer1>
			status = AUTO_GREEN;
 8000362:	4b10      	ldr	r3, [pc, #64]	; (80003a4 <fsm_green_manual+0x68>)
 8000364:	220c      	movs	r2, #12
 8000366:	601a      	str	r2, [r3, #0]
			break;
 8000368:	e01a      	b.n	80003a0 <fsm_green_manual+0x64>
			if (timer1_flag == 1) {
 800036a:	4b0f      	ldr	r3, [pc, #60]	; (80003a8 <fsm_green_manual+0x6c>)
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	2b01      	cmp	r3, #1
 8000370:	d113      	bne.n	800039a <fsm_green_manual+0x5e>
				toggle_green();
 8000372:	f000 f99f 	bl	80006b4 <toggle_green>
				setTimer1(500);
 8000376:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800037a:	f000 fe47 	bl	800100c <setTimer1>
			break;
 800037e:	e00c      	b.n	800039a <fsm_green_manual+0x5e>
			if (timer1_flag == 1) {
 8000380:	4b09      	ldr	r3, [pc, #36]	; (80003a8 <fsm_green_manual+0x6c>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	2b01      	cmp	r3, #1
 8000386:	d10a      	bne.n	800039e <fsm_green_manual+0x62>
				toggle_green();
 8000388:	f000 f994 	bl	80006b4 <toggle_green>
				setTimer1(500);
 800038c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000390:	f000 fe3c 	bl	800100c <setTimer1>
			break;
 8000394:	e003      	b.n	800039e <fsm_green_manual+0x62>
			break;
 8000396:	bf00      	nop
 8000398:	e002      	b.n	80003a0 <fsm_green_manual+0x64>
			break;
 800039a:	bf00      	nop
 800039c:	e000      	b.n	80003a0 <fsm_green_manual+0x64>
			break;
 800039e:	bf00      	nop
	}
}
 80003a0:	bf00      	nop
 80003a2:	bd80      	pop	{r7, pc}
 80003a4:	2000000c 	.word	0x2000000c
 80003a8:	20000090 	.word	0x20000090

080003ac <led_config>:
void on_green_road_2();
void off_pedestrian();
void on_red_pedestrian();
void on_green_pedestrian();

void led_config() {
 80003ac:	b580      	push	{r7, lr}
 80003ae:	af00      	add	r7, sp, #0

	pedestrian_led_config();
 80003b0:	f000 f856 	bl	8000460 <pedestrian_led_config>
	switch (status) {
 80003b4:	4b28      	ldr	r3, [pc, #160]	; (8000458 <led_config+0xac>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	2b0b      	cmp	r3, #11
 80003ba:	d84a      	bhi.n	8000452 <led_config+0xa6>
 80003bc:	a201      	add	r2, pc, #4	; (adr r2, 80003c4 <led_config+0x18>)
 80003be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003c2:	bf00      	nop
 80003c4:	080003f5 	.word	0x080003f5
 80003c8:	08000403 	.word	0x08000403
 80003cc:	0800040d 	.word	0x0800040d
 80003d0:	08000413 	.word	0x08000413
 80003d4:	0800041d 	.word	0x0800041d
 80003d8:	08000423 	.word	0x08000423
 80003dc:	08000453 	.word	0x08000453
 80003e0:	08000453 	.word	0x08000453
 80003e4:	08000433 	.word	0x08000433
 80003e8:	08000453 	.word	0x08000453
 80003ec:	08000453 	.word	0x08000453
 80003f0:	08000443 	.word	0x08000443
		case MODE1:
			off_all_leds_road_1();
 80003f4:	f000 f89a 	bl	800052c <off_all_leds_road_1>
			off_all_leds_road_2();
 80003f8:	f000 f8ac 	bl	8000554 <off_all_leds_road_2>
			off_pedestrian();
 80003fc:	f000 f974 	bl	80006e8 <off_pedestrian>
			break;
 8000400:	e028      	b.n	8000454 <led_config+0xa8>
		case RED_GREEN:
			on_red_road_1();
 8000402:	f000 f8b7 	bl	8000574 <on_red_road_1>
			on_green_road_2();
 8000406:	f000 f911 	bl	800062c <on_green_road_2>

			break;
 800040a:	e023      	b.n	8000454 <led_config+0xa8>
		case RED_AMBER:
			on_amber_road_2();
 800040c:	f000 f8ea 	bl	80005e4 <on_amber_road_2>
			break;
 8000410:	e020      	b.n	8000454 <led_config+0xa8>
		case GREEN_RED:
			on_green_road_1();
 8000412:	f000 f8f7 	bl	8000604 <on_green_road_1>
			on_red_road_2();
 8000416:	f000 f8c1 	bl	800059c <on_red_road_2>
			break;
 800041a:	e01b      	b.n	8000454 <led_config+0xa8>
		case AMBER_RED:
			on_amber_road_1();
 800041c:	f000 f8ce 	bl	80005bc <on_amber_road_1>
			break;
 8000420:	e018      	b.n	8000454 <led_config+0xa8>
		case MODE2:
			on_red_road_1();
 8000422:	f000 f8a7 	bl	8000574 <on_red_road_1>
			on_red_road_2();
 8000426:	f000 f8b9 	bl	800059c <on_red_road_2>
			toggle_flag = 0;
 800042a:	4b0c      	ldr	r3, [pc, #48]	; (800045c <led_config+0xb0>)
 800042c:	2200      	movs	r2, #0
 800042e:	601a      	str	r2, [r3, #0]
			break;
 8000430:	e010      	b.n	8000454 <led_config+0xa8>
		case MODE3:
			on_amber_road_1();
 8000432:	f000 f8c3 	bl	80005bc <on_amber_road_1>
			on_amber_road_2();
 8000436:	f000 f8d5 	bl	80005e4 <on_amber_road_2>
			toggle_flag = 0;
 800043a:	4b08      	ldr	r3, [pc, #32]	; (800045c <led_config+0xb0>)
 800043c:	2200      	movs	r2, #0
 800043e:	601a      	str	r2, [r3, #0]
			break;
 8000440:	e008      	b.n	8000454 <led_config+0xa8>
		case MODE4:
			on_green_road_1();
 8000442:	f000 f8df 	bl	8000604 <on_green_road_1>
			on_green_road_2();
 8000446:	f000 f8f1 	bl	800062c <on_green_road_2>
			toggle_flag = 0;
 800044a:	4b04      	ldr	r3, [pc, #16]	; (800045c <led_config+0xb0>)
 800044c:	2200      	movs	r2, #0
 800044e:	601a      	str	r2, [r3, #0]
			break;
 8000450:	e000      	b.n	8000454 <led_config+0xa8>
		default:
			break;
 8000452:	bf00      	nop
	}
}
 8000454:	bf00      	nop
 8000456:	bd80      	pop	{r7, pc}
 8000458:	2000000c 	.word	0x2000000c
 800045c:	2000005c 	.word	0x2000005c

08000460 <pedestrian_led_config>:
void pedestrian_led_config(){
 8000460:	b580      	push	{r7, lr}
 8000462:	af00      	add	r7, sp, #0
	switch (status) {
 8000464:	4b2f      	ldr	r3, [pc, #188]	; (8000524 <pedestrian_led_config+0xc4>)
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	2b0b      	cmp	r3, #11
 800046a:	d858      	bhi.n	800051e <pedestrian_led_config+0xbe>
 800046c:	a201      	add	r2, pc, #4	; (adr r2, 8000474 <pedestrian_led_config+0x14>)
 800046e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000472:	bf00      	nop
 8000474:	080004a5 	.word	0x080004a5
 8000478:	080004ab 	.word	0x080004ab
 800047c:	080004bf 	.word	0x080004bf
 8000480:	080004d3 	.word	0x080004d3
 8000484:	080004e7 	.word	0x080004e7
 8000488:	080004fb 	.word	0x080004fb
 800048c:	0800051f 	.word	0x0800051f
 8000490:	0800051f 	.word	0x0800051f
 8000494:	08000507 	.word	0x08000507
 8000498:	0800051f 	.word	0x0800051f
 800049c:	0800051f 	.word	0x0800051f
 80004a0:	08000513 	.word	0x08000513
			case MODE1:
				off_pedestrian();
 80004a4:	f000 f920 	bl	80006e8 <off_pedestrian>
				break;
 80004a8:	e03a      	b.n	8000520 <pedestrian_led_config+0xc0>
			case RED_GREEN:
				if(curr_ped_status==PED_ON){
 80004aa:	4b1f      	ldr	r3, [pc, #124]	; (8000528 <pedestrian_led_config+0xc8>)
 80004ac:	781b      	ldrb	r3, [r3, #0]
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d102      	bne.n	80004b8 <pedestrian_led_config+0x58>
					on_green_pedestrian();
 80004b2:	f000 f941 	bl	8000738 <on_green_pedestrian>
					break;
 80004b6:	e033      	b.n	8000520 <pedestrian_led_config+0xc0>
				}
				off_pedestrian();
 80004b8:	f000 f916 	bl	80006e8 <off_pedestrian>
				break;
 80004bc:	e030      	b.n	8000520 <pedestrian_led_config+0xc0>
			case RED_AMBER:
				if(curr_ped_status==PED_ON){
 80004be:	4b1a      	ldr	r3, [pc, #104]	; (8000528 <pedestrian_led_config+0xc8>)
 80004c0:	781b      	ldrb	r3, [r3, #0]
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d102      	bne.n	80004cc <pedestrian_led_config+0x6c>
					on_green_pedestrian();
 80004c6:	f000 f937 	bl	8000738 <on_green_pedestrian>
					break;
 80004ca:	e029      	b.n	8000520 <pedestrian_led_config+0xc0>
				}
				off_pedestrian();
 80004cc:	f000 f90c 	bl	80006e8 <off_pedestrian>
				break;
 80004d0:	e026      	b.n	8000520 <pedestrian_led_config+0xc0>
			case GREEN_RED:
				if(curr_ped_status==PED_ON){
 80004d2:	4b15      	ldr	r3, [pc, #84]	; (8000528 <pedestrian_led_config+0xc8>)
 80004d4:	781b      	ldrb	r3, [r3, #0]
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d102      	bne.n	80004e0 <pedestrian_led_config+0x80>
					on_red_pedestrian();
 80004da:	f000 f919 	bl	8000710 <on_red_pedestrian>
					break;
 80004de:	e01f      	b.n	8000520 <pedestrian_led_config+0xc0>
				}
				off_pedestrian();
 80004e0:	f000 f902 	bl	80006e8 <off_pedestrian>
				break;
 80004e4:	e01c      	b.n	8000520 <pedestrian_led_config+0xc0>
			case AMBER_RED:
				if(curr_ped_status==PED_ON){
 80004e6:	4b10      	ldr	r3, [pc, #64]	; (8000528 <pedestrian_led_config+0xc8>)
 80004e8:	781b      	ldrb	r3, [r3, #0]
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d102      	bne.n	80004f4 <pedestrian_led_config+0x94>
					on_red_pedestrian();
 80004ee:	f000 f90f 	bl	8000710 <on_red_pedestrian>
					break;
 80004f2:	e015      	b.n	8000520 <pedestrian_led_config+0xc0>
				}
				off_pedestrian();
 80004f4:	f000 f8f8 	bl	80006e8 <off_pedestrian>
				break;
 80004f8:	e012      	b.n	8000520 <pedestrian_led_config+0xc0>
			case MODE2:
				curr_ped_status=PED_OFF;
 80004fa:	4b0b      	ldr	r3, [pc, #44]	; (8000528 <pedestrian_led_config+0xc8>)
 80004fc:	2201      	movs	r2, #1
 80004fe:	701a      	strb	r2, [r3, #0]
				off_pedestrian();
 8000500:	f000 f8f2 	bl	80006e8 <off_pedestrian>
				break;
 8000504:	e00c      	b.n	8000520 <pedestrian_led_config+0xc0>
			case MODE3:
				curr_ped_status=PED_OFF;
 8000506:	4b08      	ldr	r3, [pc, #32]	; (8000528 <pedestrian_led_config+0xc8>)
 8000508:	2201      	movs	r2, #1
 800050a:	701a      	strb	r2, [r3, #0]
				off_pedestrian();
 800050c:	f000 f8ec 	bl	80006e8 <off_pedestrian>
				break;
 8000510:	e006      	b.n	8000520 <pedestrian_led_config+0xc0>
			case MODE4:
				curr_ped_status=PED_OFF;
 8000512:	4b05      	ldr	r3, [pc, #20]	; (8000528 <pedestrian_led_config+0xc8>)
 8000514:	2201      	movs	r2, #1
 8000516:	701a      	strb	r2, [r3, #0]
				off_pedestrian();
 8000518:	f000 f8e6 	bl	80006e8 <off_pedestrian>
				break;
 800051c:	e000      	b.n	8000520 <pedestrian_led_config+0xc0>
			default:
				break;
 800051e:	bf00      	nop
		}
}
 8000520:	bf00      	nop
 8000522:	bd80      	pop	{r7, pc}
 8000524:	2000000c 	.word	0x2000000c
 8000528:	20000010 	.word	0x20000010

0800052c <off_all_leds_road_1>:
void off_all_leds_road_1() {
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (D2_LED1_GPIO_Port, D2_LED1_Pin, 0);
 8000530:	2200      	movs	r2, #0
 8000532:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000536:	4805      	ldr	r0, [pc, #20]	; (800054c <off_all_leds_road_1+0x20>)
 8000538:	f001 f94b 	bl	80017d2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (D3_LED1_GPIO_Port, D3_LED1_Pin, 0);
 800053c:	2200      	movs	r2, #0
 800053e:	2108      	movs	r1, #8
 8000540:	4803      	ldr	r0, [pc, #12]	; (8000550 <off_all_leds_road_1+0x24>)
 8000542:	f001 f946 	bl	80017d2 <HAL_GPIO_WritePin>
}
 8000546:	bf00      	nop
 8000548:	bd80      	pop	{r7, pc}
 800054a:	bf00      	nop
 800054c:	40010800 	.word	0x40010800
 8000550:	40010c00 	.word	0x40010c00

08000554 <off_all_leds_road_2>:

void off_all_leds_road_2() {
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (D4_LED2_GPIO_Port, D4_LED2_Pin, 0);
 8000558:	2200      	movs	r2, #0
 800055a:	2120      	movs	r1, #32
 800055c:	4804      	ldr	r0, [pc, #16]	; (8000570 <off_all_leds_road_2+0x1c>)
 800055e:	f001 f938 	bl	80017d2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (D5_LED2_GPIO_Port, D5_LED2_Pin, 0);
 8000562:	2200      	movs	r2, #0
 8000564:	2110      	movs	r1, #16
 8000566:	4802      	ldr	r0, [pc, #8]	; (8000570 <off_all_leds_road_2+0x1c>)
 8000568:	f001 f933 	bl	80017d2 <HAL_GPIO_WritePin>
}
 800056c:	bf00      	nop
 800056e:	bd80      	pop	{r7, pc}
 8000570:	40010c00 	.word	0x40010c00

08000574 <on_red_road_1>:

void on_red_road_1() {
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (D2_LED1_GPIO_Port, D2_LED1_Pin, 1);
 8000578:	2201      	movs	r2, #1
 800057a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800057e:	4805      	ldr	r0, [pc, #20]	; (8000594 <on_red_road_1+0x20>)
 8000580:	f001 f927 	bl	80017d2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (D3_LED1_GPIO_Port, D3_LED1_Pin, 0);
 8000584:	2200      	movs	r2, #0
 8000586:	2108      	movs	r1, #8
 8000588:	4803      	ldr	r0, [pc, #12]	; (8000598 <on_red_road_1+0x24>)
 800058a:	f001 f922 	bl	80017d2 <HAL_GPIO_WritePin>
}
 800058e:	bf00      	nop
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	40010800 	.word	0x40010800
 8000598:	40010c00 	.word	0x40010c00

0800059c <on_red_road_2>:

void on_red_road_2() {
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (D4_LED2_GPIO_Port, D4_LED2_Pin, 1);
 80005a0:	2201      	movs	r2, #1
 80005a2:	2120      	movs	r1, #32
 80005a4:	4804      	ldr	r0, [pc, #16]	; (80005b8 <on_red_road_2+0x1c>)
 80005a6:	f001 f914 	bl	80017d2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (D5_LED2_GPIO_Port, D5_LED2_Pin, 0);
 80005aa:	2200      	movs	r2, #0
 80005ac:	2110      	movs	r1, #16
 80005ae:	4802      	ldr	r0, [pc, #8]	; (80005b8 <on_red_road_2+0x1c>)
 80005b0:	f001 f90f 	bl	80017d2 <HAL_GPIO_WritePin>
}
 80005b4:	bf00      	nop
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	40010c00 	.word	0x40010c00

080005bc <on_amber_road_1>:

void on_amber_road_1() {
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (D2_LED1_GPIO_Port, D2_LED1_Pin, 1);
 80005c0:	2201      	movs	r2, #1
 80005c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005c6:	4805      	ldr	r0, [pc, #20]	; (80005dc <on_amber_road_1+0x20>)
 80005c8:	f001 f903 	bl	80017d2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (D3_LED1_GPIO_Port, D3_LED1_Pin, 1);
 80005cc:	2201      	movs	r2, #1
 80005ce:	2108      	movs	r1, #8
 80005d0:	4803      	ldr	r0, [pc, #12]	; (80005e0 <on_amber_road_1+0x24>)
 80005d2:	f001 f8fe 	bl	80017d2 <HAL_GPIO_WritePin>
}
 80005d6:	bf00      	nop
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	40010800 	.word	0x40010800
 80005e0:	40010c00 	.word	0x40010c00

080005e4 <on_amber_road_2>:

void on_amber_road_2() {
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (D4_LED2_GPIO_Port, D4_LED2_Pin, 1);
 80005e8:	2201      	movs	r2, #1
 80005ea:	2120      	movs	r1, #32
 80005ec:	4804      	ldr	r0, [pc, #16]	; (8000600 <on_amber_road_2+0x1c>)
 80005ee:	f001 f8f0 	bl	80017d2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (D5_LED2_GPIO_Port, D5_LED2_Pin, 1);
 80005f2:	2201      	movs	r2, #1
 80005f4:	2110      	movs	r1, #16
 80005f6:	4802      	ldr	r0, [pc, #8]	; (8000600 <on_amber_road_2+0x1c>)
 80005f8:	f001 f8eb 	bl	80017d2 <HAL_GPIO_WritePin>
}
 80005fc:	bf00      	nop
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	40010c00 	.word	0x40010c00

08000604 <on_green_road_1>:

void on_green_road_1() {
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (D2_LED1_GPIO_Port, D2_LED1_Pin, 0);
 8000608:	2200      	movs	r2, #0
 800060a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800060e:	4805      	ldr	r0, [pc, #20]	; (8000624 <on_green_road_1+0x20>)
 8000610:	f001 f8df 	bl	80017d2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (D3_LED1_GPIO_Port, D3_LED1_Pin, 1);
 8000614:	2201      	movs	r2, #1
 8000616:	2108      	movs	r1, #8
 8000618:	4803      	ldr	r0, [pc, #12]	; (8000628 <on_green_road_1+0x24>)
 800061a:	f001 f8da 	bl	80017d2 <HAL_GPIO_WritePin>
}
 800061e:	bf00      	nop
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	40010800 	.word	0x40010800
 8000628:	40010c00 	.word	0x40010c00

0800062c <on_green_road_2>:

void on_green_road_2() {
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (D4_LED2_GPIO_Port, D4_LED2_Pin, 0);
 8000630:	2200      	movs	r2, #0
 8000632:	2120      	movs	r1, #32
 8000634:	4804      	ldr	r0, [pc, #16]	; (8000648 <on_green_road_2+0x1c>)
 8000636:	f001 f8cc 	bl	80017d2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (D5_LED2_GPIO_Port, D5_LED2_Pin, 1);
 800063a:	2201      	movs	r2, #1
 800063c:	2110      	movs	r1, #16
 800063e:	4802      	ldr	r0, [pc, #8]	; (8000648 <on_green_road_2+0x1c>)
 8000640:	f001 f8c7 	bl	80017d2 <HAL_GPIO_WritePin>
}
 8000644:	bf00      	nop
 8000646:	bd80      	pop	{r7, pc}
 8000648:	40010c00 	.word	0x40010c00

0800064c <toggle_red>:


void toggle_red() {
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
	if (toggle_flag == 0) {
 8000650:	4b0a      	ldr	r3, [pc, #40]	; (800067c <toggle_red+0x30>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	2b00      	cmp	r3, #0
 8000656:	d107      	bne.n	8000668 <toggle_red+0x1c>
		on_red_road_1();
 8000658:	f7ff ff8c 	bl	8000574 <on_red_road_1>
		on_red_road_2();
 800065c:	f7ff ff9e 	bl	800059c <on_red_road_2>
		toggle_flag = 1;
 8000660:	4b06      	ldr	r3, [pc, #24]	; (800067c <toggle_red+0x30>)
 8000662:	2201      	movs	r2, #1
 8000664:	601a      	str	r2, [r3, #0]
	} else {
		off_all_leds_road_1();
		off_all_leds_road_2();
		toggle_flag = 0;
	}
}
 8000666:	e006      	b.n	8000676 <toggle_red+0x2a>
		off_all_leds_road_1();
 8000668:	f7ff ff60 	bl	800052c <off_all_leds_road_1>
		off_all_leds_road_2();
 800066c:	f7ff ff72 	bl	8000554 <off_all_leds_road_2>
		toggle_flag = 0;
 8000670:	4b02      	ldr	r3, [pc, #8]	; (800067c <toggle_red+0x30>)
 8000672:	2200      	movs	r2, #0
 8000674:	601a      	str	r2, [r3, #0]
}
 8000676:	bf00      	nop
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	2000005c 	.word	0x2000005c

08000680 <toggle_amber>:

void toggle_amber() {
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
	if (toggle_flag == 0) {
 8000684:	4b0a      	ldr	r3, [pc, #40]	; (80006b0 <toggle_amber+0x30>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	2b00      	cmp	r3, #0
 800068a:	d107      	bne.n	800069c <toggle_amber+0x1c>
		on_amber_road_1();
 800068c:	f7ff ff96 	bl	80005bc <on_amber_road_1>
		on_amber_road_2();
 8000690:	f7ff ffa8 	bl	80005e4 <on_amber_road_2>
		toggle_flag = 1;
 8000694:	4b06      	ldr	r3, [pc, #24]	; (80006b0 <toggle_amber+0x30>)
 8000696:	2201      	movs	r2, #1
 8000698:	601a      	str	r2, [r3, #0]
	} else {
		off_all_leds_road_1();
		off_all_leds_road_2();
		toggle_flag = 0;
	}
}
 800069a:	e006      	b.n	80006aa <toggle_amber+0x2a>
		off_all_leds_road_1();
 800069c:	f7ff ff46 	bl	800052c <off_all_leds_road_1>
		off_all_leds_road_2();
 80006a0:	f7ff ff58 	bl	8000554 <off_all_leds_road_2>
		toggle_flag = 0;
 80006a4:	4b02      	ldr	r3, [pc, #8]	; (80006b0 <toggle_amber+0x30>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	601a      	str	r2, [r3, #0]
}
 80006aa:	bf00      	nop
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	2000005c 	.word	0x2000005c

080006b4 <toggle_green>:

void toggle_green() {
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
	if (toggle_flag == 0) {
 80006b8:	4b0a      	ldr	r3, [pc, #40]	; (80006e4 <toggle_green+0x30>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d107      	bne.n	80006d0 <toggle_green+0x1c>
		on_green_road_1();
 80006c0:	f7ff ffa0 	bl	8000604 <on_green_road_1>
		on_green_road_2();
 80006c4:	f7ff ffb2 	bl	800062c <on_green_road_2>
		toggle_flag = 1;
 80006c8:	4b06      	ldr	r3, [pc, #24]	; (80006e4 <toggle_green+0x30>)
 80006ca:	2201      	movs	r2, #1
 80006cc:	601a      	str	r2, [r3, #0]
	} else {
		off_all_leds_road_1();
		off_all_leds_road_2();
		toggle_flag = 0;
	}
}
 80006ce:	e006      	b.n	80006de <toggle_green+0x2a>
		off_all_leds_road_1();
 80006d0:	f7ff ff2c 	bl	800052c <off_all_leds_road_1>
		off_all_leds_road_2();
 80006d4:	f7ff ff3e 	bl	8000554 <off_all_leds_road_2>
		toggle_flag = 0;
 80006d8:	4b02      	ldr	r3, [pc, #8]	; (80006e4 <toggle_green+0x30>)
 80006da:	2200      	movs	r2, #0
 80006dc:	601a      	str	r2, [r3, #0]
}
 80006de:	bf00      	nop
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	2000005c 	.word	0x2000005c

080006e8 <off_pedestrian>:

void off_pedestrian(){
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (D6_PedLED_GPIO_Port, D6_PedLED_Pin, 0);
 80006ec:	2200      	movs	r2, #0
 80006ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006f2:	4805      	ldr	r0, [pc, #20]	; (8000708 <off_pedestrian+0x20>)
 80006f4:	f001 f86d 	bl	80017d2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (D7_PedLED_GPIO_Port, D7_PedLED_Pin, 0);
 80006f8:	2200      	movs	r2, #0
 80006fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006fe:	4803      	ldr	r0, [pc, #12]	; (800070c <off_pedestrian+0x24>)
 8000700:	f001 f867 	bl	80017d2 <HAL_GPIO_WritePin>
}
 8000704:	bf00      	nop
 8000706:	bd80      	pop	{r7, pc}
 8000708:	40010c00 	.word	0x40010c00
 800070c:	40010800 	.word	0x40010800

08000710 <on_red_pedestrian>:
void on_red_pedestrian(){
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (D6_PedLED_GPIO_Port, D6_PedLED_Pin, 1);
 8000714:	2201      	movs	r2, #1
 8000716:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800071a:	4805      	ldr	r0, [pc, #20]	; (8000730 <on_red_pedestrian+0x20>)
 800071c:	f001 f859 	bl	80017d2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (D7_PedLED_GPIO_Port, D7_PedLED_Pin, 0);
 8000720:	2200      	movs	r2, #0
 8000722:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000726:	4803      	ldr	r0, [pc, #12]	; (8000734 <on_red_pedestrian+0x24>)
 8000728:	f001 f853 	bl	80017d2 <HAL_GPIO_WritePin>
}
 800072c:	bf00      	nop
 800072e:	bd80      	pop	{r7, pc}
 8000730:	40010c00 	.word	0x40010c00
 8000734:	40010800 	.word	0x40010800

08000738 <on_green_pedestrian>:
void on_green_pedestrian(){
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (D6_PedLED_GPIO_Port, D6_PedLED_Pin, 0);
 800073c:	2200      	movs	r2, #0
 800073e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000742:	4805      	ldr	r0, [pc, #20]	; (8000758 <on_green_pedestrian+0x20>)
 8000744:	f001 f845 	bl	80017d2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (D7_PedLED_GPIO_Port, D7_PedLED_Pin, 1);
 8000748:	2201      	movs	r2, #1
 800074a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800074e:	4803      	ldr	r0, [pc, #12]	; (800075c <on_green_pedestrian+0x24>)
 8000750:	f001 f83f 	bl	80017d2 <HAL_GPIO_WritePin>
}
 8000754:	bf00      	nop
 8000756:	bd80      	pop	{r7, pc}
 8000758:	40010c00 	.word	0x40010c00
 800075c:	40010800 	.word	0x40010800

08000760 <fsm_button_processing>:
enum ButtonState button_0_state = BUTTON_PRESSED;
enum ButtonState button_1_state = BUTTON_PRESSED;
enum ButtonState button_2_state = BUTTON_PRESSED;
enum ButtonState button_3_state = BUTTON_PRESSED;

void fsm_button_processing() {
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
	if(timer5_flag==1){
 8000764:	4b9f      	ldr	r3, [pc, #636]	; (80009e4 <fsm_button_processing+0x284>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	2b01      	cmp	r3, #1
 800076a:	d105      	bne.n	8000778 <fsm_button_processing+0x18>
		timer5_flag=0;
 800076c:	4b9d      	ldr	r3, [pc, #628]	; (80009e4 <fsm_button_processing+0x284>)
 800076e:	2200      	movs	r2, #0
 8000770:	601a      	str	r2, [r3, #0]
		curr_ped_status=PED_OFF;
 8000772:	4b9d      	ldr	r3, [pc, #628]	; (80009e8 <fsm_button_processing+0x288>)
 8000774:	2201      	movs	r2, #1
 8000776:	701a      	strb	r2, [r3, #0]
	}
	switch (button_0_state) {
 8000778:	4b9c      	ldr	r3, [pc, #624]	; (80009ec <fsm_button_processing+0x28c>)
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	2b02      	cmp	r3, #2
 800077e:	d043      	beq.n	8000808 <fsm_button_processing+0xa8>
 8000780:	2b02      	cmp	r3, #2
 8000782:	dc50      	bgt.n	8000826 <fsm_button_processing+0xc6>
 8000784:	2b00      	cmp	r3, #0
 8000786:	d002      	beq.n	800078e <fsm_button_processing+0x2e>
 8000788:	2b01      	cmp	r3, #1
 800078a:	d029      	beq.n	80007e0 <fsm_button_processing+0x80>
 800078c:	e04b      	b.n	8000826 <fsm_button_processing+0xc6>
			case BUTTON_RELEASED:
				if (is_button_pressed(0)) {
 800078e:	2000      	movs	r0, #0
 8000790:	f000 fa38 	bl	8000c04 <is_button_pressed>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d040      	beq.n	800081c <fsm_button_processing+0xbc>
					button_0_state = BUTTON_PRESSED;
 800079a:	4b94      	ldr	r3, [pc, #592]	; (80009ec <fsm_button_processing+0x28c>)
 800079c:	2201      	movs	r2, #1
 800079e:	701a      	strb	r2, [r3, #0]
					if(curr_ped_status==PED_OFF&&(status==MODE1||status==RED_GREEN||status==RED_AMBER||status==GREEN_RED||status==AMBER_RED)){
 80007a0:	4b91      	ldr	r3, [pc, #580]	; (80009e8 <fsm_button_processing+0x288>)
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	2b01      	cmp	r3, #1
 80007a6:	d139      	bne.n	800081c <fsm_button_processing+0xbc>
 80007a8:	4b91      	ldr	r3, [pc, #580]	; (80009f0 <fsm_button_processing+0x290>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d00f      	beq.n	80007d0 <fsm_button_processing+0x70>
 80007b0:	4b8f      	ldr	r3, [pc, #572]	; (80009f0 <fsm_button_processing+0x290>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	2b01      	cmp	r3, #1
 80007b6:	d00b      	beq.n	80007d0 <fsm_button_processing+0x70>
 80007b8:	4b8d      	ldr	r3, [pc, #564]	; (80009f0 <fsm_button_processing+0x290>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	2b02      	cmp	r3, #2
 80007be:	d007      	beq.n	80007d0 <fsm_button_processing+0x70>
 80007c0:	4b8b      	ldr	r3, [pc, #556]	; (80009f0 <fsm_button_processing+0x290>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	2b03      	cmp	r3, #3
 80007c6:	d003      	beq.n	80007d0 <fsm_button_processing+0x70>
 80007c8:	4b89      	ldr	r3, [pc, #548]	; (80009f0 <fsm_button_processing+0x290>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	2b04      	cmp	r3, #4
 80007ce:	d125      	bne.n	800081c <fsm_button_processing+0xbc>
						curr_ped_status=PED_ON;
 80007d0:	4b85      	ldr	r3, [pc, #532]	; (80009e8 <fsm_button_processing+0x288>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	701a      	strb	r2, [r3, #0]
						setTimer5(10*1000);
 80007d6:	f242 7010 	movw	r0, #10000	; 0x2710
 80007da:	f000 fc31 	bl	8001040 <setTimer5>
					}
				}
				break;
 80007de:	e01d      	b.n	800081c <fsm_button_processing+0xbc>
			case BUTTON_PRESSED:
				if (!is_button_pressed(0)) {
 80007e0:	2000      	movs	r0, #0
 80007e2:	f000 fa0f 	bl	8000c04 <is_button_pressed>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d103      	bne.n	80007f4 <fsm_button_processing+0x94>
					button_0_state = BUTTON_RELEASED;
 80007ec:	4b7f      	ldr	r3, [pc, #508]	; (80009ec <fsm_button_processing+0x28c>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	701a      	strb	r2, [r3, #0]
				} else {
					if (is_button_pressed_1s(0)) {
						button_0_state = BUTTON_PRESSED_MORE_THAN_1_SECOND;
					}
				}
				break;
 80007f2:	e015      	b.n	8000820 <fsm_button_processing+0xc0>
					if (is_button_pressed_1s(0)) {
 80007f4:	2000      	movs	r0, #0
 80007f6:	f000 fa1f 	bl	8000c38 <is_button_pressed_1s>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d00f      	beq.n	8000820 <fsm_button_processing+0xc0>
						button_0_state = BUTTON_PRESSED_MORE_THAN_1_SECOND;
 8000800:	4b7a      	ldr	r3, [pc, #488]	; (80009ec <fsm_button_processing+0x28c>)
 8000802:	2202      	movs	r2, #2
 8000804:	701a      	strb	r2, [r3, #0]
				break;
 8000806:	e00b      	b.n	8000820 <fsm_button_processing+0xc0>
			case BUTTON_PRESSED_MORE_THAN_1_SECOND:
				if (!is_button_pressed(0)) {
 8000808:	2000      	movs	r0, #0
 800080a:	f000 f9fb 	bl	8000c04 <is_button_pressed>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d107      	bne.n	8000824 <fsm_button_processing+0xc4>
					button_0_state = BUTTON_RELEASED;
 8000814:	4b75      	ldr	r3, [pc, #468]	; (80009ec <fsm_button_processing+0x28c>)
 8000816:	2200      	movs	r2, #0
 8000818:	701a      	strb	r2, [r3, #0]
				}
				// do nothing, wait for the button to be released
				break;
 800081a:	e003      	b.n	8000824 <fsm_button_processing+0xc4>
				break;
 800081c:	bf00      	nop
 800081e:	e002      	b.n	8000826 <fsm_button_processing+0xc6>
				break;
 8000820:	bf00      	nop
 8000822:	e000      	b.n	8000826 <fsm_button_processing+0xc6>
				break;
 8000824:	bf00      	nop
		}
	switch (button_1_state) {
 8000826:	4b73      	ldr	r3, [pc, #460]	; (80009f4 <fsm_button_processing+0x294>)
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	2b02      	cmp	r3, #2
 800082c:	d040      	beq.n	80008b0 <fsm_button_processing+0x150>
 800082e:	2b02      	cmp	r3, #2
 8000830:	dc4d      	bgt.n	80008ce <fsm_button_processing+0x16e>
 8000832:	2b00      	cmp	r3, #0
 8000834:	d002      	beq.n	800083c <fsm_button_processing+0xdc>
 8000836:	2b01      	cmp	r3, #1
 8000838:	d026      	beq.n	8000888 <fsm_button_processing+0x128>
 800083a:	e048      	b.n	80008ce <fsm_button_processing+0x16e>
		case BUTTON_RELEASED:
			if (is_button_pressed(1)) {
 800083c:	2001      	movs	r0, #1
 800083e:	f000 f9e1 	bl	8000c04 <is_button_pressed>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d03d      	beq.n	80008c4 <fsm_button_processing+0x164>
				button_1_state = BUTTON_PRESSED;
 8000848:	4b6a      	ldr	r3, [pc, #424]	; (80009f4 <fsm_button_processing+0x294>)
 800084a:	2201      	movs	r2, #1
 800084c:	701a      	strb	r2, [r3, #0]
				if (status == RED_GREEN) 	status = MODE2;
 800084e:	4b68      	ldr	r3, [pc, #416]	; (80009f0 <fsm_button_processing+0x290>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	2b01      	cmp	r3, #1
 8000854:	d102      	bne.n	800085c <fsm_button_processing+0xfc>
 8000856:	4b66      	ldr	r3, [pc, #408]	; (80009f0 <fsm_button_processing+0x290>)
 8000858:	2205      	movs	r2, #5
 800085a:	601a      	str	r2, [r3, #0]
				if (status == AUTO_RED) 	status = MODE3;
 800085c:	4b64      	ldr	r3, [pc, #400]	; (80009f0 <fsm_button_processing+0x290>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	2b06      	cmp	r3, #6
 8000862:	d102      	bne.n	800086a <fsm_button_processing+0x10a>
 8000864:	4b62      	ldr	r3, [pc, #392]	; (80009f0 <fsm_button_processing+0x290>)
 8000866:	2208      	movs	r2, #8
 8000868:	601a      	str	r2, [r3, #0]
				if (status == AUTO_AMBER) 	status = MODE4;
 800086a:	4b61      	ldr	r3, [pc, #388]	; (80009f0 <fsm_button_processing+0x290>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	2b09      	cmp	r3, #9
 8000870:	d102      	bne.n	8000878 <fsm_button_processing+0x118>
 8000872:	4b5f      	ldr	r3, [pc, #380]	; (80009f0 <fsm_button_processing+0x290>)
 8000874:	220b      	movs	r2, #11
 8000876:	601a      	str	r2, [r3, #0]
				if (status == AUTO_GREEN) 	status = MODE1;
 8000878:	4b5d      	ldr	r3, [pc, #372]	; (80009f0 <fsm_button_processing+0x290>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	2b0c      	cmp	r3, #12
 800087e:	d121      	bne.n	80008c4 <fsm_button_processing+0x164>
 8000880:	4b5b      	ldr	r3, [pc, #364]	; (80009f0 <fsm_button_processing+0x290>)
 8000882:	2200      	movs	r2, #0
 8000884:	601a      	str	r2, [r3, #0]
			}
			break;
 8000886:	e01d      	b.n	80008c4 <fsm_button_processing+0x164>
		case BUTTON_PRESSED:
			if (!is_button_pressed(1)) {
 8000888:	2001      	movs	r0, #1
 800088a:	f000 f9bb 	bl	8000c04 <is_button_pressed>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d103      	bne.n	800089c <fsm_button_processing+0x13c>
				button_1_state = BUTTON_RELEASED;
 8000894:	4b57      	ldr	r3, [pc, #348]	; (80009f4 <fsm_button_processing+0x294>)
 8000896:	2200      	movs	r2, #0
 8000898:	701a      	strb	r2, [r3, #0]
			} else {
				if (is_button_pressed_1s(1)) {
					button_1_state = BUTTON_PRESSED_MORE_THAN_1_SECOND;
				}
			}
			break;
 800089a:	e015      	b.n	80008c8 <fsm_button_processing+0x168>
				if (is_button_pressed_1s(1)) {
 800089c:	2001      	movs	r0, #1
 800089e:	f000 f9cb 	bl	8000c38 <is_button_pressed_1s>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d00f      	beq.n	80008c8 <fsm_button_processing+0x168>
					button_1_state = BUTTON_PRESSED_MORE_THAN_1_SECOND;
 80008a8:	4b52      	ldr	r3, [pc, #328]	; (80009f4 <fsm_button_processing+0x294>)
 80008aa:	2202      	movs	r2, #2
 80008ac:	701a      	strb	r2, [r3, #0]
			break;
 80008ae:	e00b      	b.n	80008c8 <fsm_button_processing+0x168>
		case BUTTON_PRESSED_MORE_THAN_1_SECOND:
			if (!is_button_pressed(1)) {
 80008b0:	2001      	movs	r0, #1
 80008b2:	f000 f9a7 	bl	8000c04 <is_button_pressed>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d107      	bne.n	80008cc <fsm_button_processing+0x16c>
				button_1_state = BUTTON_RELEASED;
 80008bc:	4b4d      	ldr	r3, [pc, #308]	; (80009f4 <fsm_button_processing+0x294>)
 80008be:	2200      	movs	r2, #0
 80008c0:	701a      	strb	r2, [r3, #0]
			}
			// do nothing, wait for the button to be released
			break;
 80008c2:	e003      	b.n	80008cc <fsm_button_processing+0x16c>
			break;
 80008c4:	bf00      	nop
 80008c6:	e002      	b.n	80008ce <fsm_button_processing+0x16e>
			break;
 80008c8:	bf00      	nop
 80008ca:	e000      	b.n	80008ce <fsm_button_processing+0x16e>
			break;
 80008cc:	bf00      	nop
	}

	switch (button_2_state) {
 80008ce:	4b4a      	ldr	r3, [pc, #296]	; (80009f8 <fsm_button_processing+0x298>)
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	2b02      	cmp	r3, #2
 80008d4:	d069      	beq.n	80009aa <fsm_button_processing+0x24a>
 80008d6:	2b02      	cmp	r3, #2
 80008d8:	dc76      	bgt.n	80009c8 <fsm_button_processing+0x268>
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d002      	beq.n	80008e4 <fsm_button_processing+0x184>
 80008de:	2b01      	cmp	r3, #1
 80008e0:	d04f      	beq.n	8000982 <fsm_button_processing+0x222>
 80008e2:	e071      	b.n	80009c8 <fsm_button_processing+0x268>
		case BUTTON_RELEASED:
			if (is_button_pressed(2)) {
 80008e4:	2002      	movs	r0, #2
 80008e6:	f000 f98d 	bl	8000c04 <is_button_pressed>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d066      	beq.n	80009be <fsm_button_processing+0x25e>
				button_2_state = BUTTON_PRESSED;
 80008f0:	4b41      	ldr	r3, [pc, #260]	; (80009f8 <fsm_button_processing+0x298>)
 80008f2:	2201      	movs	r2, #1
 80008f4:	701a      	strb	r2, [r3, #0]
				if (status == AUTO_RED || status == ADJ_RED) {
 80008f6:	4b3e      	ldr	r3, [pc, #248]	; (80009f0 <fsm_button_processing+0x290>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	2b06      	cmp	r3, #6
 80008fc:	d003      	beq.n	8000906 <fsm_button_processing+0x1a6>
 80008fe:	4b3c      	ldr	r3, [pc, #240]	; (80009f0 <fsm_button_processing+0x290>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	2b07      	cmp	r3, #7
 8000904:	d10e      	bne.n	8000924 <fsm_button_processing+0x1c4>
					status = ADJ_RED;
 8000906:	4b3a      	ldr	r3, [pc, #232]	; (80009f0 <fsm_button_processing+0x290>)
 8000908:	2207      	movs	r2, #7
 800090a:	601a      	str	r2, [r3, #0]
					T_RED++;
 800090c:	4b3b      	ldr	r3, [pc, #236]	; (80009fc <fsm_button_processing+0x29c>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	3301      	adds	r3, #1
 8000912:	4a3a      	ldr	r2, [pc, #232]	; (80009fc <fsm_button_processing+0x29c>)
 8000914:	6013      	str	r3, [r2, #0]
					if (T_RED >= 99) T_RED = 1;
 8000916:	4b39      	ldr	r3, [pc, #228]	; (80009fc <fsm_button_processing+0x29c>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	2b62      	cmp	r3, #98	; 0x62
 800091c:	dd02      	ble.n	8000924 <fsm_button_processing+0x1c4>
 800091e:	4b37      	ldr	r3, [pc, #220]	; (80009fc <fsm_button_processing+0x29c>)
 8000920:	2201      	movs	r2, #1
 8000922:	601a      	str	r2, [r3, #0]
//					update7SEG_buffer_manual(2, T_RED);
				}
				if (status == AUTO_AMBER || status == ADJ_AMBER) {
 8000924:	4b32      	ldr	r3, [pc, #200]	; (80009f0 <fsm_button_processing+0x290>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	2b09      	cmp	r3, #9
 800092a:	d003      	beq.n	8000934 <fsm_button_processing+0x1d4>
 800092c:	4b30      	ldr	r3, [pc, #192]	; (80009f0 <fsm_button_processing+0x290>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	2b0a      	cmp	r3, #10
 8000932:	d10e      	bne.n	8000952 <fsm_button_processing+0x1f2>
					status = ADJ_AMBER;
 8000934:	4b2e      	ldr	r3, [pc, #184]	; (80009f0 <fsm_button_processing+0x290>)
 8000936:	220a      	movs	r2, #10
 8000938:	601a      	str	r2, [r3, #0]
					T_AMBER++;
 800093a:	4b31      	ldr	r3, [pc, #196]	; (8000a00 <fsm_button_processing+0x2a0>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	3301      	adds	r3, #1
 8000940:	4a2f      	ldr	r2, [pc, #188]	; (8000a00 <fsm_button_processing+0x2a0>)
 8000942:	6013      	str	r3, [r2, #0]
					if (T_AMBER >= 5) T_AMBER = 1;
 8000944:	4b2e      	ldr	r3, [pc, #184]	; (8000a00 <fsm_button_processing+0x2a0>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	2b04      	cmp	r3, #4
 800094a:	dd02      	ble.n	8000952 <fsm_button_processing+0x1f2>
 800094c:	4b2c      	ldr	r3, [pc, #176]	; (8000a00 <fsm_button_processing+0x2a0>)
 800094e:	2201      	movs	r2, #1
 8000950:	601a      	str	r2, [r3, #0]
//					update7SEG_buffer_manual(3, T_AMBER);
				}
				if (status == AUTO_GREEN || status == ADJ_GREEN) {
 8000952:	4b27      	ldr	r3, [pc, #156]	; (80009f0 <fsm_button_processing+0x290>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	2b0c      	cmp	r3, #12
 8000958:	d003      	beq.n	8000962 <fsm_button_processing+0x202>
 800095a:	4b25      	ldr	r3, [pc, #148]	; (80009f0 <fsm_button_processing+0x290>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	2b0d      	cmp	r3, #13
 8000960:	d12d      	bne.n	80009be <fsm_button_processing+0x25e>
					status = ADJ_GREEN;
 8000962:	4b23      	ldr	r3, [pc, #140]	; (80009f0 <fsm_button_processing+0x290>)
 8000964:	220d      	movs	r2, #13
 8000966:	601a      	str	r2, [r3, #0]
					T_GREEN++;
 8000968:	4b26      	ldr	r3, [pc, #152]	; (8000a04 <fsm_button_processing+0x2a4>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	3301      	adds	r3, #1
 800096e:	4a25      	ldr	r2, [pc, #148]	; (8000a04 <fsm_button_processing+0x2a4>)
 8000970:	6013      	str	r3, [r2, #0]
					if (T_GREEN >= 99) T_GREEN = 1;
 8000972:	4b24      	ldr	r3, [pc, #144]	; (8000a04 <fsm_button_processing+0x2a4>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	2b62      	cmp	r3, #98	; 0x62
 8000978:	dd21      	ble.n	80009be <fsm_button_processing+0x25e>
 800097a:	4b22      	ldr	r3, [pc, #136]	; (8000a04 <fsm_button_processing+0x2a4>)
 800097c:	2201      	movs	r2, #1
 800097e:	601a      	str	r2, [r3, #0]
//					update7SEG_buffer_manual(4, T_GREEN);
				}
			}
			break;
 8000980:	e01d      	b.n	80009be <fsm_button_processing+0x25e>
		case BUTTON_PRESSED:
			if (!is_button_pressed(2)) {
 8000982:	2002      	movs	r0, #2
 8000984:	f000 f93e 	bl	8000c04 <is_button_pressed>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d103      	bne.n	8000996 <fsm_button_processing+0x236>
				button_2_state = BUTTON_RELEASED;
 800098e:	4b1a      	ldr	r3, [pc, #104]	; (80009f8 <fsm_button_processing+0x298>)
 8000990:	2200      	movs	r2, #0
 8000992:	701a      	strb	r2, [r3, #0]
			} else {
				if (is_button_pressed_1s(2)) {
					button_2_state = BUTTON_PRESSED_MORE_THAN_1_SECOND;
				}
			}
			break;
 8000994:	e015      	b.n	80009c2 <fsm_button_processing+0x262>
				if (is_button_pressed_1s(2)) {
 8000996:	2002      	movs	r0, #2
 8000998:	f000 f94e 	bl	8000c38 <is_button_pressed_1s>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d00f      	beq.n	80009c2 <fsm_button_processing+0x262>
					button_2_state = BUTTON_PRESSED_MORE_THAN_1_SECOND;
 80009a2:	4b15      	ldr	r3, [pc, #84]	; (80009f8 <fsm_button_processing+0x298>)
 80009a4:	2202      	movs	r2, #2
 80009a6:	701a      	strb	r2, [r3, #0]
			break;
 80009a8:	e00b      	b.n	80009c2 <fsm_button_processing+0x262>
		case BUTTON_PRESSED_MORE_THAN_1_SECOND:
			if (!is_button_pressed(2)) {
 80009aa:	2002      	movs	r0, #2
 80009ac:	f000 f92a 	bl	8000c04 <is_button_pressed>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d107      	bne.n	80009c6 <fsm_button_processing+0x266>
				button_2_state = BUTTON_RELEASED;
 80009b6:	4b10      	ldr	r3, [pc, #64]	; (80009f8 <fsm_button_processing+0x298>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	701a      	strb	r2, [r3, #0]
			}
			// do nothing, wait for the button to be released
			break;
 80009bc:	e003      	b.n	80009c6 <fsm_button_processing+0x266>
			break;
 80009be:	bf00      	nop
 80009c0:	e002      	b.n	80009c8 <fsm_button_processing+0x268>
			break;
 80009c2:	bf00      	nop
 80009c4:	e000      	b.n	80009c8 <fsm_button_processing+0x268>
			break;
 80009c6:	bf00      	nop
	}

	switch (button_3_state) {
 80009c8:	4b0f      	ldr	r3, [pc, #60]	; (8000a08 <fsm_button_processing+0x2a8>)
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	2b02      	cmp	r3, #2
 80009ce:	f000 8088 	beq.w	8000ae2 <fsm_button_processing+0x382>
 80009d2:	2b02      	cmp	r3, #2
 80009d4:	f300 8094 	bgt.w	8000b00 <fsm_button_processing+0x3a0>
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d017      	beq.n	8000a0c <fsm_button_processing+0x2ac>
 80009dc:	2b01      	cmp	r3, #1
 80009de:	d06c      	beq.n	8000aba <fsm_button_processing+0x35a>
				button_3_state = BUTTON_RELEASED;
			}
			// do nothing, wait for the button to be released
			break;
	}
}
 80009e0:	e08e      	b.n	8000b00 <fsm_button_processing+0x3a0>
 80009e2:	bf00      	nop
 80009e4:	200000a0 	.word	0x200000a0
 80009e8:	20000010 	.word	0x20000010
 80009ec:	20000011 	.word	0x20000011
 80009f0:	2000000c 	.word	0x2000000c
 80009f4:	20000012 	.word	0x20000012
 80009f8:	20000013 	.word	0x20000013
 80009fc:	20000000 	.word	0x20000000
 8000a00:	20000004 	.word	0x20000004
 8000a04:	20000008 	.word	0x20000008
 8000a08:	20000014 	.word	0x20000014
			if (is_button_pressed(3)) {
 8000a0c:	2003      	movs	r0, #3
 8000a0e:	f000 f8f9 	bl	8000c04 <is_button_pressed>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d06e      	beq.n	8000af6 <fsm_button_processing+0x396>
				button_3_state = BUTTON_PRESSED;
 8000a18:	4b3a      	ldr	r3, [pc, #232]	; (8000b04 <fsm_button_processing+0x3a4>)
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	701a      	strb	r2, [r3, #0]
				if (status == ADJ_RED) {
 8000a1e:	4b3a      	ldr	r3, [pc, #232]	; (8000b08 <fsm_button_processing+0x3a8>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	2b07      	cmp	r3, #7
 8000a24:	d114      	bne.n	8000a50 <fsm_button_processing+0x2f0>
					status = AUTO_RED;
 8000a26:	4b38      	ldr	r3, [pc, #224]	; (8000b08 <fsm_button_processing+0x3a8>)
 8000a28:	2206      	movs	r2, #6
 8000a2a:	601a      	str	r2, [r3, #0]
					if (T_RED <= T_AMBER) T_RED = T_AMBER + 1;
 8000a2c:	4b37      	ldr	r3, [pc, #220]	; (8000b0c <fsm_button_processing+0x3ac>)
 8000a2e:	681a      	ldr	r2, [r3, #0]
 8000a30:	4b37      	ldr	r3, [pc, #220]	; (8000b10 <fsm_button_processing+0x3b0>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	429a      	cmp	r2, r3
 8000a36:	dc04      	bgt.n	8000a42 <fsm_button_processing+0x2e2>
 8000a38:	4b35      	ldr	r3, [pc, #212]	; (8000b10 <fsm_button_processing+0x3b0>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	3301      	adds	r3, #1
 8000a3e:	4a33      	ldr	r2, [pc, #204]	; (8000b0c <fsm_button_processing+0x3ac>)
 8000a40:	6013      	str	r3, [r2, #0]
					T_GREEN = T_RED - T_AMBER;
 8000a42:	4b32      	ldr	r3, [pc, #200]	; (8000b0c <fsm_button_processing+0x3ac>)
 8000a44:	681a      	ldr	r2, [r3, #0]
 8000a46:	4b32      	ldr	r3, [pc, #200]	; (8000b10 <fsm_button_processing+0x3b0>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	1ad3      	subs	r3, r2, r3
 8000a4c:	4a31      	ldr	r2, [pc, #196]	; (8000b14 <fsm_button_processing+0x3b4>)
 8000a4e:	6013      	str	r3, [r2, #0]
				if (status == ADJ_AMBER) {
 8000a50:	4b2d      	ldr	r3, [pc, #180]	; (8000b08 <fsm_button_processing+0x3a8>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	2b0a      	cmp	r3, #10
 8000a56:	d114      	bne.n	8000a82 <fsm_button_processing+0x322>
					status = AUTO_AMBER;
 8000a58:	4b2b      	ldr	r3, [pc, #172]	; (8000b08 <fsm_button_processing+0x3a8>)
 8000a5a:	2209      	movs	r2, #9
 8000a5c:	601a      	str	r2, [r3, #0]
					if (T_RED <= T_AMBER) T_RED = T_AMBER + 1;
 8000a5e:	4b2b      	ldr	r3, [pc, #172]	; (8000b0c <fsm_button_processing+0x3ac>)
 8000a60:	681a      	ldr	r2, [r3, #0]
 8000a62:	4b2b      	ldr	r3, [pc, #172]	; (8000b10 <fsm_button_processing+0x3b0>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	429a      	cmp	r2, r3
 8000a68:	dc04      	bgt.n	8000a74 <fsm_button_processing+0x314>
 8000a6a:	4b29      	ldr	r3, [pc, #164]	; (8000b10 <fsm_button_processing+0x3b0>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	3301      	adds	r3, #1
 8000a70:	4a26      	ldr	r2, [pc, #152]	; (8000b0c <fsm_button_processing+0x3ac>)
 8000a72:	6013      	str	r3, [r2, #0]
					T_GREEN = T_RED - T_AMBER;
 8000a74:	4b25      	ldr	r3, [pc, #148]	; (8000b0c <fsm_button_processing+0x3ac>)
 8000a76:	681a      	ldr	r2, [r3, #0]
 8000a78:	4b25      	ldr	r3, [pc, #148]	; (8000b10 <fsm_button_processing+0x3b0>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	1ad3      	subs	r3, r2, r3
 8000a7e:	4a25      	ldr	r2, [pc, #148]	; (8000b14 <fsm_button_processing+0x3b4>)
 8000a80:	6013      	str	r3, [r2, #0]
				if (status == ADJ_GREEN) {
 8000a82:	4b21      	ldr	r3, [pc, #132]	; (8000b08 <fsm_button_processing+0x3a8>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	2b0d      	cmp	r3, #13
 8000a88:	d135      	bne.n	8000af6 <fsm_button_processing+0x396>
					status = AUTO_GREEN;
 8000a8a:	4b1f      	ldr	r3, [pc, #124]	; (8000b08 <fsm_button_processing+0x3a8>)
 8000a8c:	220c      	movs	r2, #12
 8000a8e:	601a      	str	r2, [r3, #0]
					if (T_AMBER + T_GREEN >= 99) {
 8000a90:	4b1f      	ldr	r3, [pc, #124]	; (8000b10 <fsm_button_processing+0x3b0>)
 8000a92:	681a      	ldr	r2, [r3, #0]
 8000a94:	4b1f      	ldr	r3, [pc, #124]	; (8000b14 <fsm_button_processing+0x3b4>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4413      	add	r3, r2
 8000a9a:	2b62      	cmp	r3, #98	; 0x62
 8000a9c:	dd05      	ble.n	8000aaa <fsm_button_processing+0x34a>
						T_AMBER = 4;
 8000a9e:	4b1c      	ldr	r3, [pc, #112]	; (8000b10 <fsm_button_processing+0x3b0>)
 8000aa0:	2204      	movs	r2, #4
 8000aa2:	601a      	str	r2, [r3, #0]
						T_GREEN = 95;
 8000aa4:	4b1b      	ldr	r3, [pc, #108]	; (8000b14 <fsm_button_processing+0x3b4>)
 8000aa6:	225f      	movs	r2, #95	; 0x5f
 8000aa8:	601a      	str	r2, [r3, #0]
					T_RED = T_AMBER + T_GREEN;
 8000aaa:	4b19      	ldr	r3, [pc, #100]	; (8000b10 <fsm_button_processing+0x3b0>)
 8000aac:	681a      	ldr	r2, [r3, #0]
 8000aae:	4b19      	ldr	r3, [pc, #100]	; (8000b14 <fsm_button_processing+0x3b4>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	4413      	add	r3, r2
 8000ab4:	4a15      	ldr	r2, [pc, #84]	; (8000b0c <fsm_button_processing+0x3ac>)
 8000ab6:	6013      	str	r3, [r2, #0]
			break;
 8000ab8:	e01d      	b.n	8000af6 <fsm_button_processing+0x396>
			if (!is_button_pressed(3)) {
 8000aba:	2003      	movs	r0, #3
 8000abc:	f000 f8a2 	bl	8000c04 <is_button_pressed>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d103      	bne.n	8000ace <fsm_button_processing+0x36e>
				button_3_state = BUTTON_RELEASED;
 8000ac6:	4b0f      	ldr	r3, [pc, #60]	; (8000b04 <fsm_button_processing+0x3a4>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	701a      	strb	r2, [r3, #0]
			break;
 8000acc:	e015      	b.n	8000afa <fsm_button_processing+0x39a>
				if (is_button_pressed_1s(3)) {
 8000ace:	2003      	movs	r0, #3
 8000ad0:	f000 f8b2 	bl	8000c38 <is_button_pressed_1s>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d00f      	beq.n	8000afa <fsm_button_processing+0x39a>
					button_3_state = BUTTON_PRESSED_MORE_THAN_1_SECOND;
 8000ada:	4b0a      	ldr	r3, [pc, #40]	; (8000b04 <fsm_button_processing+0x3a4>)
 8000adc:	2202      	movs	r2, #2
 8000ade:	701a      	strb	r2, [r3, #0]
			break;
 8000ae0:	e00b      	b.n	8000afa <fsm_button_processing+0x39a>
			if (!is_button_pressed(3)) {
 8000ae2:	2003      	movs	r0, #3
 8000ae4:	f000 f88e 	bl	8000c04 <is_button_pressed>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d107      	bne.n	8000afe <fsm_button_processing+0x39e>
				button_3_state = BUTTON_RELEASED;
 8000aee:	4b05      	ldr	r3, [pc, #20]	; (8000b04 <fsm_button_processing+0x3a4>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	701a      	strb	r2, [r3, #0]
			break;
 8000af4:	e003      	b.n	8000afe <fsm_button_processing+0x39e>
			break;
 8000af6:	bf00      	nop
 8000af8:	e002      	b.n	8000b00 <fsm_button_processing+0x3a0>
			break;
 8000afa:	bf00      	nop
 8000afc:	e000      	b.n	8000b00 <fsm_button_processing+0x3a0>
			break;
 8000afe:	bf00      	nop
}
 8000b00:	bf00      	nop
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	20000014 	.word	0x20000014
 8000b08:	2000000c 	.word	0x2000000c
 8000b0c:	20000000 	.word	0x20000000
 8000b10:	20000004 	.word	0x20000004
 8000b14:	20000008 	.word	0x20000008

08000b18 <button_reading>:
static uint16_t counterForButtonPress1s[N0_OF_BUTTONS];

static GPIO_TypeDef* button_ports[N0_OF_BUTTONS] = {A0_PedButton_GPIO_Port, A1_Button1_GPIO_Port, A2_Button2_GPIO_Port, A3_Button3_GPIO_Port};
static uint16_t button_pins[N0_OF_BUTTONS] = {A0_PedButton_Pin, A1_Button1_Pin, A2_Button2_Pin, A3_Button3_Pin};

void button_reading(void) {
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
	for (int i = 0; i < N0_OF_BUTTONS; i++) {
 8000b1e:	2300      	movs	r3, #0
 8000b20:	607b      	str	r3, [r7, #4]
 8000b22:	e058      	b.n	8000bd6 <button_reading+0xbe>
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 8000b24:	4a30      	ldr	r2, [pc, #192]	; (8000be8 <button_reading+0xd0>)
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	4413      	add	r3, r2
 8000b2a:	7819      	ldrb	r1, [r3, #0]
 8000b2c:	4a2f      	ldr	r2, [pc, #188]	; (8000bec <button_reading+0xd4>)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	4413      	add	r3, r2
 8000b32:	460a      	mov	r2, r1
 8000b34:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(button_ports[i], button_pins[i]);
 8000b36:	4a2e      	ldr	r2, [pc, #184]	; (8000bf0 <button_reading+0xd8>)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000b3e:	492d      	ldr	r1, [pc, #180]	; (8000bf4 <button_reading+0xdc>)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000b46:	4619      	mov	r1, r3
 8000b48:	4610      	mov	r0, r2
 8000b4a:	f000 fe2b 	bl	80017a4 <HAL_GPIO_ReadPin>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	4619      	mov	r1, r3
 8000b52:	4a25      	ldr	r2, [pc, #148]	; (8000be8 <button_reading+0xd0>)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	4413      	add	r3, r2
 8000b58:	460a      	mov	r2, r1
 8000b5a:	701a      	strb	r2, [r3, #0]

		if (debounceButtonBuffer1[i] == debounceButtonBuffer2[i])
 8000b5c:	4a22      	ldr	r2, [pc, #136]	; (8000be8 <button_reading+0xd0>)
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	4413      	add	r3, r2
 8000b62:	781a      	ldrb	r2, [r3, #0]
 8000b64:	4921      	ldr	r1, [pc, #132]	; (8000bec <button_reading+0xd4>)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	440b      	add	r3, r1
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	429a      	cmp	r2, r3
 8000b6e:	d108      	bne.n	8000b82 <button_reading+0x6a>
			buttonBuffer[i] = debounceButtonBuffer1[i];
 8000b70:	4a1d      	ldr	r2, [pc, #116]	; (8000be8 <button_reading+0xd0>)
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	4413      	add	r3, r2
 8000b76:	7819      	ldrb	r1, [r3, #0]
 8000b78:	4a1f      	ldr	r2, [pc, #124]	; (8000bf8 <button_reading+0xe0>)
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	4413      	add	r3, r2
 8000b7e:	460a      	mov	r2, r1
 8000b80:	701a      	strb	r2, [r3, #0]

		if (buttonBuffer[i] == BUTTON_IS_PRESSED) {
 8000b82:	4a1d      	ldr	r2, [pc, #116]	; (8000bf8 <button_reading+0xe0>)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	4413      	add	r3, r2
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d116      	bne.n	8000bbc <button_reading+0xa4>
			//if a button is pressed, we start counting
			if (counterForButtonPress1s[i] < DURATION_FOR_AUTO_INCREASING) {
 8000b8e:	4a1b      	ldr	r2, [pc, #108]	; (8000bfc <button_reading+0xe4>)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b96:	2b63      	cmp	r3, #99	; 0x63
 8000b98:	d80a      	bhi.n	8000bb0 <button_reading+0x98>
				counterForButtonPress1s[i]++;
 8000b9a:	4a18      	ldr	r2, [pc, #96]	; (8000bfc <button_reading+0xe4>)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ba2:	3301      	adds	r3, #1
 8000ba4:	b299      	uxth	r1, r3
 8000ba6:	4a15      	ldr	r2, [pc, #84]	; (8000bfc <button_reading+0xe4>)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000bae:	e00f      	b.n	8000bd0 <button_reading+0xb8>
			} else {
				//the flag is turned on when 1 second has passed
				//since the button is pressed.
				flagForButtonPress1s[i] = 1;
 8000bb0:	4a13      	ldr	r2, [pc, #76]	; (8000c00 <button_reading+0xe8>)
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	4413      	add	r3, r2
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	701a      	strb	r2, [r3, #0]
 8000bba:	e009      	b.n	8000bd0 <button_reading+0xb8>
			}
		} else {
			counterForButtonPress1s[i] = 0;
 8000bbc:	4a0f      	ldr	r2, [pc, #60]	; (8000bfc <button_reading+0xe4>)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			flagForButtonPress1s[i] = 0;
 8000bc6:	4a0e      	ldr	r2, [pc, #56]	; (8000c00 <button_reading+0xe8>)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	4413      	add	r3, r2
 8000bcc:	2200      	movs	r2, #0
 8000bce:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < N0_OF_BUTTONS; i++) {
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	3301      	adds	r3, #1
 8000bd4:	607b      	str	r3, [r7, #4]
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	2b03      	cmp	r3, #3
 8000bda:	dda3      	ble.n	8000b24 <button_reading+0xc>
		}
	}
}
 8000bdc:	bf00      	nop
 8000bde:	bf00      	nop
 8000be0:	3708      	adds	r7, #8
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	20000064 	.word	0x20000064
 8000bec:	20000068 	.word	0x20000068
 8000bf0:	20000018 	.word	0x20000018
 8000bf4:	20000028 	.word	0x20000028
 8000bf8:	20000060 	.word	0x20000060
 8000bfc:	20000070 	.word	0x20000070
 8000c00:	2000006c 	.word	0x2000006c

08000c04 <is_button_pressed>:

unsigned char is_button_pressed(uint8_t index){
 8000c04:	b480      	push	{r7}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	71fb      	strb	r3, [r7, #7]
	if (index >= N0_OF_BUTTONS) return 0;
 8000c0e:	79fb      	ldrb	r3, [r7, #7]
 8000c10:	2b03      	cmp	r3, #3
 8000c12:	d901      	bls.n	8000c18 <is_button_pressed+0x14>
 8000c14:	2300      	movs	r3, #0
 8000c16:	e007      	b.n	8000c28 <is_button_pressed+0x24>
	return (buttonBuffer[index] == BUTTON_IS_PRESSED);
 8000c18:	79fb      	ldrb	r3, [r7, #7]
 8000c1a:	4a06      	ldr	r2, [pc, #24]	; (8000c34 <is_button_pressed+0x30>)
 8000c1c:	5cd3      	ldrb	r3, [r2, r3]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	bf0c      	ite	eq
 8000c22:	2301      	moveq	r3, #1
 8000c24:	2300      	movne	r3, #0
 8000c26:	b2db      	uxtb	r3, r3
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	370c      	adds	r7, #12
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bc80      	pop	{r7}
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	20000060 	.word	0x20000060

08000c38 <is_button_pressed_1s>:

unsigned char is_button_pressed_1s(unsigned char index){
 8000c38:	b480      	push	{r7}
 8000c3a:	b083      	sub	sp, #12
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	4603      	mov	r3, r0
 8000c40:	71fb      	strb	r3, [r7, #7]
	if (index >= N0_OF_BUTTONS) return 0;
 8000c42:	79fb      	ldrb	r3, [r7, #7]
 8000c44:	2b03      	cmp	r3, #3
 8000c46:	d901      	bls.n	8000c4c <is_button_pressed_1s+0x14>
 8000c48:	2300      	movs	r3, #0
 8000c4a:	e007      	b.n	8000c5c <is_button_pressed_1s+0x24>
	return (flagForButtonPress1s[index] == 1);
 8000c4c:	79fb      	ldrb	r3, [r7, #7]
 8000c4e:	4a06      	ldr	r2, [pc, #24]	; (8000c68 <is_button_pressed_1s+0x30>)
 8000c50:	5cd3      	ldrb	r3, [r2, r3]
 8000c52:	2b01      	cmp	r3, #1
 8000c54:	bf0c      	ite	eq
 8000c56:	2301      	moveq	r3, #1
 8000c58:	2300      	movne	r3, #0
 8000c5a:	b2db      	uxtb	r3, r3
}
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	370c      	adds	r7, #12
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bc80      	pop	{r7}
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	2000006c 	.word	0x2000006c

08000c6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c70:	f000 faa4 	bl	80011bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c74:	f000 f814 	bl	8000ca0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c78:	f000 f8a0 	bl	8000dbc <MX_GPIO_Init>
  MX_TIM2_Init();
 8000c7c:	f000 f852 	bl	8000d24 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000c80:	4806      	ldr	r0, [pc, #24]	; (8000c9c <main+0x30>)
 8000c82:	f001 f9eb 	bl	800205c <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  fsm_automatic();
 8000c86:	f7ff fa61 	bl	800014c <fsm_automatic>
	  fsm_red_manual();
 8000c8a:	f7ff fae7 	bl	800025c <fsm_red_manual>
	  fsm_amber_manual();
 8000c8e:	f7ff fb1d 	bl	80002cc <fsm_amber_manual>
	  fsm_green_manual();
 8000c92:	f7ff fb53 	bl	800033c <fsm_green_manual>
	  fsm_button_processing();
 8000c96:	f7ff fd63 	bl	8000760 <fsm_button_processing>
	  fsm_automatic();
 8000c9a:	e7f4      	b.n	8000c86 <main+0x1a>
 8000c9c:	200000a4 	.word	0x200000a4

08000ca0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b090      	sub	sp, #64	; 0x40
 8000ca4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ca6:	f107 0318 	add.w	r3, r7, #24
 8000caa:	2228      	movs	r2, #40	; 0x28
 8000cac:	2100      	movs	r1, #0
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f001 fda6 	bl	8002800 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cb4:	1d3b      	adds	r3, r7, #4
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	601a      	str	r2, [r3, #0]
 8000cba:	605a      	str	r2, [r3, #4]
 8000cbc:	609a      	str	r2, [r3, #8]
 8000cbe:	60da      	str	r2, [r3, #12]
 8000cc0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cc2:	2302      	movs	r3, #2
 8000cc4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cca:	2310      	movs	r3, #16
 8000ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cce:	2302      	movs	r3, #2
 8000cd0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000cd6:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000cda:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cdc:	f107 0318 	add.w	r3, r7, #24
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f000 fd8f 	bl	8001804 <HAL_RCC_OscConfig>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000cec:	f000 f8e0 	bl	8000eb0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cf0:	230f      	movs	r3, #15
 8000cf2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cf4:	2302      	movs	r3, #2
 8000cf6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cfc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d00:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d02:	2300      	movs	r3, #0
 8000d04:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d06:	1d3b      	adds	r3, r7, #4
 8000d08:	2102      	movs	r1, #2
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f000 fffa 	bl	8001d04 <HAL_RCC_ClockConfig>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000d16:	f000 f8cb 	bl	8000eb0 <Error_Handler>
  }
}
 8000d1a:	bf00      	nop
 8000d1c:	3740      	adds	r7, #64	; 0x40
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
	...

08000d24 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b086      	sub	sp, #24
 8000d28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d2a:	f107 0308 	add.w	r3, r7, #8
 8000d2e:	2200      	movs	r2, #0
 8000d30:	601a      	str	r2, [r3, #0]
 8000d32:	605a      	str	r2, [r3, #4]
 8000d34:	609a      	str	r2, [r3, #8]
 8000d36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d38:	463b      	mov	r3, r7
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	601a      	str	r2, [r3, #0]
 8000d3e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d40:	4b1d      	ldr	r3, [pc, #116]	; (8000db8 <MX_TIM2_Init+0x94>)
 8000d42:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d46:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63999;
 8000d48:	4b1b      	ldr	r3, [pc, #108]	; (8000db8 <MX_TIM2_Init+0x94>)
 8000d4a:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8000d4e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d50:	4b19      	ldr	r3, [pc, #100]	; (8000db8 <MX_TIM2_Init+0x94>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000d56:	4b18      	ldr	r3, [pc, #96]	; (8000db8 <MX_TIM2_Init+0x94>)
 8000d58:	2209      	movs	r2, #9
 8000d5a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d5c:	4b16      	ldr	r3, [pc, #88]	; (8000db8 <MX_TIM2_Init+0x94>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d62:	4b15      	ldr	r3, [pc, #84]	; (8000db8 <MX_TIM2_Init+0x94>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d68:	4813      	ldr	r0, [pc, #76]	; (8000db8 <MX_TIM2_Init+0x94>)
 8000d6a:	f001 f927 	bl	8001fbc <HAL_TIM_Base_Init>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000d74:	f000 f89c 	bl	8000eb0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d7c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d7e:	f107 0308 	add.w	r3, r7, #8
 8000d82:	4619      	mov	r1, r3
 8000d84:	480c      	ldr	r0, [pc, #48]	; (8000db8 <MX_TIM2_Init+0x94>)
 8000d86:	f001 fac3 	bl	8002310 <HAL_TIM_ConfigClockSource>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000d90:	f000 f88e 	bl	8000eb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d94:	2300      	movs	r3, #0
 8000d96:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d9c:	463b      	mov	r3, r7
 8000d9e:	4619      	mov	r1, r3
 8000da0:	4805      	ldr	r0, [pc, #20]	; (8000db8 <MX_TIM2_Init+0x94>)
 8000da2:	f001 fc99 	bl	80026d8 <HAL_TIMEx_MasterConfigSynchronization>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000dac:	f000 f880 	bl	8000eb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000db0:	bf00      	nop
 8000db2:	3718      	adds	r7, #24
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	200000a4 	.word	0x200000a4

08000dbc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b086      	sub	sp, #24
 8000dc0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc2:	f107 0308 	add.w	r3, r7, #8
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	601a      	str	r2, [r3, #0]
 8000dca:	605a      	str	r2, [r3, #4]
 8000dcc:	609a      	str	r2, [r3, #8]
 8000dce:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd0:	4b2e      	ldr	r3, [pc, #184]	; (8000e8c <MX_GPIO_Init+0xd0>)
 8000dd2:	699b      	ldr	r3, [r3, #24]
 8000dd4:	4a2d      	ldr	r2, [pc, #180]	; (8000e8c <MX_GPIO_Init+0xd0>)
 8000dd6:	f043 0304 	orr.w	r3, r3, #4
 8000dda:	6193      	str	r3, [r2, #24]
 8000ddc:	4b2b      	ldr	r3, [pc, #172]	; (8000e8c <MX_GPIO_Init+0xd0>)
 8000dde:	699b      	ldr	r3, [r3, #24]
 8000de0:	f003 0304 	and.w	r3, r3, #4
 8000de4:	607b      	str	r3, [r7, #4]
 8000de6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000de8:	4b28      	ldr	r3, [pc, #160]	; (8000e8c <MX_GPIO_Init+0xd0>)
 8000dea:	699b      	ldr	r3, [r3, #24]
 8000dec:	4a27      	ldr	r2, [pc, #156]	; (8000e8c <MX_GPIO_Init+0xd0>)
 8000dee:	f043 0308 	orr.w	r3, r3, #8
 8000df2:	6193      	str	r3, [r2, #24]
 8000df4:	4b25      	ldr	r3, [pc, #148]	; (8000e8c <MX_GPIO_Init+0xd0>)
 8000df6:	699b      	ldr	r3, [r3, #24]
 8000df8:	f003 0308 	and.w	r3, r3, #8
 8000dfc:	603b      	str	r3, [r7, #0]
 8000dfe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D13_PedBuzzer_Pin|D12_PedBuzzer_Pin|D7_PedLED_Pin|D2_LED1_Pin, GPIO_PIN_RESET);
 8000e00:	2200      	movs	r2, #0
 8000e02:	f44f 61ac 	mov.w	r1, #1376	; 0x560
 8000e06:	4822      	ldr	r0, [pc, #136]	; (8000e90 <MX_GPIO_Init+0xd4>)
 8000e08:	f000 fce3 	bl	80017d2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_PedLED_Pin|D3_LED1_Pin|D5_LED2_Pin|D4_LED2_Pin, GPIO_PIN_RESET);
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8000e12:	4820      	ldr	r0, [pc, #128]	; (8000e94 <MX_GPIO_Init+0xd8>)
 8000e14:	f000 fcdd 	bl	80017d2 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_PedButton_Pin A1_Button1_Pin A2_Button2_Pin */
  GPIO_InitStruct.Pin = A0_PedButton_Pin|A1_Button1_Pin|A2_Button2_Pin;
 8000e18:	2313      	movs	r3, #19
 8000e1a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e20:	2300      	movs	r3, #0
 8000e22:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e24:	f107 0308 	add.w	r3, r7, #8
 8000e28:	4619      	mov	r1, r3
 8000e2a:	4819      	ldr	r0, [pc, #100]	; (8000e90 <MX_GPIO_Init+0xd4>)
 8000e2c:	f000 fb36 	bl	800149c <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_PedBuzzer_Pin D12_PedBuzzer_Pin D7_PedLED_Pin D2_LED1_Pin */
  GPIO_InitStruct.Pin = D13_PedBuzzer_Pin|D12_PedBuzzer_Pin|D7_PedLED_Pin|D2_LED1_Pin;
 8000e30:	f44f 63ac 	mov.w	r3, #1376	; 0x560
 8000e34:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e36:	2301      	movs	r3, #1
 8000e38:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3e:	2302      	movs	r3, #2
 8000e40:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e42:	f107 0308 	add.w	r3, r7, #8
 8000e46:	4619      	mov	r1, r3
 8000e48:	4811      	ldr	r0, [pc, #68]	; (8000e90 <MX_GPIO_Init+0xd4>)
 8000e4a:	f000 fb27 	bl	800149c <HAL_GPIO_Init>

  /*Configure GPIO pin : A3_Button3_Pin */
  GPIO_InitStruct.Pin = A3_Button3_Pin;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e52:	2300      	movs	r3, #0
 8000e54:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e56:	2300      	movs	r3, #0
 8000e58:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(A3_Button3_GPIO_Port, &GPIO_InitStruct);
 8000e5a:	f107 0308 	add.w	r3, r7, #8
 8000e5e:	4619      	mov	r1, r3
 8000e60:	480c      	ldr	r0, [pc, #48]	; (8000e94 <MX_GPIO_Init+0xd8>)
 8000e62:	f000 fb1b 	bl	800149c <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_PedLED_Pin D3_LED1_Pin D5_LED2_Pin D4_LED2_Pin */
  GPIO_InitStruct.Pin = D6_PedLED_Pin|D3_LED1_Pin|D5_LED2_Pin|D4_LED2_Pin;
 8000e66:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8000e6a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e70:	2300      	movs	r3, #0
 8000e72:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e74:	2302      	movs	r3, #2
 8000e76:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e78:	f107 0308 	add.w	r3, r7, #8
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	4805      	ldr	r0, [pc, #20]	; (8000e94 <MX_GPIO_Init+0xd8>)
 8000e80:	f000 fb0c 	bl	800149c <HAL_GPIO_Init>

}
 8000e84:	bf00      	nop
 8000e86:	3718      	adds	r7, #24
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	40021000 	.word	0x40021000
 8000e90:	40010800 	.word	0x40010800
 8000e94:	40010c00 	.word	0x40010c00

08000e98 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim2) {
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
	timer_run();
 8000ea0:	f000 f8e8 	bl	8001074 <timer_run>
	button_reading();
 8000ea4:	f7ff fe38 	bl	8000b18 <button_reading>
}
 8000ea8:	bf00      	nop
 8000eaa:	3708      	adds	r7, #8
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}

08000eb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000eb4:	b672      	cpsid	i
}
 8000eb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000eb8:	e7fe      	b.n	8000eb8 <Error_Handler+0x8>
	...

08000ebc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b085      	sub	sp, #20
 8000ec0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ec2:	4b15      	ldr	r3, [pc, #84]	; (8000f18 <HAL_MspInit+0x5c>)
 8000ec4:	699b      	ldr	r3, [r3, #24]
 8000ec6:	4a14      	ldr	r2, [pc, #80]	; (8000f18 <HAL_MspInit+0x5c>)
 8000ec8:	f043 0301 	orr.w	r3, r3, #1
 8000ecc:	6193      	str	r3, [r2, #24]
 8000ece:	4b12      	ldr	r3, [pc, #72]	; (8000f18 <HAL_MspInit+0x5c>)
 8000ed0:	699b      	ldr	r3, [r3, #24]
 8000ed2:	f003 0301 	and.w	r3, r3, #1
 8000ed6:	60bb      	str	r3, [r7, #8]
 8000ed8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eda:	4b0f      	ldr	r3, [pc, #60]	; (8000f18 <HAL_MspInit+0x5c>)
 8000edc:	69db      	ldr	r3, [r3, #28]
 8000ede:	4a0e      	ldr	r2, [pc, #56]	; (8000f18 <HAL_MspInit+0x5c>)
 8000ee0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ee4:	61d3      	str	r3, [r2, #28]
 8000ee6:	4b0c      	ldr	r3, [pc, #48]	; (8000f18 <HAL_MspInit+0x5c>)
 8000ee8:	69db      	ldr	r3, [r3, #28]
 8000eea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eee:	607b      	str	r3, [r7, #4]
 8000ef0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000ef2:	4b0a      	ldr	r3, [pc, #40]	; (8000f1c <HAL_MspInit+0x60>)
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	60fb      	str	r3, [r7, #12]
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000efe:	60fb      	str	r3, [r7, #12]
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f06:	60fb      	str	r3, [r7, #12]
 8000f08:	4a04      	ldr	r2, [pc, #16]	; (8000f1c <HAL_MspInit+0x60>)
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f0e:	bf00      	nop
 8000f10:	3714      	adds	r7, #20
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bc80      	pop	{r7}
 8000f16:	4770      	bx	lr
 8000f18:	40021000 	.word	0x40021000
 8000f1c:	40010000 	.word	0x40010000

08000f20 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b084      	sub	sp, #16
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f30:	d113      	bne.n	8000f5a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f32:	4b0c      	ldr	r3, [pc, #48]	; (8000f64 <HAL_TIM_Base_MspInit+0x44>)
 8000f34:	69db      	ldr	r3, [r3, #28]
 8000f36:	4a0b      	ldr	r2, [pc, #44]	; (8000f64 <HAL_TIM_Base_MspInit+0x44>)
 8000f38:	f043 0301 	orr.w	r3, r3, #1
 8000f3c:	61d3      	str	r3, [r2, #28]
 8000f3e:	4b09      	ldr	r3, [pc, #36]	; (8000f64 <HAL_TIM_Base_MspInit+0x44>)
 8000f40:	69db      	ldr	r3, [r3, #28]
 8000f42:	f003 0301 	and.w	r3, r3, #1
 8000f46:	60fb      	str	r3, [r7, #12]
 8000f48:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	201c      	movs	r0, #28
 8000f50:	f000 fa6d 	bl	800142e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f54:	201c      	movs	r0, #28
 8000f56:	f000 fa86 	bl	8001466 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000f5a:	bf00      	nop
 8000f5c:	3710      	adds	r7, #16
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	40021000 	.word	0x40021000

08000f68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f6c:	e7fe      	b.n	8000f6c <NMI_Handler+0x4>

08000f6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f6e:	b480      	push	{r7}
 8000f70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f72:	e7fe      	b.n	8000f72 <HardFault_Handler+0x4>

08000f74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f78:	e7fe      	b.n	8000f78 <MemManage_Handler+0x4>

08000f7a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f7a:	b480      	push	{r7}
 8000f7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f7e:	e7fe      	b.n	8000f7e <BusFault_Handler+0x4>

08000f80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f84:	e7fe      	b.n	8000f84 <UsageFault_Handler+0x4>

08000f86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f86:	b480      	push	{r7}
 8000f88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f8a:	bf00      	nop
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bc80      	pop	{r7}
 8000f90:	4770      	bx	lr

08000f92 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f92:	b480      	push	{r7}
 8000f94:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f96:	bf00      	nop
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bc80      	pop	{r7}
 8000f9c:	4770      	bx	lr

08000f9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f9e:	b480      	push	{r7}
 8000fa0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fa2:	bf00      	nop
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bc80      	pop	{r7}
 8000fa8:	4770      	bx	lr

08000faa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000faa:	b580      	push	{r7, lr}
 8000fac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fae:	f000 f94b 	bl	8001248 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fb2:	bf00      	nop
 8000fb4:	bd80      	pop	{r7, pc}
	...

08000fb8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000fbc:	4802      	ldr	r0, [pc, #8]	; (8000fc8 <TIM2_IRQHandler+0x10>)
 8000fbe:	f001 f89f 	bl	8002100 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000fc2:	bf00      	nop
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	200000a4 	.word	0x200000a4

08000fcc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fd0:	bf00      	nop
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bc80      	pop	{r7}
 8000fd6:	4770      	bx	lr

08000fd8 <setTimer0>:

int TIMER_CYCLE = 10;
int timer0_counter = 0, timer1_counter = 0, timer2_counter = 0, timer3_counter = 0, timer4_counter, timer5_counter = 0;
int timer0_flag = 0, timer1_flag = 0, timer2_flag = 0, timer3_flag = 0, timer4_flag = 0, timer5_flag = 0;

void setTimer0(int duration) {
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
	timer0_counter = duration/TIMER_CYCLE;
 8000fe0:	4b07      	ldr	r3, [pc, #28]	; (8001000 <setTimer0+0x28>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	687a      	ldr	r2, [r7, #4]
 8000fe6:	fb92 f3f3 	sdiv	r3, r2, r3
 8000fea:	4a06      	ldr	r2, [pc, #24]	; (8001004 <setTimer0+0x2c>)
 8000fec:	6013      	str	r3, [r2, #0]
	timer0_flag = 0;
 8000fee:	4b06      	ldr	r3, [pc, #24]	; (8001008 <setTimer0+0x30>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]
}
 8000ff4:	bf00      	nop
 8000ff6:	370c      	adds	r7, #12
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bc80      	pop	{r7}
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	20000034 	.word	0x20000034
 8001004:	20000078 	.word	0x20000078
 8001008:	2000008c 	.word	0x2000008c

0800100c <setTimer1>:

void setTimer1(int duration) {
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
	timer1_counter = duration/TIMER_CYCLE;
 8001014:	4b07      	ldr	r3, [pc, #28]	; (8001034 <setTimer1+0x28>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	687a      	ldr	r2, [r7, #4]
 800101a:	fb92 f3f3 	sdiv	r3, r2, r3
 800101e:	4a06      	ldr	r2, [pc, #24]	; (8001038 <setTimer1+0x2c>)
 8001020:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8001022:	4b06      	ldr	r3, [pc, #24]	; (800103c <setTimer1+0x30>)
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]
}
 8001028:	bf00      	nop
 800102a:	370c      	adds	r7, #12
 800102c:	46bd      	mov	sp, r7
 800102e:	bc80      	pop	{r7}
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	20000034 	.word	0x20000034
 8001038:	2000007c 	.word	0x2000007c
 800103c:	20000090 	.word	0x20000090

08001040 <setTimer5>:
void setTimer4(int duration) {
	timer4_counter = duration/TIMER_CYCLE;
	timer4_flag = 0;
}

void setTimer5(int duration) {
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
	timer5_counter = duration/TIMER_CYCLE;
 8001048:	4b07      	ldr	r3, [pc, #28]	; (8001068 <setTimer5+0x28>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	687a      	ldr	r2, [r7, #4]
 800104e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001052:	4a06      	ldr	r2, [pc, #24]	; (800106c <setTimer5+0x2c>)
 8001054:	6013      	str	r3, [r2, #0]
	timer5_flag = 0;
 8001056:	4b06      	ldr	r3, [pc, #24]	; (8001070 <setTimer5+0x30>)
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
}
 800105c:	bf00      	nop
 800105e:	370c      	adds	r7, #12
 8001060:	46bd      	mov	sp, r7
 8001062:	bc80      	pop	{r7}
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	20000034 	.word	0x20000034
 800106c:	20000088 	.word	0x20000088
 8001070:	200000a0 	.word	0x200000a0

08001074 <timer_run>:
void timer_run() {
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
	if (timer0_counter > 0) {
 8001078:	4b31      	ldr	r3, [pc, #196]	; (8001140 <timer_run+0xcc>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	2b00      	cmp	r3, #0
 800107e:	dd0b      	ble.n	8001098 <timer_run+0x24>
		timer0_counter--;
 8001080:	4b2f      	ldr	r3, [pc, #188]	; (8001140 <timer_run+0xcc>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	3b01      	subs	r3, #1
 8001086:	4a2e      	ldr	r2, [pc, #184]	; (8001140 <timer_run+0xcc>)
 8001088:	6013      	str	r3, [r2, #0]
		if (timer0_counter == 0) timer0_flag = 1;
 800108a:	4b2d      	ldr	r3, [pc, #180]	; (8001140 <timer_run+0xcc>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d102      	bne.n	8001098 <timer_run+0x24>
 8001092:	4b2c      	ldr	r3, [pc, #176]	; (8001144 <timer_run+0xd0>)
 8001094:	2201      	movs	r2, #1
 8001096:	601a      	str	r2, [r3, #0]
	}
	if (timer1_counter > 0) {
 8001098:	4b2b      	ldr	r3, [pc, #172]	; (8001148 <timer_run+0xd4>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	2b00      	cmp	r3, #0
 800109e:	dd0b      	ble.n	80010b8 <timer_run+0x44>
		timer1_counter--;
 80010a0:	4b29      	ldr	r3, [pc, #164]	; (8001148 <timer_run+0xd4>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	3b01      	subs	r3, #1
 80010a6:	4a28      	ldr	r2, [pc, #160]	; (8001148 <timer_run+0xd4>)
 80010a8:	6013      	str	r3, [r2, #0]
		if (timer1_counter == 0) timer1_flag = 1;
 80010aa:	4b27      	ldr	r3, [pc, #156]	; (8001148 <timer_run+0xd4>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d102      	bne.n	80010b8 <timer_run+0x44>
 80010b2:	4b26      	ldr	r3, [pc, #152]	; (800114c <timer_run+0xd8>)
 80010b4:	2201      	movs	r2, #1
 80010b6:	601a      	str	r2, [r3, #0]
	}
	if (timer2_counter > 0) {
 80010b8:	4b25      	ldr	r3, [pc, #148]	; (8001150 <timer_run+0xdc>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	dd0b      	ble.n	80010d8 <timer_run+0x64>
		timer2_counter--;
 80010c0:	4b23      	ldr	r3, [pc, #140]	; (8001150 <timer_run+0xdc>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	3b01      	subs	r3, #1
 80010c6:	4a22      	ldr	r2, [pc, #136]	; (8001150 <timer_run+0xdc>)
 80010c8:	6013      	str	r3, [r2, #0]
		if (timer2_counter == 0) timer2_flag = 1;
 80010ca:	4b21      	ldr	r3, [pc, #132]	; (8001150 <timer_run+0xdc>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d102      	bne.n	80010d8 <timer_run+0x64>
 80010d2:	4b20      	ldr	r3, [pc, #128]	; (8001154 <timer_run+0xe0>)
 80010d4:	2201      	movs	r2, #1
 80010d6:	601a      	str	r2, [r3, #0]
	}
	if (timer3_counter > 0) {
 80010d8:	4b1f      	ldr	r3, [pc, #124]	; (8001158 <timer_run+0xe4>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	dd0b      	ble.n	80010f8 <timer_run+0x84>
		timer3_counter--;
 80010e0:	4b1d      	ldr	r3, [pc, #116]	; (8001158 <timer_run+0xe4>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	3b01      	subs	r3, #1
 80010e6:	4a1c      	ldr	r2, [pc, #112]	; (8001158 <timer_run+0xe4>)
 80010e8:	6013      	str	r3, [r2, #0]
		if (timer3_counter == 0) timer3_flag = 1;
 80010ea:	4b1b      	ldr	r3, [pc, #108]	; (8001158 <timer_run+0xe4>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d102      	bne.n	80010f8 <timer_run+0x84>
 80010f2:	4b1a      	ldr	r3, [pc, #104]	; (800115c <timer_run+0xe8>)
 80010f4:	2201      	movs	r2, #1
 80010f6:	601a      	str	r2, [r3, #0]
	}
	if (timer4_counter > 0) {
 80010f8:	4b19      	ldr	r3, [pc, #100]	; (8001160 <timer_run+0xec>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	dd0b      	ble.n	8001118 <timer_run+0xa4>
		timer4_counter--;
 8001100:	4b17      	ldr	r3, [pc, #92]	; (8001160 <timer_run+0xec>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	3b01      	subs	r3, #1
 8001106:	4a16      	ldr	r2, [pc, #88]	; (8001160 <timer_run+0xec>)
 8001108:	6013      	str	r3, [r2, #0]
		if (timer4_counter == 0) timer4_flag = 1;
 800110a:	4b15      	ldr	r3, [pc, #84]	; (8001160 <timer_run+0xec>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d102      	bne.n	8001118 <timer_run+0xa4>
 8001112:	4b14      	ldr	r3, [pc, #80]	; (8001164 <timer_run+0xf0>)
 8001114:	2201      	movs	r2, #1
 8001116:	601a      	str	r2, [r3, #0]
	}
	if (timer5_counter > 0) {
 8001118:	4b13      	ldr	r3, [pc, #76]	; (8001168 <timer_run+0xf4>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	2b00      	cmp	r3, #0
 800111e:	dd0b      	ble.n	8001138 <timer_run+0xc4>
		timer5_counter--;
 8001120:	4b11      	ldr	r3, [pc, #68]	; (8001168 <timer_run+0xf4>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	3b01      	subs	r3, #1
 8001126:	4a10      	ldr	r2, [pc, #64]	; (8001168 <timer_run+0xf4>)
 8001128:	6013      	str	r3, [r2, #0]
		if (timer5_counter == 0) timer5_flag = 1;
 800112a:	4b0f      	ldr	r3, [pc, #60]	; (8001168 <timer_run+0xf4>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d102      	bne.n	8001138 <timer_run+0xc4>
 8001132:	4b0e      	ldr	r3, [pc, #56]	; (800116c <timer_run+0xf8>)
 8001134:	2201      	movs	r2, #1
 8001136:	601a      	str	r2, [r3, #0]
	}
}
 8001138:	bf00      	nop
 800113a:	46bd      	mov	sp, r7
 800113c:	bc80      	pop	{r7}
 800113e:	4770      	bx	lr
 8001140:	20000078 	.word	0x20000078
 8001144:	2000008c 	.word	0x2000008c
 8001148:	2000007c 	.word	0x2000007c
 800114c:	20000090 	.word	0x20000090
 8001150:	20000080 	.word	0x20000080
 8001154:	20000094 	.word	0x20000094
 8001158:	20000084 	.word	0x20000084
 800115c:	20000098 	.word	0x20000098
 8001160:	200000ec 	.word	0x200000ec
 8001164:	2000009c 	.word	0x2000009c
 8001168:	20000088 	.word	0x20000088
 800116c:	200000a0 	.word	0x200000a0

08001170 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001170:	f7ff ff2c 	bl	8000fcc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001174:	480b      	ldr	r0, [pc, #44]	; (80011a4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001176:	490c      	ldr	r1, [pc, #48]	; (80011a8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001178:	4a0c      	ldr	r2, [pc, #48]	; (80011ac <LoopFillZerobss+0x16>)
  movs r3, #0
 800117a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800117c:	e002      	b.n	8001184 <LoopCopyDataInit>

0800117e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800117e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001180:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001182:	3304      	adds	r3, #4

08001184 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001184:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001186:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001188:	d3f9      	bcc.n	800117e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800118a:	4a09      	ldr	r2, [pc, #36]	; (80011b0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800118c:	4c09      	ldr	r4, [pc, #36]	; (80011b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800118e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001190:	e001      	b.n	8001196 <LoopFillZerobss>

08001192 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001192:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001194:	3204      	adds	r2, #4

08001196 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001196:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001198:	d3fb      	bcc.n	8001192 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800119a:	f001 fb0d 	bl	80027b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800119e:	f7ff fd65 	bl	8000c6c <main>
  bx lr
 80011a2:	4770      	bx	lr
  ldr r0, =_sdata
 80011a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011a8:	20000040 	.word	0x20000040
  ldr r2, =_sidata
 80011ac:	08002854 	.word	0x08002854
  ldr r2, =_sbss
 80011b0:	20000040 	.word	0x20000040
  ldr r4, =_ebss
 80011b4:	200000f4 	.word	0x200000f4

080011b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011b8:	e7fe      	b.n	80011b8 <ADC1_2_IRQHandler>
	...

080011bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011c0:	4b08      	ldr	r3, [pc, #32]	; (80011e4 <HAL_Init+0x28>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a07      	ldr	r2, [pc, #28]	; (80011e4 <HAL_Init+0x28>)
 80011c6:	f043 0310 	orr.w	r3, r3, #16
 80011ca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011cc:	2003      	movs	r0, #3
 80011ce:	f000 f923 	bl	8001418 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011d2:	200f      	movs	r0, #15
 80011d4:	f000 f808 	bl	80011e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011d8:	f7ff fe70 	bl	8000ebc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011dc:	2300      	movs	r3, #0
}
 80011de:	4618      	mov	r0, r3
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	40022000 	.word	0x40022000

080011e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011f0:	4b12      	ldr	r3, [pc, #72]	; (800123c <HAL_InitTick+0x54>)
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	4b12      	ldr	r3, [pc, #72]	; (8001240 <HAL_InitTick+0x58>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	4619      	mov	r1, r3
 80011fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001202:	fbb2 f3f3 	udiv	r3, r2, r3
 8001206:	4618      	mov	r0, r3
 8001208:	f000 f93b 	bl	8001482 <HAL_SYSTICK_Config>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001212:	2301      	movs	r3, #1
 8001214:	e00e      	b.n	8001234 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2b0f      	cmp	r3, #15
 800121a:	d80a      	bhi.n	8001232 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800121c:	2200      	movs	r2, #0
 800121e:	6879      	ldr	r1, [r7, #4]
 8001220:	f04f 30ff 	mov.w	r0, #4294967295
 8001224:	f000 f903 	bl	800142e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001228:	4a06      	ldr	r2, [pc, #24]	; (8001244 <HAL_InitTick+0x5c>)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800122e:	2300      	movs	r3, #0
 8001230:	e000      	b.n	8001234 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001232:	2301      	movs	r3, #1
}
 8001234:	4618      	mov	r0, r3
 8001236:	3708      	adds	r7, #8
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	20000030 	.word	0x20000030
 8001240:	2000003c 	.word	0x2000003c
 8001244:	20000038 	.word	0x20000038

08001248 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800124c:	4b05      	ldr	r3, [pc, #20]	; (8001264 <HAL_IncTick+0x1c>)
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	461a      	mov	r2, r3
 8001252:	4b05      	ldr	r3, [pc, #20]	; (8001268 <HAL_IncTick+0x20>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4413      	add	r3, r2
 8001258:	4a03      	ldr	r2, [pc, #12]	; (8001268 <HAL_IncTick+0x20>)
 800125a:	6013      	str	r3, [r2, #0]
}
 800125c:	bf00      	nop
 800125e:	46bd      	mov	sp, r7
 8001260:	bc80      	pop	{r7}
 8001262:	4770      	bx	lr
 8001264:	2000003c 	.word	0x2000003c
 8001268:	200000f0 	.word	0x200000f0

0800126c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  return uwTick;
 8001270:	4b02      	ldr	r3, [pc, #8]	; (800127c <HAL_GetTick+0x10>)
 8001272:	681b      	ldr	r3, [r3, #0]
}
 8001274:	4618      	mov	r0, r3
 8001276:	46bd      	mov	sp, r7
 8001278:	bc80      	pop	{r7}
 800127a:	4770      	bx	lr
 800127c:	200000f0 	.word	0x200000f0

08001280 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001280:	b480      	push	{r7}
 8001282:	b085      	sub	sp, #20
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	f003 0307 	and.w	r3, r3, #7
 800128e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001290:	4b0c      	ldr	r3, [pc, #48]	; (80012c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001292:	68db      	ldr	r3, [r3, #12]
 8001294:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001296:	68ba      	ldr	r2, [r7, #8]
 8001298:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800129c:	4013      	ands	r3, r2
 800129e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012b2:	4a04      	ldr	r2, [pc, #16]	; (80012c4 <__NVIC_SetPriorityGrouping+0x44>)
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	60d3      	str	r3, [r2, #12]
}
 80012b8:	bf00      	nop
 80012ba:	3714      	adds	r7, #20
 80012bc:	46bd      	mov	sp, r7
 80012be:	bc80      	pop	{r7}
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	e000ed00 	.word	0xe000ed00

080012c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012cc:	4b04      	ldr	r3, [pc, #16]	; (80012e0 <__NVIC_GetPriorityGrouping+0x18>)
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	0a1b      	lsrs	r3, r3, #8
 80012d2:	f003 0307 	and.w	r3, r3, #7
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	46bd      	mov	sp, r7
 80012da:	bc80      	pop	{r7}
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	e000ed00 	.word	0xe000ed00

080012e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	4603      	mov	r3, r0
 80012ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	db0b      	blt.n	800130e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012f6:	79fb      	ldrb	r3, [r7, #7]
 80012f8:	f003 021f 	and.w	r2, r3, #31
 80012fc:	4906      	ldr	r1, [pc, #24]	; (8001318 <__NVIC_EnableIRQ+0x34>)
 80012fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001302:	095b      	lsrs	r3, r3, #5
 8001304:	2001      	movs	r0, #1
 8001306:	fa00 f202 	lsl.w	r2, r0, r2
 800130a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800130e:	bf00      	nop
 8001310:	370c      	adds	r7, #12
 8001312:	46bd      	mov	sp, r7
 8001314:	bc80      	pop	{r7}
 8001316:	4770      	bx	lr
 8001318:	e000e100 	.word	0xe000e100

0800131c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	4603      	mov	r3, r0
 8001324:	6039      	str	r1, [r7, #0]
 8001326:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001328:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800132c:	2b00      	cmp	r3, #0
 800132e:	db0a      	blt.n	8001346 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	b2da      	uxtb	r2, r3
 8001334:	490c      	ldr	r1, [pc, #48]	; (8001368 <__NVIC_SetPriority+0x4c>)
 8001336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133a:	0112      	lsls	r2, r2, #4
 800133c:	b2d2      	uxtb	r2, r2
 800133e:	440b      	add	r3, r1
 8001340:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001344:	e00a      	b.n	800135c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	b2da      	uxtb	r2, r3
 800134a:	4908      	ldr	r1, [pc, #32]	; (800136c <__NVIC_SetPriority+0x50>)
 800134c:	79fb      	ldrb	r3, [r7, #7]
 800134e:	f003 030f 	and.w	r3, r3, #15
 8001352:	3b04      	subs	r3, #4
 8001354:	0112      	lsls	r2, r2, #4
 8001356:	b2d2      	uxtb	r2, r2
 8001358:	440b      	add	r3, r1
 800135a:	761a      	strb	r2, [r3, #24]
}
 800135c:	bf00      	nop
 800135e:	370c      	adds	r7, #12
 8001360:	46bd      	mov	sp, r7
 8001362:	bc80      	pop	{r7}
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	e000e100 	.word	0xe000e100
 800136c:	e000ed00 	.word	0xe000ed00

08001370 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001370:	b480      	push	{r7}
 8001372:	b089      	sub	sp, #36	; 0x24
 8001374:	af00      	add	r7, sp, #0
 8001376:	60f8      	str	r0, [r7, #12]
 8001378:	60b9      	str	r1, [r7, #8]
 800137a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	f003 0307 	and.w	r3, r3, #7
 8001382:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001384:	69fb      	ldr	r3, [r7, #28]
 8001386:	f1c3 0307 	rsb	r3, r3, #7
 800138a:	2b04      	cmp	r3, #4
 800138c:	bf28      	it	cs
 800138e:	2304      	movcs	r3, #4
 8001390:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	3304      	adds	r3, #4
 8001396:	2b06      	cmp	r3, #6
 8001398:	d902      	bls.n	80013a0 <NVIC_EncodePriority+0x30>
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	3b03      	subs	r3, #3
 800139e:	e000      	b.n	80013a2 <NVIC_EncodePriority+0x32>
 80013a0:	2300      	movs	r3, #0
 80013a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013a4:	f04f 32ff 	mov.w	r2, #4294967295
 80013a8:	69bb      	ldr	r3, [r7, #24]
 80013aa:	fa02 f303 	lsl.w	r3, r2, r3
 80013ae:	43da      	mvns	r2, r3
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	401a      	ands	r2, r3
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013b8:	f04f 31ff 	mov.w	r1, #4294967295
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	fa01 f303 	lsl.w	r3, r1, r3
 80013c2:	43d9      	mvns	r1, r3
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013c8:	4313      	orrs	r3, r2
         );
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3724      	adds	r7, #36	; 0x24
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bc80      	pop	{r7}
 80013d2:	4770      	bx	lr

080013d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	3b01      	subs	r3, #1
 80013e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013e4:	d301      	bcc.n	80013ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013e6:	2301      	movs	r3, #1
 80013e8:	e00f      	b.n	800140a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013ea:	4a0a      	ldr	r2, [pc, #40]	; (8001414 <SysTick_Config+0x40>)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	3b01      	subs	r3, #1
 80013f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013f2:	210f      	movs	r1, #15
 80013f4:	f04f 30ff 	mov.w	r0, #4294967295
 80013f8:	f7ff ff90 	bl	800131c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013fc:	4b05      	ldr	r3, [pc, #20]	; (8001414 <SysTick_Config+0x40>)
 80013fe:	2200      	movs	r2, #0
 8001400:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001402:	4b04      	ldr	r3, [pc, #16]	; (8001414 <SysTick_Config+0x40>)
 8001404:	2207      	movs	r2, #7
 8001406:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001408:	2300      	movs	r3, #0
}
 800140a:	4618      	mov	r0, r3
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	e000e010 	.word	0xe000e010

08001418 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001420:	6878      	ldr	r0, [r7, #4]
 8001422:	f7ff ff2d 	bl	8001280 <__NVIC_SetPriorityGrouping>
}
 8001426:	bf00      	nop
 8001428:	3708      	adds	r7, #8
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}

0800142e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800142e:	b580      	push	{r7, lr}
 8001430:	b086      	sub	sp, #24
 8001432:	af00      	add	r7, sp, #0
 8001434:	4603      	mov	r3, r0
 8001436:	60b9      	str	r1, [r7, #8]
 8001438:	607a      	str	r2, [r7, #4]
 800143a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800143c:	2300      	movs	r3, #0
 800143e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001440:	f7ff ff42 	bl	80012c8 <__NVIC_GetPriorityGrouping>
 8001444:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001446:	687a      	ldr	r2, [r7, #4]
 8001448:	68b9      	ldr	r1, [r7, #8]
 800144a:	6978      	ldr	r0, [r7, #20]
 800144c:	f7ff ff90 	bl	8001370 <NVIC_EncodePriority>
 8001450:	4602      	mov	r2, r0
 8001452:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001456:	4611      	mov	r1, r2
 8001458:	4618      	mov	r0, r3
 800145a:	f7ff ff5f 	bl	800131c <__NVIC_SetPriority>
}
 800145e:	bf00      	nop
 8001460:	3718      	adds	r7, #24
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}

08001466 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001466:	b580      	push	{r7, lr}
 8001468:	b082      	sub	sp, #8
 800146a:	af00      	add	r7, sp, #0
 800146c:	4603      	mov	r3, r0
 800146e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001470:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001474:	4618      	mov	r0, r3
 8001476:	f7ff ff35 	bl	80012e4 <__NVIC_EnableIRQ>
}
 800147a:	bf00      	nop
 800147c:	3708      	adds	r7, #8
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}

08001482 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001482:	b580      	push	{r7, lr}
 8001484:	b082      	sub	sp, #8
 8001486:	af00      	add	r7, sp, #0
 8001488:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800148a:	6878      	ldr	r0, [r7, #4]
 800148c:	f7ff ffa2 	bl	80013d4 <SysTick_Config>
 8001490:	4603      	mov	r3, r0
}
 8001492:	4618      	mov	r0, r3
 8001494:	3708      	adds	r7, #8
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
	...

0800149c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800149c:	b480      	push	{r7}
 800149e:	b08b      	sub	sp, #44	; 0x2c
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
 80014a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014a6:	2300      	movs	r3, #0
 80014a8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80014aa:	2300      	movs	r3, #0
 80014ac:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014ae:	e169      	b.n	8001784 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80014b0:	2201      	movs	r2, #1
 80014b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b4:	fa02 f303 	lsl.w	r3, r2, r3
 80014b8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	69fa      	ldr	r2, [r7, #28]
 80014c0:	4013      	ands	r3, r2
 80014c2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80014c4:	69ba      	ldr	r2, [r7, #24]
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	429a      	cmp	r2, r3
 80014ca:	f040 8158 	bne.w	800177e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	4a9a      	ldr	r2, [pc, #616]	; (800173c <HAL_GPIO_Init+0x2a0>)
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d05e      	beq.n	8001596 <HAL_GPIO_Init+0xfa>
 80014d8:	4a98      	ldr	r2, [pc, #608]	; (800173c <HAL_GPIO_Init+0x2a0>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d875      	bhi.n	80015ca <HAL_GPIO_Init+0x12e>
 80014de:	4a98      	ldr	r2, [pc, #608]	; (8001740 <HAL_GPIO_Init+0x2a4>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d058      	beq.n	8001596 <HAL_GPIO_Init+0xfa>
 80014e4:	4a96      	ldr	r2, [pc, #600]	; (8001740 <HAL_GPIO_Init+0x2a4>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d86f      	bhi.n	80015ca <HAL_GPIO_Init+0x12e>
 80014ea:	4a96      	ldr	r2, [pc, #600]	; (8001744 <HAL_GPIO_Init+0x2a8>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d052      	beq.n	8001596 <HAL_GPIO_Init+0xfa>
 80014f0:	4a94      	ldr	r2, [pc, #592]	; (8001744 <HAL_GPIO_Init+0x2a8>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d869      	bhi.n	80015ca <HAL_GPIO_Init+0x12e>
 80014f6:	4a94      	ldr	r2, [pc, #592]	; (8001748 <HAL_GPIO_Init+0x2ac>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d04c      	beq.n	8001596 <HAL_GPIO_Init+0xfa>
 80014fc:	4a92      	ldr	r2, [pc, #584]	; (8001748 <HAL_GPIO_Init+0x2ac>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d863      	bhi.n	80015ca <HAL_GPIO_Init+0x12e>
 8001502:	4a92      	ldr	r2, [pc, #584]	; (800174c <HAL_GPIO_Init+0x2b0>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d046      	beq.n	8001596 <HAL_GPIO_Init+0xfa>
 8001508:	4a90      	ldr	r2, [pc, #576]	; (800174c <HAL_GPIO_Init+0x2b0>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d85d      	bhi.n	80015ca <HAL_GPIO_Init+0x12e>
 800150e:	2b12      	cmp	r3, #18
 8001510:	d82a      	bhi.n	8001568 <HAL_GPIO_Init+0xcc>
 8001512:	2b12      	cmp	r3, #18
 8001514:	d859      	bhi.n	80015ca <HAL_GPIO_Init+0x12e>
 8001516:	a201      	add	r2, pc, #4	; (adr r2, 800151c <HAL_GPIO_Init+0x80>)
 8001518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800151c:	08001597 	.word	0x08001597
 8001520:	08001571 	.word	0x08001571
 8001524:	08001583 	.word	0x08001583
 8001528:	080015c5 	.word	0x080015c5
 800152c:	080015cb 	.word	0x080015cb
 8001530:	080015cb 	.word	0x080015cb
 8001534:	080015cb 	.word	0x080015cb
 8001538:	080015cb 	.word	0x080015cb
 800153c:	080015cb 	.word	0x080015cb
 8001540:	080015cb 	.word	0x080015cb
 8001544:	080015cb 	.word	0x080015cb
 8001548:	080015cb 	.word	0x080015cb
 800154c:	080015cb 	.word	0x080015cb
 8001550:	080015cb 	.word	0x080015cb
 8001554:	080015cb 	.word	0x080015cb
 8001558:	080015cb 	.word	0x080015cb
 800155c:	080015cb 	.word	0x080015cb
 8001560:	08001579 	.word	0x08001579
 8001564:	0800158d 	.word	0x0800158d
 8001568:	4a79      	ldr	r2, [pc, #484]	; (8001750 <HAL_GPIO_Init+0x2b4>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d013      	beq.n	8001596 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800156e:	e02c      	b.n	80015ca <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	68db      	ldr	r3, [r3, #12]
 8001574:	623b      	str	r3, [r7, #32]
          break;
 8001576:	e029      	b.n	80015cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	68db      	ldr	r3, [r3, #12]
 800157c:	3304      	adds	r3, #4
 800157e:	623b      	str	r3, [r7, #32]
          break;
 8001580:	e024      	b.n	80015cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	68db      	ldr	r3, [r3, #12]
 8001586:	3308      	adds	r3, #8
 8001588:	623b      	str	r3, [r7, #32]
          break;
 800158a:	e01f      	b.n	80015cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	68db      	ldr	r3, [r3, #12]
 8001590:	330c      	adds	r3, #12
 8001592:	623b      	str	r3, [r7, #32]
          break;
 8001594:	e01a      	b.n	80015cc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d102      	bne.n	80015a4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800159e:	2304      	movs	r3, #4
 80015a0:	623b      	str	r3, [r7, #32]
          break;
 80015a2:	e013      	b.n	80015cc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	689b      	ldr	r3, [r3, #8]
 80015a8:	2b01      	cmp	r3, #1
 80015aa:	d105      	bne.n	80015b8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015ac:	2308      	movs	r3, #8
 80015ae:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	69fa      	ldr	r2, [r7, #28]
 80015b4:	611a      	str	r2, [r3, #16]
          break;
 80015b6:	e009      	b.n	80015cc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015b8:	2308      	movs	r3, #8
 80015ba:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	69fa      	ldr	r2, [r7, #28]
 80015c0:	615a      	str	r2, [r3, #20]
          break;
 80015c2:	e003      	b.n	80015cc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80015c4:	2300      	movs	r3, #0
 80015c6:	623b      	str	r3, [r7, #32]
          break;
 80015c8:	e000      	b.n	80015cc <HAL_GPIO_Init+0x130>
          break;
 80015ca:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80015cc:	69bb      	ldr	r3, [r7, #24]
 80015ce:	2bff      	cmp	r3, #255	; 0xff
 80015d0:	d801      	bhi.n	80015d6 <HAL_GPIO_Init+0x13a>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	e001      	b.n	80015da <HAL_GPIO_Init+0x13e>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	3304      	adds	r3, #4
 80015da:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80015dc:	69bb      	ldr	r3, [r7, #24]
 80015de:	2bff      	cmp	r3, #255	; 0xff
 80015e0:	d802      	bhi.n	80015e8 <HAL_GPIO_Init+0x14c>
 80015e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e4:	009b      	lsls	r3, r3, #2
 80015e6:	e002      	b.n	80015ee <HAL_GPIO_Init+0x152>
 80015e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ea:	3b08      	subs	r3, #8
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	210f      	movs	r1, #15
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	fa01 f303 	lsl.w	r3, r1, r3
 80015fc:	43db      	mvns	r3, r3
 80015fe:	401a      	ands	r2, r3
 8001600:	6a39      	ldr	r1, [r7, #32]
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	fa01 f303 	lsl.w	r3, r1, r3
 8001608:	431a      	orrs	r2, r3
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001616:	2b00      	cmp	r3, #0
 8001618:	f000 80b1 	beq.w	800177e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800161c:	4b4d      	ldr	r3, [pc, #308]	; (8001754 <HAL_GPIO_Init+0x2b8>)
 800161e:	699b      	ldr	r3, [r3, #24]
 8001620:	4a4c      	ldr	r2, [pc, #304]	; (8001754 <HAL_GPIO_Init+0x2b8>)
 8001622:	f043 0301 	orr.w	r3, r3, #1
 8001626:	6193      	str	r3, [r2, #24]
 8001628:	4b4a      	ldr	r3, [pc, #296]	; (8001754 <HAL_GPIO_Init+0x2b8>)
 800162a:	699b      	ldr	r3, [r3, #24]
 800162c:	f003 0301 	and.w	r3, r3, #1
 8001630:	60bb      	str	r3, [r7, #8]
 8001632:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001634:	4a48      	ldr	r2, [pc, #288]	; (8001758 <HAL_GPIO_Init+0x2bc>)
 8001636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001638:	089b      	lsrs	r3, r3, #2
 800163a:	3302      	adds	r3, #2
 800163c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001640:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001644:	f003 0303 	and.w	r3, r3, #3
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	220f      	movs	r2, #15
 800164c:	fa02 f303 	lsl.w	r3, r2, r3
 8001650:	43db      	mvns	r3, r3
 8001652:	68fa      	ldr	r2, [r7, #12]
 8001654:	4013      	ands	r3, r2
 8001656:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	4a40      	ldr	r2, [pc, #256]	; (800175c <HAL_GPIO_Init+0x2c0>)
 800165c:	4293      	cmp	r3, r2
 800165e:	d013      	beq.n	8001688 <HAL_GPIO_Init+0x1ec>
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	4a3f      	ldr	r2, [pc, #252]	; (8001760 <HAL_GPIO_Init+0x2c4>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d00d      	beq.n	8001684 <HAL_GPIO_Init+0x1e8>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	4a3e      	ldr	r2, [pc, #248]	; (8001764 <HAL_GPIO_Init+0x2c8>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d007      	beq.n	8001680 <HAL_GPIO_Init+0x1e4>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	4a3d      	ldr	r2, [pc, #244]	; (8001768 <HAL_GPIO_Init+0x2cc>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d101      	bne.n	800167c <HAL_GPIO_Init+0x1e0>
 8001678:	2303      	movs	r3, #3
 800167a:	e006      	b.n	800168a <HAL_GPIO_Init+0x1ee>
 800167c:	2304      	movs	r3, #4
 800167e:	e004      	b.n	800168a <HAL_GPIO_Init+0x1ee>
 8001680:	2302      	movs	r3, #2
 8001682:	e002      	b.n	800168a <HAL_GPIO_Init+0x1ee>
 8001684:	2301      	movs	r3, #1
 8001686:	e000      	b.n	800168a <HAL_GPIO_Init+0x1ee>
 8001688:	2300      	movs	r3, #0
 800168a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800168c:	f002 0203 	and.w	r2, r2, #3
 8001690:	0092      	lsls	r2, r2, #2
 8001692:	4093      	lsls	r3, r2
 8001694:	68fa      	ldr	r2, [r7, #12]
 8001696:	4313      	orrs	r3, r2
 8001698:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800169a:	492f      	ldr	r1, [pc, #188]	; (8001758 <HAL_GPIO_Init+0x2bc>)
 800169c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169e:	089b      	lsrs	r3, r3, #2
 80016a0:	3302      	adds	r3, #2
 80016a2:	68fa      	ldr	r2, [r7, #12]
 80016a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d006      	beq.n	80016c2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80016b4:	4b2d      	ldr	r3, [pc, #180]	; (800176c <HAL_GPIO_Init+0x2d0>)
 80016b6:	689a      	ldr	r2, [r3, #8]
 80016b8:	492c      	ldr	r1, [pc, #176]	; (800176c <HAL_GPIO_Init+0x2d0>)
 80016ba:	69bb      	ldr	r3, [r7, #24]
 80016bc:	4313      	orrs	r3, r2
 80016be:	608b      	str	r3, [r1, #8]
 80016c0:	e006      	b.n	80016d0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80016c2:	4b2a      	ldr	r3, [pc, #168]	; (800176c <HAL_GPIO_Init+0x2d0>)
 80016c4:	689a      	ldr	r2, [r3, #8]
 80016c6:	69bb      	ldr	r3, [r7, #24]
 80016c8:	43db      	mvns	r3, r3
 80016ca:	4928      	ldr	r1, [pc, #160]	; (800176c <HAL_GPIO_Init+0x2d0>)
 80016cc:	4013      	ands	r3, r2
 80016ce:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d006      	beq.n	80016ea <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80016dc:	4b23      	ldr	r3, [pc, #140]	; (800176c <HAL_GPIO_Init+0x2d0>)
 80016de:	68da      	ldr	r2, [r3, #12]
 80016e0:	4922      	ldr	r1, [pc, #136]	; (800176c <HAL_GPIO_Init+0x2d0>)
 80016e2:	69bb      	ldr	r3, [r7, #24]
 80016e4:	4313      	orrs	r3, r2
 80016e6:	60cb      	str	r3, [r1, #12]
 80016e8:	e006      	b.n	80016f8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80016ea:	4b20      	ldr	r3, [pc, #128]	; (800176c <HAL_GPIO_Init+0x2d0>)
 80016ec:	68da      	ldr	r2, [r3, #12]
 80016ee:	69bb      	ldr	r3, [r7, #24]
 80016f0:	43db      	mvns	r3, r3
 80016f2:	491e      	ldr	r1, [pc, #120]	; (800176c <HAL_GPIO_Init+0x2d0>)
 80016f4:	4013      	ands	r3, r2
 80016f6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001700:	2b00      	cmp	r3, #0
 8001702:	d006      	beq.n	8001712 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001704:	4b19      	ldr	r3, [pc, #100]	; (800176c <HAL_GPIO_Init+0x2d0>)
 8001706:	685a      	ldr	r2, [r3, #4]
 8001708:	4918      	ldr	r1, [pc, #96]	; (800176c <HAL_GPIO_Init+0x2d0>)
 800170a:	69bb      	ldr	r3, [r7, #24]
 800170c:	4313      	orrs	r3, r2
 800170e:	604b      	str	r3, [r1, #4]
 8001710:	e006      	b.n	8001720 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001712:	4b16      	ldr	r3, [pc, #88]	; (800176c <HAL_GPIO_Init+0x2d0>)
 8001714:	685a      	ldr	r2, [r3, #4]
 8001716:	69bb      	ldr	r3, [r7, #24]
 8001718:	43db      	mvns	r3, r3
 800171a:	4914      	ldr	r1, [pc, #80]	; (800176c <HAL_GPIO_Init+0x2d0>)
 800171c:	4013      	ands	r3, r2
 800171e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001728:	2b00      	cmp	r3, #0
 800172a:	d021      	beq.n	8001770 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800172c:	4b0f      	ldr	r3, [pc, #60]	; (800176c <HAL_GPIO_Init+0x2d0>)
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	490e      	ldr	r1, [pc, #56]	; (800176c <HAL_GPIO_Init+0x2d0>)
 8001732:	69bb      	ldr	r3, [r7, #24]
 8001734:	4313      	orrs	r3, r2
 8001736:	600b      	str	r3, [r1, #0]
 8001738:	e021      	b.n	800177e <HAL_GPIO_Init+0x2e2>
 800173a:	bf00      	nop
 800173c:	10320000 	.word	0x10320000
 8001740:	10310000 	.word	0x10310000
 8001744:	10220000 	.word	0x10220000
 8001748:	10210000 	.word	0x10210000
 800174c:	10120000 	.word	0x10120000
 8001750:	10110000 	.word	0x10110000
 8001754:	40021000 	.word	0x40021000
 8001758:	40010000 	.word	0x40010000
 800175c:	40010800 	.word	0x40010800
 8001760:	40010c00 	.word	0x40010c00
 8001764:	40011000 	.word	0x40011000
 8001768:	40011400 	.word	0x40011400
 800176c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001770:	4b0b      	ldr	r3, [pc, #44]	; (80017a0 <HAL_GPIO_Init+0x304>)
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	69bb      	ldr	r3, [r7, #24]
 8001776:	43db      	mvns	r3, r3
 8001778:	4909      	ldr	r1, [pc, #36]	; (80017a0 <HAL_GPIO_Init+0x304>)
 800177a:	4013      	ands	r3, r2
 800177c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800177e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001780:	3301      	adds	r3, #1
 8001782:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800178a:	fa22 f303 	lsr.w	r3, r2, r3
 800178e:	2b00      	cmp	r3, #0
 8001790:	f47f ae8e 	bne.w	80014b0 <HAL_GPIO_Init+0x14>
  }
}
 8001794:	bf00      	nop
 8001796:	bf00      	nop
 8001798:	372c      	adds	r7, #44	; 0x2c
 800179a:	46bd      	mov	sp, r7
 800179c:	bc80      	pop	{r7}
 800179e:	4770      	bx	lr
 80017a0:	40010400 	.word	0x40010400

080017a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b085      	sub	sp, #20
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	460b      	mov	r3, r1
 80017ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	689a      	ldr	r2, [r3, #8]
 80017b4:	887b      	ldrh	r3, [r7, #2]
 80017b6:	4013      	ands	r3, r2
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d002      	beq.n	80017c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80017bc:	2301      	movs	r3, #1
 80017be:	73fb      	strb	r3, [r7, #15]
 80017c0:	e001      	b.n	80017c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80017c2:	2300      	movs	r3, #0
 80017c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80017c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3714      	adds	r7, #20
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bc80      	pop	{r7}
 80017d0:	4770      	bx	lr

080017d2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017d2:	b480      	push	{r7}
 80017d4:	b083      	sub	sp, #12
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	6078      	str	r0, [r7, #4]
 80017da:	460b      	mov	r3, r1
 80017dc:	807b      	strh	r3, [r7, #2]
 80017de:	4613      	mov	r3, r2
 80017e0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017e2:	787b      	ldrb	r3, [r7, #1]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d003      	beq.n	80017f0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017e8:	887a      	ldrh	r2, [r7, #2]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80017ee:	e003      	b.n	80017f8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80017f0:	887b      	ldrh	r3, [r7, #2]
 80017f2:	041a      	lsls	r2, r3, #16
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	611a      	str	r2, [r3, #16]
}
 80017f8:	bf00      	nop
 80017fa:	370c      	adds	r7, #12
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bc80      	pop	{r7}
 8001800:	4770      	bx	lr
	...

08001804 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b086      	sub	sp, #24
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d101      	bne.n	8001816 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e26c      	b.n	8001cf0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 0301 	and.w	r3, r3, #1
 800181e:	2b00      	cmp	r3, #0
 8001820:	f000 8087 	beq.w	8001932 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001824:	4b92      	ldr	r3, [pc, #584]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f003 030c 	and.w	r3, r3, #12
 800182c:	2b04      	cmp	r3, #4
 800182e:	d00c      	beq.n	800184a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001830:	4b8f      	ldr	r3, [pc, #572]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f003 030c 	and.w	r3, r3, #12
 8001838:	2b08      	cmp	r3, #8
 800183a:	d112      	bne.n	8001862 <HAL_RCC_OscConfig+0x5e>
 800183c:	4b8c      	ldr	r3, [pc, #560]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001844:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001848:	d10b      	bne.n	8001862 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800184a:	4b89      	ldr	r3, [pc, #548]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001852:	2b00      	cmp	r3, #0
 8001854:	d06c      	beq.n	8001930 <HAL_RCC_OscConfig+0x12c>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d168      	bne.n	8001930 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e246      	b.n	8001cf0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800186a:	d106      	bne.n	800187a <HAL_RCC_OscConfig+0x76>
 800186c:	4b80      	ldr	r3, [pc, #512]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a7f      	ldr	r2, [pc, #508]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 8001872:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001876:	6013      	str	r3, [r2, #0]
 8001878:	e02e      	b.n	80018d8 <HAL_RCC_OscConfig+0xd4>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d10c      	bne.n	800189c <HAL_RCC_OscConfig+0x98>
 8001882:	4b7b      	ldr	r3, [pc, #492]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a7a      	ldr	r2, [pc, #488]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 8001888:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800188c:	6013      	str	r3, [r2, #0]
 800188e:	4b78      	ldr	r3, [pc, #480]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a77      	ldr	r2, [pc, #476]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 8001894:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001898:	6013      	str	r3, [r2, #0]
 800189a:	e01d      	b.n	80018d8 <HAL_RCC_OscConfig+0xd4>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018a4:	d10c      	bne.n	80018c0 <HAL_RCC_OscConfig+0xbc>
 80018a6:	4b72      	ldr	r3, [pc, #456]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a71      	ldr	r2, [pc, #452]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 80018ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018b0:	6013      	str	r3, [r2, #0]
 80018b2:	4b6f      	ldr	r3, [pc, #444]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a6e      	ldr	r2, [pc, #440]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 80018b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018bc:	6013      	str	r3, [r2, #0]
 80018be:	e00b      	b.n	80018d8 <HAL_RCC_OscConfig+0xd4>
 80018c0:	4b6b      	ldr	r3, [pc, #428]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a6a      	ldr	r2, [pc, #424]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 80018c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018ca:	6013      	str	r3, [r2, #0]
 80018cc:	4b68      	ldr	r3, [pc, #416]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a67      	ldr	r2, [pc, #412]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 80018d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018d6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d013      	beq.n	8001908 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018e0:	f7ff fcc4 	bl	800126c <HAL_GetTick>
 80018e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018e6:	e008      	b.n	80018fa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018e8:	f7ff fcc0 	bl	800126c <HAL_GetTick>
 80018ec:	4602      	mov	r2, r0
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	2b64      	cmp	r3, #100	; 0x64
 80018f4:	d901      	bls.n	80018fa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80018f6:	2303      	movs	r3, #3
 80018f8:	e1fa      	b.n	8001cf0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018fa:	4b5d      	ldr	r3, [pc, #372]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001902:	2b00      	cmp	r3, #0
 8001904:	d0f0      	beq.n	80018e8 <HAL_RCC_OscConfig+0xe4>
 8001906:	e014      	b.n	8001932 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001908:	f7ff fcb0 	bl	800126c <HAL_GetTick>
 800190c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800190e:	e008      	b.n	8001922 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001910:	f7ff fcac 	bl	800126c <HAL_GetTick>
 8001914:	4602      	mov	r2, r0
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	2b64      	cmp	r3, #100	; 0x64
 800191c:	d901      	bls.n	8001922 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800191e:	2303      	movs	r3, #3
 8001920:	e1e6      	b.n	8001cf0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001922:	4b53      	ldr	r3, [pc, #332]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800192a:	2b00      	cmp	r3, #0
 800192c:	d1f0      	bne.n	8001910 <HAL_RCC_OscConfig+0x10c>
 800192e:	e000      	b.n	8001932 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001930:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 0302 	and.w	r3, r3, #2
 800193a:	2b00      	cmp	r3, #0
 800193c:	d063      	beq.n	8001a06 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800193e:	4b4c      	ldr	r3, [pc, #304]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	f003 030c 	and.w	r3, r3, #12
 8001946:	2b00      	cmp	r3, #0
 8001948:	d00b      	beq.n	8001962 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800194a:	4b49      	ldr	r3, [pc, #292]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	f003 030c 	and.w	r3, r3, #12
 8001952:	2b08      	cmp	r3, #8
 8001954:	d11c      	bne.n	8001990 <HAL_RCC_OscConfig+0x18c>
 8001956:	4b46      	ldr	r3, [pc, #280]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800195e:	2b00      	cmp	r3, #0
 8001960:	d116      	bne.n	8001990 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001962:	4b43      	ldr	r3, [pc, #268]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 0302 	and.w	r3, r3, #2
 800196a:	2b00      	cmp	r3, #0
 800196c:	d005      	beq.n	800197a <HAL_RCC_OscConfig+0x176>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	691b      	ldr	r3, [r3, #16]
 8001972:	2b01      	cmp	r3, #1
 8001974:	d001      	beq.n	800197a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e1ba      	b.n	8001cf0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800197a:	4b3d      	ldr	r3, [pc, #244]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	695b      	ldr	r3, [r3, #20]
 8001986:	00db      	lsls	r3, r3, #3
 8001988:	4939      	ldr	r1, [pc, #228]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 800198a:	4313      	orrs	r3, r2
 800198c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800198e:	e03a      	b.n	8001a06 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	691b      	ldr	r3, [r3, #16]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d020      	beq.n	80019da <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001998:	4b36      	ldr	r3, [pc, #216]	; (8001a74 <HAL_RCC_OscConfig+0x270>)
 800199a:	2201      	movs	r2, #1
 800199c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800199e:	f7ff fc65 	bl	800126c <HAL_GetTick>
 80019a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019a4:	e008      	b.n	80019b8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019a6:	f7ff fc61 	bl	800126c <HAL_GetTick>
 80019aa:	4602      	mov	r2, r0
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	1ad3      	subs	r3, r2, r3
 80019b0:	2b02      	cmp	r3, #2
 80019b2:	d901      	bls.n	80019b8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80019b4:	2303      	movs	r3, #3
 80019b6:	e19b      	b.n	8001cf0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019b8:	4b2d      	ldr	r3, [pc, #180]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 0302 	and.w	r3, r3, #2
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d0f0      	beq.n	80019a6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019c4:	4b2a      	ldr	r3, [pc, #168]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	695b      	ldr	r3, [r3, #20]
 80019d0:	00db      	lsls	r3, r3, #3
 80019d2:	4927      	ldr	r1, [pc, #156]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 80019d4:	4313      	orrs	r3, r2
 80019d6:	600b      	str	r3, [r1, #0]
 80019d8:	e015      	b.n	8001a06 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019da:	4b26      	ldr	r3, [pc, #152]	; (8001a74 <HAL_RCC_OscConfig+0x270>)
 80019dc:	2200      	movs	r2, #0
 80019de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019e0:	f7ff fc44 	bl	800126c <HAL_GetTick>
 80019e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019e6:	e008      	b.n	80019fa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019e8:	f7ff fc40 	bl	800126c <HAL_GetTick>
 80019ec:	4602      	mov	r2, r0
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	1ad3      	subs	r3, r2, r3
 80019f2:	2b02      	cmp	r3, #2
 80019f4:	d901      	bls.n	80019fa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80019f6:	2303      	movs	r3, #3
 80019f8:	e17a      	b.n	8001cf0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019fa:	4b1d      	ldr	r3, [pc, #116]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 0302 	and.w	r3, r3, #2
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d1f0      	bne.n	80019e8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 0308 	and.w	r3, r3, #8
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d03a      	beq.n	8001a88 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	699b      	ldr	r3, [r3, #24]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d019      	beq.n	8001a4e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a1a:	4b17      	ldr	r3, [pc, #92]	; (8001a78 <HAL_RCC_OscConfig+0x274>)
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a20:	f7ff fc24 	bl	800126c <HAL_GetTick>
 8001a24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a26:	e008      	b.n	8001a3a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a28:	f7ff fc20 	bl	800126c <HAL_GetTick>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	2b02      	cmp	r3, #2
 8001a34:	d901      	bls.n	8001a3a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001a36:	2303      	movs	r3, #3
 8001a38:	e15a      	b.n	8001cf0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a3a:	4b0d      	ldr	r3, [pc, #52]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 8001a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a3e:	f003 0302 	and.w	r3, r3, #2
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d0f0      	beq.n	8001a28 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001a46:	2001      	movs	r0, #1
 8001a48:	f000 fa9a 	bl	8001f80 <RCC_Delay>
 8001a4c:	e01c      	b.n	8001a88 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a4e:	4b0a      	ldr	r3, [pc, #40]	; (8001a78 <HAL_RCC_OscConfig+0x274>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a54:	f7ff fc0a 	bl	800126c <HAL_GetTick>
 8001a58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a5a:	e00f      	b.n	8001a7c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a5c:	f7ff fc06 	bl	800126c <HAL_GetTick>
 8001a60:	4602      	mov	r2, r0
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d908      	bls.n	8001a7c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	e140      	b.n	8001cf0 <HAL_RCC_OscConfig+0x4ec>
 8001a6e:	bf00      	nop
 8001a70:	40021000 	.word	0x40021000
 8001a74:	42420000 	.word	0x42420000
 8001a78:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a7c:	4b9e      	ldr	r3, [pc, #632]	; (8001cf8 <HAL_RCC_OscConfig+0x4f4>)
 8001a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a80:	f003 0302 	and.w	r3, r3, #2
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d1e9      	bne.n	8001a5c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f003 0304 	and.w	r3, r3, #4
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	f000 80a6 	beq.w	8001be2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a96:	2300      	movs	r3, #0
 8001a98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a9a:	4b97      	ldr	r3, [pc, #604]	; (8001cf8 <HAL_RCC_OscConfig+0x4f4>)
 8001a9c:	69db      	ldr	r3, [r3, #28]
 8001a9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d10d      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001aa6:	4b94      	ldr	r3, [pc, #592]	; (8001cf8 <HAL_RCC_OscConfig+0x4f4>)
 8001aa8:	69db      	ldr	r3, [r3, #28]
 8001aaa:	4a93      	ldr	r2, [pc, #588]	; (8001cf8 <HAL_RCC_OscConfig+0x4f4>)
 8001aac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ab0:	61d3      	str	r3, [r2, #28]
 8001ab2:	4b91      	ldr	r3, [pc, #580]	; (8001cf8 <HAL_RCC_OscConfig+0x4f4>)
 8001ab4:	69db      	ldr	r3, [r3, #28]
 8001ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aba:	60bb      	str	r3, [r7, #8]
 8001abc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ac2:	4b8e      	ldr	r3, [pc, #568]	; (8001cfc <HAL_RCC_OscConfig+0x4f8>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d118      	bne.n	8001b00 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ace:	4b8b      	ldr	r3, [pc, #556]	; (8001cfc <HAL_RCC_OscConfig+0x4f8>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a8a      	ldr	r2, [pc, #552]	; (8001cfc <HAL_RCC_OscConfig+0x4f8>)
 8001ad4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ad8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ada:	f7ff fbc7 	bl	800126c <HAL_GetTick>
 8001ade:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ae0:	e008      	b.n	8001af4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ae2:	f7ff fbc3 	bl	800126c <HAL_GetTick>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	1ad3      	subs	r3, r2, r3
 8001aec:	2b64      	cmp	r3, #100	; 0x64
 8001aee:	d901      	bls.n	8001af4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001af0:	2303      	movs	r3, #3
 8001af2:	e0fd      	b.n	8001cf0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001af4:	4b81      	ldr	r3, [pc, #516]	; (8001cfc <HAL_RCC_OscConfig+0x4f8>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d0f0      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d106      	bne.n	8001b16 <HAL_RCC_OscConfig+0x312>
 8001b08:	4b7b      	ldr	r3, [pc, #492]	; (8001cf8 <HAL_RCC_OscConfig+0x4f4>)
 8001b0a:	6a1b      	ldr	r3, [r3, #32]
 8001b0c:	4a7a      	ldr	r2, [pc, #488]	; (8001cf8 <HAL_RCC_OscConfig+0x4f4>)
 8001b0e:	f043 0301 	orr.w	r3, r3, #1
 8001b12:	6213      	str	r3, [r2, #32]
 8001b14:	e02d      	b.n	8001b72 <HAL_RCC_OscConfig+0x36e>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	68db      	ldr	r3, [r3, #12]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d10c      	bne.n	8001b38 <HAL_RCC_OscConfig+0x334>
 8001b1e:	4b76      	ldr	r3, [pc, #472]	; (8001cf8 <HAL_RCC_OscConfig+0x4f4>)
 8001b20:	6a1b      	ldr	r3, [r3, #32]
 8001b22:	4a75      	ldr	r2, [pc, #468]	; (8001cf8 <HAL_RCC_OscConfig+0x4f4>)
 8001b24:	f023 0301 	bic.w	r3, r3, #1
 8001b28:	6213      	str	r3, [r2, #32]
 8001b2a:	4b73      	ldr	r3, [pc, #460]	; (8001cf8 <HAL_RCC_OscConfig+0x4f4>)
 8001b2c:	6a1b      	ldr	r3, [r3, #32]
 8001b2e:	4a72      	ldr	r2, [pc, #456]	; (8001cf8 <HAL_RCC_OscConfig+0x4f4>)
 8001b30:	f023 0304 	bic.w	r3, r3, #4
 8001b34:	6213      	str	r3, [r2, #32]
 8001b36:	e01c      	b.n	8001b72 <HAL_RCC_OscConfig+0x36e>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	2b05      	cmp	r3, #5
 8001b3e:	d10c      	bne.n	8001b5a <HAL_RCC_OscConfig+0x356>
 8001b40:	4b6d      	ldr	r3, [pc, #436]	; (8001cf8 <HAL_RCC_OscConfig+0x4f4>)
 8001b42:	6a1b      	ldr	r3, [r3, #32]
 8001b44:	4a6c      	ldr	r2, [pc, #432]	; (8001cf8 <HAL_RCC_OscConfig+0x4f4>)
 8001b46:	f043 0304 	orr.w	r3, r3, #4
 8001b4a:	6213      	str	r3, [r2, #32]
 8001b4c:	4b6a      	ldr	r3, [pc, #424]	; (8001cf8 <HAL_RCC_OscConfig+0x4f4>)
 8001b4e:	6a1b      	ldr	r3, [r3, #32]
 8001b50:	4a69      	ldr	r2, [pc, #420]	; (8001cf8 <HAL_RCC_OscConfig+0x4f4>)
 8001b52:	f043 0301 	orr.w	r3, r3, #1
 8001b56:	6213      	str	r3, [r2, #32]
 8001b58:	e00b      	b.n	8001b72 <HAL_RCC_OscConfig+0x36e>
 8001b5a:	4b67      	ldr	r3, [pc, #412]	; (8001cf8 <HAL_RCC_OscConfig+0x4f4>)
 8001b5c:	6a1b      	ldr	r3, [r3, #32]
 8001b5e:	4a66      	ldr	r2, [pc, #408]	; (8001cf8 <HAL_RCC_OscConfig+0x4f4>)
 8001b60:	f023 0301 	bic.w	r3, r3, #1
 8001b64:	6213      	str	r3, [r2, #32]
 8001b66:	4b64      	ldr	r3, [pc, #400]	; (8001cf8 <HAL_RCC_OscConfig+0x4f4>)
 8001b68:	6a1b      	ldr	r3, [r3, #32]
 8001b6a:	4a63      	ldr	r2, [pc, #396]	; (8001cf8 <HAL_RCC_OscConfig+0x4f4>)
 8001b6c:	f023 0304 	bic.w	r3, r3, #4
 8001b70:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	68db      	ldr	r3, [r3, #12]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d015      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b7a:	f7ff fb77 	bl	800126c <HAL_GetTick>
 8001b7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b80:	e00a      	b.n	8001b98 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b82:	f7ff fb73 	bl	800126c <HAL_GetTick>
 8001b86:	4602      	mov	r2, r0
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	1ad3      	subs	r3, r2, r3
 8001b8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d901      	bls.n	8001b98 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001b94:	2303      	movs	r3, #3
 8001b96:	e0ab      	b.n	8001cf0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b98:	4b57      	ldr	r3, [pc, #348]	; (8001cf8 <HAL_RCC_OscConfig+0x4f4>)
 8001b9a:	6a1b      	ldr	r3, [r3, #32]
 8001b9c:	f003 0302 	and.w	r3, r3, #2
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d0ee      	beq.n	8001b82 <HAL_RCC_OscConfig+0x37e>
 8001ba4:	e014      	b.n	8001bd0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ba6:	f7ff fb61 	bl	800126c <HAL_GetTick>
 8001baa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bac:	e00a      	b.n	8001bc4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bae:	f7ff fb5d 	bl	800126c <HAL_GetTick>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	1ad3      	subs	r3, r2, r3
 8001bb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d901      	bls.n	8001bc4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	e095      	b.n	8001cf0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bc4:	4b4c      	ldr	r3, [pc, #304]	; (8001cf8 <HAL_RCC_OscConfig+0x4f4>)
 8001bc6:	6a1b      	ldr	r3, [r3, #32]
 8001bc8:	f003 0302 	and.w	r3, r3, #2
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d1ee      	bne.n	8001bae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001bd0:	7dfb      	ldrb	r3, [r7, #23]
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d105      	bne.n	8001be2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bd6:	4b48      	ldr	r3, [pc, #288]	; (8001cf8 <HAL_RCC_OscConfig+0x4f4>)
 8001bd8:	69db      	ldr	r3, [r3, #28]
 8001bda:	4a47      	ldr	r2, [pc, #284]	; (8001cf8 <HAL_RCC_OscConfig+0x4f4>)
 8001bdc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001be0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	69db      	ldr	r3, [r3, #28]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	f000 8081 	beq.w	8001cee <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bec:	4b42      	ldr	r3, [pc, #264]	; (8001cf8 <HAL_RCC_OscConfig+0x4f4>)
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f003 030c 	and.w	r3, r3, #12
 8001bf4:	2b08      	cmp	r3, #8
 8001bf6:	d061      	beq.n	8001cbc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	69db      	ldr	r3, [r3, #28]
 8001bfc:	2b02      	cmp	r3, #2
 8001bfe:	d146      	bne.n	8001c8e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c00:	4b3f      	ldr	r3, [pc, #252]	; (8001d00 <HAL_RCC_OscConfig+0x4fc>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c06:	f7ff fb31 	bl	800126c <HAL_GetTick>
 8001c0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c0c:	e008      	b.n	8001c20 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c0e:	f7ff fb2d 	bl	800126c <HAL_GetTick>
 8001c12:	4602      	mov	r2, r0
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	1ad3      	subs	r3, r2, r3
 8001c18:	2b02      	cmp	r3, #2
 8001c1a:	d901      	bls.n	8001c20 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	e067      	b.n	8001cf0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c20:	4b35      	ldr	r3, [pc, #212]	; (8001cf8 <HAL_RCC_OscConfig+0x4f4>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d1f0      	bne.n	8001c0e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6a1b      	ldr	r3, [r3, #32]
 8001c30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c34:	d108      	bne.n	8001c48 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c36:	4b30      	ldr	r3, [pc, #192]	; (8001cf8 <HAL_RCC_OscConfig+0x4f4>)
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	492d      	ldr	r1, [pc, #180]	; (8001cf8 <HAL_RCC_OscConfig+0x4f4>)
 8001c44:	4313      	orrs	r3, r2
 8001c46:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c48:	4b2b      	ldr	r3, [pc, #172]	; (8001cf8 <HAL_RCC_OscConfig+0x4f4>)
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6a19      	ldr	r1, [r3, #32]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c58:	430b      	orrs	r3, r1
 8001c5a:	4927      	ldr	r1, [pc, #156]	; (8001cf8 <HAL_RCC_OscConfig+0x4f4>)
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c60:	4b27      	ldr	r3, [pc, #156]	; (8001d00 <HAL_RCC_OscConfig+0x4fc>)
 8001c62:	2201      	movs	r2, #1
 8001c64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c66:	f7ff fb01 	bl	800126c <HAL_GetTick>
 8001c6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c6c:	e008      	b.n	8001c80 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c6e:	f7ff fafd 	bl	800126c <HAL_GetTick>
 8001c72:	4602      	mov	r2, r0
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	1ad3      	subs	r3, r2, r3
 8001c78:	2b02      	cmp	r3, #2
 8001c7a:	d901      	bls.n	8001c80 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001c7c:	2303      	movs	r3, #3
 8001c7e:	e037      	b.n	8001cf0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c80:	4b1d      	ldr	r3, [pc, #116]	; (8001cf8 <HAL_RCC_OscConfig+0x4f4>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d0f0      	beq.n	8001c6e <HAL_RCC_OscConfig+0x46a>
 8001c8c:	e02f      	b.n	8001cee <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c8e:	4b1c      	ldr	r3, [pc, #112]	; (8001d00 <HAL_RCC_OscConfig+0x4fc>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c94:	f7ff faea 	bl	800126c <HAL_GetTick>
 8001c98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c9a:	e008      	b.n	8001cae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c9c:	f7ff fae6 	bl	800126c <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d901      	bls.n	8001cae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e020      	b.n	8001cf0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cae:	4b12      	ldr	r3, [pc, #72]	; (8001cf8 <HAL_RCC_OscConfig+0x4f4>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d1f0      	bne.n	8001c9c <HAL_RCC_OscConfig+0x498>
 8001cba:	e018      	b.n	8001cee <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	69db      	ldr	r3, [r3, #28]
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d101      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e013      	b.n	8001cf0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001cc8:	4b0b      	ldr	r3, [pc, #44]	; (8001cf8 <HAL_RCC_OscConfig+0x4f4>)
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6a1b      	ldr	r3, [r3, #32]
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d106      	bne.n	8001cea <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	d001      	beq.n	8001cee <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e000      	b.n	8001cf0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001cee:	2300      	movs	r3, #0
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3718      	adds	r7, #24
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	40021000 	.word	0x40021000
 8001cfc:	40007000 	.word	0x40007000
 8001d00:	42420060 	.word	0x42420060

08001d04 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b084      	sub	sp, #16
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
 8001d0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d101      	bne.n	8001d18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e0d0      	b.n	8001eba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d18:	4b6a      	ldr	r3, [pc, #424]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 0307 	and.w	r3, r3, #7
 8001d20:	683a      	ldr	r2, [r7, #0]
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d910      	bls.n	8001d48 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d26:	4b67      	ldr	r3, [pc, #412]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f023 0207 	bic.w	r2, r3, #7
 8001d2e:	4965      	ldr	r1, [pc, #404]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	4313      	orrs	r3, r2
 8001d34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d36:	4b63      	ldr	r3, [pc, #396]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0307 	and.w	r3, r3, #7
 8001d3e:	683a      	ldr	r2, [r7, #0]
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d001      	beq.n	8001d48 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	e0b8      	b.n	8001eba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 0302 	and.w	r3, r3, #2
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d020      	beq.n	8001d96 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 0304 	and.w	r3, r3, #4
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d005      	beq.n	8001d6c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d60:	4b59      	ldr	r3, [pc, #356]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	4a58      	ldr	r2, [pc, #352]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d66:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001d6a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0308 	and.w	r3, r3, #8
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d005      	beq.n	8001d84 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d78:	4b53      	ldr	r3, [pc, #332]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	4a52      	ldr	r2, [pc, #328]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d7e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001d82:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d84:	4b50      	ldr	r3, [pc, #320]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	494d      	ldr	r1, [pc, #308]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d92:	4313      	orrs	r3, r2
 8001d94:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0301 	and.w	r3, r3, #1
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d040      	beq.n	8001e24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d107      	bne.n	8001dba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001daa:	4b47      	ldr	r3, [pc, #284]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d115      	bne.n	8001de2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e07f      	b.n	8001eba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	2b02      	cmp	r3, #2
 8001dc0:	d107      	bne.n	8001dd2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dc2:	4b41      	ldr	r3, [pc, #260]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d109      	bne.n	8001de2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e073      	b.n	8001eba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dd2:	4b3d      	ldr	r3, [pc, #244]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0302 	and.w	r3, r3, #2
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d101      	bne.n	8001de2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e06b      	b.n	8001eba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001de2:	4b39      	ldr	r3, [pc, #228]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	f023 0203 	bic.w	r2, r3, #3
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	4936      	ldr	r1, [pc, #216]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8001df0:	4313      	orrs	r3, r2
 8001df2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001df4:	f7ff fa3a 	bl	800126c <HAL_GetTick>
 8001df8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dfa:	e00a      	b.n	8001e12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dfc:	f7ff fa36 	bl	800126c <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d901      	bls.n	8001e12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e053      	b.n	8001eba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e12:	4b2d      	ldr	r3, [pc, #180]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	f003 020c 	and.w	r2, r3, #12
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d1eb      	bne.n	8001dfc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e24:	4b27      	ldr	r3, [pc, #156]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c0>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 0307 	and.w	r3, r3, #7
 8001e2c:	683a      	ldr	r2, [r7, #0]
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	d210      	bcs.n	8001e54 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e32:	4b24      	ldr	r3, [pc, #144]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c0>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f023 0207 	bic.w	r2, r3, #7
 8001e3a:	4922      	ldr	r1, [pc, #136]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c0>)
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e42:	4b20      	ldr	r3, [pc, #128]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c0>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 0307 	and.w	r3, r3, #7
 8001e4a:	683a      	ldr	r2, [r7, #0]
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d001      	beq.n	8001e54 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	e032      	b.n	8001eba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 0304 	and.w	r3, r3, #4
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d008      	beq.n	8001e72 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e60:	4b19      	ldr	r3, [pc, #100]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	4916      	ldr	r1, [pc, #88]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 0308 	and.w	r3, r3, #8
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d009      	beq.n	8001e92 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e7e:	4b12      	ldr	r3, [pc, #72]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	691b      	ldr	r3, [r3, #16]
 8001e8a:	00db      	lsls	r3, r3, #3
 8001e8c:	490e      	ldr	r1, [pc, #56]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e92:	f000 f821 	bl	8001ed8 <HAL_RCC_GetSysClockFreq>
 8001e96:	4602      	mov	r2, r0
 8001e98:	4b0b      	ldr	r3, [pc, #44]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	091b      	lsrs	r3, r3, #4
 8001e9e:	f003 030f 	and.w	r3, r3, #15
 8001ea2:	490a      	ldr	r1, [pc, #40]	; (8001ecc <HAL_RCC_ClockConfig+0x1c8>)
 8001ea4:	5ccb      	ldrb	r3, [r1, r3]
 8001ea6:	fa22 f303 	lsr.w	r3, r2, r3
 8001eaa:	4a09      	ldr	r2, [pc, #36]	; (8001ed0 <HAL_RCC_ClockConfig+0x1cc>)
 8001eac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001eae:	4b09      	ldr	r3, [pc, #36]	; (8001ed4 <HAL_RCC_ClockConfig+0x1d0>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f7ff f998 	bl	80011e8 <HAL_InitTick>

  return HAL_OK;
 8001eb8:	2300      	movs	r3, #0
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3710      	adds	r7, #16
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	40022000 	.word	0x40022000
 8001ec8:	40021000 	.word	0x40021000
 8001ecc:	08002828 	.word	0x08002828
 8001ed0:	20000030 	.word	0x20000030
 8001ed4:	20000038 	.word	0x20000038

08001ed8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b087      	sub	sp, #28
 8001edc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	60fb      	str	r3, [r7, #12]
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	60bb      	str	r3, [r7, #8]
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	617b      	str	r3, [r7, #20]
 8001eea:	2300      	movs	r3, #0
 8001eec:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001ef2:	4b1e      	ldr	r3, [pc, #120]	; (8001f6c <HAL_RCC_GetSysClockFreq+0x94>)
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	f003 030c 	and.w	r3, r3, #12
 8001efe:	2b04      	cmp	r3, #4
 8001f00:	d002      	beq.n	8001f08 <HAL_RCC_GetSysClockFreq+0x30>
 8001f02:	2b08      	cmp	r3, #8
 8001f04:	d003      	beq.n	8001f0e <HAL_RCC_GetSysClockFreq+0x36>
 8001f06:	e027      	b.n	8001f58 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f08:	4b19      	ldr	r3, [pc, #100]	; (8001f70 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f0a:	613b      	str	r3, [r7, #16]
      break;
 8001f0c:	e027      	b.n	8001f5e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	0c9b      	lsrs	r3, r3, #18
 8001f12:	f003 030f 	and.w	r3, r3, #15
 8001f16:	4a17      	ldr	r2, [pc, #92]	; (8001f74 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001f18:	5cd3      	ldrb	r3, [r2, r3]
 8001f1a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d010      	beq.n	8001f48 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f26:	4b11      	ldr	r3, [pc, #68]	; (8001f6c <HAL_RCC_GetSysClockFreq+0x94>)
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	0c5b      	lsrs	r3, r3, #17
 8001f2c:	f003 0301 	and.w	r3, r3, #1
 8001f30:	4a11      	ldr	r2, [pc, #68]	; (8001f78 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001f32:	5cd3      	ldrb	r3, [r2, r3]
 8001f34:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4a0d      	ldr	r2, [pc, #52]	; (8001f70 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f3a:	fb02 f203 	mul.w	r2, r2, r3
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f44:	617b      	str	r3, [r7, #20]
 8001f46:	e004      	b.n	8001f52 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	4a0c      	ldr	r2, [pc, #48]	; (8001f7c <HAL_RCC_GetSysClockFreq+0xa4>)
 8001f4c:	fb02 f303 	mul.w	r3, r2, r3
 8001f50:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	613b      	str	r3, [r7, #16]
      break;
 8001f56:	e002      	b.n	8001f5e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f58:	4b05      	ldr	r3, [pc, #20]	; (8001f70 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f5a:	613b      	str	r3, [r7, #16]
      break;
 8001f5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f5e:	693b      	ldr	r3, [r7, #16]
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	371c      	adds	r7, #28
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bc80      	pop	{r7}
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	40021000 	.word	0x40021000
 8001f70:	007a1200 	.word	0x007a1200
 8001f74:	08002838 	.word	0x08002838
 8001f78:	08002848 	.word	0x08002848
 8001f7c:	003d0900 	.word	0x003d0900

08001f80 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b085      	sub	sp, #20
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001f88:	4b0a      	ldr	r3, [pc, #40]	; (8001fb4 <RCC_Delay+0x34>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a0a      	ldr	r2, [pc, #40]	; (8001fb8 <RCC_Delay+0x38>)
 8001f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f92:	0a5b      	lsrs	r3, r3, #9
 8001f94:	687a      	ldr	r2, [r7, #4]
 8001f96:	fb02 f303 	mul.w	r3, r2, r3
 8001f9a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001f9c:	bf00      	nop
  }
  while (Delay --);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	1e5a      	subs	r2, r3, #1
 8001fa2:	60fa      	str	r2, [r7, #12]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d1f9      	bne.n	8001f9c <RCC_Delay+0x1c>
}
 8001fa8:	bf00      	nop
 8001faa:	bf00      	nop
 8001fac:	3714      	adds	r7, #20
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bc80      	pop	{r7}
 8001fb2:	4770      	bx	lr
 8001fb4:	20000030 	.word	0x20000030
 8001fb8:	10624dd3 	.word	0x10624dd3

08001fbc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d101      	bne.n	8001fce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e041      	b.n	8002052 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d106      	bne.n	8001fe8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f7fe ff9c 	bl	8000f20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2202      	movs	r2, #2
 8001fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	3304      	adds	r3, #4
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	4610      	mov	r0, r2
 8001ffc:	f000 fa74 	bl	80024e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2201      	movs	r2, #1
 8002004:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2201      	movs	r2, #1
 800200c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2201      	movs	r2, #1
 8002014:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2201      	movs	r2, #1
 800201c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2201      	movs	r2, #1
 8002024:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2201      	movs	r2, #1
 800202c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2201      	movs	r2, #1
 8002034:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2201      	movs	r2, #1
 800203c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2201      	movs	r2, #1
 8002044:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2201      	movs	r2, #1
 800204c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002050:	2300      	movs	r3, #0
}
 8002052:	4618      	mov	r0, r3
 8002054:	3708      	adds	r7, #8
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
	...

0800205c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800205c:	b480      	push	{r7}
 800205e:	b085      	sub	sp, #20
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800206a:	b2db      	uxtb	r3, r3
 800206c:	2b01      	cmp	r3, #1
 800206e:	d001      	beq.n	8002074 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	e03a      	b.n	80020ea <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2202      	movs	r2, #2
 8002078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	68da      	ldr	r2, [r3, #12]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f042 0201 	orr.w	r2, r2, #1
 800208a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a18      	ldr	r2, [pc, #96]	; (80020f4 <HAL_TIM_Base_Start_IT+0x98>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d00e      	beq.n	80020b4 <HAL_TIM_Base_Start_IT+0x58>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800209e:	d009      	beq.n	80020b4 <HAL_TIM_Base_Start_IT+0x58>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a14      	ldr	r2, [pc, #80]	; (80020f8 <HAL_TIM_Base_Start_IT+0x9c>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d004      	beq.n	80020b4 <HAL_TIM_Base_Start_IT+0x58>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a13      	ldr	r2, [pc, #76]	; (80020fc <HAL_TIM_Base_Start_IT+0xa0>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d111      	bne.n	80020d8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	f003 0307 	and.w	r3, r3, #7
 80020be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	2b06      	cmp	r3, #6
 80020c4:	d010      	beq.n	80020e8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f042 0201 	orr.w	r2, r2, #1
 80020d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020d6:	e007      	b.n	80020e8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f042 0201 	orr.w	r2, r2, #1
 80020e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80020e8:	2300      	movs	r3, #0
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3714      	adds	r7, #20
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bc80      	pop	{r7}
 80020f2:	4770      	bx	lr
 80020f4:	40012c00 	.word	0x40012c00
 80020f8:	40000400 	.word	0x40000400
 80020fc:	40000800 	.word	0x40000800

08002100 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	691b      	ldr	r3, [r3, #16]
 800210e:	f003 0302 	and.w	r3, r3, #2
 8002112:	2b02      	cmp	r3, #2
 8002114:	d122      	bne.n	800215c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	f003 0302 	and.w	r3, r3, #2
 8002120:	2b02      	cmp	r3, #2
 8002122:	d11b      	bne.n	800215c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f06f 0202 	mvn.w	r2, #2
 800212c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2201      	movs	r2, #1
 8002132:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	699b      	ldr	r3, [r3, #24]
 800213a:	f003 0303 	and.w	r3, r3, #3
 800213e:	2b00      	cmp	r3, #0
 8002140:	d003      	beq.n	800214a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f000 f9b4 	bl	80024b0 <HAL_TIM_IC_CaptureCallback>
 8002148:	e005      	b.n	8002156 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f000 f9a7 	bl	800249e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	f000 f9b6 	bl	80024c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2200      	movs	r2, #0
 800215a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	691b      	ldr	r3, [r3, #16]
 8002162:	f003 0304 	and.w	r3, r3, #4
 8002166:	2b04      	cmp	r3, #4
 8002168:	d122      	bne.n	80021b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	f003 0304 	and.w	r3, r3, #4
 8002174:	2b04      	cmp	r3, #4
 8002176:	d11b      	bne.n	80021b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f06f 0204 	mvn.w	r2, #4
 8002180:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2202      	movs	r2, #2
 8002186:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	699b      	ldr	r3, [r3, #24]
 800218e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002192:	2b00      	cmp	r3, #0
 8002194:	d003      	beq.n	800219e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f000 f98a 	bl	80024b0 <HAL_TIM_IC_CaptureCallback>
 800219c:	e005      	b.n	80021aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f000 f97d 	bl	800249e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	f000 f98c 	bl	80024c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2200      	movs	r2, #0
 80021ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	691b      	ldr	r3, [r3, #16]
 80021b6:	f003 0308 	and.w	r3, r3, #8
 80021ba:	2b08      	cmp	r3, #8
 80021bc:	d122      	bne.n	8002204 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	f003 0308 	and.w	r3, r3, #8
 80021c8:	2b08      	cmp	r3, #8
 80021ca:	d11b      	bne.n	8002204 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f06f 0208 	mvn.w	r2, #8
 80021d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2204      	movs	r2, #4
 80021da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	69db      	ldr	r3, [r3, #28]
 80021e2:	f003 0303 	and.w	r3, r3, #3
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d003      	beq.n	80021f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f000 f960 	bl	80024b0 <HAL_TIM_IC_CaptureCallback>
 80021f0:	e005      	b.n	80021fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f000 f953 	bl	800249e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f000 f962 	bl	80024c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2200      	movs	r2, #0
 8002202:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	691b      	ldr	r3, [r3, #16]
 800220a:	f003 0310 	and.w	r3, r3, #16
 800220e:	2b10      	cmp	r3, #16
 8002210:	d122      	bne.n	8002258 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	f003 0310 	and.w	r3, r3, #16
 800221c:	2b10      	cmp	r3, #16
 800221e:	d11b      	bne.n	8002258 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f06f 0210 	mvn.w	r2, #16
 8002228:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2208      	movs	r2, #8
 800222e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	69db      	ldr	r3, [r3, #28]
 8002236:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800223a:	2b00      	cmp	r3, #0
 800223c:	d003      	beq.n	8002246 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f000 f936 	bl	80024b0 <HAL_TIM_IC_CaptureCallback>
 8002244:	e005      	b.n	8002252 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f000 f929 	bl	800249e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	f000 f938 	bl	80024c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2200      	movs	r2, #0
 8002256:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	691b      	ldr	r3, [r3, #16]
 800225e:	f003 0301 	and.w	r3, r3, #1
 8002262:	2b01      	cmp	r3, #1
 8002264:	d10e      	bne.n	8002284 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	f003 0301 	and.w	r3, r3, #1
 8002270:	2b01      	cmp	r3, #1
 8002272:	d107      	bne.n	8002284 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f06f 0201 	mvn.w	r2, #1
 800227c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f7fe fe0a 	bl	8000e98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	691b      	ldr	r3, [r3, #16]
 800228a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800228e:	2b80      	cmp	r3, #128	; 0x80
 8002290:	d10e      	bne.n	80022b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800229c:	2b80      	cmp	r3, #128	; 0x80
 800229e:	d107      	bne.n	80022b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80022a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f000 fa7b 	bl	80027a6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	691b      	ldr	r3, [r3, #16]
 80022b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022ba:	2b40      	cmp	r3, #64	; 0x40
 80022bc:	d10e      	bne.n	80022dc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022c8:	2b40      	cmp	r3, #64	; 0x40
 80022ca:	d107      	bne.n	80022dc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80022d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f000 f8fc 	bl	80024d4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	691b      	ldr	r3, [r3, #16]
 80022e2:	f003 0320 	and.w	r3, r3, #32
 80022e6:	2b20      	cmp	r3, #32
 80022e8:	d10e      	bne.n	8002308 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	f003 0320 	and.w	r3, r3, #32
 80022f4:	2b20      	cmp	r3, #32
 80022f6:	d107      	bne.n	8002308 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f06f 0220 	mvn.w	r2, #32
 8002300:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f000 fa46 	bl	8002794 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002308:	bf00      	nop
 800230a:	3708      	adds	r7, #8
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}

08002310 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b084      	sub	sp, #16
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800231a:	2300      	movs	r3, #0
 800231c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002324:	2b01      	cmp	r3, #1
 8002326:	d101      	bne.n	800232c <HAL_TIM_ConfigClockSource+0x1c>
 8002328:	2302      	movs	r3, #2
 800232a:	e0b4      	b.n	8002496 <HAL_TIM_ConfigClockSource+0x186>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2201      	movs	r2, #1
 8002330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2202      	movs	r2, #2
 8002338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800234a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002352:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	68ba      	ldr	r2, [r7, #8]
 800235a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002364:	d03e      	beq.n	80023e4 <HAL_TIM_ConfigClockSource+0xd4>
 8002366:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800236a:	f200 8087 	bhi.w	800247c <HAL_TIM_ConfigClockSource+0x16c>
 800236e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002372:	f000 8086 	beq.w	8002482 <HAL_TIM_ConfigClockSource+0x172>
 8002376:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800237a:	d87f      	bhi.n	800247c <HAL_TIM_ConfigClockSource+0x16c>
 800237c:	2b70      	cmp	r3, #112	; 0x70
 800237e:	d01a      	beq.n	80023b6 <HAL_TIM_ConfigClockSource+0xa6>
 8002380:	2b70      	cmp	r3, #112	; 0x70
 8002382:	d87b      	bhi.n	800247c <HAL_TIM_ConfigClockSource+0x16c>
 8002384:	2b60      	cmp	r3, #96	; 0x60
 8002386:	d050      	beq.n	800242a <HAL_TIM_ConfigClockSource+0x11a>
 8002388:	2b60      	cmp	r3, #96	; 0x60
 800238a:	d877      	bhi.n	800247c <HAL_TIM_ConfigClockSource+0x16c>
 800238c:	2b50      	cmp	r3, #80	; 0x50
 800238e:	d03c      	beq.n	800240a <HAL_TIM_ConfigClockSource+0xfa>
 8002390:	2b50      	cmp	r3, #80	; 0x50
 8002392:	d873      	bhi.n	800247c <HAL_TIM_ConfigClockSource+0x16c>
 8002394:	2b40      	cmp	r3, #64	; 0x40
 8002396:	d058      	beq.n	800244a <HAL_TIM_ConfigClockSource+0x13a>
 8002398:	2b40      	cmp	r3, #64	; 0x40
 800239a:	d86f      	bhi.n	800247c <HAL_TIM_ConfigClockSource+0x16c>
 800239c:	2b30      	cmp	r3, #48	; 0x30
 800239e:	d064      	beq.n	800246a <HAL_TIM_ConfigClockSource+0x15a>
 80023a0:	2b30      	cmp	r3, #48	; 0x30
 80023a2:	d86b      	bhi.n	800247c <HAL_TIM_ConfigClockSource+0x16c>
 80023a4:	2b20      	cmp	r3, #32
 80023a6:	d060      	beq.n	800246a <HAL_TIM_ConfigClockSource+0x15a>
 80023a8:	2b20      	cmp	r3, #32
 80023aa:	d867      	bhi.n	800247c <HAL_TIM_ConfigClockSource+0x16c>
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d05c      	beq.n	800246a <HAL_TIM_ConfigClockSource+0x15a>
 80023b0:	2b10      	cmp	r3, #16
 80023b2:	d05a      	beq.n	800246a <HAL_TIM_ConfigClockSource+0x15a>
 80023b4:	e062      	b.n	800247c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6818      	ldr	r0, [r3, #0]
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	6899      	ldr	r1, [r3, #8]
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	685a      	ldr	r2, [r3, #4]
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	68db      	ldr	r3, [r3, #12]
 80023c6:	f000 f968 	bl	800269a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80023d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	68ba      	ldr	r2, [r7, #8]
 80023e0:	609a      	str	r2, [r3, #8]
      break;
 80023e2:	e04f      	b.n	8002484 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6818      	ldr	r0, [r3, #0]
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	6899      	ldr	r1, [r3, #8]
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	685a      	ldr	r2, [r3, #4]
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	f000 f951 	bl	800269a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	689a      	ldr	r2, [r3, #8]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002406:	609a      	str	r2, [r3, #8]
      break;
 8002408:	e03c      	b.n	8002484 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6818      	ldr	r0, [r3, #0]
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	6859      	ldr	r1, [r3, #4]
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	68db      	ldr	r3, [r3, #12]
 8002416:	461a      	mov	r2, r3
 8002418:	f000 f8c8 	bl	80025ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2150      	movs	r1, #80	; 0x50
 8002422:	4618      	mov	r0, r3
 8002424:	f000 f91f 	bl	8002666 <TIM_ITRx_SetConfig>
      break;
 8002428:	e02c      	b.n	8002484 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6818      	ldr	r0, [r3, #0]
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	6859      	ldr	r1, [r3, #4]
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	68db      	ldr	r3, [r3, #12]
 8002436:	461a      	mov	r2, r3
 8002438:	f000 f8e6 	bl	8002608 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	2160      	movs	r1, #96	; 0x60
 8002442:	4618      	mov	r0, r3
 8002444:	f000 f90f 	bl	8002666 <TIM_ITRx_SetConfig>
      break;
 8002448:	e01c      	b.n	8002484 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6818      	ldr	r0, [r3, #0]
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	6859      	ldr	r1, [r3, #4]
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	461a      	mov	r2, r3
 8002458:	f000 f8a8 	bl	80025ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	2140      	movs	r1, #64	; 0x40
 8002462:	4618      	mov	r0, r3
 8002464:	f000 f8ff 	bl	8002666 <TIM_ITRx_SetConfig>
      break;
 8002468:	e00c      	b.n	8002484 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4619      	mov	r1, r3
 8002474:	4610      	mov	r0, r2
 8002476:	f000 f8f6 	bl	8002666 <TIM_ITRx_SetConfig>
      break;
 800247a:	e003      	b.n	8002484 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	73fb      	strb	r3, [r7, #15]
      break;
 8002480:	e000      	b.n	8002484 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002482:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2201      	movs	r2, #1
 8002488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2200      	movs	r2, #0
 8002490:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002494:	7bfb      	ldrb	r3, [r7, #15]
}
 8002496:	4618      	mov	r0, r3
 8002498:	3710      	adds	r7, #16
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}

0800249e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800249e:	b480      	push	{r7}
 80024a0:	b083      	sub	sp, #12
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80024a6:	bf00      	nop
 80024a8:	370c      	adds	r7, #12
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bc80      	pop	{r7}
 80024ae:	4770      	bx	lr

080024b0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80024b8:	bf00      	nop
 80024ba:	370c      	adds	r7, #12
 80024bc:	46bd      	mov	sp, r7
 80024be:	bc80      	pop	{r7}
 80024c0:	4770      	bx	lr

080024c2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80024c2:	b480      	push	{r7}
 80024c4:	b083      	sub	sp, #12
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80024ca:	bf00      	nop
 80024cc:	370c      	adds	r7, #12
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bc80      	pop	{r7}
 80024d2:	4770      	bx	lr

080024d4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80024dc:	bf00      	nop
 80024de:	370c      	adds	r7, #12
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bc80      	pop	{r7}
 80024e4:	4770      	bx	lr
	...

080024e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b085      	sub	sp, #20
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	4a29      	ldr	r2, [pc, #164]	; (80025a0 <TIM_Base_SetConfig+0xb8>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d00b      	beq.n	8002518 <TIM_Base_SetConfig+0x30>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002506:	d007      	beq.n	8002518 <TIM_Base_SetConfig+0x30>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	4a26      	ldr	r2, [pc, #152]	; (80025a4 <TIM_Base_SetConfig+0xbc>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d003      	beq.n	8002518 <TIM_Base_SetConfig+0x30>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	4a25      	ldr	r2, [pc, #148]	; (80025a8 <TIM_Base_SetConfig+0xc0>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d108      	bne.n	800252a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800251e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	68fa      	ldr	r2, [r7, #12]
 8002526:	4313      	orrs	r3, r2
 8002528:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4a1c      	ldr	r2, [pc, #112]	; (80025a0 <TIM_Base_SetConfig+0xb8>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d00b      	beq.n	800254a <TIM_Base_SetConfig+0x62>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002538:	d007      	beq.n	800254a <TIM_Base_SetConfig+0x62>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4a19      	ldr	r2, [pc, #100]	; (80025a4 <TIM_Base_SetConfig+0xbc>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d003      	beq.n	800254a <TIM_Base_SetConfig+0x62>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4a18      	ldr	r2, [pc, #96]	; (80025a8 <TIM_Base_SetConfig+0xc0>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d108      	bne.n	800255c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002550:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	68db      	ldr	r3, [r3, #12]
 8002556:	68fa      	ldr	r2, [r7, #12]
 8002558:	4313      	orrs	r3, r2
 800255a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	695b      	ldr	r3, [r3, #20]
 8002566:	4313      	orrs	r3, r2
 8002568:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	68fa      	ldr	r2, [r7, #12]
 800256e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	689a      	ldr	r2, [r3, #8]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	4a07      	ldr	r2, [pc, #28]	; (80025a0 <TIM_Base_SetConfig+0xb8>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d103      	bne.n	8002590 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	691a      	ldr	r2, [r3, #16]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2201      	movs	r2, #1
 8002594:	615a      	str	r2, [r3, #20]
}
 8002596:	bf00      	nop
 8002598:	3714      	adds	r7, #20
 800259a:	46bd      	mov	sp, r7
 800259c:	bc80      	pop	{r7}
 800259e:	4770      	bx	lr
 80025a0:	40012c00 	.word	0x40012c00
 80025a4:	40000400 	.word	0x40000400
 80025a8:	40000800 	.word	0x40000800

080025ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b087      	sub	sp, #28
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	60f8      	str	r0, [r7, #12]
 80025b4:	60b9      	str	r1, [r7, #8]
 80025b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	6a1b      	ldr	r3, [r3, #32]
 80025bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	6a1b      	ldr	r3, [r3, #32]
 80025c2:	f023 0201 	bic.w	r2, r3, #1
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	699b      	ldr	r3, [r3, #24]
 80025ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80025d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	011b      	lsls	r3, r3, #4
 80025dc:	693a      	ldr	r2, [r7, #16]
 80025de:	4313      	orrs	r3, r2
 80025e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	f023 030a 	bic.w	r3, r3, #10
 80025e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80025ea:	697a      	ldr	r2, [r7, #20]
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	693a      	ldr	r2, [r7, #16]
 80025f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	697a      	ldr	r2, [r7, #20]
 80025fc:	621a      	str	r2, [r3, #32]
}
 80025fe:	bf00      	nop
 8002600:	371c      	adds	r7, #28
 8002602:	46bd      	mov	sp, r7
 8002604:	bc80      	pop	{r7}
 8002606:	4770      	bx	lr

08002608 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002608:	b480      	push	{r7}
 800260a:	b087      	sub	sp, #28
 800260c:	af00      	add	r7, sp, #0
 800260e:	60f8      	str	r0, [r7, #12]
 8002610:	60b9      	str	r1, [r7, #8]
 8002612:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	6a1b      	ldr	r3, [r3, #32]
 8002618:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	6a1b      	ldr	r3, [r3, #32]
 800261e:	f023 0210 	bic.w	r2, r3, #16
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	699b      	ldr	r3, [r3, #24]
 800262a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002632:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	031b      	lsls	r3, r3, #12
 8002638:	693a      	ldr	r2, [r7, #16]
 800263a:	4313      	orrs	r3, r2
 800263c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002644:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	011b      	lsls	r3, r3, #4
 800264a:	697a      	ldr	r2, [r7, #20]
 800264c:	4313      	orrs	r3, r2
 800264e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	693a      	ldr	r2, [r7, #16]
 8002654:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	697a      	ldr	r2, [r7, #20]
 800265a:	621a      	str	r2, [r3, #32]
}
 800265c:	bf00      	nop
 800265e:	371c      	adds	r7, #28
 8002660:	46bd      	mov	sp, r7
 8002662:	bc80      	pop	{r7}
 8002664:	4770      	bx	lr

08002666 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002666:	b480      	push	{r7}
 8002668:	b085      	sub	sp, #20
 800266a:	af00      	add	r7, sp, #0
 800266c:	6078      	str	r0, [r7, #4]
 800266e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800267c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800267e:	683a      	ldr	r2, [r7, #0]
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	4313      	orrs	r3, r2
 8002684:	f043 0307 	orr.w	r3, r3, #7
 8002688:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	68fa      	ldr	r2, [r7, #12]
 800268e:	609a      	str	r2, [r3, #8]
}
 8002690:	bf00      	nop
 8002692:	3714      	adds	r7, #20
 8002694:	46bd      	mov	sp, r7
 8002696:	bc80      	pop	{r7}
 8002698:	4770      	bx	lr

0800269a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800269a:	b480      	push	{r7}
 800269c:	b087      	sub	sp, #28
 800269e:	af00      	add	r7, sp, #0
 80026a0:	60f8      	str	r0, [r7, #12]
 80026a2:	60b9      	str	r1, [r7, #8]
 80026a4:	607a      	str	r2, [r7, #4]
 80026a6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80026b4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	021a      	lsls	r2, r3, #8
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	431a      	orrs	r2, r3
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	4313      	orrs	r3, r2
 80026c2:	697a      	ldr	r2, [r7, #20]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	697a      	ldr	r2, [r7, #20]
 80026cc:	609a      	str	r2, [r3, #8]
}
 80026ce:	bf00      	nop
 80026d0:	371c      	adds	r7, #28
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bc80      	pop	{r7}
 80026d6:	4770      	bx	lr

080026d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80026d8:	b480      	push	{r7}
 80026da:	b085      	sub	sp, #20
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d101      	bne.n	80026f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80026ec:	2302      	movs	r3, #2
 80026ee:	e046      	b.n	800277e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2201      	movs	r2, #1
 80026f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2202      	movs	r2, #2
 80026fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002716:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	68fa      	ldr	r2, [r7, #12]
 800271e:	4313      	orrs	r3, r2
 8002720:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	68fa      	ldr	r2, [r7, #12]
 8002728:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a16      	ldr	r2, [pc, #88]	; (8002788 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d00e      	beq.n	8002752 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800273c:	d009      	beq.n	8002752 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a12      	ldr	r2, [pc, #72]	; (800278c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d004      	beq.n	8002752 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a10      	ldr	r2, [pc, #64]	; (8002790 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d10c      	bne.n	800276c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002758:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	68ba      	ldr	r2, [r7, #8]
 8002760:	4313      	orrs	r3, r2
 8002762:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	68ba      	ldr	r2, [r7, #8]
 800276a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2201      	movs	r2, #1
 8002770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2200      	movs	r2, #0
 8002778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800277c:	2300      	movs	r3, #0
}
 800277e:	4618      	mov	r0, r3
 8002780:	3714      	adds	r7, #20
 8002782:	46bd      	mov	sp, r7
 8002784:	bc80      	pop	{r7}
 8002786:	4770      	bx	lr
 8002788:	40012c00 	.word	0x40012c00
 800278c:	40000400 	.word	0x40000400
 8002790:	40000800 	.word	0x40000800

08002794 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002794:	b480      	push	{r7}
 8002796:	b083      	sub	sp, #12
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800279c:	bf00      	nop
 800279e:	370c      	adds	r7, #12
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bc80      	pop	{r7}
 80027a4:	4770      	bx	lr

080027a6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80027a6:	b480      	push	{r7}
 80027a8:	b083      	sub	sp, #12
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80027ae:	bf00      	nop
 80027b0:	370c      	adds	r7, #12
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bc80      	pop	{r7}
 80027b6:	4770      	bx	lr

080027b8 <__libc_init_array>:
 80027b8:	b570      	push	{r4, r5, r6, lr}
 80027ba:	2600      	movs	r6, #0
 80027bc:	4d0c      	ldr	r5, [pc, #48]	; (80027f0 <__libc_init_array+0x38>)
 80027be:	4c0d      	ldr	r4, [pc, #52]	; (80027f4 <__libc_init_array+0x3c>)
 80027c0:	1b64      	subs	r4, r4, r5
 80027c2:	10a4      	asrs	r4, r4, #2
 80027c4:	42a6      	cmp	r6, r4
 80027c6:	d109      	bne.n	80027dc <__libc_init_array+0x24>
 80027c8:	f000 f822 	bl	8002810 <_init>
 80027cc:	2600      	movs	r6, #0
 80027ce:	4d0a      	ldr	r5, [pc, #40]	; (80027f8 <__libc_init_array+0x40>)
 80027d0:	4c0a      	ldr	r4, [pc, #40]	; (80027fc <__libc_init_array+0x44>)
 80027d2:	1b64      	subs	r4, r4, r5
 80027d4:	10a4      	asrs	r4, r4, #2
 80027d6:	42a6      	cmp	r6, r4
 80027d8:	d105      	bne.n	80027e6 <__libc_init_array+0x2e>
 80027da:	bd70      	pop	{r4, r5, r6, pc}
 80027dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80027e0:	4798      	blx	r3
 80027e2:	3601      	adds	r6, #1
 80027e4:	e7ee      	b.n	80027c4 <__libc_init_array+0xc>
 80027e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80027ea:	4798      	blx	r3
 80027ec:	3601      	adds	r6, #1
 80027ee:	e7f2      	b.n	80027d6 <__libc_init_array+0x1e>
 80027f0:	0800284c 	.word	0x0800284c
 80027f4:	0800284c 	.word	0x0800284c
 80027f8:	0800284c 	.word	0x0800284c
 80027fc:	08002850 	.word	0x08002850

08002800 <memset>:
 8002800:	4603      	mov	r3, r0
 8002802:	4402      	add	r2, r0
 8002804:	4293      	cmp	r3, r2
 8002806:	d100      	bne.n	800280a <memset+0xa>
 8002808:	4770      	bx	lr
 800280a:	f803 1b01 	strb.w	r1, [r3], #1
 800280e:	e7f9      	b.n	8002804 <memset+0x4>

08002810 <_init>:
 8002810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002812:	bf00      	nop
 8002814:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002816:	bc08      	pop	{r3}
 8002818:	469e      	mov	lr, r3
 800281a:	4770      	bx	lr

0800281c <_fini>:
 800281c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800281e:	bf00      	nop
 8002820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002822:	bc08      	pop	{r3}
 8002824:	469e      	mov	lr, r3
 8002826:	4770      	bx	lr
