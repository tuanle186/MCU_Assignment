
MCU_Assignment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004cec  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  08004df8  08004df8  00014df8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f00  08004f00  00020098  2**0
                  CONTENTS
  4 .ARM          00000000  08004f00  08004f00  00020098  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004f00  08004f00  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f00  08004f00  00014f00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f04  08004f04  00014f04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  08004f08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a4  20000098  08004fa0  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000033c  08004fa0  0002033c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200c1  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e06d  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002619  00000000  00000000  0002e171  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000df0  00000000  00000000  00030790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ac7  00000000  00000000  00031580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017f18  00000000  00000000  00032047  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000114f2  00000000  00000000  00049f5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008ac5b  00000000  00000000  0005b451  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003ce8  00000000  00000000  000e60ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  000e9d94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000098 	.word	0x20000098
 8000128:	00000000 	.word	0x00000000
 800012c:	08004de0 	.word	0x08004de0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000009c 	.word	0x2000009c
 8000148:	08004de0 	.word	0x08004de0

0800014c <fsm_automatic>:
#include "input_reading.h"
#include "uart.h"

int t_road_1 = 0, t_road_2 = 0;

void fsm_automatic() {
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	switch (status) {
 8000150:	4b81      	ldr	r3, [pc, #516]	; (8000358 <fsm_automatic+0x20c>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	3301      	adds	r3, #1
 8000156:	2b05      	cmp	r3, #5
 8000158:	f200 80f2 	bhi.w	8000340 <fsm_automatic+0x1f4>
 800015c:	a201      	add	r2, pc, #4	; (adr r2, 8000164 <fsm_automatic+0x18>)
 800015e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000162:	bf00      	nop
 8000164:	0800017d 	.word	0x0800017d
 8000168:	08000185 	.word	0x08000185
 800016c:	080001d3 	.word	0x080001d3
 8000170:	08000231 	.word	0x08000231
 8000174:	0800028b 	.word	0x0800028b
 8000178:	080002db 	.word	0x080002db
		case INIT:
			status = MODE1;
 800017c:	4b76      	ldr	r3, [pc, #472]	; (8000358 <fsm_automatic+0x20c>)
 800017e:	2200      	movs	r2, #0
 8000180:	601a      	str	r2, [r3, #0]
			break;
 8000182:	e0e6      	b.n	8000352 <fsm_automatic+0x206>
		case MODE1:
			led_config();
 8000184:	f000 f9ca 	bl	800051c <led_config>
			t_road_1 = T_RED;
 8000188:	4b74      	ldr	r3, [pc, #464]	; (800035c <fsm_automatic+0x210>)
 800018a:	681b      	ldr	r3, [r3, #0]
 800018c:	4a74      	ldr	r2, [pc, #464]	; (8000360 <fsm_automatic+0x214>)
 800018e:	6013      	str	r3, [r2, #0]
			t_road_2 = T_GREEN;
 8000190:	4b74      	ldr	r3, [pc, #464]	; (8000364 <fsm_automatic+0x218>)
 8000192:	681b      	ldr	r3, [r3, #0]
 8000194:	4a74      	ldr	r2, [pc, #464]	; (8000368 <fsm_automatic+0x21c>)
 8000196:	6013      	str	r3, [r2, #0]
			HAL_UART_Transmit(&huart2, "!_____MODE1_____#\n\r", 20, 50);
 8000198:	2332      	movs	r3, #50	; 0x32
 800019a:	2214      	movs	r2, #20
 800019c:	4973      	ldr	r1, [pc, #460]	; (800036c <fsm_automatic+0x220>)
 800019e:	4874      	ldr	r0, [pc, #464]	; (8000370 <fsm_automatic+0x224>)
 80001a0:	f003 fb98 	bl	80038d4 <HAL_UART_Transmit>
			disp_time_uart(t_road_1, t_road_2);
 80001a4:	4b6e      	ldr	r3, [pc, #440]	; (8000360 <fsm_automatic+0x214>)
 80001a6:	681b      	ldr	r3, [r3, #0]
 80001a8:	4a6f      	ldr	r2, [pc, #444]	; (8000368 <fsm_automatic+0x21c>)
 80001aa:	6812      	ldr	r2, [r2, #0]
 80001ac:	4611      	mov	r1, r2
 80001ae:	4618      	mov	r0, r3
 80001b0:	f001 fb8a 	bl	80018c8 <disp_time_uart>
			setTimer4(1000);
 80001b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001b8:	f001 fa3a 	bl	8001630 <setTimer4>
			buzzer_period=500;
 80001bc:	4b6d      	ldr	r3, [pc, #436]	; (8000374 <fsm_automatic+0x228>)
 80001be:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80001c2:	601a      	str	r2, [r3, #0]
			volume = 20;
 80001c4:	4b6c      	ldr	r3, [pc, #432]	; (8000378 <fsm_automatic+0x22c>)
 80001c6:	2214      	movs	r2, #20
 80001c8:	601a      	str	r2, [r3, #0]
			status = RED_GREEN;
 80001ca:	4b63      	ldr	r3, [pc, #396]	; (8000358 <fsm_automatic+0x20c>)
 80001cc:	2201      	movs	r2, #1
 80001ce:	601a      	str	r2, [r3, #0]
			break;
 80001d0:	e0bf      	b.n	8000352 <fsm_automatic+0x206>
		case RED_GREEN:
			led_config();
 80001d2:	f000 f9a3 	bl	800051c <led_config>
			if (timer4_flag == 1) {
 80001d6:	4b69      	ldr	r3, [pc, #420]	; (800037c <fsm_automatic+0x230>)
 80001d8:	681b      	ldr	r3, [r3, #0]
 80001da:	2b01      	cmp	r3, #1
 80001dc:	f040 80b2 	bne.w	8000344 <fsm_automatic+0x1f8>
				t_road_1--;
 80001e0:	4b5f      	ldr	r3, [pc, #380]	; (8000360 <fsm_automatic+0x214>)
 80001e2:	681b      	ldr	r3, [r3, #0]
 80001e4:	3b01      	subs	r3, #1
 80001e6:	4a5e      	ldr	r2, [pc, #376]	; (8000360 <fsm_automatic+0x214>)
 80001e8:	6013      	str	r3, [r2, #0]
				t_road_2--;
 80001ea:	4b5f      	ldr	r3, [pc, #380]	; (8000368 <fsm_automatic+0x21c>)
 80001ec:	681b      	ldr	r3, [r3, #0]
 80001ee:	3b01      	subs	r3, #1
 80001f0:	4a5d      	ldr	r2, [pc, #372]	; (8000368 <fsm_automatic+0x21c>)
 80001f2:	6013      	str	r3, [r2, #0]
				if (t_road_2 <= 0) { // next state pre-setup
 80001f4:	4b5c      	ldr	r3, [pc, #368]	; (8000368 <fsm_automatic+0x21c>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	2b00      	cmp	r3, #0
 80001fa:	dc0c      	bgt.n	8000216 <fsm_automatic+0xca>
					t_road_2 = T_AMBER;
 80001fc:	4b60      	ldr	r3, [pc, #384]	; (8000380 <fsm_automatic+0x234>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	4a59      	ldr	r2, [pc, #356]	; (8000368 <fsm_automatic+0x21c>)
 8000202:	6013      	str	r3, [r2, #0]
					buzzer_period = 75;
 8000204:	4b5b      	ldr	r3, [pc, #364]	; (8000374 <fsm_automatic+0x228>)
 8000206:	224b      	movs	r2, #75	; 0x4b
 8000208:	601a      	str	r2, [r3, #0]
					volume = 100;
 800020a:	4b5b      	ldr	r3, [pc, #364]	; (8000378 <fsm_automatic+0x22c>)
 800020c:	2264      	movs	r2, #100	; 0x64
 800020e:	601a      	str	r2, [r3, #0]
					status = RED_AMBER; // Change state
 8000210:	4b51      	ldr	r3, [pc, #324]	; (8000358 <fsm_automatic+0x20c>)
 8000212:	2202      	movs	r2, #2
 8000214:	601a      	str	r2, [r3, #0]
				}
				disp_time_uart(t_road_1, t_road_2);
 8000216:	4b52      	ldr	r3, [pc, #328]	; (8000360 <fsm_automatic+0x214>)
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	4a53      	ldr	r2, [pc, #332]	; (8000368 <fsm_automatic+0x21c>)
 800021c:	6812      	ldr	r2, [r2, #0]
 800021e:	4611      	mov	r1, r2
 8000220:	4618      	mov	r0, r3
 8000222:	f001 fb51 	bl	80018c8 <disp_time_uart>
				setTimer4(1000);
 8000226:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800022a:	f001 fa01 	bl	8001630 <setTimer4>
			}
			break;
 800022e:	e089      	b.n	8000344 <fsm_automatic+0x1f8>
		case RED_AMBER:
			led_config();
 8000230:	f000 f974 	bl	800051c <led_config>
			if (timer4_flag == 1) {
 8000234:	4b51      	ldr	r3, [pc, #324]	; (800037c <fsm_automatic+0x230>)
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	2b01      	cmp	r3, #1
 800023a:	f040 8085 	bne.w	8000348 <fsm_automatic+0x1fc>
				t_road_1--;
 800023e:	4b48      	ldr	r3, [pc, #288]	; (8000360 <fsm_automatic+0x214>)
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	3b01      	subs	r3, #1
 8000244:	4a46      	ldr	r2, [pc, #280]	; (8000360 <fsm_automatic+0x214>)
 8000246:	6013      	str	r3, [r2, #0]
				t_road_2--;
 8000248:	4b47      	ldr	r3, [pc, #284]	; (8000368 <fsm_automatic+0x21c>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	3b01      	subs	r3, #1
 800024e:	4a46      	ldr	r2, [pc, #280]	; (8000368 <fsm_automatic+0x21c>)
 8000250:	6013      	str	r3, [r2, #0]
				if (t_road_1 <= 0) { // next state pre-setup
 8000252:	4b43      	ldr	r3, [pc, #268]	; (8000360 <fsm_automatic+0x214>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	2b00      	cmp	r3, #0
 8000258:	dc0a      	bgt.n	8000270 <fsm_automatic+0x124>
					t_road_1 = T_GREEN;
 800025a:	4b42      	ldr	r3, [pc, #264]	; (8000364 <fsm_automatic+0x218>)
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	4a40      	ldr	r2, [pc, #256]	; (8000360 <fsm_automatic+0x214>)
 8000260:	6013      	str	r3, [r2, #0]
					t_road_2 = T_RED;
 8000262:	4b3e      	ldr	r3, [pc, #248]	; (800035c <fsm_automatic+0x210>)
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	4a40      	ldr	r2, [pc, #256]	; (8000368 <fsm_automatic+0x21c>)
 8000268:	6013      	str	r3, [r2, #0]
					status = GREEN_RED; // Change state
 800026a:	4b3b      	ldr	r3, [pc, #236]	; (8000358 <fsm_automatic+0x20c>)
 800026c:	2203      	movs	r2, #3
 800026e:	601a      	str	r2, [r3, #0]
				}
				disp_time_uart(t_road_1, t_road_2);
 8000270:	4b3b      	ldr	r3, [pc, #236]	; (8000360 <fsm_automatic+0x214>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	4a3c      	ldr	r2, [pc, #240]	; (8000368 <fsm_automatic+0x21c>)
 8000276:	6812      	ldr	r2, [r2, #0]
 8000278:	4611      	mov	r1, r2
 800027a:	4618      	mov	r0, r3
 800027c:	f001 fb24 	bl	80018c8 <disp_time_uart>
				setTimer4(1000);
 8000280:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000284:	f001 f9d4 	bl	8001630 <setTimer4>
			}
			break;
 8000288:	e05e      	b.n	8000348 <fsm_automatic+0x1fc>
		case GREEN_RED:
			led_config();
 800028a:	f000 f947 	bl	800051c <led_config>
			if (timer4_flag == 1) {
 800028e:	4b3b      	ldr	r3, [pc, #236]	; (800037c <fsm_automatic+0x230>)
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	2b01      	cmp	r3, #1
 8000294:	d15a      	bne.n	800034c <fsm_automatic+0x200>
				t_road_1--;
 8000296:	4b32      	ldr	r3, [pc, #200]	; (8000360 <fsm_automatic+0x214>)
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	3b01      	subs	r3, #1
 800029c:	4a30      	ldr	r2, [pc, #192]	; (8000360 <fsm_automatic+0x214>)
 800029e:	6013      	str	r3, [r2, #0]
				t_road_2--;
 80002a0:	4b31      	ldr	r3, [pc, #196]	; (8000368 <fsm_automatic+0x21c>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	3b01      	subs	r3, #1
 80002a6:	4a30      	ldr	r2, [pc, #192]	; (8000368 <fsm_automatic+0x21c>)
 80002a8:	6013      	str	r3, [r2, #0]
				if (t_road_1 <= 0) { // next state pre-setup
 80002aa:	4b2d      	ldr	r3, [pc, #180]	; (8000360 <fsm_automatic+0x214>)
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	dc06      	bgt.n	80002c0 <fsm_automatic+0x174>
					t_road_1 = T_AMBER;
 80002b2:	4b33      	ldr	r3, [pc, #204]	; (8000380 <fsm_automatic+0x234>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	4a2a      	ldr	r2, [pc, #168]	; (8000360 <fsm_automatic+0x214>)
 80002b8:	6013      	str	r3, [r2, #0]
					status = AMBER_RED; // Change state
 80002ba:	4b27      	ldr	r3, [pc, #156]	; (8000358 <fsm_automatic+0x20c>)
 80002bc:	2204      	movs	r2, #4
 80002be:	601a      	str	r2, [r3, #0]
				}
				disp_time_uart(t_road_1, t_road_2);
 80002c0:	4b27      	ldr	r3, [pc, #156]	; (8000360 <fsm_automatic+0x214>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	4a28      	ldr	r2, [pc, #160]	; (8000368 <fsm_automatic+0x21c>)
 80002c6:	6812      	ldr	r2, [r2, #0]
 80002c8:	4611      	mov	r1, r2
 80002ca:	4618      	mov	r0, r3
 80002cc:	f001 fafc 	bl	80018c8 <disp_time_uart>
				setTimer4(1000);
 80002d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002d4:	f001 f9ac 	bl	8001630 <setTimer4>
			}
			break;
 80002d8:	e038      	b.n	800034c <fsm_automatic+0x200>
		case AMBER_RED:
			led_config();
 80002da:	f000 f91f 	bl	800051c <led_config>
			if (timer4_flag == 1) {
 80002de:	4b27      	ldr	r3, [pc, #156]	; (800037c <fsm_automatic+0x230>)
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	2b01      	cmp	r3, #1
 80002e4:	d134      	bne.n	8000350 <fsm_automatic+0x204>
				t_road_1--;
 80002e6:	4b1e      	ldr	r3, [pc, #120]	; (8000360 <fsm_automatic+0x214>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	3b01      	subs	r3, #1
 80002ec:	4a1c      	ldr	r2, [pc, #112]	; (8000360 <fsm_automatic+0x214>)
 80002ee:	6013      	str	r3, [r2, #0]
				t_road_2--;
 80002f0:	4b1d      	ldr	r3, [pc, #116]	; (8000368 <fsm_automatic+0x21c>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	3b01      	subs	r3, #1
 80002f6:	4a1c      	ldr	r2, [pc, #112]	; (8000368 <fsm_automatic+0x21c>)
 80002f8:	6013      	str	r3, [r2, #0]
				if (t_road_1 <= 0) { // next state pre-setup
 80002fa:	4b19      	ldr	r3, [pc, #100]	; (8000360 <fsm_automatic+0x214>)
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	2b00      	cmp	r3, #0
 8000300:	dc11      	bgt.n	8000326 <fsm_automatic+0x1da>
					t_road_1 = T_RED;
 8000302:	4b16      	ldr	r3, [pc, #88]	; (800035c <fsm_automatic+0x210>)
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	4a16      	ldr	r2, [pc, #88]	; (8000360 <fsm_automatic+0x214>)
 8000308:	6013      	str	r3, [r2, #0]
					t_road_2 = T_GREEN;
 800030a:	4b16      	ldr	r3, [pc, #88]	; (8000364 <fsm_automatic+0x218>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	4a16      	ldr	r2, [pc, #88]	; (8000368 <fsm_automatic+0x21c>)
 8000310:	6013      	str	r3, [r2, #0]
					buzzer_period=500;
 8000312:	4b18      	ldr	r3, [pc, #96]	; (8000374 <fsm_automatic+0x228>)
 8000314:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000318:	601a      	str	r2, [r3, #0]
					volume = 20;
 800031a:	4b17      	ldr	r3, [pc, #92]	; (8000378 <fsm_automatic+0x22c>)
 800031c:	2214      	movs	r2, #20
 800031e:	601a      	str	r2, [r3, #0]
					status = RED_GREEN; // Change state
 8000320:	4b0d      	ldr	r3, [pc, #52]	; (8000358 <fsm_automatic+0x20c>)
 8000322:	2201      	movs	r2, #1
 8000324:	601a      	str	r2, [r3, #0]
				}
				disp_time_uart(t_road_1, t_road_2);
 8000326:	4b0e      	ldr	r3, [pc, #56]	; (8000360 <fsm_automatic+0x214>)
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	4a0f      	ldr	r2, [pc, #60]	; (8000368 <fsm_automatic+0x21c>)
 800032c:	6812      	ldr	r2, [r2, #0]
 800032e:	4611      	mov	r1, r2
 8000330:	4618      	mov	r0, r3
 8000332:	f001 fac9 	bl	80018c8 <disp_time_uart>
				setTimer4(1000);
 8000336:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800033a:	f001 f979 	bl	8001630 <setTimer4>
			}
			break;
 800033e:	e007      	b.n	8000350 <fsm_automatic+0x204>
		default:
			break;
 8000340:	bf00      	nop
 8000342:	e006      	b.n	8000352 <fsm_automatic+0x206>
			break;
 8000344:	bf00      	nop
 8000346:	e004      	b.n	8000352 <fsm_automatic+0x206>
			break;
 8000348:	bf00      	nop
 800034a:	e002      	b.n	8000352 <fsm_automatic+0x206>
			break;
 800034c:	bf00      	nop
 800034e:	e000      	b.n	8000352 <fsm_automatic+0x206>
			break;
 8000350:	bf00      	nop
	}
}
 8000352:	bf00      	nop
 8000354:	bd80      	pop	{r7, pc}
 8000356:	bf00      	nop
 8000358:	2000000c 	.word	0x2000000c
 800035c:	20000000 	.word	0x20000000
 8000360:	200000b4 	.word	0x200000b4
 8000364:	20000008 	.word	0x20000008
 8000368:	200000b8 	.word	0x200000b8
 800036c:	08004df8 	.word	0x08004df8
 8000370:	2000016c 	.word	0x2000016c
 8000374:	20000014 	.word	0x20000014
 8000378:	20000018 	.word	0x20000018
 800037c:	200001e4 	.word	0x200001e4
 8000380:	20000004 	.word	0x20000004

08000384 <fsm_red_manual>:
#include "global.h"
#include "fsm_manual.h"
#include "timer.h"
#include "uart.h"

void fsm_red_manual() {
 8000384:	b580      	push	{r7, lr}
 8000386:	af00      	add	r7, sp, #0
	switch(status) {
 8000388:	4b1c      	ldr	r3, [pc, #112]	; (80003fc <fsm_red_manual+0x78>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	2b07      	cmp	r3, #7
 800038e:	d023      	beq.n	80003d8 <fsm_red_manual+0x54>
 8000390:	2b07      	cmp	r3, #7
 8000392:	dc2c      	bgt.n	80003ee <fsm_red_manual+0x6a>
 8000394:	2b05      	cmp	r3, #5
 8000396:	d002      	beq.n	800039e <fsm_red_manual+0x1a>
 8000398:	2b06      	cmp	r3, #6
 800039a:	d012      	beq.n	80003c2 <fsm_red_manual+0x3e>
				toggle_red();
				setTimer1(500);
			}
			break;
		default:
			break;
 800039c:	e027      	b.n	80003ee <fsm_red_manual+0x6a>
			led_config();
 800039e:	f000 f8bd 	bl	800051c <led_config>
			setTimer1(500);
 80003a2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80003a6:	f001 f929 	bl	80015fc <setTimer1>
			HAL_UART_Transmit(&huart2, "!_____MODE2_____#\n\r", 20, 50);
 80003aa:	2332      	movs	r3, #50	; 0x32
 80003ac:	2214      	movs	r2, #20
 80003ae:	4914      	ldr	r1, [pc, #80]	; (8000400 <fsm_red_manual+0x7c>)
 80003b0:	4814      	ldr	r0, [pc, #80]	; (8000404 <fsm_red_manual+0x80>)
 80003b2:	f003 fa8f 	bl	80038d4 <HAL_UART_Transmit>
			disp_t_red_uart();
 80003b6:	f001 fa1b 	bl	80017f0 <disp_t_red_uart>
			status = AUTO_RED;
 80003ba:	4b10      	ldr	r3, [pc, #64]	; (80003fc <fsm_red_manual+0x78>)
 80003bc:	2206      	movs	r2, #6
 80003be:	601a      	str	r2, [r3, #0]
			break;
 80003c0:	e01a      	b.n	80003f8 <fsm_red_manual+0x74>
			if (timer1_flag == 1) {
 80003c2:	4b11      	ldr	r3, [pc, #68]	; (8000408 <fsm_red_manual+0x84>)
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	2b01      	cmp	r3, #1
 80003c8:	d113      	bne.n	80003f2 <fsm_red_manual+0x6e>
				toggle_red();
 80003ca:	f000 f9f9 	bl	80007c0 <toggle_red>
				setTimer1(500);
 80003ce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80003d2:	f001 f913 	bl	80015fc <setTimer1>
			break;
 80003d6:	e00c      	b.n	80003f2 <fsm_red_manual+0x6e>
			if (timer1_flag == 1) {
 80003d8:	4b0b      	ldr	r3, [pc, #44]	; (8000408 <fsm_red_manual+0x84>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	2b01      	cmp	r3, #1
 80003de:	d10a      	bne.n	80003f6 <fsm_red_manual+0x72>
				toggle_red();
 80003e0:	f000 f9ee 	bl	80007c0 <toggle_red>
				setTimer1(500);
 80003e4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80003e8:	f001 f908 	bl	80015fc <setTimer1>
			break;
 80003ec:	e003      	b.n	80003f6 <fsm_red_manual+0x72>
			break;
 80003ee:	bf00      	nop
 80003f0:	e002      	b.n	80003f8 <fsm_red_manual+0x74>
			break;
 80003f2:	bf00      	nop
 80003f4:	e000      	b.n	80003f8 <fsm_red_manual+0x74>
			break;
 80003f6:	bf00      	nop
	}
}
 80003f8:	bf00      	nop
 80003fa:	bd80      	pop	{r7, pc}
 80003fc:	2000000c 	.word	0x2000000c
 8000400:	08004e0c 	.word	0x08004e0c
 8000404:	2000016c 	.word	0x2000016c
 8000408:	200001d8 	.word	0x200001d8

0800040c <fsm_amber_manual>:

void fsm_amber_manual() {
 800040c:	b580      	push	{r7, lr}
 800040e:	af00      	add	r7, sp, #0
	switch(status) {
 8000410:	4b1c      	ldr	r3, [pc, #112]	; (8000484 <fsm_amber_manual+0x78>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	2b0a      	cmp	r3, #10
 8000416:	d023      	beq.n	8000460 <fsm_amber_manual+0x54>
 8000418:	2b0a      	cmp	r3, #10
 800041a:	dc2c      	bgt.n	8000476 <fsm_amber_manual+0x6a>
 800041c:	2b08      	cmp	r3, #8
 800041e:	d002      	beq.n	8000426 <fsm_amber_manual+0x1a>
 8000420:	2b09      	cmp	r3, #9
 8000422:	d012      	beq.n	800044a <fsm_amber_manual+0x3e>
				toggle_amber();
				setTimer1(500);
			}
			break;
		default:
			break;
 8000424:	e027      	b.n	8000476 <fsm_amber_manual+0x6a>
			led_config();
 8000426:	f000 f879 	bl	800051c <led_config>
			setTimer1(500);
 800042a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800042e:	f001 f8e5 	bl	80015fc <setTimer1>
			HAL_UART_Transmit(&huart2, "!_____MODE3_____#\n\r", 20, 50);
 8000432:	2332      	movs	r3, #50	; 0x32
 8000434:	2214      	movs	r2, #20
 8000436:	4914      	ldr	r1, [pc, #80]	; (8000488 <fsm_amber_manual+0x7c>)
 8000438:	4814      	ldr	r0, [pc, #80]	; (800048c <fsm_amber_manual+0x80>)
 800043a:	f003 fa4b 	bl	80038d4 <HAL_UART_Transmit>
			disp_t_amber_uart();
 800043e:	f001 f9fb 	bl	8001838 <disp_t_amber_uart>
			status = AUTO_AMBER;
 8000442:	4b10      	ldr	r3, [pc, #64]	; (8000484 <fsm_amber_manual+0x78>)
 8000444:	2209      	movs	r2, #9
 8000446:	601a      	str	r2, [r3, #0]
			break;
 8000448:	e01a      	b.n	8000480 <fsm_amber_manual+0x74>
			if (timer1_flag == 1) {
 800044a:	4b11      	ldr	r3, [pc, #68]	; (8000490 <fsm_amber_manual+0x84>)
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	2b01      	cmp	r3, #1
 8000450:	d113      	bne.n	800047a <fsm_amber_manual+0x6e>
				toggle_amber();
 8000452:	f000 f9cf 	bl	80007f4 <toggle_amber>
				setTimer1(500);
 8000456:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800045a:	f001 f8cf 	bl	80015fc <setTimer1>
			break;
 800045e:	e00c      	b.n	800047a <fsm_amber_manual+0x6e>
			if (timer1_flag == 1) {
 8000460:	4b0b      	ldr	r3, [pc, #44]	; (8000490 <fsm_amber_manual+0x84>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	2b01      	cmp	r3, #1
 8000466:	d10a      	bne.n	800047e <fsm_amber_manual+0x72>
				toggle_amber();
 8000468:	f000 f9c4 	bl	80007f4 <toggle_amber>
				setTimer1(500);
 800046c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000470:	f001 f8c4 	bl	80015fc <setTimer1>
			break;
 8000474:	e003      	b.n	800047e <fsm_amber_manual+0x72>
			break;
 8000476:	bf00      	nop
 8000478:	e002      	b.n	8000480 <fsm_amber_manual+0x74>
			break;
 800047a:	bf00      	nop
 800047c:	e000      	b.n	8000480 <fsm_amber_manual+0x74>
			break;
 800047e:	bf00      	nop
	}
}
 8000480:	bf00      	nop
 8000482:	bd80      	pop	{r7, pc}
 8000484:	2000000c 	.word	0x2000000c
 8000488:	08004e20 	.word	0x08004e20
 800048c:	2000016c 	.word	0x2000016c
 8000490:	200001d8 	.word	0x200001d8

08000494 <fsm_green_manual>:

void fsm_green_manual() {
 8000494:	b580      	push	{r7, lr}
 8000496:	af00      	add	r7, sp, #0
	switch(status) {
 8000498:	4b1c      	ldr	r3, [pc, #112]	; (800050c <fsm_green_manual+0x78>)
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	2b0d      	cmp	r3, #13
 800049e:	d023      	beq.n	80004e8 <fsm_green_manual+0x54>
 80004a0:	2b0d      	cmp	r3, #13
 80004a2:	dc2c      	bgt.n	80004fe <fsm_green_manual+0x6a>
 80004a4:	2b0b      	cmp	r3, #11
 80004a6:	d002      	beq.n	80004ae <fsm_green_manual+0x1a>
 80004a8:	2b0c      	cmp	r3, #12
 80004aa:	d012      	beq.n	80004d2 <fsm_green_manual+0x3e>
				toggle_green();
				setTimer1(500);
			}
			break;
		default:
			break;
 80004ac:	e027      	b.n	80004fe <fsm_green_manual+0x6a>
			led_config();
 80004ae:	f000 f835 	bl	800051c <led_config>
			setTimer1(500);
 80004b2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004b6:	f001 f8a1 	bl	80015fc <setTimer1>
			HAL_UART_Transmit(&huart2, "!_____MODE4_____#\n\r", 20, 50);
 80004ba:	2332      	movs	r3, #50	; 0x32
 80004bc:	2214      	movs	r2, #20
 80004be:	4914      	ldr	r1, [pc, #80]	; (8000510 <fsm_green_manual+0x7c>)
 80004c0:	4814      	ldr	r0, [pc, #80]	; (8000514 <fsm_green_manual+0x80>)
 80004c2:	f003 fa07 	bl	80038d4 <HAL_UART_Transmit>
			disp_t_green_uart();
 80004c6:	f001 f9db 	bl	8001880 <disp_t_green_uart>
			status = AUTO_GREEN;
 80004ca:	4b10      	ldr	r3, [pc, #64]	; (800050c <fsm_green_manual+0x78>)
 80004cc:	220c      	movs	r2, #12
 80004ce:	601a      	str	r2, [r3, #0]
			break;
 80004d0:	e01a      	b.n	8000508 <fsm_green_manual+0x74>
			if (timer1_flag == 1) {
 80004d2:	4b11      	ldr	r3, [pc, #68]	; (8000518 <fsm_green_manual+0x84>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	2b01      	cmp	r3, #1
 80004d8:	d113      	bne.n	8000502 <fsm_green_manual+0x6e>
				toggle_green();
 80004da:	f000 f9a5 	bl	8000828 <toggle_green>
				setTimer1(500);
 80004de:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004e2:	f001 f88b 	bl	80015fc <setTimer1>
			break;
 80004e6:	e00c      	b.n	8000502 <fsm_green_manual+0x6e>
			if (timer1_flag == 1) {
 80004e8:	4b0b      	ldr	r3, [pc, #44]	; (8000518 <fsm_green_manual+0x84>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	2b01      	cmp	r3, #1
 80004ee:	d10a      	bne.n	8000506 <fsm_green_manual+0x72>
				toggle_green();
 80004f0:	f000 f99a 	bl	8000828 <toggle_green>
				setTimer1(500);
 80004f4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004f8:	f001 f880 	bl	80015fc <setTimer1>
			break;
 80004fc:	e003      	b.n	8000506 <fsm_green_manual+0x72>
			break;
 80004fe:	bf00      	nop
 8000500:	e002      	b.n	8000508 <fsm_green_manual+0x74>
			break;
 8000502:	bf00      	nop
 8000504:	e000      	b.n	8000508 <fsm_green_manual+0x74>
			break;
 8000506:	bf00      	nop
	}
}
 8000508:	bf00      	nop
 800050a:	bd80      	pop	{r7, pc}
 800050c:	2000000c 	.word	0x2000000c
 8000510:	08004e34 	.word	0x08004e34
 8000514:	2000016c 	.word	0x2000016c
 8000518:	200001d8 	.word	0x200001d8

0800051c <led_config>:
void on_red_pedestrian();
void on_green_pedestrian();

void set_buzzer();

void led_config() {
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
	pedestrian_buzzer_config();
 8000520:	f000 f9d8 	bl	80008d4 <pedestrian_buzzer_config>
	pedestrian_led_config();
 8000524:	f000 f856 	bl	80005d4 <pedestrian_led_config>
	switch (status) {
 8000528:	4b28      	ldr	r3, [pc, #160]	; (80005cc <led_config+0xb0>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	2b0b      	cmp	r3, #11
 800052e:	d84a      	bhi.n	80005c6 <led_config+0xaa>
 8000530:	a201      	add	r2, pc, #4	; (adr r2, 8000538 <led_config+0x1c>)
 8000532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000536:	bf00      	nop
 8000538:	08000569 	.word	0x08000569
 800053c:	08000577 	.word	0x08000577
 8000540:	08000581 	.word	0x08000581
 8000544:	08000587 	.word	0x08000587
 8000548:	08000591 	.word	0x08000591
 800054c:	08000597 	.word	0x08000597
 8000550:	080005c7 	.word	0x080005c7
 8000554:	080005c7 	.word	0x080005c7
 8000558:	080005a7 	.word	0x080005a7
 800055c:	080005c7 	.word	0x080005c7
 8000560:	080005c7 	.word	0x080005c7
 8000564:	080005b7 	.word	0x080005b7
		case MODE1:
			off_all_leds_road_1();
 8000568:	f000 f89a 	bl	80006a0 <off_all_leds_road_1>
			off_all_leds_road_2();
 800056c:	f000 f8ac 	bl	80006c8 <off_all_leds_road_2>
			off_pedestrian();
 8000570:	f000 f974 	bl	800085c <off_pedestrian>
			break;
 8000574:	e028      	b.n	80005c8 <led_config+0xac>
		case RED_GREEN:
			on_red_road_1();
 8000576:	f000 f8b7 	bl	80006e8 <on_red_road_1>
			on_green_road_2();
 800057a:	f000 f911 	bl	80007a0 <on_green_road_2>

			break;
 800057e:	e023      	b.n	80005c8 <led_config+0xac>
		case RED_AMBER:
			on_amber_road_2();
 8000580:	f000 f8ea 	bl	8000758 <on_amber_road_2>
			break;
 8000584:	e020      	b.n	80005c8 <led_config+0xac>
		case GREEN_RED:
			on_green_road_1();
 8000586:	f000 f8f7 	bl	8000778 <on_green_road_1>
			on_red_road_2();
 800058a:	f000 f8c1 	bl	8000710 <on_red_road_2>
			break;
 800058e:	e01b      	b.n	80005c8 <led_config+0xac>
		case AMBER_RED:
			on_amber_road_1();
 8000590:	f000 f8ce 	bl	8000730 <on_amber_road_1>
			break;
 8000594:	e018      	b.n	80005c8 <led_config+0xac>
		case MODE2:
			on_red_road_1();
 8000596:	f000 f8a7 	bl	80006e8 <on_red_road_1>
			on_red_road_2();
 800059a:	f000 f8b9 	bl	8000710 <on_red_road_2>
			toggle_flag = 0;
 800059e:	4b0c      	ldr	r3, [pc, #48]	; (80005d0 <led_config+0xb4>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	601a      	str	r2, [r3, #0]
			break;
 80005a4:	e010      	b.n	80005c8 <led_config+0xac>
		case MODE3:
			on_amber_road_1();
 80005a6:	f000 f8c3 	bl	8000730 <on_amber_road_1>
			on_amber_road_2();
 80005aa:	f000 f8d5 	bl	8000758 <on_amber_road_2>
			toggle_flag = 0;
 80005ae:	4b08      	ldr	r3, [pc, #32]	; (80005d0 <led_config+0xb4>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	601a      	str	r2, [r3, #0]
			break;
 80005b4:	e008      	b.n	80005c8 <led_config+0xac>
		case MODE4:
			on_green_road_1();
 80005b6:	f000 f8df 	bl	8000778 <on_green_road_1>
			on_green_road_2();
 80005ba:	f000 f8f1 	bl	80007a0 <on_green_road_2>
			toggle_flag = 0;
 80005be:	4b04      	ldr	r3, [pc, #16]	; (80005d0 <led_config+0xb4>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	601a      	str	r2, [r3, #0]
			break;
 80005c4:	e000      	b.n	80005c8 <led_config+0xac>
		default:
			break;
 80005c6:	bf00      	nop
	}
}
 80005c8:	bf00      	nop
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	2000000c 	.word	0x2000000c
 80005d0:	200000bc 	.word	0x200000bc

080005d4 <pedestrian_led_config>:
void pedestrian_led_config(){
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
	switch (status) {
 80005d8:	4b2f      	ldr	r3, [pc, #188]	; (8000698 <pedestrian_led_config+0xc4>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	2b0b      	cmp	r3, #11
 80005de:	d858      	bhi.n	8000692 <pedestrian_led_config+0xbe>
 80005e0:	a201      	add	r2, pc, #4	; (adr r2, 80005e8 <pedestrian_led_config+0x14>)
 80005e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005e6:	bf00      	nop
 80005e8:	08000619 	.word	0x08000619
 80005ec:	0800061f 	.word	0x0800061f
 80005f0:	08000633 	.word	0x08000633
 80005f4:	08000647 	.word	0x08000647
 80005f8:	0800065b 	.word	0x0800065b
 80005fc:	0800066f 	.word	0x0800066f
 8000600:	08000693 	.word	0x08000693
 8000604:	08000693 	.word	0x08000693
 8000608:	0800067b 	.word	0x0800067b
 800060c:	08000693 	.word	0x08000693
 8000610:	08000693 	.word	0x08000693
 8000614:	08000687 	.word	0x08000687
			case MODE1:
				off_pedestrian();
 8000618:	f000 f920 	bl	800085c <off_pedestrian>
				break;
 800061c:	e03a      	b.n	8000694 <pedestrian_led_config+0xc0>
			case RED_GREEN:
				if(curr_ped_status==PED_ON){
 800061e:	4b1f      	ldr	r3, [pc, #124]	; (800069c <pedestrian_led_config+0xc8>)
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	2b00      	cmp	r3, #0
 8000624:	d102      	bne.n	800062c <pedestrian_led_config+0x58>
					on_green_pedestrian();
 8000626:	f000 f941 	bl	80008ac <on_green_pedestrian>
					break;
 800062a:	e033      	b.n	8000694 <pedestrian_led_config+0xc0>
				}
				off_pedestrian();
 800062c:	f000 f916 	bl	800085c <off_pedestrian>
				break;
 8000630:	e030      	b.n	8000694 <pedestrian_led_config+0xc0>
			case RED_AMBER:
				if(curr_ped_status==PED_ON){
 8000632:	4b1a      	ldr	r3, [pc, #104]	; (800069c <pedestrian_led_config+0xc8>)
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	2b00      	cmp	r3, #0
 8000638:	d102      	bne.n	8000640 <pedestrian_led_config+0x6c>
					on_green_pedestrian();
 800063a:	f000 f937 	bl	80008ac <on_green_pedestrian>
					break;
 800063e:	e029      	b.n	8000694 <pedestrian_led_config+0xc0>
				}
				off_pedestrian();
 8000640:	f000 f90c 	bl	800085c <off_pedestrian>
				break;
 8000644:	e026      	b.n	8000694 <pedestrian_led_config+0xc0>
			case GREEN_RED:
				if(curr_ped_status==PED_ON){
 8000646:	4b15      	ldr	r3, [pc, #84]	; (800069c <pedestrian_led_config+0xc8>)
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	2b00      	cmp	r3, #0
 800064c:	d102      	bne.n	8000654 <pedestrian_led_config+0x80>
					on_red_pedestrian();
 800064e:	f000 f919 	bl	8000884 <on_red_pedestrian>
					break;
 8000652:	e01f      	b.n	8000694 <pedestrian_led_config+0xc0>
				}
				off_pedestrian();
 8000654:	f000 f902 	bl	800085c <off_pedestrian>
				break;
 8000658:	e01c      	b.n	8000694 <pedestrian_led_config+0xc0>
			case AMBER_RED:
				if(curr_ped_status==PED_ON){
 800065a:	4b10      	ldr	r3, [pc, #64]	; (800069c <pedestrian_led_config+0xc8>)
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	2b00      	cmp	r3, #0
 8000660:	d102      	bne.n	8000668 <pedestrian_led_config+0x94>
					on_red_pedestrian();
 8000662:	f000 f90f 	bl	8000884 <on_red_pedestrian>
					break;
 8000666:	e015      	b.n	8000694 <pedestrian_led_config+0xc0>
				}
				off_pedestrian();
 8000668:	f000 f8f8 	bl	800085c <off_pedestrian>
				break;
 800066c:	e012      	b.n	8000694 <pedestrian_led_config+0xc0>
			case MODE2:
				curr_ped_status=PED_OFF;
 800066e:	4b0b      	ldr	r3, [pc, #44]	; (800069c <pedestrian_led_config+0xc8>)
 8000670:	2201      	movs	r2, #1
 8000672:	701a      	strb	r2, [r3, #0]
				off_pedestrian();
 8000674:	f000 f8f2 	bl	800085c <off_pedestrian>
				break;
 8000678:	e00c      	b.n	8000694 <pedestrian_led_config+0xc0>
			case MODE3:
				curr_ped_status=PED_OFF;
 800067a:	4b08      	ldr	r3, [pc, #32]	; (800069c <pedestrian_led_config+0xc8>)
 800067c:	2201      	movs	r2, #1
 800067e:	701a      	strb	r2, [r3, #0]
				off_pedestrian();
 8000680:	f000 f8ec 	bl	800085c <off_pedestrian>
				break;
 8000684:	e006      	b.n	8000694 <pedestrian_led_config+0xc0>
			case MODE4:
				curr_ped_status=PED_OFF;
 8000686:	4b05      	ldr	r3, [pc, #20]	; (800069c <pedestrian_led_config+0xc8>)
 8000688:	2201      	movs	r2, #1
 800068a:	701a      	strb	r2, [r3, #0]
				off_pedestrian();
 800068c:	f000 f8e6 	bl	800085c <off_pedestrian>
				break;
 8000690:	e000      	b.n	8000694 <pedestrian_led_config+0xc0>
			default:
				break;
 8000692:	bf00      	nop
		}
}
 8000694:	bf00      	nop
 8000696:	bd80      	pop	{r7, pc}
 8000698:	2000000c 	.word	0x2000000c
 800069c:	20000010 	.word	0x20000010

080006a0 <off_all_leds_road_1>:
void off_all_leds_road_1() {
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (D2_LED1_GPIO_Port, D2_LED1_Pin, 0);
 80006a4:	2200      	movs	r2, #0
 80006a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006aa:	4805      	ldr	r0, [pc, #20]	; (80006c0 <off_all_leds_road_1+0x20>)
 80006ac:	f001 fd33 	bl	8002116 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (D3_LED1_GPIO_Port, D3_LED1_Pin, 0);
 80006b0:	2200      	movs	r2, #0
 80006b2:	2108      	movs	r1, #8
 80006b4:	4803      	ldr	r0, [pc, #12]	; (80006c4 <off_all_leds_road_1+0x24>)
 80006b6:	f001 fd2e 	bl	8002116 <HAL_GPIO_WritePin>
}
 80006ba:	bf00      	nop
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	40010800 	.word	0x40010800
 80006c4:	40010c00 	.word	0x40010c00

080006c8 <off_all_leds_road_2>:

void off_all_leds_road_2() {
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (D4_LED2_GPIO_Port, D4_LED2_Pin, 0);
 80006cc:	2200      	movs	r2, #0
 80006ce:	2120      	movs	r1, #32
 80006d0:	4804      	ldr	r0, [pc, #16]	; (80006e4 <off_all_leds_road_2+0x1c>)
 80006d2:	f001 fd20 	bl	8002116 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (D5_LED2_GPIO_Port, D5_LED2_Pin, 0);
 80006d6:	2200      	movs	r2, #0
 80006d8:	2110      	movs	r1, #16
 80006da:	4802      	ldr	r0, [pc, #8]	; (80006e4 <off_all_leds_road_2+0x1c>)
 80006dc:	f001 fd1b 	bl	8002116 <HAL_GPIO_WritePin>
}
 80006e0:	bf00      	nop
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	40010c00 	.word	0x40010c00

080006e8 <on_red_road_1>:

void on_red_road_1() {
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (D2_LED1_GPIO_Port, D2_LED1_Pin, 1);
 80006ec:	2201      	movs	r2, #1
 80006ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006f2:	4805      	ldr	r0, [pc, #20]	; (8000708 <on_red_road_1+0x20>)
 80006f4:	f001 fd0f 	bl	8002116 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (D3_LED1_GPIO_Port, D3_LED1_Pin, 0);
 80006f8:	2200      	movs	r2, #0
 80006fa:	2108      	movs	r1, #8
 80006fc:	4803      	ldr	r0, [pc, #12]	; (800070c <on_red_road_1+0x24>)
 80006fe:	f001 fd0a 	bl	8002116 <HAL_GPIO_WritePin>
}
 8000702:	bf00      	nop
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	40010800 	.word	0x40010800
 800070c:	40010c00 	.word	0x40010c00

08000710 <on_red_road_2>:

void on_red_road_2() {
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (D4_LED2_GPIO_Port, D4_LED2_Pin, 1);
 8000714:	2201      	movs	r2, #1
 8000716:	2120      	movs	r1, #32
 8000718:	4804      	ldr	r0, [pc, #16]	; (800072c <on_red_road_2+0x1c>)
 800071a:	f001 fcfc 	bl	8002116 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (D5_LED2_GPIO_Port, D5_LED2_Pin, 0);
 800071e:	2200      	movs	r2, #0
 8000720:	2110      	movs	r1, #16
 8000722:	4802      	ldr	r0, [pc, #8]	; (800072c <on_red_road_2+0x1c>)
 8000724:	f001 fcf7 	bl	8002116 <HAL_GPIO_WritePin>
}
 8000728:	bf00      	nop
 800072a:	bd80      	pop	{r7, pc}
 800072c:	40010c00 	.word	0x40010c00

08000730 <on_amber_road_1>:

void on_amber_road_1() {
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (D2_LED1_GPIO_Port, D2_LED1_Pin, 1);
 8000734:	2201      	movs	r2, #1
 8000736:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800073a:	4805      	ldr	r0, [pc, #20]	; (8000750 <on_amber_road_1+0x20>)
 800073c:	f001 fceb 	bl	8002116 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (D3_LED1_GPIO_Port, D3_LED1_Pin, 1);
 8000740:	2201      	movs	r2, #1
 8000742:	2108      	movs	r1, #8
 8000744:	4803      	ldr	r0, [pc, #12]	; (8000754 <on_amber_road_1+0x24>)
 8000746:	f001 fce6 	bl	8002116 <HAL_GPIO_WritePin>
}
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	40010800 	.word	0x40010800
 8000754:	40010c00 	.word	0x40010c00

08000758 <on_amber_road_2>:

void on_amber_road_2() {
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (D4_LED2_GPIO_Port, D4_LED2_Pin, 1);
 800075c:	2201      	movs	r2, #1
 800075e:	2120      	movs	r1, #32
 8000760:	4804      	ldr	r0, [pc, #16]	; (8000774 <on_amber_road_2+0x1c>)
 8000762:	f001 fcd8 	bl	8002116 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (D5_LED2_GPIO_Port, D5_LED2_Pin, 1);
 8000766:	2201      	movs	r2, #1
 8000768:	2110      	movs	r1, #16
 800076a:	4802      	ldr	r0, [pc, #8]	; (8000774 <on_amber_road_2+0x1c>)
 800076c:	f001 fcd3 	bl	8002116 <HAL_GPIO_WritePin>
}
 8000770:	bf00      	nop
 8000772:	bd80      	pop	{r7, pc}
 8000774:	40010c00 	.word	0x40010c00

08000778 <on_green_road_1>:

void on_green_road_1() {
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (D2_LED1_GPIO_Port, D2_LED1_Pin, 0);
 800077c:	2200      	movs	r2, #0
 800077e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000782:	4805      	ldr	r0, [pc, #20]	; (8000798 <on_green_road_1+0x20>)
 8000784:	f001 fcc7 	bl	8002116 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (D3_LED1_GPIO_Port, D3_LED1_Pin, 1);
 8000788:	2201      	movs	r2, #1
 800078a:	2108      	movs	r1, #8
 800078c:	4803      	ldr	r0, [pc, #12]	; (800079c <on_green_road_1+0x24>)
 800078e:	f001 fcc2 	bl	8002116 <HAL_GPIO_WritePin>
}
 8000792:	bf00      	nop
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	40010800 	.word	0x40010800
 800079c:	40010c00 	.word	0x40010c00

080007a0 <on_green_road_2>:

void on_green_road_2() {
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (D4_LED2_GPIO_Port, D4_LED2_Pin, 0);
 80007a4:	2200      	movs	r2, #0
 80007a6:	2120      	movs	r1, #32
 80007a8:	4804      	ldr	r0, [pc, #16]	; (80007bc <on_green_road_2+0x1c>)
 80007aa:	f001 fcb4 	bl	8002116 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (D5_LED2_GPIO_Port, D5_LED2_Pin, 1);
 80007ae:	2201      	movs	r2, #1
 80007b0:	2110      	movs	r1, #16
 80007b2:	4802      	ldr	r0, [pc, #8]	; (80007bc <on_green_road_2+0x1c>)
 80007b4:	f001 fcaf 	bl	8002116 <HAL_GPIO_WritePin>
}
 80007b8:	bf00      	nop
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	40010c00 	.word	0x40010c00

080007c0 <toggle_red>:


void toggle_red() {
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
	if (toggle_flag == 0) {
 80007c4:	4b0a      	ldr	r3, [pc, #40]	; (80007f0 <toggle_red+0x30>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d107      	bne.n	80007dc <toggle_red+0x1c>
		on_red_road_1();
 80007cc:	f7ff ff8c 	bl	80006e8 <on_red_road_1>
		on_red_road_2();
 80007d0:	f7ff ff9e 	bl	8000710 <on_red_road_2>
		toggle_flag = 1;
 80007d4:	4b06      	ldr	r3, [pc, #24]	; (80007f0 <toggle_red+0x30>)
 80007d6:	2201      	movs	r2, #1
 80007d8:	601a      	str	r2, [r3, #0]
	} else {
		off_all_leds_road_1();
		off_all_leds_road_2();
		toggle_flag = 0;
	}
}
 80007da:	e006      	b.n	80007ea <toggle_red+0x2a>
		off_all_leds_road_1();
 80007dc:	f7ff ff60 	bl	80006a0 <off_all_leds_road_1>
		off_all_leds_road_2();
 80007e0:	f7ff ff72 	bl	80006c8 <off_all_leds_road_2>
		toggle_flag = 0;
 80007e4:	4b02      	ldr	r3, [pc, #8]	; (80007f0 <toggle_red+0x30>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	601a      	str	r2, [r3, #0]
}
 80007ea:	bf00      	nop
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	200000bc 	.word	0x200000bc

080007f4 <toggle_amber>:

void toggle_amber() {
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
	if (toggle_flag == 0) {
 80007f8:	4b0a      	ldr	r3, [pc, #40]	; (8000824 <toggle_amber+0x30>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d107      	bne.n	8000810 <toggle_amber+0x1c>
		on_amber_road_1();
 8000800:	f7ff ff96 	bl	8000730 <on_amber_road_1>
		on_amber_road_2();
 8000804:	f7ff ffa8 	bl	8000758 <on_amber_road_2>
		toggle_flag = 1;
 8000808:	4b06      	ldr	r3, [pc, #24]	; (8000824 <toggle_amber+0x30>)
 800080a:	2201      	movs	r2, #1
 800080c:	601a      	str	r2, [r3, #0]
	} else {
		off_all_leds_road_1();
		off_all_leds_road_2();
		toggle_flag = 0;
	}
}
 800080e:	e006      	b.n	800081e <toggle_amber+0x2a>
		off_all_leds_road_1();
 8000810:	f7ff ff46 	bl	80006a0 <off_all_leds_road_1>
		off_all_leds_road_2();
 8000814:	f7ff ff58 	bl	80006c8 <off_all_leds_road_2>
		toggle_flag = 0;
 8000818:	4b02      	ldr	r3, [pc, #8]	; (8000824 <toggle_amber+0x30>)
 800081a:	2200      	movs	r2, #0
 800081c:	601a      	str	r2, [r3, #0]
}
 800081e:	bf00      	nop
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	200000bc 	.word	0x200000bc

08000828 <toggle_green>:

void toggle_green() {
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
	if (toggle_flag == 0) {
 800082c:	4b0a      	ldr	r3, [pc, #40]	; (8000858 <toggle_green+0x30>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d107      	bne.n	8000844 <toggle_green+0x1c>
		on_green_road_1();
 8000834:	f7ff ffa0 	bl	8000778 <on_green_road_1>
		on_green_road_2();
 8000838:	f7ff ffb2 	bl	80007a0 <on_green_road_2>
		toggle_flag = 1;
 800083c:	4b06      	ldr	r3, [pc, #24]	; (8000858 <toggle_green+0x30>)
 800083e:	2201      	movs	r2, #1
 8000840:	601a      	str	r2, [r3, #0]
	} else {
		off_all_leds_road_1();
		off_all_leds_road_2();
		toggle_flag = 0;
	}
}
 8000842:	e006      	b.n	8000852 <toggle_green+0x2a>
		off_all_leds_road_1();
 8000844:	f7ff ff2c 	bl	80006a0 <off_all_leds_road_1>
		off_all_leds_road_2();
 8000848:	f7ff ff3e 	bl	80006c8 <off_all_leds_road_2>
		toggle_flag = 0;
 800084c:	4b02      	ldr	r3, [pc, #8]	; (8000858 <toggle_green+0x30>)
 800084e:	2200      	movs	r2, #0
 8000850:	601a      	str	r2, [r3, #0]
}
 8000852:	bf00      	nop
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	200000bc 	.word	0x200000bc

0800085c <off_pedestrian>:

void off_pedestrian(){
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (D6_PedLED_GPIO_Port, D6_PedLED_Pin, 0);
 8000860:	2200      	movs	r2, #0
 8000862:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000866:	4805      	ldr	r0, [pc, #20]	; (800087c <off_pedestrian+0x20>)
 8000868:	f001 fc55 	bl	8002116 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (D7_PedLED_GPIO_Port, D7_PedLED_Pin, 0);
 800086c:	2200      	movs	r2, #0
 800086e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000872:	4803      	ldr	r0, [pc, #12]	; (8000880 <off_pedestrian+0x24>)
 8000874:	f001 fc4f 	bl	8002116 <HAL_GPIO_WritePin>
}
 8000878:	bf00      	nop
 800087a:	bd80      	pop	{r7, pc}
 800087c:	40010c00 	.word	0x40010c00
 8000880:	40010800 	.word	0x40010800

08000884 <on_red_pedestrian>:
void on_red_pedestrian(){
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (D6_PedLED_GPIO_Port, D6_PedLED_Pin, 1);
 8000888:	2201      	movs	r2, #1
 800088a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800088e:	4805      	ldr	r0, [pc, #20]	; (80008a4 <on_red_pedestrian+0x20>)
 8000890:	f001 fc41 	bl	8002116 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (D7_PedLED_GPIO_Port, D7_PedLED_Pin, 0);
 8000894:	2200      	movs	r2, #0
 8000896:	f44f 7180 	mov.w	r1, #256	; 0x100
 800089a:	4803      	ldr	r0, [pc, #12]	; (80008a8 <on_red_pedestrian+0x24>)
 800089c:	f001 fc3b 	bl	8002116 <HAL_GPIO_WritePin>
}
 80008a0:	bf00      	nop
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	40010c00 	.word	0x40010c00
 80008a8:	40010800 	.word	0x40010800

080008ac <on_green_pedestrian>:
void on_green_pedestrian(){
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (D6_PedLED_GPIO_Port, D6_PedLED_Pin, 0);
 80008b0:	2200      	movs	r2, #0
 80008b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008b6:	4805      	ldr	r0, [pc, #20]	; (80008cc <on_green_pedestrian+0x20>)
 80008b8:	f001 fc2d 	bl	8002116 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (D7_PedLED_GPIO_Port, D7_PedLED_Pin, 1);
 80008bc:	2201      	movs	r2, #1
 80008be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008c2:	4803      	ldr	r0, [pc, #12]	; (80008d0 <on_green_pedestrian+0x24>)
 80008c4:	f001 fc27 	bl	8002116 <HAL_GPIO_WritePin>
}
 80008c8:	bf00      	nop
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	40010c00 	.word	0x40010c00
 80008d0:	40010800 	.word	0x40010800

080008d4 <pedestrian_buzzer_config>:

void pedestrian_buzzer_config(){
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
	switch (status) {
 80008d8:	4b34      	ldr	r3, [pc, #208]	; (80009ac <pedestrian_buzzer_config+0xd8>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	2b0b      	cmp	r3, #11
 80008de:	d862      	bhi.n	80009a6 <pedestrian_buzzer_config+0xd2>
 80008e0:	a201      	add	r2, pc, #4	; (adr r2, 80008e8 <pedestrian_buzzer_config+0x14>)
 80008e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008e6:	bf00      	nop
 80008e8:	08000919 	.word	0x08000919
 80008ec:	08000921 	.word	0x08000921
 80008f0:	08000937 	.word	0x08000937
 80008f4:	0800094d 	.word	0x0800094d
 80008f8:	08000965 	.word	0x08000965
 80008fc:	0800097d 	.word	0x0800097d
 8000900:	080009a7 	.word	0x080009a7
 8000904:	080009a7 	.word	0x080009a7
 8000908:	0800098b 	.word	0x0800098b
 800090c:	080009a7 	.word	0x080009a7
 8000910:	080009a7 	.word	0x080009a7
 8000914:	08000999 	.word	0x08000999
			case MODE1:
				buzzer(0);
 8000918:	2000      	movs	r0, #0
 800091a:	f000 fb0f 	bl	8000f3c <buzzer>
				break;
 800091e:	e043      	b.n	80009a8 <pedestrian_buzzer_config+0xd4>
			case RED_GREEN:
				if(curr_ped_status==PED_ON){
 8000920:	4b23      	ldr	r3, [pc, #140]	; (80009b0 <pedestrian_buzzer_config+0xdc>)
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	2b00      	cmp	r3, #0
 8000926:	d102      	bne.n	800092e <pedestrian_buzzer_config+0x5a>
					set_buzzer();
 8000928:	f000 f844 	bl	80009b4 <set_buzzer>
					break;
 800092c:	e03c      	b.n	80009a8 <pedestrian_buzzer_config+0xd4>
				}
				buzzer(0);
 800092e:	2000      	movs	r0, #0
 8000930:	f000 fb04 	bl	8000f3c <buzzer>
				break;
 8000934:	e038      	b.n	80009a8 <pedestrian_buzzer_config+0xd4>
			case RED_AMBER:
				if(curr_ped_status==PED_ON){
 8000936:	4b1e      	ldr	r3, [pc, #120]	; (80009b0 <pedestrian_buzzer_config+0xdc>)
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	2b00      	cmp	r3, #0
 800093c:	d102      	bne.n	8000944 <pedestrian_buzzer_config+0x70>
					set_buzzer();
 800093e:	f000 f839 	bl	80009b4 <set_buzzer>
					break;
 8000942:	e031      	b.n	80009a8 <pedestrian_buzzer_config+0xd4>
				}
				buzzer(0);
 8000944:	2000      	movs	r0, #0
 8000946:	f000 faf9 	bl	8000f3c <buzzer>
				break;
 800094a:	e02d      	b.n	80009a8 <pedestrian_buzzer_config+0xd4>
			case GREEN_RED:
				if(curr_ped_status==PED_ON){
 800094c:	4b18      	ldr	r3, [pc, #96]	; (80009b0 <pedestrian_buzzer_config+0xdc>)
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d103      	bne.n	800095c <pedestrian_buzzer_config+0x88>
					buzzer(0);
 8000954:	2000      	movs	r0, #0
 8000956:	f000 faf1 	bl	8000f3c <buzzer>
					break;
 800095a:	e025      	b.n	80009a8 <pedestrian_buzzer_config+0xd4>
				}
				buzzer(0);
 800095c:	2000      	movs	r0, #0
 800095e:	f000 faed 	bl	8000f3c <buzzer>
				break;
 8000962:	e021      	b.n	80009a8 <pedestrian_buzzer_config+0xd4>
			case AMBER_RED:
				if(curr_ped_status==PED_ON){
 8000964:	4b12      	ldr	r3, [pc, #72]	; (80009b0 <pedestrian_buzzer_config+0xdc>)
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	2b00      	cmp	r3, #0
 800096a:	d103      	bne.n	8000974 <pedestrian_buzzer_config+0xa0>
					buzzer(0);
 800096c:	2000      	movs	r0, #0
 800096e:	f000 fae5 	bl	8000f3c <buzzer>
					break;
 8000972:	e019      	b.n	80009a8 <pedestrian_buzzer_config+0xd4>
				}
				buzzer(0);
 8000974:	2000      	movs	r0, #0
 8000976:	f000 fae1 	bl	8000f3c <buzzer>
				break;
 800097a:	e015      	b.n	80009a8 <pedestrian_buzzer_config+0xd4>
			case MODE2:
				curr_ped_status=PED_OFF;
 800097c:	4b0c      	ldr	r3, [pc, #48]	; (80009b0 <pedestrian_buzzer_config+0xdc>)
 800097e:	2201      	movs	r2, #1
 8000980:	701a      	strb	r2, [r3, #0]
				buzzer(0);
 8000982:	2000      	movs	r0, #0
 8000984:	f000 fada 	bl	8000f3c <buzzer>
				break;
 8000988:	e00e      	b.n	80009a8 <pedestrian_buzzer_config+0xd4>
			case MODE3:
				curr_ped_status=PED_OFF;
 800098a:	4b09      	ldr	r3, [pc, #36]	; (80009b0 <pedestrian_buzzer_config+0xdc>)
 800098c:	2201      	movs	r2, #1
 800098e:	701a      	strb	r2, [r3, #0]
				buzzer(0);
 8000990:	2000      	movs	r0, #0
 8000992:	f000 fad3 	bl	8000f3c <buzzer>
				break;
 8000996:	e007      	b.n	80009a8 <pedestrian_buzzer_config+0xd4>
			case MODE4:
				curr_ped_status=PED_OFF;
 8000998:	4b05      	ldr	r3, [pc, #20]	; (80009b0 <pedestrian_buzzer_config+0xdc>)
 800099a:	2201      	movs	r2, #1
 800099c:	701a      	strb	r2, [r3, #0]
				buzzer(0);
 800099e:	2000      	movs	r0, #0
 80009a0:	f000 facc 	bl	8000f3c <buzzer>
				break;
 80009a4:	e000      	b.n	80009a8 <pedestrian_buzzer_config+0xd4>
			default:
				break;
 80009a6:	bf00      	nop
		}
}
 80009a8:	bf00      	nop
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	2000000c 	.word	0x2000000c
 80009b0:	20000010 	.word	0x20000010

080009b4 <set_buzzer>:


void set_buzzer(){
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
//	setTimer6(500);
	if (timer6_flag == 1){
 80009b8:	4b0e      	ldr	r3, [pc, #56]	; (80009f4 <set_buzzer+0x40>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	2b01      	cmp	r3, #1
 80009be:	d117      	bne.n	80009f0 <set_buzzer+0x3c>
		setTimer6(buzzer_period);
 80009c0:	4b0d      	ldr	r3, [pc, #52]	; (80009f8 <set_buzzer+0x44>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4618      	mov	r0, r3
 80009c6:	f000 fe67 	bl	8001698 <setTimer6>
		if (buzzer_flag == 0){
 80009ca:	4b0c      	ldr	r3, [pc, #48]	; (80009fc <set_buzzer+0x48>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d108      	bne.n	80009e4 <set_buzzer+0x30>
			buzzer(volume);
 80009d2:	4b0b      	ldr	r3, [pc, #44]	; (8000a00 <set_buzzer+0x4c>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	4618      	mov	r0, r3
 80009d8:	f000 fab0 	bl	8000f3c <buzzer>
			buzzer_flag = 1;
 80009dc:	4b07      	ldr	r3, [pc, #28]	; (80009fc <set_buzzer+0x48>)
 80009de:	2201      	movs	r2, #1
 80009e0:	601a      	str	r2, [r3, #0]
		}else {
			buzzer(0);
			buzzer_flag = 0;
		}
	}
}
 80009e2:	e005      	b.n	80009f0 <set_buzzer+0x3c>
			buzzer(0);
 80009e4:	2000      	movs	r0, #0
 80009e6:	f000 faa9 	bl	8000f3c <buzzer>
			buzzer_flag = 0;
 80009ea:	4b04      	ldr	r3, [pc, #16]	; (80009fc <set_buzzer+0x48>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	601a      	str	r2, [r3, #0]
}
 80009f0:	bf00      	nop
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	200001ec 	.word	0x200001ec
 80009f8:	20000014 	.word	0x20000014
 80009fc:	200000c0 	.word	0x200000c0
 8000a00:	20000018 	.word	0x20000018

08000a04 <fsm_button_processing>:
enum ButtonState button_0_state = BUTTON_PRESSED;
enum ButtonState button_1_state = BUTTON_PRESSED;
enum ButtonState button_2_state = BUTTON_PRESSED;
enum ButtonState button_3_state = BUTTON_PRESSED;

void fsm_button_processing() {
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
	if(timer5_flag==1){
 8000a08:	4b99      	ldr	r3, [pc, #612]	; (8000c70 <fsm_button_processing+0x26c>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	2b01      	cmp	r3, #1
 8000a0e:	d105      	bne.n	8000a1c <fsm_button_processing+0x18>
		timer5_flag=0;
 8000a10:	4b97      	ldr	r3, [pc, #604]	; (8000c70 <fsm_button_processing+0x26c>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	601a      	str	r2, [r3, #0]
		curr_ped_status=PED_OFF;
 8000a16:	4b97      	ldr	r3, [pc, #604]	; (8000c74 <fsm_button_processing+0x270>)
 8000a18:	2201      	movs	r2, #1
 8000a1a:	701a      	strb	r2, [r3, #0]
	}
	switch (button_0_state) {
 8000a1c:	4b96      	ldr	r3, [pc, #600]	; (8000c78 <fsm_button_processing+0x274>)
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	2b02      	cmp	r3, #2
 8000a22:	d043      	beq.n	8000aac <fsm_button_processing+0xa8>
 8000a24:	2b02      	cmp	r3, #2
 8000a26:	dc50      	bgt.n	8000aca <fsm_button_processing+0xc6>
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d002      	beq.n	8000a32 <fsm_button_processing+0x2e>
 8000a2c:	2b01      	cmp	r3, #1
 8000a2e:	d029      	beq.n	8000a84 <fsm_button_processing+0x80>
 8000a30:	e04b      	b.n	8000aca <fsm_button_processing+0xc6>
			case BUTTON_RELEASED:
				if (is_button_pressed(0)) {
 8000a32:	2000      	movs	r0, #0
 8000a34:	f000 fa4e 	bl	8000ed4 <is_button_pressed>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d040      	beq.n	8000ac0 <fsm_button_processing+0xbc>
					button_0_state = BUTTON_PRESSED;
 8000a3e:	4b8e      	ldr	r3, [pc, #568]	; (8000c78 <fsm_button_processing+0x274>)
 8000a40:	2201      	movs	r2, #1
 8000a42:	701a      	strb	r2, [r3, #0]
					if(curr_ped_status==PED_OFF&&(status==MODE1||status==RED_GREEN||status==RED_AMBER||status==GREEN_RED||status==AMBER_RED)){
 8000a44:	4b8b      	ldr	r3, [pc, #556]	; (8000c74 <fsm_button_processing+0x270>)
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	2b01      	cmp	r3, #1
 8000a4a:	d139      	bne.n	8000ac0 <fsm_button_processing+0xbc>
 8000a4c:	4b8b      	ldr	r3, [pc, #556]	; (8000c7c <fsm_button_processing+0x278>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d00f      	beq.n	8000a74 <fsm_button_processing+0x70>
 8000a54:	4b89      	ldr	r3, [pc, #548]	; (8000c7c <fsm_button_processing+0x278>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	2b01      	cmp	r3, #1
 8000a5a:	d00b      	beq.n	8000a74 <fsm_button_processing+0x70>
 8000a5c:	4b87      	ldr	r3, [pc, #540]	; (8000c7c <fsm_button_processing+0x278>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	2b02      	cmp	r3, #2
 8000a62:	d007      	beq.n	8000a74 <fsm_button_processing+0x70>
 8000a64:	4b85      	ldr	r3, [pc, #532]	; (8000c7c <fsm_button_processing+0x278>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	2b03      	cmp	r3, #3
 8000a6a:	d003      	beq.n	8000a74 <fsm_button_processing+0x70>
 8000a6c:	4b83      	ldr	r3, [pc, #524]	; (8000c7c <fsm_button_processing+0x278>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	2b04      	cmp	r3, #4
 8000a72:	d125      	bne.n	8000ac0 <fsm_button_processing+0xbc>
						curr_ped_status=PED_ON;
 8000a74:	4b7f      	ldr	r3, [pc, #508]	; (8000c74 <fsm_button_processing+0x270>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	701a      	strb	r2, [r3, #0]
						setTimer5(10*1000);
 8000a7a:	f242 7010 	movw	r0, #10000	; 0x2710
 8000a7e:	f000 fdf1 	bl	8001664 <setTimer5>
					}
				}
				break;
 8000a82:	e01d      	b.n	8000ac0 <fsm_button_processing+0xbc>
			case BUTTON_PRESSED:
				if (!is_button_pressed(0)) {
 8000a84:	2000      	movs	r0, #0
 8000a86:	f000 fa25 	bl	8000ed4 <is_button_pressed>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d103      	bne.n	8000a98 <fsm_button_processing+0x94>
					button_0_state = BUTTON_RELEASED;
 8000a90:	4b79      	ldr	r3, [pc, #484]	; (8000c78 <fsm_button_processing+0x274>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	701a      	strb	r2, [r3, #0]
				} else {
					if (is_button_pressed_1s(0)) {
						button_0_state = BUTTON_PRESSED_MORE_THAN_1_SECOND;
					}
				}
				break;
 8000a96:	e015      	b.n	8000ac4 <fsm_button_processing+0xc0>
					if (is_button_pressed_1s(0)) {
 8000a98:	2000      	movs	r0, #0
 8000a9a:	f000 fa35 	bl	8000f08 <is_button_pressed_1s>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d00f      	beq.n	8000ac4 <fsm_button_processing+0xc0>
						button_0_state = BUTTON_PRESSED_MORE_THAN_1_SECOND;
 8000aa4:	4b74      	ldr	r3, [pc, #464]	; (8000c78 <fsm_button_processing+0x274>)
 8000aa6:	2202      	movs	r2, #2
 8000aa8:	701a      	strb	r2, [r3, #0]
				break;
 8000aaa:	e00b      	b.n	8000ac4 <fsm_button_processing+0xc0>
			case BUTTON_PRESSED_MORE_THAN_1_SECOND:
				if (!is_button_pressed(0)) {
 8000aac:	2000      	movs	r0, #0
 8000aae:	f000 fa11 	bl	8000ed4 <is_button_pressed>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d107      	bne.n	8000ac8 <fsm_button_processing+0xc4>
					button_0_state = BUTTON_RELEASED;
 8000ab8:	4b6f      	ldr	r3, [pc, #444]	; (8000c78 <fsm_button_processing+0x274>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	701a      	strb	r2, [r3, #0]
				}
				// do nothing, wait for the button to be released
				break;
 8000abe:	e003      	b.n	8000ac8 <fsm_button_processing+0xc4>
				break;
 8000ac0:	bf00      	nop
 8000ac2:	e002      	b.n	8000aca <fsm_button_processing+0xc6>
				break;
 8000ac4:	bf00      	nop
 8000ac6:	e000      	b.n	8000aca <fsm_button_processing+0xc6>
				break;
 8000ac8:	bf00      	nop
		}
	switch (button_1_state) {
 8000aca:	4b6d      	ldr	r3, [pc, #436]	; (8000c80 <fsm_button_processing+0x27c>)
 8000acc:	781b      	ldrb	r3, [r3, #0]
 8000ace:	2b02      	cmp	r3, #2
 8000ad0:	d040      	beq.n	8000b54 <fsm_button_processing+0x150>
 8000ad2:	2b02      	cmp	r3, #2
 8000ad4:	dc4d      	bgt.n	8000b72 <fsm_button_processing+0x16e>
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d002      	beq.n	8000ae0 <fsm_button_processing+0xdc>
 8000ada:	2b01      	cmp	r3, #1
 8000adc:	d026      	beq.n	8000b2c <fsm_button_processing+0x128>
 8000ade:	e048      	b.n	8000b72 <fsm_button_processing+0x16e>
		case BUTTON_RELEASED:
			if (is_button_pressed(1)) {
 8000ae0:	2001      	movs	r0, #1
 8000ae2:	f000 f9f7 	bl	8000ed4 <is_button_pressed>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d03d      	beq.n	8000b68 <fsm_button_processing+0x164>
				button_1_state = BUTTON_PRESSED;
 8000aec:	4b64      	ldr	r3, [pc, #400]	; (8000c80 <fsm_button_processing+0x27c>)
 8000aee:	2201      	movs	r2, #1
 8000af0:	701a      	strb	r2, [r3, #0]
				if (status == RED_GREEN)	status = MODE2;
 8000af2:	4b62      	ldr	r3, [pc, #392]	; (8000c7c <fsm_button_processing+0x278>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	2b01      	cmp	r3, #1
 8000af8:	d102      	bne.n	8000b00 <fsm_button_processing+0xfc>
 8000afa:	4b60      	ldr	r3, [pc, #384]	; (8000c7c <fsm_button_processing+0x278>)
 8000afc:	2205      	movs	r2, #5
 8000afe:	601a      	str	r2, [r3, #0]
				if (status == AUTO_RED) 	status = MODE3;
 8000b00:	4b5e      	ldr	r3, [pc, #376]	; (8000c7c <fsm_button_processing+0x278>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	2b06      	cmp	r3, #6
 8000b06:	d102      	bne.n	8000b0e <fsm_button_processing+0x10a>
 8000b08:	4b5c      	ldr	r3, [pc, #368]	; (8000c7c <fsm_button_processing+0x278>)
 8000b0a:	2208      	movs	r2, #8
 8000b0c:	601a      	str	r2, [r3, #0]
				if (status == AUTO_AMBER) 	status = MODE4;
 8000b0e:	4b5b      	ldr	r3, [pc, #364]	; (8000c7c <fsm_button_processing+0x278>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	2b09      	cmp	r3, #9
 8000b14:	d102      	bne.n	8000b1c <fsm_button_processing+0x118>
 8000b16:	4b59      	ldr	r3, [pc, #356]	; (8000c7c <fsm_button_processing+0x278>)
 8000b18:	220b      	movs	r2, #11
 8000b1a:	601a      	str	r2, [r3, #0]
				if (status == AUTO_GREEN) 	status = MODE1;
 8000b1c:	4b57      	ldr	r3, [pc, #348]	; (8000c7c <fsm_button_processing+0x278>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	2b0c      	cmp	r3, #12
 8000b22:	d121      	bne.n	8000b68 <fsm_button_processing+0x164>
 8000b24:	4b55      	ldr	r3, [pc, #340]	; (8000c7c <fsm_button_processing+0x278>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	601a      	str	r2, [r3, #0]
			}
			break;
 8000b2a:	e01d      	b.n	8000b68 <fsm_button_processing+0x164>
		case BUTTON_PRESSED:
			if (!is_button_pressed(1)) {
 8000b2c:	2001      	movs	r0, #1
 8000b2e:	f000 f9d1 	bl	8000ed4 <is_button_pressed>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d103      	bne.n	8000b40 <fsm_button_processing+0x13c>
				button_1_state = BUTTON_RELEASED;
 8000b38:	4b51      	ldr	r3, [pc, #324]	; (8000c80 <fsm_button_processing+0x27c>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	701a      	strb	r2, [r3, #0]
			} else {
				if (is_button_pressed_1s(1)) {
					button_1_state = BUTTON_PRESSED_MORE_THAN_1_SECOND;
				}
			}
			break;
 8000b3e:	e015      	b.n	8000b6c <fsm_button_processing+0x168>
				if (is_button_pressed_1s(1)) {
 8000b40:	2001      	movs	r0, #1
 8000b42:	f000 f9e1 	bl	8000f08 <is_button_pressed_1s>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d00f      	beq.n	8000b6c <fsm_button_processing+0x168>
					button_1_state = BUTTON_PRESSED_MORE_THAN_1_SECOND;
 8000b4c:	4b4c      	ldr	r3, [pc, #304]	; (8000c80 <fsm_button_processing+0x27c>)
 8000b4e:	2202      	movs	r2, #2
 8000b50:	701a      	strb	r2, [r3, #0]
			break;
 8000b52:	e00b      	b.n	8000b6c <fsm_button_processing+0x168>
		case BUTTON_PRESSED_MORE_THAN_1_SECOND:
			if (!is_button_pressed(1)) {
 8000b54:	2001      	movs	r0, #1
 8000b56:	f000 f9bd 	bl	8000ed4 <is_button_pressed>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d107      	bne.n	8000b70 <fsm_button_processing+0x16c>
				button_1_state = BUTTON_RELEASED;
 8000b60:	4b47      	ldr	r3, [pc, #284]	; (8000c80 <fsm_button_processing+0x27c>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	701a      	strb	r2, [r3, #0]
			}
			// do nothing, wait for the button to be released
			break;
 8000b66:	e003      	b.n	8000b70 <fsm_button_processing+0x16c>
			break;
 8000b68:	bf00      	nop
 8000b6a:	e002      	b.n	8000b72 <fsm_button_processing+0x16e>
			break;
 8000b6c:	bf00      	nop
 8000b6e:	e000      	b.n	8000b72 <fsm_button_processing+0x16e>
			break;
 8000b70:	bf00      	nop
	}

	switch (button_2_state) {
 8000b72:	4b44      	ldr	r3, [pc, #272]	; (8000c84 <fsm_button_processing+0x280>)
 8000b74:	781b      	ldrb	r3, [r3, #0]
 8000b76:	2b02      	cmp	r3, #2
 8000b78:	d070      	beq.n	8000c5c <fsm_button_processing+0x258>
 8000b7a:	2b02      	cmp	r3, #2
 8000b7c:	f300 808f 	bgt.w	8000c9e <fsm_button_processing+0x29a>
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d002      	beq.n	8000b8a <fsm_button_processing+0x186>
 8000b84:	2b01      	cmp	r3, #1
 8000b86:	d055      	beq.n	8000c34 <fsm_button_processing+0x230>
 8000b88:	e089      	b.n	8000c9e <fsm_button_processing+0x29a>
		case BUTTON_RELEASED:
			if (is_button_pressed(2)) {
 8000b8a:	2002      	movs	r0, #2
 8000b8c:	f000 f9a2 	bl	8000ed4 <is_button_pressed>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d07e      	beq.n	8000c94 <fsm_button_processing+0x290>
				button_2_state = BUTTON_PRESSED;
 8000b96:	4b3b      	ldr	r3, [pc, #236]	; (8000c84 <fsm_button_processing+0x280>)
 8000b98:	2201      	movs	r2, #1
 8000b9a:	701a      	strb	r2, [r3, #0]
				if (status == AUTO_RED || status == ADJ_RED) {
 8000b9c:	4b37      	ldr	r3, [pc, #220]	; (8000c7c <fsm_button_processing+0x278>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	2b06      	cmp	r3, #6
 8000ba2:	d003      	beq.n	8000bac <fsm_button_processing+0x1a8>
 8000ba4:	4b35      	ldr	r3, [pc, #212]	; (8000c7c <fsm_button_processing+0x278>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	2b07      	cmp	r3, #7
 8000baa:	d110      	bne.n	8000bce <fsm_button_processing+0x1ca>
					status = ADJ_RED;
 8000bac:	4b33      	ldr	r3, [pc, #204]	; (8000c7c <fsm_button_processing+0x278>)
 8000bae:	2207      	movs	r2, #7
 8000bb0:	601a      	str	r2, [r3, #0]
					T_RED++;
 8000bb2:	4b35      	ldr	r3, [pc, #212]	; (8000c88 <fsm_button_processing+0x284>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	3301      	adds	r3, #1
 8000bb8:	4a33      	ldr	r2, [pc, #204]	; (8000c88 <fsm_button_processing+0x284>)
 8000bba:	6013      	str	r3, [r2, #0]
					if (T_RED >= 99) T_RED = 1;
 8000bbc:	4b32      	ldr	r3, [pc, #200]	; (8000c88 <fsm_button_processing+0x284>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	2b62      	cmp	r3, #98	; 0x62
 8000bc2:	dd02      	ble.n	8000bca <fsm_button_processing+0x1c6>
 8000bc4:	4b30      	ldr	r3, [pc, #192]	; (8000c88 <fsm_button_processing+0x284>)
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	601a      	str	r2, [r3, #0]
					disp_t_red_uart();
 8000bca:	f000 fe11 	bl	80017f0 <disp_t_red_uart>
				}
				if (status == AUTO_AMBER || status == ADJ_AMBER) {
 8000bce:	4b2b      	ldr	r3, [pc, #172]	; (8000c7c <fsm_button_processing+0x278>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	2b09      	cmp	r3, #9
 8000bd4:	d003      	beq.n	8000bde <fsm_button_processing+0x1da>
 8000bd6:	4b29      	ldr	r3, [pc, #164]	; (8000c7c <fsm_button_processing+0x278>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	2b0a      	cmp	r3, #10
 8000bdc:	d110      	bne.n	8000c00 <fsm_button_processing+0x1fc>
					status = ADJ_AMBER;
 8000bde:	4b27      	ldr	r3, [pc, #156]	; (8000c7c <fsm_button_processing+0x278>)
 8000be0:	220a      	movs	r2, #10
 8000be2:	601a      	str	r2, [r3, #0]
					T_AMBER++;
 8000be4:	4b29      	ldr	r3, [pc, #164]	; (8000c8c <fsm_button_processing+0x288>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	3301      	adds	r3, #1
 8000bea:	4a28      	ldr	r2, [pc, #160]	; (8000c8c <fsm_button_processing+0x288>)
 8000bec:	6013      	str	r3, [r2, #0]
					if (T_AMBER >= 5) T_AMBER = 1;
 8000bee:	4b27      	ldr	r3, [pc, #156]	; (8000c8c <fsm_button_processing+0x288>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	2b04      	cmp	r3, #4
 8000bf4:	dd02      	ble.n	8000bfc <fsm_button_processing+0x1f8>
 8000bf6:	4b25      	ldr	r3, [pc, #148]	; (8000c8c <fsm_button_processing+0x288>)
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	601a      	str	r2, [r3, #0]
					disp_t_amber_uart();
 8000bfc:	f000 fe1c 	bl	8001838 <disp_t_amber_uart>
				}
				if (status == AUTO_GREEN || status == ADJ_GREEN) {
 8000c00:	4b1e      	ldr	r3, [pc, #120]	; (8000c7c <fsm_button_processing+0x278>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	2b0c      	cmp	r3, #12
 8000c06:	d003      	beq.n	8000c10 <fsm_button_processing+0x20c>
 8000c08:	4b1c      	ldr	r3, [pc, #112]	; (8000c7c <fsm_button_processing+0x278>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	2b0d      	cmp	r3, #13
 8000c0e:	d141      	bne.n	8000c94 <fsm_button_processing+0x290>
					status = ADJ_GREEN;
 8000c10:	4b1a      	ldr	r3, [pc, #104]	; (8000c7c <fsm_button_processing+0x278>)
 8000c12:	220d      	movs	r2, #13
 8000c14:	601a      	str	r2, [r3, #0]
					T_GREEN++;
 8000c16:	4b1e      	ldr	r3, [pc, #120]	; (8000c90 <fsm_button_processing+0x28c>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	3301      	adds	r3, #1
 8000c1c:	4a1c      	ldr	r2, [pc, #112]	; (8000c90 <fsm_button_processing+0x28c>)
 8000c1e:	6013      	str	r3, [r2, #0]
					if (T_GREEN >= 99) T_GREEN = 1;
 8000c20:	4b1b      	ldr	r3, [pc, #108]	; (8000c90 <fsm_button_processing+0x28c>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	2b62      	cmp	r3, #98	; 0x62
 8000c26:	dd02      	ble.n	8000c2e <fsm_button_processing+0x22a>
 8000c28:	4b19      	ldr	r3, [pc, #100]	; (8000c90 <fsm_button_processing+0x28c>)
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	601a      	str	r2, [r3, #0]
					disp_t_green_uart();
 8000c2e:	f000 fe27 	bl	8001880 <disp_t_green_uart>
				}
			}
			break;
 8000c32:	e02f      	b.n	8000c94 <fsm_button_processing+0x290>
		case BUTTON_PRESSED:
			if (!is_button_pressed(2)) {
 8000c34:	2002      	movs	r0, #2
 8000c36:	f000 f94d 	bl	8000ed4 <is_button_pressed>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d103      	bne.n	8000c48 <fsm_button_processing+0x244>
				button_2_state = BUTTON_RELEASED;
 8000c40:	4b10      	ldr	r3, [pc, #64]	; (8000c84 <fsm_button_processing+0x280>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	701a      	strb	r2, [r3, #0]
			} else {
				if (is_button_pressed_1s(2)) {
					button_2_state = BUTTON_PRESSED_MORE_THAN_1_SECOND;
				}
			}
			break;
 8000c46:	e027      	b.n	8000c98 <fsm_button_processing+0x294>
				if (is_button_pressed_1s(2)) {
 8000c48:	2002      	movs	r0, #2
 8000c4a:	f000 f95d 	bl	8000f08 <is_button_pressed_1s>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d021      	beq.n	8000c98 <fsm_button_processing+0x294>
					button_2_state = BUTTON_PRESSED_MORE_THAN_1_SECOND;
 8000c54:	4b0b      	ldr	r3, [pc, #44]	; (8000c84 <fsm_button_processing+0x280>)
 8000c56:	2202      	movs	r2, #2
 8000c58:	701a      	strb	r2, [r3, #0]
			break;
 8000c5a:	e01d      	b.n	8000c98 <fsm_button_processing+0x294>
		case BUTTON_PRESSED_MORE_THAN_1_SECOND:
			if (!is_button_pressed(2)) {
 8000c5c:	2002      	movs	r0, #2
 8000c5e:	f000 f939 	bl	8000ed4 <is_button_pressed>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d119      	bne.n	8000c9c <fsm_button_processing+0x298>
				button_2_state = BUTTON_RELEASED;
 8000c68:	4b06      	ldr	r3, [pc, #24]	; (8000c84 <fsm_button_processing+0x280>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	701a      	strb	r2, [r3, #0]
			}
			// do nothing, wait for the button to be released
			break;
 8000c6e:	e015      	b.n	8000c9c <fsm_button_processing+0x298>
 8000c70:	200001e8 	.word	0x200001e8
 8000c74:	20000010 	.word	0x20000010
 8000c78:	2000001c 	.word	0x2000001c
 8000c7c:	2000000c 	.word	0x2000000c
 8000c80:	2000001d 	.word	0x2000001d
 8000c84:	2000001e 	.word	0x2000001e
 8000c88:	20000000 	.word	0x20000000
 8000c8c:	20000004 	.word	0x20000004
 8000c90:	20000008 	.word	0x20000008
			break;
 8000c94:	bf00      	nop
 8000c96:	e002      	b.n	8000c9e <fsm_button_processing+0x29a>
			break;
 8000c98:	bf00      	nop
 8000c9a:	e000      	b.n	8000c9e <fsm_button_processing+0x29a>
			break;
 8000c9c:	bf00      	nop
	}

	switch (button_3_state) {
 8000c9e:	4b4a      	ldr	r3, [pc, #296]	; (8000dc8 <fsm_button_processing+0x3c4>)
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	2b02      	cmp	r3, #2
 8000ca4:	d07e      	beq.n	8000da4 <fsm_button_processing+0x3a0>
 8000ca6:	2b02      	cmp	r3, #2
 8000ca8:	f300 808b 	bgt.w	8000dc2 <fsm_button_processing+0x3be>
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d002      	beq.n	8000cb6 <fsm_button_processing+0x2b2>
 8000cb0:	2b01      	cmp	r3, #1
 8000cb2:	d063      	beq.n	8000d7c <fsm_button_processing+0x378>
				button_3_state = BUTTON_RELEASED;
			}
			// do nothing, wait for the button to be released
			break;
	}
}
 8000cb4:	e085      	b.n	8000dc2 <fsm_button_processing+0x3be>
			if (is_button_pressed(3)) {
 8000cb6:	2003      	movs	r0, #3
 8000cb8:	f000 f90c 	bl	8000ed4 <is_button_pressed>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d07a      	beq.n	8000db8 <fsm_button_processing+0x3b4>
				button_3_state = BUTTON_PRESSED;
 8000cc2:	4b41      	ldr	r3, [pc, #260]	; (8000dc8 <fsm_button_processing+0x3c4>)
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	701a      	strb	r2, [r3, #0]
				if (status == ADJ_RED) {
 8000cc8:	4b40      	ldr	r3, [pc, #256]	; (8000dcc <fsm_button_processing+0x3c8>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	2b07      	cmp	r3, #7
 8000cce:	d114      	bne.n	8000cfa <fsm_button_processing+0x2f6>
					status = AUTO_RED;
 8000cd0:	4b3e      	ldr	r3, [pc, #248]	; (8000dcc <fsm_button_processing+0x3c8>)
 8000cd2:	2206      	movs	r2, #6
 8000cd4:	601a      	str	r2, [r3, #0]
					if (T_RED <= T_AMBER) T_RED = T_AMBER + 1;
 8000cd6:	4b3e      	ldr	r3, [pc, #248]	; (8000dd0 <fsm_button_processing+0x3cc>)
 8000cd8:	681a      	ldr	r2, [r3, #0]
 8000cda:	4b3e      	ldr	r3, [pc, #248]	; (8000dd4 <fsm_button_processing+0x3d0>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	429a      	cmp	r2, r3
 8000ce0:	dc04      	bgt.n	8000cec <fsm_button_processing+0x2e8>
 8000ce2:	4b3c      	ldr	r3, [pc, #240]	; (8000dd4 <fsm_button_processing+0x3d0>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	3301      	adds	r3, #1
 8000ce8:	4a39      	ldr	r2, [pc, #228]	; (8000dd0 <fsm_button_processing+0x3cc>)
 8000cea:	6013      	str	r3, [r2, #0]
					T_GREEN = T_RED - T_AMBER;
 8000cec:	4b38      	ldr	r3, [pc, #224]	; (8000dd0 <fsm_button_processing+0x3cc>)
 8000cee:	681a      	ldr	r2, [r3, #0]
 8000cf0:	4b38      	ldr	r3, [pc, #224]	; (8000dd4 <fsm_button_processing+0x3d0>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	1ad3      	subs	r3, r2, r3
 8000cf6:	4a38      	ldr	r2, [pc, #224]	; (8000dd8 <fsm_button_processing+0x3d4>)
 8000cf8:	6013      	str	r3, [r2, #0]
				if (status == ADJ_AMBER) {
 8000cfa:	4b34      	ldr	r3, [pc, #208]	; (8000dcc <fsm_button_processing+0x3c8>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	2b0a      	cmp	r3, #10
 8000d00:	d114      	bne.n	8000d2c <fsm_button_processing+0x328>
					status = AUTO_AMBER;
 8000d02:	4b32      	ldr	r3, [pc, #200]	; (8000dcc <fsm_button_processing+0x3c8>)
 8000d04:	2209      	movs	r2, #9
 8000d06:	601a      	str	r2, [r3, #0]
					if (T_RED <= T_AMBER) T_RED = T_AMBER + 1;
 8000d08:	4b31      	ldr	r3, [pc, #196]	; (8000dd0 <fsm_button_processing+0x3cc>)
 8000d0a:	681a      	ldr	r2, [r3, #0]
 8000d0c:	4b31      	ldr	r3, [pc, #196]	; (8000dd4 <fsm_button_processing+0x3d0>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	429a      	cmp	r2, r3
 8000d12:	dc04      	bgt.n	8000d1e <fsm_button_processing+0x31a>
 8000d14:	4b2f      	ldr	r3, [pc, #188]	; (8000dd4 <fsm_button_processing+0x3d0>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	3301      	adds	r3, #1
 8000d1a:	4a2d      	ldr	r2, [pc, #180]	; (8000dd0 <fsm_button_processing+0x3cc>)
 8000d1c:	6013      	str	r3, [r2, #0]
					T_GREEN = T_RED - T_AMBER;
 8000d1e:	4b2c      	ldr	r3, [pc, #176]	; (8000dd0 <fsm_button_processing+0x3cc>)
 8000d20:	681a      	ldr	r2, [r3, #0]
 8000d22:	4b2c      	ldr	r3, [pc, #176]	; (8000dd4 <fsm_button_processing+0x3d0>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	1ad3      	subs	r3, r2, r3
 8000d28:	4a2b      	ldr	r2, [pc, #172]	; (8000dd8 <fsm_button_processing+0x3d4>)
 8000d2a:	6013      	str	r3, [r2, #0]
				if (status == ADJ_GREEN) {
 8000d2c:	4b27      	ldr	r3, [pc, #156]	; (8000dcc <fsm_button_processing+0x3c8>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	2b0d      	cmp	r3, #13
 8000d32:	d116      	bne.n	8000d62 <fsm_button_processing+0x35e>
					status = AUTO_GREEN;
 8000d34:	4b25      	ldr	r3, [pc, #148]	; (8000dcc <fsm_button_processing+0x3c8>)
 8000d36:	220c      	movs	r2, #12
 8000d38:	601a      	str	r2, [r3, #0]
					if (T_AMBER + T_GREEN >= 99) {
 8000d3a:	4b26      	ldr	r3, [pc, #152]	; (8000dd4 <fsm_button_processing+0x3d0>)
 8000d3c:	681a      	ldr	r2, [r3, #0]
 8000d3e:	4b26      	ldr	r3, [pc, #152]	; (8000dd8 <fsm_button_processing+0x3d4>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4413      	add	r3, r2
 8000d44:	2b62      	cmp	r3, #98	; 0x62
 8000d46:	dd05      	ble.n	8000d54 <fsm_button_processing+0x350>
						T_AMBER = 4;
 8000d48:	4b22      	ldr	r3, [pc, #136]	; (8000dd4 <fsm_button_processing+0x3d0>)
 8000d4a:	2204      	movs	r2, #4
 8000d4c:	601a      	str	r2, [r3, #0]
						T_GREEN = 95;
 8000d4e:	4b22      	ldr	r3, [pc, #136]	; (8000dd8 <fsm_button_processing+0x3d4>)
 8000d50:	225f      	movs	r2, #95	; 0x5f
 8000d52:	601a      	str	r2, [r3, #0]
					T_RED = T_AMBER + T_GREEN;
 8000d54:	4b1f      	ldr	r3, [pc, #124]	; (8000dd4 <fsm_button_processing+0x3d0>)
 8000d56:	681a      	ldr	r2, [r3, #0]
 8000d58:	4b1f      	ldr	r3, [pc, #124]	; (8000dd8 <fsm_button_processing+0x3d4>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4413      	add	r3, r2
 8000d5e:	4a1c      	ldr	r2, [pc, #112]	; (8000dd0 <fsm_button_processing+0x3cc>)
 8000d60:	6013      	str	r3, [r2, #0]
				HAL_UART_Transmit(&huart2, "!SAVED#\n\r", 11, 50);
 8000d62:	2332      	movs	r3, #50	; 0x32
 8000d64:	220b      	movs	r2, #11
 8000d66:	491d      	ldr	r1, [pc, #116]	; (8000ddc <fsm_button_processing+0x3d8>)
 8000d68:	481d      	ldr	r0, [pc, #116]	; (8000de0 <fsm_button_processing+0x3dc>)
 8000d6a:	f002 fdb3 	bl	80038d4 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart2, "\n\r", 4, 50);
 8000d6e:	2332      	movs	r3, #50	; 0x32
 8000d70:	2204      	movs	r2, #4
 8000d72:	491c      	ldr	r1, [pc, #112]	; (8000de4 <fsm_button_processing+0x3e0>)
 8000d74:	481a      	ldr	r0, [pc, #104]	; (8000de0 <fsm_button_processing+0x3dc>)
 8000d76:	f002 fdad 	bl	80038d4 <HAL_UART_Transmit>
			break;
 8000d7a:	e01d      	b.n	8000db8 <fsm_button_processing+0x3b4>
			if (!is_button_pressed(3)) {
 8000d7c:	2003      	movs	r0, #3
 8000d7e:	f000 f8a9 	bl	8000ed4 <is_button_pressed>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d103      	bne.n	8000d90 <fsm_button_processing+0x38c>
				button_3_state = BUTTON_RELEASED;
 8000d88:	4b0f      	ldr	r3, [pc, #60]	; (8000dc8 <fsm_button_processing+0x3c4>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	701a      	strb	r2, [r3, #0]
			break;
 8000d8e:	e015      	b.n	8000dbc <fsm_button_processing+0x3b8>
				if (is_button_pressed_1s(3)) {
 8000d90:	2003      	movs	r0, #3
 8000d92:	f000 f8b9 	bl	8000f08 <is_button_pressed_1s>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d00f      	beq.n	8000dbc <fsm_button_processing+0x3b8>
					button_3_state = BUTTON_PRESSED_MORE_THAN_1_SECOND;
 8000d9c:	4b0a      	ldr	r3, [pc, #40]	; (8000dc8 <fsm_button_processing+0x3c4>)
 8000d9e:	2202      	movs	r2, #2
 8000da0:	701a      	strb	r2, [r3, #0]
			break;
 8000da2:	e00b      	b.n	8000dbc <fsm_button_processing+0x3b8>
			if (!is_button_pressed(3)) {
 8000da4:	2003      	movs	r0, #3
 8000da6:	f000 f895 	bl	8000ed4 <is_button_pressed>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d107      	bne.n	8000dc0 <fsm_button_processing+0x3bc>
				button_3_state = BUTTON_RELEASED;
 8000db0:	4b05      	ldr	r3, [pc, #20]	; (8000dc8 <fsm_button_processing+0x3c4>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	701a      	strb	r2, [r3, #0]
			break;
 8000db6:	e003      	b.n	8000dc0 <fsm_button_processing+0x3bc>
			break;
 8000db8:	bf00      	nop
 8000dba:	e002      	b.n	8000dc2 <fsm_button_processing+0x3be>
			break;
 8000dbc:	bf00      	nop
 8000dbe:	e000      	b.n	8000dc2 <fsm_button_processing+0x3be>
			break;
 8000dc0:	bf00      	nop
}
 8000dc2:	bf00      	nop
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	2000001f 	.word	0x2000001f
 8000dcc:	2000000c 	.word	0x2000000c
 8000dd0:	20000000 	.word	0x20000000
 8000dd4:	20000004 	.word	0x20000004
 8000dd8:	20000008 	.word	0x20000008
 8000ddc:	08004e48 	.word	0x08004e48
 8000de0:	2000016c 	.word	0x2000016c
 8000de4:	08004e54 	.word	0x08004e54

08000de8 <button_reading>:
static uint16_t counterForButtonPress1s[N0_OF_BUTTONS];

static GPIO_TypeDef* button_ports[N0_OF_BUTTONS] = {A0_PedButton_GPIO_Port, A1_Button1_GPIO_Port, A2_Button2_GPIO_Port, A3_Button3_GPIO_Port};
static uint16_t button_pins[N0_OF_BUTTONS] = {A0_PedButton_Pin, A1_Button1_Pin, A2_Button2_Pin, A3_Button3_Pin};

void button_reading(void) {
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
	for (int i = 0; i < N0_OF_BUTTONS; i++) {
 8000dee:	2300      	movs	r3, #0
 8000df0:	607b      	str	r3, [r7, #4]
 8000df2:	e058      	b.n	8000ea6 <button_reading+0xbe>
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 8000df4:	4a30      	ldr	r2, [pc, #192]	; (8000eb8 <button_reading+0xd0>)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	4413      	add	r3, r2
 8000dfa:	7819      	ldrb	r1, [r3, #0]
 8000dfc:	4a2f      	ldr	r2, [pc, #188]	; (8000ebc <button_reading+0xd4>)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	4413      	add	r3, r2
 8000e02:	460a      	mov	r2, r1
 8000e04:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(button_ports[i], button_pins[i]);
 8000e06:	4a2e      	ldr	r2, [pc, #184]	; (8000ec0 <button_reading+0xd8>)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000e0e:	492d      	ldr	r1, [pc, #180]	; (8000ec4 <button_reading+0xdc>)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000e16:	4619      	mov	r1, r3
 8000e18:	4610      	mov	r0, r2
 8000e1a:	f001 f965 	bl	80020e8 <HAL_GPIO_ReadPin>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	4619      	mov	r1, r3
 8000e22:	4a25      	ldr	r2, [pc, #148]	; (8000eb8 <button_reading+0xd0>)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	4413      	add	r3, r2
 8000e28:	460a      	mov	r2, r1
 8000e2a:	701a      	strb	r2, [r3, #0]

		if (debounceButtonBuffer1[i] == debounceButtonBuffer2[i])
 8000e2c:	4a22      	ldr	r2, [pc, #136]	; (8000eb8 <button_reading+0xd0>)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	4413      	add	r3, r2
 8000e32:	781a      	ldrb	r2, [r3, #0]
 8000e34:	4921      	ldr	r1, [pc, #132]	; (8000ebc <button_reading+0xd4>)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	440b      	add	r3, r1
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	d108      	bne.n	8000e52 <button_reading+0x6a>
			buttonBuffer[i] = debounceButtonBuffer1[i];
 8000e40:	4a1d      	ldr	r2, [pc, #116]	; (8000eb8 <button_reading+0xd0>)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	4413      	add	r3, r2
 8000e46:	7819      	ldrb	r1, [r3, #0]
 8000e48:	4a1f      	ldr	r2, [pc, #124]	; (8000ec8 <button_reading+0xe0>)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4413      	add	r3, r2
 8000e4e:	460a      	mov	r2, r1
 8000e50:	701a      	strb	r2, [r3, #0]

		if (buttonBuffer[i] == BUTTON_IS_PRESSED) {
 8000e52:	4a1d      	ldr	r2, [pc, #116]	; (8000ec8 <button_reading+0xe0>)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	4413      	add	r3, r2
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d116      	bne.n	8000e8c <button_reading+0xa4>
			//if a button is pressed, we start counting
			if (counterForButtonPress1s[i] < DURATION_FOR_AUTO_INCREASING) {
 8000e5e:	4a1b      	ldr	r2, [pc, #108]	; (8000ecc <button_reading+0xe4>)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e66:	2b63      	cmp	r3, #99	; 0x63
 8000e68:	d80a      	bhi.n	8000e80 <button_reading+0x98>
				counterForButtonPress1s[i]++;
 8000e6a:	4a18      	ldr	r2, [pc, #96]	; (8000ecc <button_reading+0xe4>)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e72:	3301      	adds	r3, #1
 8000e74:	b299      	uxth	r1, r3
 8000e76:	4a15      	ldr	r2, [pc, #84]	; (8000ecc <button_reading+0xe4>)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000e7e:	e00f      	b.n	8000ea0 <button_reading+0xb8>
			} else {
				//the flag is turned on when 1 second has passed
				//since the button is pressed.
				flagForButtonPress1s[i] = 1;
 8000e80:	4a13      	ldr	r2, [pc, #76]	; (8000ed0 <button_reading+0xe8>)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	4413      	add	r3, r2
 8000e86:	2201      	movs	r2, #1
 8000e88:	701a      	strb	r2, [r3, #0]
 8000e8a:	e009      	b.n	8000ea0 <button_reading+0xb8>
			}
		} else {
			counterForButtonPress1s[i] = 0;
 8000e8c:	4a0f      	ldr	r2, [pc, #60]	; (8000ecc <button_reading+0xe4>)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	2100      	movs	r1, #0
 8000e92:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			flagForButtonPress1s[i] = 0;
 8000e96:	4a0e      	ldr	r2, [pc, #56]	; (8000ed0 <button_reading+0xe8>)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	4413      	add	r3, r2
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < N0_OF_BUTTONS; i++) {
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	3301      	adds	r3, #1
 8000ea4:	607b      	str	r3, [r7, #4]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2b03      	cmp	r3, #3
 8000eaa:	dda3      	ble.n	8000df4 <button_reading+0xc>
		}
	}
}
 8000eac:	bf00      	nop
 8000eae:	bf00      	nop
 8000eb0:	3708      	adds	r7, #8
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	200000c8 	.word	0x200000c8
 8000ebc:	200000cc 	.word	0x200000cc
 8000ec0:	20000020 	.word	0x20000020
 8000ec4:	20000030 	.word	0x20000030
 8000ec8:	200000c4 	.word	0x200000c4
 8000ecc:	200000d4 	.word	0x200000d4
 8000ed0:	200000d0 	.word	0x200000d0

08000ed4 <is_button_pressed>:

unsigned char is_button_pressed(uint8_t index){
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	4603      	mov	r3, r0
 8000edc:	71fb      	strb	r3, [r7, #7]
	if (index >= N0_OF_BUTTONS) return 0;
 8000ede:	79fb      	ldrb	r3, [r7, #7]
 8000ee0:	2b03      	cmp	r3, #3
 8000ee2:	d901      	bls.n	8000ee8 <is_button_pressed+0x14>
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	e007      	b.n	8000ef8 <is_button_pressed+0x24>
	return (buttonBuffer[index] == BUTTON_IS_PRESSED);
 8000ee8:	79fb      	ldrb	r3, [r7, #7]
 8000eea:	4a06      	ldr	r2, [pc, #24]	; (8000f04 <is_button_pressed+0x30>)
 8000eec:	5cd3      	ldrb	r3, [r2, r3]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	bf0c      	ite	eq
 8000ef2:	2301      	moveq	r3, #1
 8000ef4:	2300      	movne	r3, #0
 8000ef6:	b2db      	uxtb	r3, r3
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	370c      	adds	r7, #12
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bc80      	pop	{r7}
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	200000c4 	.word	0x200000c4

08000f08 <is_button_pressed_1s>:

unsigned char is_button_pressed_1s(unsigned char index){
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	4603      	mov	r3, r0
 8000f10:	71fb      	strb	r3, [r7, #7]
	if (index >= N0_OF_BUTTONS) return 0;
 8000f12:	79fb      	ldrb	r3, [r7, #7]
 8000f14:	2b03      	cmp	r3, #3
 8000f16:	d901      	bls.n	8000f1c <is_button_pressed_1s+0x14>
 8000f18:	2300      	movs	r3, #0
 8000f1a:	e007      	b.n	8000f2c <is_button_pressed_1s+0x24>
	return (flagForButtonPress1s[index] == 1);
 8000f1c:	79fb      	ldrb	r3, [r7, #7]
 8000f1e:	4a06      	ldr	r2, [pc, #24]	; (8000f38 <is_button_pressed_1s+0x30>)
 8000f20:	5cd3      	ldrb	r3, [r2, r3]
 8000f22:	2b01      	cmp	r3, #1
 8000f24:	bf0c      	ite	eq
 8000f26:	2301      	moveq	r3, #1
 8000f28:	2300      	movne	r3, #0
 8000f2a:	b2db      	uxtb	r3, r3
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	370c      	adds	r7, #12
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bc80      	pop	{r7}
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	200000d0 	.word	0x200000d0

08000f3c <buzzer>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void buzzer(int vol){
 8000f3c:	b480      	push	{r7}
 8000f3e:	b083      	sub	sp, #12
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, vol);
 8000f44:	4b04      	ldr	r3, [pc, #16]	; (8000f58 <buzzer+0x1c>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	687a      	ldr	r2, [r7, #4]
 8000f4a:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000f4c:	bf00      	nop
 8000f4e:	370c      	adds	r7, #12
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bc80      	pop	{r7}
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	20000124 	.word	0x20000124

08000f5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f60:	f000 fd1c 	bl	800199c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f64:	f000 f826 	bl	8000fb4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f68:	f000 f950 	bl	800120c <MX_GPIO_Init>
  MX_TIM2_Init();
 8000f6c:	f000 f862 	bl	8001034 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000f70:	f000 f8ac 	bl	80010cc <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000f74:	f000 f920 	bl	80011b8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000f78:	480c      	ldr	r0, [pc, #48]	; (8000fac <main+0x50>)
 8000f7a:	f001 fd45 	bl	8002a08 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8000f7e:	480c      	ldr	r0, [pc, #48]	; (8000fb0 <main+0x54>)
 8000f80:	f001 fd42 	bl	8002a08 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000f84:	2100      	movs	r1, #0
 8000f86:	480a      	ldr	r0, [pc, #40]	; (8000fb0 <main+0x54>)
 8000f88:	f001 fde8 	bl	8002b5c <HAL_TIM_PWM_Start>
  setTimer6(500);
 8000f8c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f90:	f000 fb82 	bl	8001698 <setTimer6>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  fsm_automatic();
 8000f94:	f7ff f8da 	bl	800014c <fsm_automatic>
	  fsm_red_manual();
 8000f98:	f7ff f9f4 	bl	8000384 <fsm_red_manual>
	  fsm_amber_manual();
 8000f9c:	f7ff fa36 	bl	800040c <fsm_amber_manual>
	  fsm_green_manual();
 8000fa0:	f7ff fa78 	bl	8000494 <fsm_green_manual>
	  fsm_button_processing();
 8000fa4:	f7ff fd2e 	bl	8000a04 <fsm_button_processing>
	  fsm_automatic();
 8000fa8:	e7f4      	b.n	8000f94 <main+0x38>
 8000faa:	bf00      	nop
 8000fac:	200000dc 	.word	0x200000dc
 8000fb0:	20000124 	.word	0x20000124

08000fb4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b090      	sub	sp, #64	; 0x40
 8000fb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fba:	f107 0318 	add.w	r3, r7, #24
 8000fbe:	2228      	movs	r2, #40	; 0x28
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f003 fa7a 	bl	80044bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fc8:	1d3b      	adds	r3, r7, #4
 8000fca:	2200      	movs	r2, #0
 8000fcc:	601a      	str	r2, [r3, #0]
 8000fce:	605a      	str	r2, [r3, #4]
 8000fd0:	609a      	str	r2, [r3, #8]
 8000fd2:	60da      	str	r2, [r3, #12]
 8000fd4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fde:	2310      	movs	r3, #16
 8000fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000fea:	2300      	movs	r3, #0
 8000fec:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fee:	f107 0318 	add.w	r3, r7, #24
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f001 f8a8 	bl	8002148 <HAL_RCC_OscConfig>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <SystemClock_Config+0x4e>
  {
    Error_Handler();
 8000ffe:	f000 f97f 	bl	8001300 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001002:	230f      	movs	r3, #15
 8001004:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001006:	2302      	movs	r3, #2
 8001008:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800100a:	2300      	movs	r3, #0
 800100c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800100e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001012:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001014:	2300      	movs	r3, #0
 8001016:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001018:	1d3b      	adds	r3, r7, #4
 800101a:	2100      	movs	r1, #0
 800101c:	4618      	mov	r0, r3
 800101e:	f001 fb15 	bl	800264c <HAL_RCC_ClockConfig>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8001028:	f000 f96a 	bl	8001300 <Error_Handler>
  }
}
 800102c:	bf00      	nop
 800102e:	3740      	adds	r7, #64	; 0x40
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}

08001034 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b086      	sub	sp, #24
 8001038:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800103a:	f107 0308 	add.w	r3, r7, #8
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	605a      	str	r2, [r3, #4]
 8001044:	609a      	str	r2, [r3, #8]
 8001046:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001048:	463b      	mov	r3, r7
 800104a:	2200      	movs	r2, #0
 800104c:	601a      	str	r2, [r3, #0]
 800104e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001050:	4b1d      	ldr	r3, [pc, #116]	; (80010c8 <MX_TIM2_Init+0x94>)
 8001052:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001056:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001058:	4b1b      	ldr	r3, [pc, #108]	; (80010c8 <MX_TIM2_Init+0x94>)
 800105a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800105e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001060:	4b19      	ldr	r3, [pc, #100]	; (80010c8 <MX_TIM2_Init+0x94>)
 8001062:	2200      	movs	r2, #0
 8001064:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8001066:	4b18      	ldr	r3, [pc, #96]	; (80010c8 <MX_TIM2_Init+0x94>)
 8001068:	2209      	movs	r2, #9
 800106a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800106c:	4b16      	ldr	r3, [pc, #88]	; (80010c8 <MX_TIM2_Init+0x94>)
 800106e:	2200      	movs	r2, #0
 8001070:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001072:	4b15      	ldr	r3, [pc, #84]	; (80010c8 <MX_TIM2_Init+0x94>)
 8001074:	2200      	movs	r2, #0
 8001076:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001078:	4813      	ldr	r0, [pc, #76]	; (80010c8 <MX_TIM2_Init+0x94>)
 800107a:	f001 fc75 	bl	8002968 <HAL_TIM_Base_Init>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001084:	f000 f93c 	bl	8001300 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001088:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800108c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800108e:	f107 0308 	add.w	r3, r7, #8
 8001092:	4619      	mov	r1, r3
 8001094:	480c      	ldr	r0, [pc, #48]	; (80010c8 <MX_TIM2_Init+0x94>)
 8001096:	f001 ffcd 	bl	8003034 <HAL_TIM_ConfigClockSource>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80010a0:	f000 f92e 	bl	8001300 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010a4:	2300      	movs	r3, #0
 80010a6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010a8:	2300      	movs	r3, #0
 80010aa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010ac:	463b      	mov	r3, r7
 80010ae:	4619      	mov	r1, r3
 80010b0:	4805      	ldr	r0, [pc, #20]	; (80010c8 <MX_TIM2_Init+0x94>)
 80010b2:	f002 fb4f 	bl	8003754 <HAL_TIMEx_MasterConfigSynchronization>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80010bc:	f000 f920 	bl	8001300 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80010c0:	bf00      	nop
 80010c2:	3718      	adds	r7, #24
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	200000dc 	.word	0x200000dc

080010cc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b08e      	sub	sp, #56	; 0x38
 80010d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010d6:	2200      	movs	r2, #0
 80010d8:	601a      	str	r2, [r3, #0]
 80010da:	605a      	str	r2, [r3, #4]
 80010dc:	609a      	str	r2, [r3, #8]
 80010de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010e0:	f107 0320 	add.w	r3, r7, #32
 80010e4:	2200      	movs	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]
 80010e8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010ea:	1d3b      	adds	r3, r7, #4
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]
 80010f0:	605a      	str	r2, [r3, #4]
 80010f2:	609a      	str	r2, [r3, #8]
 80010f4:	60da      	str	r2, [r3, #12]
 80010f6:	611a      	str	r2, [r3, #16]
 80010f8:	615a      	str	r2, [r3, #20]
 80010fa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80010fc:	4b2c      	ldr	r3, [pc, #176]	; (80011b0 <MX_TIM3_Init+0xe4>)
 80010fe:	4a2d      	ldr	r2, [pc, #180]	; (80011b4 <MX_TIM3_Init+0xe8>)
 8001100:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7999;
 8001102:	4b2b      	ldr	r3, [pc, #172]	; (80011b0 <MX_TIM3_Init+0xe4>)
 8001104:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001108:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800110a:	4b29      	ldr	r3, [pc, #164]	; (80011b0 <MX_TIM3_Init+0xe4>)
 800110c:	2200      	movs	r2, #0
 800110e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9;
 8001110:	4b27      	ldr	r3, [pc, #156]	; (80011b0 <MX_TIM3_Init+0xe4>)
 8001112:	2209      	movs	r2, #9
 8001114:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001116:	4b26      	ldr	r3, [pc, #152]	; (80011b0 <MX_TIM3_Init+0xe4>)
 8001118:	2200      	movs	r2, #0
 800111a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800111c:	4b24      	ldr	r3, [pc, #144]	; (80011b0 <MX_TIM3_Init+0xe4>)
 800111e:	2200      	movs	r2, #0
 8001120:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001122:	4823      	ldr	r0, [pc, #140]	; (80011b0 <MX_TIM3_Init+0xe4>)
 8001124:	f001 fc20 	bl	8002968 <HAL_TIM_Base_Init>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800112e:	f000 f8e7 	bl	8001300 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001132:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001136:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001138:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800113c:	4619      	mov	r1, r3
 800113e:	481c      	ldr	r0, [pc, #112]	; (80011b0 <MX_TIM3_Init+0xe4>)
 8001140:	f001 ff78 	bl	8003034 <HAL_TIM_ConfigClockSource>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800114a:	f000 f8d9 	bl	8001300 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800114e:	4818      	ldr	r0, [pc, #96]	; (80011b0 <MX_TIM3_Init+0xe4>)
 8001150:	f001 fcac 	bl	8002aac <HAL_TIM_PWM_Init>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800115a:	f000 f8d1 	bl	8001300 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800115e:	2300      	movs	r3, #0
 8001160:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001162:	2300      	movs	r3, #0
 8001164:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001166:	f107 0320 	add.w	r3, r7, #32
 800116a:	4619      	mov	r1, r3
 800116c:	4810      	ldr	r0, [pc, #64]	; (80011b0 <MX_TIM3_Init+0xe4>)
 800116e:	f002 faf1 	bl	8003754 <HAL_TIMEx_MasterConfigSynchronization>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001178:	f000 f8c2 	bl	8001300 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800117c:	2360      	movs	r3, #96	; 0x60
 800117e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001180:	2300      	movs	r3, #0
 8001182:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001184:	2300      	movs	r3, #0
 8001186:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001188:	2300      	movs	r3, #0
 800118a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800118c:	1d3b      	adds	r3, r7, #4
 800118e:	2200      	movs	r2, #0
 8001190:	4619      	mov	r1, r3
 8001192:	4807      	ldr	r0, [pc, #28]	; (80011b0 <MX_TIM3_Init+0xe4>)
 8001194:	f001 fe8c 	bl	8002eb0 <HAL_TIM_PWM_ConfigChannel>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800119e:	f000 f8af 	bl	8001300 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80011a2:	4803      	ldr	r0, [pc, #12]	; (80011b0 <MX_TIM3_Init+0xe4>)
 80011a4:	f000 f924 	bl	80013f0 <HAL_TIM_MspPostInit>

}
 80011a8:	bf00      	nop
 80011aa:	3738      	adds	r7, #56	; 0x38
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	20000124 	.word	0x20000124
 80011b4:	40000400 	.word	0x40000400

080011b8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011bc:	4b11      	ldr	r3, [pc, #68]	; (8001204 <MX_USART2_UART_Init+0x4c>)
 80011be:	4a12      	ldr	r2, [pc, #72]	; (8001208 <MX_USART2_UART_Init+0x50>)
 80011c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80011c2:	4b10      	ldr	r3, [pc, #64]	; (8001204 <MX_USART2_UART_Init+0x4c>)
 80011c4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80011c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011ca:	4b0e      	ldr	r3, [pc, #56]	; (8001204 <MX_USART2_UART_Init+0x4c>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011d0:	4b0c      	ldr	r3, [pc, #48]	; (8001204 <MX_USART2_UART_Init+0x4c>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011d6:	4b0b      	ldr	r3, [pc, #44]	; (8001204 <MX_USART2_UART_Init+0x4c>)
 80011d8:	2200      	movs	r2, #0
 80011da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011dc:	4b09      	ldr	r3, [pc, #36]	; (8001204 <MX_USART2_UART_Init+0x4c>)
 80011de:	220c      	movs	r2, #12
 80011e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011e2:	4b08      	ldr	r3, [pc, #32]	; (8001204 <MX_USART2_UART_Init+0x4c>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011e8:	4b06      	ldr	r3, [pc, #24]	; (8001204 <MX_USART2_UART_Init+0x4c>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011ee:	4805      	ldr	r0, [pc, #20]	; (8001204 <MX_USART2_UART_Init+0x4c>)
 80011f0:	f002 fb20 	bl	8003834 <HAL_UART_Init>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80011fa:	f000 f881 	bl	8001300 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011fe:	bf00      	nop
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	2000016c 	.word	0x2000016c
 8001208:	40004400 	.word	0x40004400

0800120c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b086      	sub	sp, #24
 8001210:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001212:	f107 0308 	add.w	r3, r7, #8
 8001216:	2200      	movs	r2, #0
 8001218:	601a      	str	r2, [r3, #0]
 800121a:	605a      	str	r2, [r3, #4]
 800121c:	609a      	str	r2, [r3, #8]
 800121e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001220:	4b2e      	ldr	r3, [pc, #184]	; (80012dc <MX_GPIO_Init+0xd0>)
 8001222:	699b      	ldr	r3, [r3, #24]
 8001224:	4a2d      	ldr	r2, [pc, #180]	; (80012dc <MX_GPIO_Init+0xd0>)
 8001226:	f043 0304 	orr.w	r3, r3, #4
 800122a:	6193      	str	r3, [r2, #24]
 800122c:	4b2b      	ldr	r3, [pc, #172]	; (80012dc <MX_GPIO_Init+0xd0>)
 800122e:	699b      	ldr	r3, [r3, #24]
 8001230:	f003 0304 	and.w	r3, r3, #4
 8001234:	607b      	str	r3, [r7, #4]
 8001236:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001238:	4b28      	ldr	r3, [pc, #160]	; (80012dc <MX_GPIO_Init+0xd0>)
 800123a:	699b      	ldr	r3, [r3, #24]
 800123c:	4a27      	ldr	r2, [pc, #156]	; (80012dc <MX_GPIO_Init+0xd0>)
 800123e:	f043 0308 	orr.w	r3, r3, #8
 8001242:	6193      	str	r3, [r2, #24]
 8001244:	4b25      	ldr	r3, [pc, #148]	; (80012dc <MX_GPIO_Init+0xd0>)
 8001246:	699b      	ldr	r3, [r3, #24]
 8001248:	f003 0308 	and.w	r3, r3, #8
 800124c:	603b      	str	r3, [r7, #0]
 800124e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_PedLED_Pin|D3_LED1_Pin|D5_LED2_Pin|D4_LED2_Pin, GPIO_PIN_RESET);
 8001250:	2200      	movs	r2, #0
 8001252:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8001256:	4822      	ldr	r0, [pc, #136]	; (80012e0 <MX_GPIO_Init+0xd4>)
 8001258:	f000 ff5d 	bl	8002116 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D7_PedLED_Pin|D2_LED1_Pin, GPIO_PIN_RESET);
 800125c:	2200      	movs	r2, #0
 800125e:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8001262:	4820      	ldr	r0, [pc, #128]	; (80012e4 <MX_GPIO_Init+0xd8>)
 8001264:	f000 ff57 	bl	8002116 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_PedButton_Pin A1_Button1_Pin A2_Button2_Pin */
  GPIO_InitStruct.Pin = A0_PedButton_Pin|A1_Button1_Pin|A2_Button2_Pin;
 8001268:	2313      	movs	r3, #19
 800126a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800126c:	2300      	movs	r3, #0
 800126e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001270:	2300      	movs	r3, #0
 8001272:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001274:	f107 0308 	add.w	r3, r7, #8
 8001278:	4619      	mov	r1, r3
 800127a:	481a      	ldr	r0, [pc, #104]	; (80012e4 <MX_GPIO_Init+0xd8>)
 800127c:	f000 fdb0 	bl	8001de0 <HAL_GPIO_Init>

  /*Configure GPIO pin : A3_Button3_Pin */
  GPIO_InitStruct.Pin = A3_Button3_Pin;
 8001280:	2301      	movs	r3, #1
 8001282:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001284:	2300      	movs	r3, #0
 8001286:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001288:	2300      	movs	r3, #0
 800128a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(A3_Button3_GPIO_Port, &GPIO_InitStruct);
 800128c:	f107 0308 	add.w	r3, r7, #8
 8001290:	4619      	mov	r1, r3
 8001292:	4813      	ldr	r0, [pc, #76]	; (80012e0 <MX_GPIO_Init+0xd4>)
 8001294:	f000 fda4 	bl	8001de0 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_PedLED_Pin D3_LED1_Pin D5_LED2_Pin D4_LED2_Pin */
  GPIO_InitStruct.Pin = D6_PedLED_Pin|D3_LED1_Pin|D5_LED2_Pin|D4_LED2_Pin;
 8001298:	f44f 6387 	mov.w	r3, #1080	; 0x438
 800129c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800129e:	2301      	movs	r3, #1
 80012a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a2:	2300      	movs	r3, #0
 80012a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a6:	2302      	movs	r3, #2
 80012a8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012aa:	f107 0308 	add.w	r3, r7, #8
 80012ae:	4619      	mov	r1, r3
 80012b0:	480b      	ldr	r0, [pc, #44]	; (80012e0 <MX_GPIO_Init+0xd4>)
 80012b2:	f000 fd95 	bl	8001de0 <HAL_GPIO_Init>

  /*Configure GPIO pins : D7_PedLED_Pin D2_LED1_Pin */
  GPIO_InitStruct.Pin = D7_PedLED_Pin|D2_LED1_Pin;
 80012b6:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80012ba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012bc:	2301      	movs	r3, #1
 80012be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c0:	2300      	movs	r3, #0
 80012c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c4:	2302      	movs	r3, #2
 80012c6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c8:	f107 0308 	add.w	r3, r7, #8
 80012cc:	4619      	mov	r1, r3
 80012ce:	4805      	ldr	r0, [pc, #20]	; (80012e4 <MX_GPIO_Init+0xd8>)
 80012d0:	f000 fd86 	bl	8001de0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012d4:	bf00      	nop
 80012d6:	3718      	adds	r7, #24
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	40021000 	.word	0x40021000
 80012e0:	40010c00 	.word	0x40010c00
 80012e4:	40010800 	.word	0x40010800

080012e8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim2) {
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
	timer_run();
 80012f0:	f000 f9ec 	bl	80016cc <timer_run>
	button_reading();
 80012f4:	f7ff fd78 	bl	8000de8 <button_reading>
}
 80012f8:	bf00      	nop
 80012fa:	3708      	adds	r7, #8
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}

08001300 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001304:	b672      	cpsid	i
}
 8001306:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001308:	e7fe      	b.n	8001308 <Error_Handler+0x8>
	...

0800130c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800130c:	b480      	push	{r7}
 800130e:	b085      	sub	sp, #20
 8001310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001312:	4b15      	ldr	r3, [pc, #84]	; (8001368 <HAL_MspInit+0x5c>)
 8001314:	699b      	ldr	r3, [r3, #24]
 8001316:	4a14      	ldr	r2, [pc, #80]	; (8001368 <HAL_MspInit+0x5c>)
 8001318:	f043 0301 	orr.w	r3, r3, #1
 800131c:	6193      	str	r3, [r2, #24]
 800131e:	4b12      	ldr	r3, [pc, #72]	; (8001368 <HAL_MspInit+0x5c>)
 8001320:	699b      	ldr	r3, [r3, #24]
 8001322:	f003 0301 	and.w	r3, r3, #1
 8001326:	60bb      	str	r3, [r7, #8]
 8001328:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800132a:	4b0f      	ldr	r3, [pc, #60]	; (8001368 <HAL_MspInit+0x5c>)
 800132c:	69db      	ldr	r3, [r3, #28]
 800132e:	4a0e      	ldr	r2, [pc, #56]	; (8001368 <HAL_MspInit+0x5c>)
 8001330:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001334:	61d3      	str	r3, [r2, #28]
 8001336:	4b0c      	ldr	r3, [pc, #48]	; (8001368 <HAL_MspInit+0x5c>)
 8001338:	69db      	ldr	r3, [r3, #28]
 800133a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800133e:	607b      	str	r3, [r7, #4]
 8001340:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001342:	4b0a      	ldr	r3, [pc, #40]	; (800136c <HAL_MspInit+0x60>)
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	60fb      	str	r3, [r7, #12]
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800134e:	60fb      	str	r3, [r7, #12]
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001356:	60fb      	str	r3, [r7, #12]
 8001358:	4a04      	ldr	r2, [pc, #16]	; (800136c <HAL_MspInit+0x60>)
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800135e:	bf00      	nop
 8001360:	3714      	adds	r7, #20
 8001362:	46bd      	mov	sp, r7
 8001364:	bc80      	pop	{r7}
 8001366:	4770      	bx	lr
 8001368:	40021000 	.word	0x40021000
 800136c:	40010000 	.word	0x40010000

08001370 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b084      	sub	sp, #16
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001380:	d114      	bne.n	80013ac <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001382:	4b19      	ldr	r3, [pc, #100]	; (80013e8 <HAL_TIM_Base_MspInit+0x78>)
 8001384:	69db      	ldr	r3, [r3, #28]
 8001386:	4a18      	ldr	r2, [pc, #96]	; (80013e8 <HAL_TIM_Base_MspInit+0x78>)
 8001388:	f043 0301 	orr.w	r3, r3, #1
 800138c:	61d3      	str	r3, [r2, #28]
 800138e:	4b16      	ldr	r3, [pc, #88]	; (80013e8 <HAL_TIM_Base_MspInit+0x78>)
 8001390:	69db      	ldr	r3, [r3, #28]
 8001392:	f003 0301 	and.w	r3, r3, #1
 8001396:	60fb      	str	r3, [r7, #12]
 8001398:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800139a:	2200      	movs	r2, #0
 800139c:	2100      	movs	r1, #0
 800139e:	201c      	movs	r0, #28
 80013a0:	f000 fc35 	bl	8001c0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80013a4:	201c      	movs	r0, #28
 80013a6:	f000 fc4e 	bl	8001c46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80013aa:	e018      	b.n	80013de <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a0e      	ldr	r2, [pc, #56]	; (80013ec <HAL_TIM_Base_MspInit+0x7c>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d113      	bne.n	80013de <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80013b6:	4b0c      	ldr	r3, [pc, #48]	; (80013e8 <HAL_TIM_Base_MspInit+0x78>)
 80013b8:	69db      	ldr	r3, [r3, #28]
 80013ba:	4a0b      	ldr	r2, [pc, #44]	; (80013e8 <HAL_TIM_Base_MspInit+0x78>)
 80013bc:	f043 0302 	orr.w	r3, r3, #2
 80013c0:	61d3      	str	r3, [r2, #28]
 80013c2:	4b09      	ldr	r3, [pc, #36]	; (80013e8 <HAL_TIM_Base_MspInit+0x78>)
 80013c4:	69db      	ldr	r3, [r3, #28]
 80013c6:	f003 0302 	and.w	r3, r3, #2
 80013ca:	60bb      	str	r3, [r7, #8]
 80013cc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80013ce:	2200      	movs	r2, #0
 80013d0:	2100      	movs	r1, #0
 80013d2:	201d      	movs	r0, #29
 80013d4:	f000 fc1b 	bl	8001c0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80013d8:	201d      	movs	r0, #29
 80013da:	f000 fc34 	bl	8001c46 <HAL_NVIC_EnableIRQ>
}
 80013de:	bf00      	nop
 80013e0:	3710      	adds	r7, #16
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	40021000 	.word	0x40021000
 80013ec:	40000400 	.word	0x40000400

080013f0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b088      	sub	sp, #32
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f8:	f107 0310 	add.w	r3, r7, #16
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]
 8001400:	605a      	str	r2, [r3, #4]
 8001402:	609a      	str	r2, [r3, #8]
 8001404:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a0f      	ldr	r2, [pc, #60]	; (8001448 <HAL_TIM_MspPostInit+0x58>)
 800140c:	4293      	cmp	r3, r2
 800140e:	d117      	bne.n	8001440 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001410:	4b0e      	ldr	r3, [pc, #56]	; (800144c <HAL_TIM_MspPostInit+0x5c>)
 8001412:	699b      	ldr	r3, [r3, #24]
 8001414:	4a0d      	ldr	r2, [pc, #52]	; (800144c <HAL_TIM_MspPostInit+0x5c>)
 8001416:	f043 0304 	orr.w	r3, r3, #4
 800141a:	6193      	str	r3, [r2, #24]
 800141c:	4b0b      	ldr	r3, [pc, #44]	; (800144c <HAL_TIM_MspPostInit+0x5c>)
 800141e:	699b      	ldr	r3, [r3, #24]
 8001420:	f003 0304 	and.w	r3, r3, #4
 8001424:	60fb      	str	r3, [r7, #12]
 8001426:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001428:	2340      	movs	r3, #64	; 0x40
 800142a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142c:	2302      	movs	r3, #2
 800142e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001430:	2302      	movs	r3, #2
 8001432:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001434:	f107 0310 	add.w	r3, r7, #16
 8001438:	4619      	mov	r1, r3
 800143a:	4805      	ldr	r0, [pc, #20]	; (8001450 <HAL_TIM_MspPostInit+0x60>)
 800143c:	f000 fcd0 	bl	8001de0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001440:	bf00      	nop
 8001442:	3720      	adds	r7, #32
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	40000400 	.word	0x40000400
 800144c:	40021000 	.word	0x40021000
 8001450:	40010800 	.word	0x40010800

08001454 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b088      	sub	sp, #32
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800145c:	f107 0310 	add.w	r3, r7, #16
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
 8001464:	605a      	str	r2, [r3, #4]
 8001466:	609a      	str	r2, [r3, #8]
 8001468:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a1f      	ldr	r2, [pc, #124]	; (80014ec <HAL_UART_MspInit+0x98>)
 8001470:	4293      	cmp	r3, r2
 8001472:	d137      	bne.n	80014e4 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001474:	4b1e      	ldr	r3, [pc, #120]	; (80014f0 <HAL_UART_MspInit+0x9c>)
 8001476:	69db      	ldr	r3, [r3, #28]
 8001478:	4a1d      	ldr	r2, [pc, #116]	; (80014f0 <HAL_UART_MspInit+0x9c>)
 800147a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800147e:	61d3      	str	r3, [r2, #28]
 8001480:	4b1b      	ldr	r3, [pc, #108]	; (80014f0 <HAL_UART_MspInit+0x9c>)
 8001482:	69db      	ldr	r3, [r3, #28]
 8001484:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001488:	60fb      	str	r3, [r7, #12]
 800148a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800148c:	4b18      	ldr	r3, [pc, #96]	; (80014f0 <HAL_UART_MspInit+0x9c>)
 800148e:	699b      	ldr	r3, [r3, #24]
 8001490:	4a17      	ldr	r2, [pc, #92]	; (80014f0 <HAL_UART_MspInit+0x9c>)
 8001492:	f043 0304 	orr.w	r3, r3, #4
 8001496:	6193      	str	r3, [r2, #24]
 8001498:	4b15      	ldr	r3, [pc, #84]	; (80014f0 <HAL_UART_MspInit+0x9c>)
 800149a:	699b      	ldr	r3, [r3, #24]
 800149c:	f003 0304 	and.w	r3, r3, #4
 80014a0:	60bb      	str	r3, [r7, #8]
 80014a2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80014a4:	2304      	movs	r3, #4
 80014a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a8:	2302      	movs	r3, #2
 80014aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014ac:	2303      	movs	r3, #3
 80014ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014b0:	f107 0310 	add.w	r3, r7, #16
 80014b4:	4619      	mov	r1, r3
 80014b6:	480f      	ldr	r0, [pc, #60]	; (80014f4 <HAL_UART_MspInit+0xa0>)
 80014b8:	f000 fc92 	bl	8001de0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80014bc:	2308      	movs	r3, #8
 80014be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014c0:	2300      	movs	r3, #0
 80014c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c4:	2300      	movs	r3, #0
 80014c6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c8:	f107 0310 	add.w	r3, r7, #16
 80014cc:	4619      	mov	r1, r3
 80014ce:	4809      	ldr	r0, [pc, #36]	; (80014f4 <HAL_UART_MspInit+0xa0>)
 80014d0:	f000 fc86 	bl	8001de0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80014d4:	2200      	movs	r2, #0
 80014d6:	2100      	movs	r1, #0
 80014d8:	2026      	movs	r0, #38	; 0x26
 80014da:	f000 fb98 	bl	8001c0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80014de:	2026      	movs	r0, #38	; 0x26
 80014e0:	f000 fbb1 	bl	8001c46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80014e4:	bf00      	nop
 80014e6:	3720      	adds	r7, #32
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	40004400 	.word	0x40004400
 80014f0:	40021000 	.word	0x40021000
 80014f4:	40010800 	.word	0x40010800

080014f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014fc:	e7fe      	b.n	80014fc <NMI_Handler+0x4>

080014fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014fe:	b480      	push	{r7}
 8001500:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001502:	e7fe      	b.n	8001502 <HardFault_Handler+0x4>

08001504 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001508:	e7fe      	b.n	8001508 <MemManage_Handler+0x4>

0800150a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800150a:	b480      	push	{r7}
 800150c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800150e:	e7fe      	b.n	800150e <BusFault_Handler+0x4>

08001510 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001514:	e7fe      	b.n	8001514 <UsageFault_Handler+0x4>

08001516 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001516:	b480      	push	{r7}
 8001518:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800151a:	bf00      	nop
 800151c:	46bd      	mov	sp, r7
 800151e:	bc80      	pop	{r7}
 8001520:	4770      	bx	lr

08001522 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001522:	b480      	push	{r7}
 8001524:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001526:	bf00      	nop
 8001528:	46bd      	mov	sp, r7
 800152a:	bc80      	pop	{r7}
 800152c:	4770      	bx	lr

0800152e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800152e:	b480      	push	{r7}
 8001530:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001532:	bf00      	nop
 8001534:	46bd      	mov	sp, r7
 8001536:	bc80      	pop	{r7}
 8001538:	4770      	bx	lr

0800153a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800153a:	b580      	push	{r7, lr}
 800153c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800153e:	f000 fa73 	bl	8001a28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001542:	bf00      	nop
 8001544:	bd80      	pop	{r7, pc}
	...

08001548 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800154c:	4802      	ldr	r0, [pc, #8]	; (8001558 <TIM2_IRQHandler+0x10>)
 800154e:	f001 fba7 	bl	8002ca0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001552:	bf00      	nop
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	200000dc 	.word	0x200000dc

0800155c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001560:	4802      	ldr	r0, [pc, #8]	; (800156c <TIM3_IRQHandler+0x10>)
 8001562:	f001 fb9d 	bl	8002ca0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001566:	bf00      	nop
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	20000124 	.word	0x20000124

08001570 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001574:	4802      	ldr	r0, [pc, #8]	; (8001580 <USART2_IRQHandler+0x10>)
 8001576:	f002 fa31 	bl	80039dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800157a:	bf00      	nop
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	2000016c 	.word	0x2000016c

08001584 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b086      	sub	sp, #24
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800158c:	4a14      	ldr	r2, [pc, #80]	; (80015e0 <_sbrk+0x5c>)
 800158e:	4b15      	ldr	r3, [pc, #84]	; (80015e4 <_sbrk+0x60>)
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001598:	4b13      	ldr	r3, [pc, #76]	; (80015e8 <_sbrk+0x64>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d102      	bne.n	80015a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015a0:	4b11      	ldr	r3, [pc, #68]	; (80015e8 <_sbrk+0x64>)
 80015a2:	4a12      	ldr	r2, [pc, #72]	; (80015ec <_sbrk+0x68>)
 80015a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015a6:	4b10      	ldr	r3, [pc, #64]	; (80015e8 <_sbrk+0x64>)
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4413      	add	r3, r2
 80015ae:	693a      	ldr	r2, [r7, #16]
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d207      	bcs.n	80015c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015b4:	f002 ff8a 	bl	80044cc <__errno>
 80015b8:	4603      	mov	r3, r0
 80015ba:	220c      	movs	r2, #12
 80015bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015be:	f04f 33ff 	mov.w	r3, #4294967295
 80015c2:	e009      	b.n	80015d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015c4:	4b08      	ldr	r3, [pc, #32]	; (80015e8 <_sbrk+0x64>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015ca:	4b07      	ldr	r3, [pc, #28]	; (80015e8 <_sbrk+0x64>)
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	4413      	add	r3, r2
 80015d2:	4a05      	ldr	r2, [pc, #20]	; (80015e8 <_sbrk+0x64>)
 80015d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015d6:	68fb      	ldr	r3, [r7, #12]
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3718      	adds	r7, #24
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	20005000 	.word	0x20005000
 80015e4:	00000400 	.word	0x00000400
 80015e8:	200001b4 	.word	0x200001b4
 80015ec:	20000340 	.word	0x20000340

080015f0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015f4:	bf00      	nop
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bc80      	pop	{r7}
 80015fa:	4770      	bx	lr

080015fc <setTimer1>:
void setTimer0(int duration) {
	timer0_counter = duration/TIMER_CYCLE;
	timer0_flag = 0;
}

void setTimer1(int duration) {
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
	timer1_counter = duration/TIMER_CYCLE;
 8001604:	4b07      	ldr	r3, [pc, #28]	; (8001624 <setTimer1+0x28>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	687a      	ldr	r2, [r7, #4]
 800160a:	fb92 f3f3 	sdiv	r3, r2, r3
 800160e:	4a06      	ldr	r2, [pc, #24]	; (8001628 <setTimer1+0x2c>)
 8001610:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8001612:	4b06      	ldr	r3, [pc, #24]	; (800162c <setTimer1+0x30>)
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]
}
 8001618:	bf00      	nop
 800161a:	370c      	adds	r7, #12
 800161c:	46bd      	mov	sp, r7
 800161e:	bc80      	pop	{r7}
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	2000003c 	.word	0x2000003c
 8001628:	200001bc 	.word	0x200001bc
 800162c:	200001d8 	.word	0x200001d8

08001630 <setTimer4>:
void setTimer3(int duration) {
	timer3_counter = duration/TIMER_CYCLE;
	timer3_flag = 0;
}

void setTimer4(int duration) {
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
	timer4_counter = duration/TIMER_CYCLE;
 8001638:	4b07      	ldr	r3, [pc, #28]	; (8001658 <setTimer4+0x28>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	687a      	ldr	r2, [r7, #4]
 800163e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001642:	4a06      	ldr	r2, [pc, #24]	; (800165c <setTimer4+0x2c>)
 8001644:	6013      	str	r3, [r2, #0]
	timer4_flag = 0;
 8001646:	4b06      	ldr	r3, [pc, #24]	; (8001660 <setTimer4+0x30>)
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
}
 800164c:	bf00      	nop
 800164e:	370c      	adds	r7, #12
 8001650:	46bd      	mov	sp, r7
 8001652:	bc80      	pop	{r7}
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	2000003c 	.word	0x2000003c
 800165c:	200001c8 	.word	0x200001c8
 8001660:	200001e4 	.word	0x200001e4

08001664 <setTimer5>:

void setTimer5(int duration) {
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
	timer5_counter = duration/TIMER_CYCLE;
 800166c:	4b07      	ldr	r3, [pc, #28]	; (800168c <setTimer5+0x28>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	687a      	ldr	r2, [r7, #4]
 8001672:	fb92 f3f3 	sdiv	r3, r2, r3
 8001676:	4a06      	ldr	r2, [pc, #24]	; (8001690 <setTimer5+0x2c>)
 8001678:	6013      	str	r3, [r2, #0]
	timer5_flag = 0;
 800167a:	4b06      	ldr	r3, [pc, #24]	; (8001694 <setTimer5+0x30>)
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]
}
 8001680:	bf00      	nop
 8001682:	370c      	adds	r7, #12
 8001684:	46bd      	mov	sp, r7
 8001686:	bc80      	pop	{r7}
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	2000003c 	.word	0x2000003c
 8001690:	200001cc 	.word	0x200001cc
 8001694:	200001e8 	.word	0x200001e8

08001698 <setTimer6>:

void setTimer6(int duration) {
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
	timer6_counter = duration/TIMER_CYCLE;
 80016a0:	4b07      	ldr	r3, [pc, #28]	; (80016c0 <setTimer6+0x28>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	687a      	ldr	r2, [r7, #4]
 80016a6:	fb92 f3f3 	sdiv	r3, r2, r3
 80016aa:	4a06      	ldr	r2, [pc, #24]	; (80016c4 <setTimer6+0x2c>)
 80016ac:	6013      	str	r3, [r2, #0]
	timer6_flag = 0;
 80016ae:	4b06      	ldr	r3, [pc, #24]	; (80016c8 <setTimer6+0x30>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	601a      	str	r2, [r3, #0]
}
 80016b4:	bf00      	nop
 80016b6:	370c      	adds	r7, #12
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bc80      	pop	{r7}
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	2000003c 	.word	0x2000003c
 80016c4:	200001d0 	.word	0x200001d0
 80016c8:	200001ec 	.word	0x200001ec

080016cc <timer_run>:

void timer_run() {
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
	if (timer0_counter > 0) {
 80016d0:	4b39      	ldr	r3, [pc, #228]	; (80017b8 <timer_run+0xec>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	dd0b      	ble.n	80016f0 <timer_run+0x24>
		timer0_counter--;
 80016d8:	4b37      	ldr	r3, [pc, #220]	; (80017b8 <timer_run+0xec>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	3b01      	subs	r3, #1
 80016de:	4a36      	ldr	r2, [pc, #216]	; (80017b8 <timer_run+0xec>)
 80016e0:	6013      	str	r3, [r2, #0]
		if (timer0_counter == 0) timer0_flag = 1;
 80016e2:	4b35      	ldr	r3, [pc, #212]	; (80017b8 <timer_run+0xec>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d102      	bne.n	80016f0 <timer_run+0x24>
 80016ea:	4b34      	ldr	r3, [pc, #208]	; (80017bc <timer_run+0xf0>)
 80016ec:	2201      	movs	r2, #1
 80016ee:	601a      	str	r2, [r3, #0]
	}
	if (timer1_counter > 0) {
 80016f0:	4b33      	ldr	r3, [pc, #204]	; (80017c0 <timer_run+0xf4>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	dd0b      	ble.n	8001710 <timer_run+0x44>
		timer1_counter--;
 80016f8:	4b31      	ldr	r3, [pc, #196]	; (80017c0 <timer_run+0xf4>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	3b01      	subs	r3, #1
 80016fe:	4a30      	ldr	r2, [pc, #192]	; (80017c0 <timer_run+0xf4>)
 8001700:	6013      	str	r3, [r2, #0]
		if (timer1_counter == 0) timer1_flag = 1;
 8001702:	4b2f      	ldr	r3, [pc, #188]	; (80017c0 <timer_run+0xf4>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d102      	bne.n	8001710 <timer_run+0x44>
 800170a:	4b2e      	ldr	r3, [pc, #184]	; (80017c4 <timer_run+0xf8>)
 800170c:	2201      	movs	r2, #1
 800170e:	601a      	str	r2, [r3, #0]
	}
	if (timer2_counter > 0) {
 8001710:	4b2d      	ldr	r3, [pc, #180]	; (80017c8 <timer_run+0xfc>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	2b00      	cmp	r3, #0
 8001716:	dd0b      	ble.n	8001730 <timer_run+0x64>
		timer2_counter--;
 8001718:	4b2b      	ldr	r3, [pc, #172]	; (80017c8 <timer_run+0xfc>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	3b01      	subs	r3, #1
 800171e:	4a2a      	ldr	r2, [pc, #168]	; (80017c8 <timer_run+0xfc>)
 8001720:	6013      	str	r3, [r2, #0]
		if (timer2_counter == 0) timer2_flag = 1;
 8001722:	4b29      	ldr	r3, [pc, #164]	; (80017c8 <timer_run+0xfc>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d102      	bne.n	8001730 <timer_run+0x64>
 800172a:	4b28      	ldr	r3, [pc, #160]	; (80017cc <timer_run+0x100>)
 800172c:	2201      	movs	r2, #1
 800172e:	601a      	str	r2, [r3, #0]
	}
	if (timer3_counter > 0) {
 8001730:	4b27      	ldr	r3, [pc, #156]	; (80017d0 <timer_run+0x104>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	2b00      	cmp	r3, #0
 8001736:	dd0b      	ble.n	8001750 <timer_run+0x84>
		timer3_counter--;
 8001738:	4b25      	ldr	r3, [pc, #148]	; (80017d0 <timer_run+0x104>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	3b01      	subs	r3, #1
 800173e:	4a24      	ldr	r2, [pc, #144]	; (80017d0 <timer_run+0x104>)
 8001740:	6013      	str	r3, [r2, #0]
		if (timer3_counter == 0) timer3_flag = 1;
 8001742:	4b23      	ldr	r3, [pc, #140]	; (80017d0 <timer_run+0x104>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d102      	bne.n	8001750 <timer_run+0x84>
 800174a:	4b22      	ldr	r3, [pc, #136]	; (80017d4 <timer_run+0x108>)
 800174c:	2201      	movs	r2, #1
 800174e:	601a      	str	r2, [r3, #0]
	}
	if (timer4_counter > 0) {
 8001750:	4b21      	ldr	r3, [pc, #132]	; (80017d8 <timer_run+0x10c>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	2b00      	cmp	r3, #0
 8001756:	dd0b      	ble.n	8001770 <timer_run+0xa4>
		timer4_counter--;
 8001758:	4b1f      	ldr	r3, [pc, #124]	; (80017d8 <timer_run+0x10c>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	3b01      	subs	r3, #1
 800175e:	4a1e      	ldr	r2, [pc, #120]	; (80017d8 <timer_run+0x10c>)
 8001760:	6013      	str	r3, [r2, #0]
		if (timer4_counter == 0) timer4_flag = 1;
 8001762:	4b1d      	ldr	r3, [pc, #116]	; (80017d8 <timer_run+0x10c>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d102      	bne.n	8001770 <timer_run+0xa4>
 800176a:	4b1c      	ldr	r3, [pc, #112]	; (80017dc <timer_run+0x110>)
 800176c:	2201      	movs	r2, #1
 800176e:	601a      	str	r2, [r3, #0]
	}
	if (timer5_counter > 0) {
 8001770:	4b1b      	ldr	r3, [pc, #108]	; (80017e0 <timer_run+0x114>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	2b00      	cmp	r3, #0
 8001776:	dd0b      	ble.n	8001790 <timer_run+0xc4>
		timer5_counter--;
 8001778:	4b19      	ldr	r3, [pc, #100]	; (80017e0 <timer_run+0x114>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	3b01      	subs	r3, #1
 800177e:	4a18      	ldr	r2, [pc, #96]	; (80017e0 <timer_run+0x114>)
 8001780:	6013      	str	r3, [r2, #0]
		if (timer5_counter == 0) timer5_flag = 1;
 8001782:	4b17      	ldr	r3, [pc, #92]	; (80017e0 <timer_run+0x114>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d102      	bne.n	8001790 <timer_run+0xc4>
 800178a:	4b16      	ldr	r3, [pc, #88]	; (80017e4 <timer_run+0x118>)
 800178c:	2201      	movs	r2, #1
 800178e:	601a      	str	r2, [r3, #0]
	}
	if (timer6_counter > 0) {
 8001790:	4b15      	ldr	r3, [pc, #84]	; (80017e8 <timer_run+0x11c>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	2b00      	cmp	r3, #0
 8001796:	dd0b      	ble.n	80017b0 <timer_run+0xe4>
		timer6_counter--;
 8001798:	4b13      	ldr	r3, [pc, #76]	; (80017e8 <timer_run+0x11c>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	3b01      	subs	r3, #1
 800179e:	4a12      	ldr	r2, [pc, #72]	; (80017e8 <timer_run+0x11c>)
 80017a0:	6013      	str	r3, [r2, #0]
		if (timer6_counter == 0) timer6_flag = 1;
 80017a2:	4b11      	ldr	r3, [pc, #68]	; (80017e8 <timer_run+0x11c>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d102      	bne.n	80017b0 <timer_run+0xe4>
 80017aa:	4b10      	ldr	r3, [pc, #64]	; (80017ec <timer_run+0x120>)
 80017ac:	2201      	movs	r2, #1
 80017ae:	601a      	str	r2, [r3, #0]
	}
}
 80017b0:	bf00      	nop
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bc80      	pop	{r7}
 80017b6:	4770      	bx	lr
 80017b8:	200001b8 	.word	0x200001b8
 80017bc:	200001d4 	.word	0x200001d4
 80017c0:	200001bc 	.word	0x200001bc
 80017c4:	200001d8 	.word	0x200001d8
 80017c8:	200001c0 	.word	0x200001c0
 80017cc:	200001dc 	.word	0x200001dc
 80017d0:	200001c4 	.word	0x200001c4
 80017d4:	200001e0 	.word	0x200001e0
 80017d8:	200001c8 	.word	0x200001c8
 80017dc:	200001e4 	.word	0x200001e4
 80017e0:	200001cc 	.word	0x200001cc
 80017e4:	200001e8 	.word	0x200001e8
 80017e8:	200001d0 	.word	0x200001d0
 80017ec:	200001ec 	.word	0x200001ec

080017f0 <disp_t_red_uart>:
#include "string.h"
#include "stdio.h"
#include "input_reading.h"
#include "input_processing.h"

void disp_t_red_uart() {
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b084      	sub	sp, #16
 80017f4:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart2, "!T_RED = ", 11, 50);
 80017f6:	2332      	movs	r3, #50	; 0x32
 80017f8:	220b      	movs	r2, #11
 80017fa:	490b      	ldr	r1, [pc, #44]	; (8001828 <disp_t_red_uart+0x38>)
 80017fc:	480b      	ldr	r0, [pc, #44]	; (800182c <disp_t_red_uart+0x3c>)
 80017fe:	f002 f869 	bl	80038d4 <HAL_UART_Transmit>
	char buffer[16];
	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, sprintf(buffer, "%d\n\r", T_RED), 50);
 8001802:	4b0b      	ldr	r3, [pc, #44]	; (8001830 <disp_t_red_uart+0x40>)
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	463b      	mov	r3, r7
 8001808:	490a      	ldr	r1, [pc, #40]	; (8001834 <disp_t_red_uart+0x44>)
 800180a:	4618      	mov	r0, r3
 800180c:	f002 fe36 	bl	800447c <siprintf>
 8001810:	4603      	mov	r3, r0
 8001812:	b29a      	uxth	r2, r3
 8001814:	4639      	mov	r1, r7
 8001816:	2332      	movs	r3, #50	; 0x32
 8001818:	4804      	ldr	r0, [pc, #16]	; (800182c <disp_t_red_uart+0x3c>)
 800181a:	f002 f85b 	bl	80038d4 <HAL_UART_Transmit>
}
 800181e:	bf00      	nop
 8001820:	3710      	adds	r7, #16
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	08004e58 	.word	0x08004e58
 800182c:	2000016c 	.word	0x2000016c
 8001830:	20000000 	.word	0x20000000
 8001834:	08004e64 	.word	0x08004e64

08001838 <disp_t_amber_uart>:

void disp_t_amber_uart() {
 8001838:	b580      	push	{r7, lr}
 800183a:	b084      	sub	sp, #16
 800183c:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart2, "!T_AMBER = ", 11, 50);
 800183e:	2332      	movs	r3, #50	; 0x32
 8001840:	220b      	movs	r2, #11
 8001842:	490b      	ldr	r1, [pc, #44]	; (8001870 <disp_t_amber_uart+0x38>)
 8001844:	480b      	ldr	r0, [pc, #44]	; (8001874 <disp_t_amber_uart+0x3c>)
 8001846:	f002 f845 	bl	80038d4 <HAL_UART_Transmit>
	char buffer[16];
		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, sprintf(buffer, "%d\n\r", T_AMBER), 50);
 800184a:	4b0b      	ldr	r3, [pc, #44]	; (8001878 <disp_t_amber_uart+0x40>)
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	463b      	mov	r3, r7
 8001850:	490a      	ldr	r1, [pc, #40]	; (800187c <disp_t_amber_uart+0x44>)
 8001852:	4618      	mov	r0, r3
 8001854:	f002 fe12 	bl	800447c <siprintf>
 8001858:	4603      	mov	r3, r0
 800185a:	b29a      	uxth	r2, r3
 800185c:	4639      	mov	r1, r7
 800185e:	2332      	movs	r3, #50	; 0x32
 8001860:	4804      	ldr	r0, [pc, #16]	; (8001874 <disp_t_amber_uart+0x3c>)
 8001862:	f002 f837 	bl	80038d4 <HAL_UART_Transmit>
}
 8001866:	bf00      	nop
 8001868:	3710      	adds	r7, #16
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	08004e6c 	.word	0x08004e6c
 8001874:	2000016c 	.word	0x2000016c
 8001878:	20000004 	.word	0x20000004
 800187c:	08004e64 	.word	0x08004e64

08001880 <disp_t_green_uart>:

void disp_t_green_uart() {
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart2, "!T_GREEN = ", 11, 50);
 8001886:	2332      	movs	r3, #50	; 0x32
 8001888:	220b      	movs	r2, #11
 800188a:	490b      	ldr	r1, [pc, #44]	; (80018b8 <disp_t_green_uart+0x38>)
 800188c:	480b      	ldr	r0, [pc, #44]	; (80018bc <disp_t_green_uart+0x3c>)
 800188e:	f002 f821 	bl	80038d4 <HAL_UART_Transmit>
	char buffer[16];
		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, sprintf(buffer, "%d\n\r", T_GREEN), 50);
 8001892:	4b0b      	ldr	r3, [pc, #44]	; (80018c0 <disp_t_green_uart+0x40>)
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	463b      	mov	r3, r7
 8001898:	490a      	ldr	r1, [pc, #40]	; (80018c4 <disp_t_green_uart+0x44>)
 800189a:	4618      	mov	r0, r3
 800189c:	f002 fdee 	bl	800447c <siprintf>
 80018a0:	4603      	mov	r3, r0
 80018a2:	b29a      	uxth	r2, r3
 80018a4:	4639      	mov	r1, r7
 80018a6:	2332      	movs	r3, #50	; 0x32
 80018a8:	4804      	ldr	r0, [pc, #16]	; (80018bc <disp_t_green_uart+0x3c>)
 80018aa:	f002 f813 	bl	80038d4 <HAL_UART_Transmit>
}
 80018ae:	bf00      	nop
 80018b0:	3710      	adds	r7, #16
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	08004e78 	.word	0x08004e78
 80018bc:	2000016c 	.word	0x2000016c
 80018c0:	20000008 	.word	0x20000008
 80018c4:	08004e64 	.word	0x08004e64

080018c8 <disp_time_uart>:

void disp_time_uart(int t_road_1, int t_road_2) {
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b086      	sub	sp, #24
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
 80018d0:	6039      	str	r1, [r7, #0]
	char buffer[16];
	HAL_UART_Transmit(&huart2, "!T_ROAD_1= ", 12, 50);
 80018d2:	2332      	movs	r3, #50	; 0x32
 80018d4:	220c      	movs	r2, #12
 80018d6:	4919      	ldr	r1, [pc, #100]	; (800193c <disp_time_uart+0x74>)
 80018d8:	4819      	ldr	r0, [pc, #100]	; (8001940 <disp_time_uart+0x78>)
 80018da:	f001 fffb 	bl	80038d4 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, sprintf(buffer, "%d\n\r", t_road_1), 50);
 80018de:	f107 0308 	add.w	r3, r7, #8
 80018e2:	687a      	ldr	r2, [r7, #4]
 80018e4:	4917      	ldr	r1, [pc, #92]	; (8001944 <disp_time_uart+0x7c>)
 80018e6:	4618      	mov	r0, r3
 80018e8:	f002 fdc8 	bl	800447c <siprintf>
 80018ec:	4603      	mov	r3, r0
 80018ee:	b29a      	uxth	r2, r3
 80018f0:	f107 0108 	add.w	r1, r7, #8
 80018f4:	2332      	movs	r3, #50	; 0x32
 80018f6:	4812      	ldr	r0, [pc, #72]	; (8001940 <disp_time_uart+0x78>)
 80018f8:	f001 ffec 	bl	80038d4 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, "!T_ROAD_2= ", 12, 50);
 80018fc:	2332      	movs	r3, #50	; 0x32
 80018fe:	220c      	movs	r2, #12
 8001900:	4911      	ldr	r1, [pc, #68]	; (8001948 <disp_time_uart+0x80>)
 8001902:	480f      	ldr	r0, [pc, #60]	; (8001940 <disp_time_uart+0x78>)
 8001904:	f001 ffe6 	bl	80038d4 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, sprintf(buffer, "%d\n\r", t_road_2), 50);
 8001908:	f107 0308 	add.w	r3, r7, #8
 800190c:	683a      	ldr	r2, [r7, #0]
 800190e:	490d      	ldr	r1, [pc, #52]	; (8001944 <disp_time_uart+0x7c>)
 8001910:	4618      	mov	r0, r3
 8001912:	f002 fdb3 	bl	800447c <siprintf>
 8001916:	4603      	mov	r3, r0
 8001918:	b29a      	uxth	r2, r3
 800191a:	f107 0108 	add.w	r1, r7, #8
 800191e:	2332      	movs	r3, #50	; 0x32
 8001920:	4807      	ldr	r0, [pc, #28]	; (8001940 <disp_time_uart+0x78>)
 8001922:	f001 ffd7 	bl	80038d4 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, "\n", 2, 50);
 8001926:	2332      	movs	r3, #50	; 0x32
 8001928:	2202      	movs	r2, #2
 800192a:	4908      	ldr	r1, [pc, #32]	; (800194c <disp_time_uart+0x84>)
 800192c:	4804      	ldr	r0, [pc, #16]	; (8001940 <disp_time_uart+0x78>)
 800192e:	f001 ffd1 	bl	80038d4 <HAL_UART_Transmit>
}
 8001932:	bf00      	nop
 8001934:	3718      	adds	r7, #24
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	08004e84 	.word	0x08004e84
 8001940:	2000016c 	.word	0x2000016c
 8001944:	08004e64 	.word	0x08004e64
 8001948:	08004e90 	.word	0x08004e90
 800194c:	08004e9c 	.word	0x08004e9c

08001950 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001950:	f7ff fe4e 	bl	80015f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001954:	480b      	ldr	r0, [pc, #44]	; (8001984 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001956:	490c      	ldr	r1, [pc, #48]	; (8001988 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001958:	4a0c      	ldr	r2, [pc, #48]	; (800198c <LoopFillZerobss+0x16>)
  movs r3, #0
 800195a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800195c:	e002      	b.n	8001964 <LoopCopyDataInit>

0800195e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800195e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001960:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001962:	3304      	adds	r3, #4

08001964 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001964:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001966:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001968:	d3f9      	bcc.n	800195e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800196a:	4a09      	ldr	r2, [pc, #36]	; (8001990 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800196c:	4c09      	ldr	r4, [pc, #36]	; (8001994 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800196e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001970:	e001      	b.n	8001976 <LoopFillZerobss>

08001972 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001972:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001974:	3204      	adds	r2, #4

08001976 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001976:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001978:	d3fb      	bcc.n	8001972 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800197a:	f002 fdad 	bl	80044d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800197e:	f7ff faed 	bl	8000f5c <main>
  bx lr
 8001982:	4770      	bx	lr
  ldr r0, =_sdata
 8001984:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001988:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 800198c:	08004f08 	.word	0x08004f08
  ldr r2, =_sbss
 8001990:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8001994:	2000033c 	.word	0x2000033c

08001998 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001998:	e7fe      	b.n	8001998 <ADC1_2_IRQHandler>
	...

0800199c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019a0:	4b08      	ldr	r3, [pc, #32]	; (80019c4 <HAL_Init+0x28>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a07      	ldr	r2, [pc, #28]	; (80019c4 <HAL_Init+0x28>)
 80019a6:	f043 0310 	orr.w	r3, r3, #16
 80019aa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019ac:	2003      	movs	r0, #3
 80019ae:	f000 f923 	bl	8001bf8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019b2:	200f      	movs	r0, #15
 80019b4:	f000 f808 	bl	80019c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019b8:	f7ff fca8 	bl	800130c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019bc:	2300      	movs	r3, #0
}
 80019be:	4618      	mov	r0, r3
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	40022000 	.word	0x40022000

080019c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019d0:	4b12      	ldr	r3, [pc, #72]	; (8001a1c <HAL_InitTick+0x54>)
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	4b12      	ldr	r3, [pc, #72]	; (8001a20 <HAL_InitTick+0x58>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	4619      	mov	r1, r3
 80019da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019de:	fbb3 f3f1 	udiv	r3, r3, r1
 80019e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80019e6:	4618      	mov	r0, r3
 80019e8:	f000 f93b 	bl	8001c62 <HAL_SYSTICK_Config>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e00e      	b.n	8001a14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2b0f      	cmp	r3, #15
 80019fa:	d80a      	bhi.n	8001a12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019fc:	2200      	movs	r2, #0
 80019fe:	6879      	ldr	r1, [r7, #4]
 8001a00:	f04f 30ff 	mov.w	r0, #4294967295
 8001a04:	f000 f903 	bl	8001c0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a08:	4a06      	ldr	r2, [pc, #24]	; (8001a24 <HAL_InitTick+0x5c>)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	e000      	b.n	8001a14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	3708      	adds	r7, #8
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	20000038 	.word	0x20000038
 8001a20:	20000044 	.word	0x20000044
 8001a24:	20000040 	.word	0x20000040

08001a28 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a2c:	4b05      	ldr	r3, [pc, #20]	; (8001a44 <HAL_IncTick+0x1c>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	461a      	mov	r2, r3
 8001a32:	4b05      	ldr	r3, [pc, #20]	; (8001a48 <HAL_IncTick+0x20>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4413      	add	r3, r2
 8001a38:	4a03      	ldr	r2, [pc, #12]	; (8001a48 <HAL_IncTick+0x20>)
 8001a3a:	6013      	str	r3, [r2, #0]
}
 8001a3c:	bf00      	nop
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bc80      	pop	{r7}
 8001a42:	4770      	bx	lr
 8001a44:	20000044 	.word	0x20000044
 8001a48:	200001f0 	.word	0x200001f0

08001a4c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  return uwTick;
 8001a50:	4b02      	ldr	r3, [pc, #8]	; (8001a5c <HAL_GetTick+0x10>)
 8001a52:	681b      	ldr	r3, [r3, #0]
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bc80      	pop	{r7}
 8001a5a:	4770      	bx	lr
 8001a5c:	200001f0 	.word	0x200001f0

08001a60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b085      	sub	sp, #20
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	f003 0307 	and.w	r3, r3, #7
 8001a6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a70:	4b0c      	ldr	r3, [pc, #48]	; (8001aa4 <__NVIC_SetPriorityGrouping+0x44>)
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a76:	68ba      	ldr	r2, [r7, #8]
 8001a78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a92:	4a04      	ldr	r2, [pc, #16]	; (8001aa4 <__NVIC_SetPriorityGrouping+0x44>)
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	60d3      	str	r3, [r2, #12]
}
 8001a98:	bf00      	nop
 8001a9a:	3714      	adds	r7, #20
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bc80      	pop	{r7}
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	e000ed00 	.word	0xe000ed00

08001aa8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001aac:	4b04      	ldr	r3, [pc, #16]	; (8001ac0 <__NVIC_GetPriorityGrouping+0x18>)
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	0a1b      	lsrs	r3, r3, #8
 8001ab2:	f003 0307 	and.w	r3, r3, #7
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bc80      	pop	{r7}
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	e000ed00 	.word	0xe000ed00

08001ac4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	4603      	mov	r3, r0
 8001acc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	db0b      	blt.n	8001aee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ad6:	79fb      	ldrb	r3, [r7, #7]
 8001ad8:	f003 021f 	and.w	r2, r3, #31
 8001adc:	4906      	ldr	r1, [pc, #24]	; (8001af8 <__NVIC_EnableIRQ+0x34>)
 8001ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae2:	095b      	lsrs	r3, r3, #5
 8001ae4:	2001      	movs	r0, #1
 8001ae6:	fa00 f202 	lsl.w	r2, r0, r2
 8001aea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001aee:	bf00      	nop
 8001af0:	370c      	adds	r7, #12
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bc80      	pop	{r7}
 8001af6:	4770      	bx	lr
 8001af8:	e000e100 	.word	0xe000e100

08001afc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	4603      	mov	r3, r0
 8001b04:	6039      	str	r1, [r7, #0]
 8001b06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	db0a      	blt.n	8001b26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	b2da      	uxtb	r2, r3
 8001b14:	490c      	ldr	r1, [pc, #48]	; (8001b48 <__NVIC_SetPriority+0x4c>)
 8001b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b1a:	0112      	lsls	r2, r2, #4
 8001b1c:	b2d2      	uxtb	r2, r2
 8001b1e:	440b      	add	r3, r1
 8001b20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b24:	e00a      	b.n	8001b3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	b2da      	uxtb	r2, r3
 8001b2a:	4908      	ldr	r1, [pc, #32]	; (8001b4c <__NVIC_SetPriority+0x50>)
 8001b2c:	79fb      	ldrb	r3, [r7, #7]
 8001b2e:	f003 030f 	and.w	r3, r3, #15
 8001b32:	3b04      	subs	r3, #4
 8001b34:	0112      	lsls	r2, r2, #4
 8001b36:	b2d2      	uxtb	r2, r2
 8001b38:	440b      	add	r3, r1
 8001b3a:	761a      	strb	r2, [r3, #24]
}
 8001b3c:	bf00      	nop
 8001b3e:	370c      	adds	r7, #12
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bc80      	pop	{r7}
 8001b44:	4770      	bx	lr
 8001b46:	bf00      	nop
 8001b48:	e000e100 	.word	0xe000e100
 8001b4c:	e000ed00 	.word	0xe000ed00

08001b50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b089      	sub	sp, #36	; 0x24
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	60f8      	str	r0, [r7, #12]
 8001b58:	60b9      	str	r1, [r7, #8]
 8001b5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	f003 0307 	and.w	r3, r3, #7
 8001b62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	f1c3 0307 	rsb	r3, r3, #7
 8001b6a:	2b04      	cmp	r3, #4
 8001b6c:	bf28      	it	cs
 8001b6e:	2304      	movcs	r3, #4
 8001b70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	3304      	adds	r3, #4
 8001b76:	2b06      	cmp	r3, #6
 8001b78:	d902      	bls.n	8001b80 <NVIC_EncodePriority+0x30>
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	3b03      	subs	r3, #3
 8001b7e:	e000      	b.n	8001b82 <NVIC_EncodePriority+0x32>
 8001b80:	2300      	movs	r3, #0
 8001b82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b84:	f04f 32ff 	mov.w	r2, #4294967295
 8001b88:	69bb      	ldr	r3, [r7, #24]
 8001b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8e:	43da      	mvns	r2, r3
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	401a      	ands	r2, r3
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b98:	f04f 31ff 	mov.w	r1, #4294967295
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001ba2:	43d9      	mvns	r1, r3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ba8:	4313      	orrs	r3, r2
         );
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3724      	adds	r7, #36	; 0x24
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bc80      	pop	{r7}
 8001bb2:	4770      	bx	lr

08001bb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	3b01      	subs	r3, #1
 8001bc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bc4:	d301      	bcc.n	8001bca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e00f      	b.n	8001bea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bca:	4a0a      	ldr	r2, [pc, #40]	; (8001bf4 <SysTick_Config+0x40>)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	3b01      	subs	r3, #1
 8001bd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bd2:	210f      	movs	r1, #15
 8001bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8001bd8:	f7ff ff90 	bl	8001afc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bdc:	4b05      	ldr	r3, [pc, #20]	; (8001bf4 <SysTick_Config+0x40>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001be2:	4b04      	ldr	r3, [pc, #16]	; (8001bf4 <SysTick_Config+0x40>)
 8001be4:	2207      	movs	r2, #7
 8001be6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001be8:	2300      	movs	r3, #0
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3708      	adds	r7, #8
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	e000e010 	.word	0xe000e010

08001bf8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f7ff ff2d 	bl	8001a60 <__NVIC_SetPriorityGrouping>
}
 8001c06:	bf00      	nop
 8001c08:	3708      	adds	r7, #8
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}

08001c0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c0e:	b580      	push	{r7, lr}
 8001c10:	b086      	sub	sp, #24
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	4603      	mov	r3, r0
 8001c16:	60b9      	str	r1, [r7, #8]
 8001c18:	607a      	str	r2, [r7, #4]
 8001c1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c20:	f7ff ff42 	bl	8001aa8 <__NVIC_GetPriorityGrouping>
 8001c24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c26:	687a      	ldr	r2, [r7, #4]
 8001c28:	68b9      	ldr	r1, [r7, #8]
 8001c2a:	6978      	ldr	r0, [r7, #20]
 8001c2c:	f7ff ff90 	bl	8001b50 <NVIC_EncodePriority>
 8001c30:	4602      	mov	r2, r0
 8001c32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c36:	4611      	mov	r1, r2
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f7ff ff5f 	bl	8001afc <__NVIC_SetPriority>
}
 8001c3e:	bf00      	nop
 8001c40:	3718      	adds	r7, #24
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}

08001c46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c46:	b580      	push	{r7, lr}
 8001c48:	b082      	sub	sp, #8
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7ff ff35 	bl	8001ac4 <__NVIC_EnableIRQ>
}
 8001c5a:	bf00      	nop
 8001c5c:	3708      	adds	r7, #8
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}

08001c62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c62:	b580      	push	{r7, lr}
 8001c64:	b082      	sub	sp, #8
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f7ff ffa2 	bl	8001bb4 <SysTick_Config>
 8001c70:	4603      	mov	r3, r0
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3708      	adds	r7, #8
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}

08001c7a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c7a:	b480      	push	{r7}
 8001c7c:	b085      	sub	sp, #20
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c82:	2300      	movs	r3, #0
 8001c84:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	d008      	beq.n	8001ca4 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2204      	movs	r2, #4
 8001c96:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e020      	b.n	8001ce6 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f022 020e 	bic.w	r2, r2, #14
 8001cb2:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f022 0201 	bic.w	r2, r2, #1
 8001cc2:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ccc:	2101      	movs	r1, #1
 8001cce:	fa01 f202 	lsl.w	r2, r1, r2
 8001cd2:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001ce4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3714      	adds	r7, #20
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bc80      	pop	{r7}
 8001cee:	4770      	bx	lr

08001cf0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b084      	sub	sp, #16
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001d02:	b2db      	uxtb	r3, r3
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	d005      	beq.n	8001d14 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2204      	movs	r2, #4
 8001d0c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	73fb      	strb	r3, [r7, #15]
 8001d12:	e051      	b.n	8001db8 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f022 020e 	bic.w	r2, r2, #14
 8001d22:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f022 0201 	bic.w	r2, r2, #1
 8001d32:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a22      	ldr	r2, [pc, #136]	; (8001dc4 <HAL_DMA_Abort_IT+0xd4>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d029      	beq.n	8001d92 <HAL_DMA_Abort_IT+0xa2>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a21      	ldr	r2, [pc, #132]	; (8001dc8 <HAL_DMA_Abort_IT+0xd8>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d022      	beq.n	8001d8e <HAL_DMA_Abort_IT+0x9e>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a1f      	ldr	r2, [pc, #124]	; (8001dcc <HAL_DMA_Abort_IT+0xdc>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d01a      	beq.n	8001d88 <HAL_DMA_Abort_IT+0x98>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a1e      	ldr	r2, [pc, #120]	; (8001dd0 <HAL_DMA_Abort_IT+0xe0>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d012      	beq.n	8001d82 <HAL_DMA_Abort_IT+0x92>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a1c      	ldr	r2, [pc, #112]	; (8001dd4 <HAL_DMA_Abort_IT+0xe4>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d00a      	beq.n	8001d7c <HAL_DMA_Abort_IT+0x8c>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a1b      	ldr	r2, [pc, #108]	; (8001dd8 <HAL_DMA_Abort_IT+0xe8>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d102      	bne.n	8001d76 <HAL_DMA_Abort_IT+0x86>
 8001d70:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001d74:	e00e      	b.n	8001d94 <HAL_DMA_Abort_IT+0xa4>
 8001d76:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d7a:	e00b      	b.n	8001d94 <HAL_DMA_Abort_IT+0xa4>
 8001d7c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d80:	e008      	b.n	8001d94 <HAL_DMA_Abort_IT+0xa4>
 8001d82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d86:	e005      	b.n	8001d94 <HAL_DMA_Abort_IT+0xa4>
 8001d88:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d8c:	e002      	b.n	8001d94 <HAL_DMA_Abort_IT+0xa4>
 8001d8e:	2310      	movs	r3, #16
 8001d90:	e000      	b.n	8001d94 <HAL_DMA_Abort_IT+0xa4>
 8001d92:	2301      	movs	r3, #1
 8001d94:	4a11      	ldr	r2, [pc, #68]	; (8001ddc <HAL_DMA_Abort_IT+0xec>)
 8001d96:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2200      	movs	r2, #0
 8001da4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d003      	beq.n	8001db8 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	4798      	blx	r3
    } 
  }
  return status;
 8001db8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3710      	adds	r7, #16
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	40020008 	.word	0x40020008
 8001dc8:	4002001c 	.word	0x4002001c
 8001dcc:	40020030 	.word	0x40020030
 8001dd0:	40020044 	.word	0x40020044
 8001dd4:	40020058 	.word	0x40020058
 8001dd8:	4002006c 	.word	0x4002006c
 8001ddc:	40020000 	.word	0x40020000

08001de0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b08b      	sub	sp, #44	; 0x2c
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001dea:	2300      	movs	r3, #0
 8001dec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001dee:	2300      	movs	r3, #0
 8001df0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001df2:	e169      	b.n	80020c8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001df4:	2201      	movs	r2, #1
 8001df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	69fa      	ldr	r2, [r7, #28]
 8001e04:	4013      	ands	r3, r2
 8001e06:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001e08:	69ba      	ldr	r2, [r7, #24]
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	f040 8158 	bne.w	80020c2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	4a9a      	ldr	r2, [pc, #616]	; (8002080 <HAL_GPIO_Init+0x2a0>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d05e      	beq.n	8001eda <HAL_GPIO_Init+0xfa>
 8001e1c:	4a98      	ldr	r2, [pc, #608]	; (8002080 <HAL_GPIO_Init+0x2a0>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d875      	bhi.n	8001f0e <HAL_GPIO_Init+0x12e>
 8001e22:	4a98      	ldr	r2, [pc, #608]	; (8002084 <HAL_GPIO_Init+0x2a4>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d058      	beq.n	8001eda <HAL_GPIO_Init+0xfa>
 8001e28:	4a96      	ldr	r2, [pc, #600]	; (8002084 <HAL_GPIO_Init+0x2a4>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d86f      	bhi.n	8001f0e <HAL_GPIO_Init+0x12e>
 8001e2e:	4a96      	ldr	r2, [pc, #600]	; (8002088 <HAL_GPIO_Init+0x2a8>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d052      	beq.n	8001eda <HAL_GPIO_Init+0xfa>
 8001e34:	4a94      	ldr	r2, [pc, #592]	; (8002088 <HAL_GPIO_Init+0x2a8>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d869      	bhi.n	8001f0e <HAL_GPIO_Init+0x12e>
 8001e3a:	4a94      	ldr	r2, [pc, #592]	; (800208c <HAL_GPIO_Init+0x2ac>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d04c      	beq.n	8001eda <HAL_GPIO_Init+0xfa>
 8001e40:	4a92      	ldr	r2, [pc, #584]	; (800208c <HAL_GPIO_Init+0x2ac>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d863      	bhi.n	8001f0e <HAL_GPIO_Init+0x12e>
 8001e46:	4a92      	ldr	r2, [pc, #584]	; (8002090 <HAL_GPIO_Init+0x2b0>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d046      	beq.n	8001eda <HAL_GPIO_Init+0xfa>
 8001e4c:	4a90      	ldr	r2, [pc, #576]	; (8002090 <HAL_GPIO_Init+0x2b0>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d85d      	bhi.n	8001f0e <HAL_GPIO_Init+0x12e>
 8001e52:	2b12      	cmp	r3, #18
 8001e54:	d82a      	bhi.n	8001eac <HAL_GPIO_Init+0xcc>
 8001e56:	2b12      	cmp	r3, #18
 8001e58:	d859      	bhi.n	8001f0e <HAL_GPIO_Init+0x12e>
 8001e5a:	a201      	add	r2, pc, #4	; (adr r2, 8001e60 <HAL_GPIO_Init+0x80>)
 8001e5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e60:	08001edb 	.word	0x08001edb
 8001e64:	08001eb5 	.word	0x08001eb5
 8001e68:	08001ec7 	.word	0x08001ec7
 8001e6c:	08001f09 	.word	0x08001f09
 8001e70:	08001f0f 	.word	0x08001f0f
 8001e74:	08001f0f 	.word	0x08001f0f
 8001e78:	08001f0f 	.word	0x08001f0f
 8001e7c:	08001f0f 	.word	0x08001f0f
 8001e80:	08001f0f 	.word	0x08001f0f
 8001e84:	08001f0f 	.word	0x08001f0f
 8001e88:	08001f0f 	.word	0x08001f0f
 8001e8c:	08001f0f 	.word	0x08001f0f
 8001e90:	08001f0f 	.word	0x08001f0f
 8001e94:	08001f0f 	.word	0x08001f0f
 8001e98:	08001f0f 	.word	0x08001f0f
 8001e9c:	08001f0f 	.word	0x08001f0f
 8001ea0:	08001f0f 	.word	0x08001f0f
 8001ea4:	08001ebd 	.word	0x08001ebd
 8001ea8:	08001ed1 	.word	0x08001ed1
 8001eac:	4a79      	ldr	r2, [pc, #484]	; (8002094 <HAL_GPIO_Init+0x2b4>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d013      	beq.n	8001eda <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001eb2:	e02c      	b.n	8001f0e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	623b      	str	r3, [r7, #32]
          break;
 8001eba:	e029      	b.n	8001f10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	68db      	ldr	r3, [r3, #12]
 8001ec0:	3304      	adds	r3, #4
 8001ec2:	623b      	str	r3, [r7, #32]
          break;
 8001ec4:	e024      	b.n	8001f10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	68db      	ldr	r3, [r3, #12]
 8001eca:	3308      	adds	r3, #8
 8001ecc:	623b      	str	r3, [r7, #32]
          break;
 8001ece:	e01f      	b.n	8001f10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	330c      	adds	r3, #12
 8001ed6:	623b      	str	r3, [r7, #32]
          break;
 8001ed8:	e01a      	b.n	8001f10 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d102      	bne.n	8001ee8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001ee2:	2304      	movs	r3, #4
 8001ee4:	623b      	str	r3, [r7, #32]
          break;
 8001ee6:	e013      	b.n	8001f10 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d105      	bne.n	8001efc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ef0:	2308      	movs	r3, #8
 8001ef2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	69fa      	ldr	r2, [r7, #28]
 8001ef8:	611a      	str	r2, [r3, #16]
          break;
 8001efa:	e009      	b.n	8001f10 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001efc:	2308      	movs	r3, #8
 8001efe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	69fa      	ldr	r2, [r7, #28]
 8001f04:	615a      	str	r2, [r3, #20]
          break;
 8001f06:	e003      	b.n	8001f10 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	623b      	str	r3, [r7, #32]
          break;
 8001f0c:	e000      	b.n	8001f10 <HAL_GPIO_Init+0x130>
          break;
 8001f0e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f10:	69bb      	ldr	r3, [r7, #24]
 8001f12:	2bff      	cmp	r3, #255	; 0xff
 8001f14:	d801      	bhi.n	8001f1a <HAL_GPIO_Init+0x13a>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	e001      	b.n	8001f1e <HAL_GPIO_Init+0x13e>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	3304      	adds	r3, #4
 8001f1e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f20:	69bb      	ldr	r3, [r7, #24]
 8001f22:	2bff      	cmp	r3, #255	; 0xff
 8001f24:	d802      	bhi.n	8001f2c <HAL_GPIO_Init+0x14c>
 8001f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	e002      	b.n	8001f32 <HAL_GPIO_Init+0x152>
 8001f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2e:	3b08      	subs	r3, #8
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	210f      	movs	r1, #15
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f40:	43db      	mvns	r3, r3
 8001f42:	401a      	ands	r2, r3
 8001f44:	6a39      	ldr	r1, [r7, #32]
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	fa01 f303 	lsl.w	r3, r1, r3
 8001f4c:	431a      	orrs	r2, r3
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	f000 80b1 	beq.w	80020c2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f60:	4b4d      	ldr	r3, [pc, #308]	; (8002098 <HAL_GPIO_Init+0x2b8>)
 8001f62:	699b      	ldr	r3, [r3, #24]
 8001f64:	4a4c      	ldr	r2, [pc, #304]	; (8002098 <HAL_GPIO_Init+0x2b8>)
 8001f66:	f043 0301 	orr.w	r3, r3, #1
 8001f6a:	6193      	str	r3, [r2, #24]
 8001f6c:	4b4a      	ldr	r3, [pc, #296]	; (8002098 <HAL_GPIO_Init+0x2b8>)
 8001f6e:	699b      	ldr	r3, [r3, #24]
 8001f70:	f003 0301 	and.w	r3, r3, #1
 8001f74:	60bb      	str	r3, [r7, #8]
 8001f76:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f78:	4a48      	ldr	r2, [pc, #288]	; (800209c <HAL_GPIO_Init+0x2bc>)
 8001f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7c:	089b      	lsrs	r3, r3, #2
 8001f7e:	3302      	adds	r3, #2
 8001f80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f84:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f88:	f003 0303 	and.w	r3, r3, #3
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	220f      	movs	r2, #15
 8001f90:	fa02 f303 	lsl.w	r3, r2, r3
 8001f94:	43db      	mvns	r3, r3
 8001f96:	68fa      	ldr	r2, [r7, #12]
 8001f98:	4013      	ands	r3, r2
 8001f9a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	4a40      	ldr	r2, [pc, #256]	; (80020a0 <HAL_GPIO_Init+0x2c0>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d013      	beq.n	8001fcc <HAL_GPIO_Init+0x1ec>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	4a3f      	ldr	r2, [pc, #252]	; (80020a4 <HAL_GPIO_Init+0x2c4>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d00d      	beq.n	8001fc8 <HAL_GPIO_Init+0x1e8>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	4a3e      	ldr	r2, [pc, #248]	; (80020a8 <HAL_GPIO_Init+0x2c8>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d007      	beq.n	8001fc4 <HAL_GPIO_Init+0x1e4>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	4a3d      	ldr	r2, [pc, #244]	; (80020ac <HAL_GPIO_Init+0x2cc>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d101      	bne.n	8001fc0 <HAL_GPIO_Init+0x1e0>
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	e006      	b.n	8001fce <HAL_GPIO_Init+0x1ee>
 8001fc0:	2304      	movs	r3, #4
 8001fc2:	e004      	b.n	8001fce <HAL_GPIO_Init+0x1ee>
 8001fc4:	2302      	movs	r3, #2
 8001fc6:	e002      	b.n	8001fce <HAL_GPIO_Init+0x1ee>
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e000      	b.n	8001fce <HAL_GPIO_Init+0x1ee>
 8001fcc:	2300      	movs	r3, #0
 8001fce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fd0:	f002 0203 	and.w	r2, r2, #3
 8001fd4:	0092      	lsls	r2, r2, #2
 8001fd6:	4093      	lsls	r3, r2
 8001fd8:	68fa      	ldr	r2, [r7, #12]
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001fde:	492f      	ldr	r1, [pc, #188]	; (800209c <HAL_GPIO_Init+0x2bc>)
 8001fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe2:	089b      	lsrs	r3, r3, #2
 8001fe4:	3302      	adds	r3, #2
 8001fe6:	68fa      	ldr	r2, [r7, #12]
 8001fe8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d006      	beq.n	8002006 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ff8:	4b2d      	ldr	r3, [pc, #180]	; (80020b0 <HAL_GPIO_Init+0x2d0>)
 8001ffa:	689a      	ldr	r2, [r3, #8]
 8001ffc:	492c      	ldr	r1, [pc, #176]	; (80020b0 <HAL_GPIO_Init+0x2d0>)
 8001ffe:	69bb      	ldr	r3, [r7, #24]
 8002000:	4313      	orrs	r3, r2
 8002002:	608b      	str	r3, [r1, #8]
 8002004:	e006      	b.n	8002014 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002006:	4b2a      	ldr	r3, [pc, #168]	; (80020b0 <HAL_GPIO_Init+0x2d0>)
 8002008:	689a      	ldr	r2, [r3, #8]
 800200a:	69bb      	ldr	r3, [r7, #24]
 800200c:	43db      	mvns	r3, r3
 800200e:	4928      	ldr	r1, [pc, #160]	; (80020b0 <HAL_GPIO_Init+0x2d0>)
 8002010:	4013      	ands	r3, r2
 8002012:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800201c:	2b00      	cmp	r3, #0
 800201e:	d006      	beq.n	800202e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002020:	4b23      	ldr	r3, [pc, #140]	; (80020b0 <HAL_GPIO_Init+0x2d0>)
 8002022:	68da      	ldr	r2, [r3, #12]
 8002024:	4922      	ldr	r1, [pc, #136]	; (80020b0 <HAL_GPIO_Init+0x2d0>)
 8002026:	69bb      	ldr	r3, [r7, #24]
 8002028:	4313      	orrs	r3, r2
 800202a:	60cb      	str	r3, [r1, #12]
 800202c:	e006      	b.n	800203c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800202e:	4b20      	ldr	r3, [pc, #128]	; (80020b0 <HAL_GPIO_Init+0x2d0>)
 8002030:	68da      	ldr	r2, [r3, #12]
 8002032:	69bb      	ldr	r3, [r7, #24]
 8002034:	43db      	mvns	r3, r3
 8002036:	491e      	ldr	r1, [pc, #120]	; (80020b0 <HAL_GPIO_Init+0x2d0>)
 8002038:	4013      	ands	r3, r2
 800203a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002044:	2b00      	cmp	r3, #0
 8002046:	d006      	beq.n	8002056 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002048:	4b19      	ldr	r3, [pc, #100]	; (80020b0 <HAL_GPIO_Init+0x2d0>)
 800204a:	685a      	ldr	r2, [r3, #4]
 800204c:	4918      	ldr	r1, [pc, #96]	; (80020b0 <HAL_GPIO_Init+0x2d0>)
 800204e:	69bb      	ldr	r3, [r7, #24]
 8002050:	4313      	orrs	r3, r2
 8002052:	604b      	str	r3, [r1, #4]
 8002054:	e006      	b.n	8002064 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002056:	4b16      	ldr	r3, [pc, #88]	; (80020b0 <HAL_GPIO_Init+0x2d0>)
 8002058:	685a      	ldr	r2, [r3, #4]
 800205a:	69bb      	ldr	r3, [r7, #24]
 800205c:	43db      	mvns	r3, r3
 800205e:	4914      	ldr	r1, [pc, #80]	; (80020b0 <HAL_GPIO_Init+0x2d0>)
 8002060:	4013      	ands	r3, r2
 8002062:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800206c:	2b00      	cmp	r3, #0
 800206e:	d021      	beq.n	80020b4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002070:	4b0f      	ldr	r3, [pc, #60]	; (80020b0 <HAL_GPIO_Init+0x2d0>)
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	490e      	ldr	r1, [pc, #56]	; (80020b0 <HAL_GPIO_Init+0x2d0>)
 8002076:	69bb      	ldr	r3, [r7, #24]
 8002078:	4313      	orrs	r3, r2
 800207a:	600b      	str	r3, [r1, #0]
 800207c:	e021      	b.n	80020c2 <HAL_GPIO_Init+0x2e2>
 800207e:	bf00      	nop
 8002080:	10320000 	.word	0x10320000
 8002084:	10310000 	.word	0x10310000
 8002088:	10220000 	.word	0x10220000
 800208c:	10210000 	.word	0x10210000
 8002090:	10120000 	.word	0x10120000
 8002094:	10110000 	.word	0x10110000
 8002098:	40021000 	.word	0x40021000
 800209c:	40010000 	.word	0x40010000
 80020a0:	40010800 	.word	0x40010800
 80020a4:	40010c00 	.word	0x40010c00
 80020a8:	40011000 	.word	0x40011000
 80020ac:	40011400 	.word	0x40011400
 80020b0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80020b4:	4b0b      	ldr	r3, [pc, #44]	; (80020e4 <HAL_GPIO_Init+0x304>)
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	69bb      	ldr	r3, [r7, #24]
 80020ba:	43db      	mvns	r3, r3
 80020bc:	4909      	ldr	r1, [pc, #36]	; (80020e4 <HAL_GPIO_Init+0x304>)
 80020be:	4013      	ands	r3, r2
 80020c0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80020c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c4:	3301      	adds	r3, #1
 80020c6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ce:	fa22 f303 	lsr.w	r3, r2, r3
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	f47f ae8e 	bne.w	8001df4 <HAL_GPIO_Init+0x14>
  }
}
 80020d8:	bf00      	nop
 80020da:	bf00      	nop
 80020dc:	372c      	adds	r7, #44	; 0x2c
 80020de:	46bd      	mov	sp, r7
 80020e0:	bc80      	pop	{r7}
 80020e2:	4770      	bx	lr
 80020e4:	40010400 	.word	0x40010400

080020e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b085      	sub	sp, #20
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	460b      	mov	r3, r1
 80020f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	689a      	ldr	r2, [r3, #8]
 80020f8:	887b      	ldrh	r3, [r7, #2]
 80020fa:	4013      	ands	r3, r2
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d002      	beq.n	8002106 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002100:	2301      	movs	r3, #1
 8002102:	73fb      	strb	r3, [r7, #15]
 8002104:	e001      	b.n	800210a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002106:	2300      	movs	r3, #0
 8002108:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800210a:	7bfb      	ldrb	r3, [r7, #15]
}
 800210c:	4618      	mov	r0, r3
 800210e:	3714      	adds	r7, #20
 8002110:	46bd      	mov	sp, r7
 8002112:	bc80      	pop	{r7}
 8002114:	4770      	bx	lr

08002116 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002116:	b480      	push	{r7}
 8002118:	b083      	sub	sp, #12
 800211a:	af00      	add	r7, sp, #0
 800211c:	6078      	str	r0, [r7, #4]
 800211e:	460b      	mov	r3, r1
 8002120:	807b      	strh	r3, [r7, #2]
 8002122:	4613      	mov	r3, r2
 8002124:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002126:	787b      	ldrb	r3, [r7, #1]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d003      	beq.n	8002134 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800212c:	887a      	ldrh	r2, [r7, #2]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002132:	e003      	b.n	800213c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002134:	887b      	ldrh	r3, [r7, #2]
 8002136:	041a      	lsls	r2, r3, #16
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	611a      	str	r2, [r3, #16]
}
 800213c:	bf00      	nop
 800213e:	370c      	adds	r7, #12
 8002140:	46bd      	mov	sp, r7
 8002142:	bc80      	pop	{r7}
 8002144:	4770      	bx	lr
	...

08002148 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b086      	sub	sp, #24
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d101      	bne.n	800215a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e272      	b.n	8002640 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0301 	and.w	r3, r3, #1
 8002162:	2b00      	cmp	r3, #0
 8002164:	f000 8087 	beq.w	8002276 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002168:	4b92      	ldr	r3, [pc, #584]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f003 030c 	and.w	r3, r3, #12
 8002170:	2b04      	cmp	r3, #4
 8002172:	d00c      	beq.n	800218e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002174:	4b8f      	ldr	r3, [pc, #572]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f003 030c 	and.w	r3, r3, #12
 800217c:	2b08      	cmp	r3, #8
 800217e:	d112      	bne.n	80021a6 <HAL_RCC_OscConfig+0x5e>
 8002180:	4b8c      	ldr	r3, [pc, #560]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002188:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800218c:	d10b      	bne.n	80021a6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800218e:	4b89      	ldr	r3, [pc, #548]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d06c      	beq.n	8002274 <HAL_RCC_OscConfig+0x12c>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d168      	bne.n	8002274 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e24c      	b.n	8002640 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021ae:	d106      	bne.n	80021be <HAL_RCC_OscConfig+0x76>
 80021b0:	4b80      	ldr	r3, [pc, #512]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a7f      	ldr	r2, [pc, #508]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 80021b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021ba:	6013      	str	r3, [r2, #0]
 80021bc:	e02e      	b.n	800221c <HAL_RCC_OscConfig+0xd4>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d10c      	bne.n	80021e0 <HAL_RCC_OscConfig+0x98>
 80021c6:	4b7b      	ldr	r3, [pc, #492]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a7a      	ldr	r2, [pc, #488]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 80021cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021d0:	6013      	str	r3, [r2, #0]
 80021d2:	4b78      	ldr	r3, [pc, #480]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a77      	ldr	r2, [pc, #476]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 80021d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021dc:	6013      	str	r3, [r2, #0]
 80021de:	e01d      	b.n	800221c <HAL_RCC_OscConfig+0xd4>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021e8:	d10c      	bne.n	8002204 <HAL_RCC_OscConfig+0xbc>
 80021ea:	4b72      	ldr	r3, [pc, #456]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a71      	ldr	r2, [pc, #452]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 80021f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021f4:	6013      	str	r3, [r2, #0]
 80021f6:	4b6f      	ldr	r3, [pc, #444]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a6e      	ldr	r2, [pc, #440]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 80021fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002200:	6013      	str	r3, [r2, #0]
 8002202:	e00b      	b.n	800221c <HAL_RCC_OscConfig+0xd4>
 8002204:	4b6b      	ldr	r3, [pc, #428]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a6a      	ldr	r2, [pc, #424]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 800220a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800220e:	6013      	str	r3, [r2, #0]
 8002210:	4b68      	ldr	r3, [pc, #416]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a67      	ldr	r2, [pc, #412]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 8002216:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800221a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d013      	beq.n	800224c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002224:	f7ff fc12 	bl	8001a4c <HAL_GetTick>
 8002228:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800222a:	e008      	b.n	800223e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800222c:	f7ff fc0e 	bl	8001a4c <HAL_GetTick>
 8002230:	4602      	mov	r2, r0
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	2b64      	cmp	r3, #100	; 0x64
 8002238:	d901      	bls.n	800223e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800223a:	2303      	movs	r3, #3
 800223c:	e200      	b.n	8002640 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800223e:	4b5d      	ldr	r3, [pc, #372]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d0f0      	beq.n	800222c <HAL_RCC_OscConfig+0xe4>
 800224a:	e014      	b.n	8002276 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800224c:	f7ff fbfe 	bl	8001a4c <HAL_GetTick>
 8002250:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002252:	e008      	b.n	8002266 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002254:	f7ff fbfa 	bl	8001a4c <HAL_GetTick>
 8002258:	4602      	mov	r2, r0
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	2b64      	cmp	r3, #100	; 0x64
 8002260:	d901      	bls.n	8002266 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002262:	2303      	movs	r3, #3
 8002264:	e1ec      	b.n	8002640 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002266:	4b53      	ldr	r3, [pc, #332]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d1f0      	bne.n	8002254 <HAL_RCC_OscConfig+0x10c>
 8002272:	e000      	b.n	8002276 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002274:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0302 	and.w	r3, r3, #2
 800227e:	2b00      	cmp	r3, #0
 8002280:	d063      	beq.n	800234a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002282:	4b4c      	ldr	r3, [pc, #304]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	f003 030c 	and.w	r3, r3, #12
 800228a:	2b00      	cmp	r3, #0
 800228c:	d00b      	beq.n	80022a6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800228e:	4b49      	ldr	r3, [pc, #292]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	f003 030c 	and.w	r3, r3, #12
 8002296:	2b08      	cmp	r3, #8
 8002298:	d11c      	bne.n	80022d4 <HAL_RCC_OscConfig+0x18c>
 800229a:	4b46      	ldr	r3, [pc, #280]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d116      	bne.n	80022d4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022a6:	4b43      	ldr	r3, [pc, #268]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 0302 	and.w	r3, r3, #2
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d005      	beq.n	80022be <HAL_RCC_OscConfig+0x176>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	691b      	ldr	r3, [r3, #16]
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d001      	beq.n	80022be <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e1c0      	b.n	8002640 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022be:	4b3d      	ldr	r3, [pc, #244]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	695b      	ldr	r3, [r3, #20]
 80022ca:	00db      	lsls	r3, r3, #3
 80022cc:	4939      	ldr	r1, [pc, #228]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 80022ce:	4313      	orrs	r3, r2
 80022d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022d2:	e03a      	b.n	800234a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	691b      	ldr	r3, [r3, #16]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d020      	beq.n	800231e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022dc:	4b36      	ldr	r3, [pc, #216]	; (80023b8 <HAL_RCC_OscConfig+0x270>)
 80022de:	2201      	movs	r2, #1
 80022e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e2:	f7ff fbb3 	bl	8001a4c <HAL_GetTick>
 80022e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022e8:	e008      	b.n	80022fc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022ea:	f7ff fbaf 	bl	8001a4c <HAL_GetTick>
 80022ee:	4602      	mov	r2, r0
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	1ad3      	subs	r3, r2, r3
 80022f4:	2b02      	cmp	r3, #2
 80022f6:	d901      	bls.n	80022fc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80022f8:	2303      	movs	r3, #3
 80022fa:	e1a1      	b.n	8002640 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022fc:	4b2d      	ldr	r3, [pc, #180]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 0302 	and.w	r3, r3, #2
 8002304:	2b00      	cmp	r3, #0
 8002306:	d0f0      	beq.n	80022ea <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002308:	4b2a      	ldr	r3, [pc, #168]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	695b      	ldr	r3, [r3, #20]
 8002314:	00db      	lsls	r3, r3, #3
 8002316:	4927      	ldr	r1, [pc, #156]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 8002318:	4313      	orrs	r3, r2
 800231a:	600b      	str	r3, [r1, #0]
 800231c:	e015      	b.n	800234a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800231e:	4b26      	ldr	r3, [pc, #152]	; (80023b8 <HAL_RCC_OscConfig+0x270>)
 8002320:	2200      	movs	r2, #0
 8002322:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002324:	f7ff fb92 	bl	8001a4c <HAL_GetTick>
 8002328:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800232a:	e008      	b.n	800233e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800232c:	f7ff fb8e 	bl	8001a4c <HAL_GetTick>
 8002330:	4602      	mov	r2, r0
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	2b02      	cmp	r3, #2
 8002338:	d901      	bls.n	800233e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800233a:	2303      	movs	r3, #3
 800233c:	e180      	b.n	8002640 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800233e:	4b1d      	ldr	r3, [pc, #116]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 0302 	and.w	r3, r3, #2
 8002346:	2b00      	cmp	r3, #0
 8002348:	d1f0      	bne.n	800232c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0308 	and.w	r3, r3, #8
 8002352:	2b00      	cmp	r3, #0
 8002354:	d03a      	beq.n	80023cc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	699b      	ldr	r3, [r3, #24]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d019      	beq.n	8002392 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800235e:	4b17      	ldr	r3, [pc, #92]	; (80023bc <HAL_RCC_OscConfig+0x274>)
 8002360:	2201      	movs	r2, #1
 8002362:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002364:	f7ff fb72 	bl	8001a4c <HAL_GetTick>
 8002368:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800236a:	e008      	b.n	800237e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800236c:	f7ff fb6e 	bl	8001a4c <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	2b02      	cmp	r3, #2
 8002378:	d901      	bls.n	800237e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800237a:	2303      	movs	r3, #3
 800237c:	e160      	b.n	8002640 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800237e:	4b0d      	ldr	r3, [pc, #52]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 8002380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002382:	f003 0302 	and.w	r3, r3, #2
 8002386:	2b00      	cmp	r3, #0
 8002388:	d0f0      	beq.n	800236c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800238a:	2001      	movs	r0, #1
 800238c:	f000 face 	bl	800292c <RCC_Delay>
 8002390:	e01c      	b.n	80023cc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002392:	4b0a      	ldr	r3, [pc, #40]	; (80023bc <HAL_RCC_OscConfig+0x274>)
 8002394:	2200      	movs	r2, #0
 8002396:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002398:	f7ff fb58 	bl	8001a4c <HAL_GetTick>
 800239c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800239e:	e00f      	b.n	80023c0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023a0:	f7ff fb54 	bl	8001a4c <HAL_GetTick>
 80023a4:	4602      	mov	r2, r0
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	d908      	bls.n	80023c0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80023ae:	2303      	movs	r3, #3
 80023b0:	e146      	b.n	8002640 <HAL_RCC_OscConfig+0x4f8>
 80023b2:	bf00      	nop
 80023b4:	40021000 	.word	0x40021000
 80023b8:	42420000 	.word	0x42420000
 80023bc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023c0:	4b92      	ldr	r3, [pc, #584]	; (800260c <HAL_RCC_OscConfig+0x4c4>)
 80023c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c4:	f003 0302 	and.w	r3, r3, #2
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d1e9      	bne.n	80023a0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 0304 	and.w	r3, r3, #4
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	f000 80a6 	beq.w	8002526 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023da:	2300      	movs	r3, #0
 80023dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023de:	4b8b      	ldr	r3, [pc, #556]	; (800260c <HAL_RCC_OscConfig+0x4c4>)
 80023e0:	69db      	ldr	r3, [r3, #28]
 80023e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d10d      	bne.n	8002406 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023ea:	4b88      	ldr	r3, [pc, #544]	; (800260c <HAL_RCC_OscConfig+0x4c4>)
 80023ec:	69db      	ldr	r3, [r3, #28]
 80023ee:	4a87      	ldr	r2, [pc, #540]	; (800260c <HAL_RCC_OscConfig+0x4c4>)
 80023f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023f4:	61d3      	str	r3, [r2, #28]
 80023f6:	4b85      	ldr	r3, [pc, #532]	; (800260c <HAL_RCC_OscConfig+0x4c4>)
 80023f8:	69db      	ldr	r3, [r3, #28]
 80023fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023fe:	60bb      	str	r3, [r7, #8]
 8002400:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002402:	2301      	movs	r3, #1
 8002404:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002406:	4b82      	ldr	r3, [pc, #520]	; (8002610 <HAL_RCC_OscConfig+0x4c8>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800240e:	2b00      	cmp	r3, #0
 8002410:	d118      	bne.n	8002444 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002412:	4b7f      	ldr	r3, [pc, #508]	; (8002610 <HAL_RCC_OscConfig+0x4c8>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a7e      	ldr	r2, [pc, #504]	; (8002610 <HAL_RCC_OscConfig+0x4c8>)
 8002418:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800241c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800241e:	f7ff fb15 	bl	8001a4c <HAL_GetTick>
 8002422:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002424:	e008      	b.n	8002438 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002426:	f7ff fb11 	bl	8001a4c <HAL_GetTick>
 800242a:	4602      	mov	r2, r0
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	1ad3      	subs	r3, r2, r3
 8002430:	2b64      	cmp	r3, #100	; 0x64
 8002432:	d901      	bls.n	8002438 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002434:	2303      	movs	r3, #3
 8002436:	e103      	b.n	8002640 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002438:	4b75      	ldr	r3, [pc, #468]	; (8002610 <HAL_RCC_OscConfig+0x4c8>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002440:	2b00      	cmp	r3, #0
 8002442:	d0f0      	beq.n	8002426 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	2b01      	cmp	r3, #1
 800244a:	d106      	bne.n	800245a <HAL_RCC_OscConfig+0x312>
 800244c:	4b6f      	ldr	r3, [pc, #444]	; (800260c <HAL_RCC_OscConfig+0x4c4>)
 800244e:	6a1b      	ldr	r3, [r3, #32]
 8002450:	4a6e      	ldr	r2, [pc, #440]	; (800260c <HAL_RCC_OscConfig+0x4c4>)
 8002452:	f043 0301 	orr.w	r3, r3, #1
 8002456:	6213      	str	r3, [r2, #32]
 8002458:	e02d      	b.n	80024b6 <HAL_RCC_OscConfig+0x36e>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	68db      	ldr	r3, [r3, #12]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d10c      	bne.n	800247c <HAL_RCC_OscConfig+0x334>
 8002462:	4b6a      	ldr	r3, [pc, #424]	; (800260c <HAL_RCC_OscConfig+0x4c4>)
 8002464:	6a1b      	ldr	r3, [r3, #32]
 8002466:	4a69      	ldr	r2, [pc, #420]	; (800260c <HAL_RCC_OscConfig+0x4c4>)
 8002468:	f023 0301 	bic.w	r3, r3, #1
 800246c:	6213      	str	r3, [r2, #32]
 800246e:	4b67      	ldr	r3, [pc, #412]	; (800260c <HAL_RCC_OscConfig+0x4c4>)
 8002470:	6a1b      	ldr	r3, [r3, #32]
 8002472:	4a66      	ldr	r2, [pc, #408]	; (800260c <HAL_RCC_OscConfig+0x4c4>)
 8002474:	f023 0304 	bic.w	r3, r3, #4
 8002478:	6213      	str	r3, [r2, #32]
 800247a:	e01c      	b.n	80024b6 <HAL_RCC_OscConfig+0x36e>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	2b05      	cmp	r3, #5
 8002482:	d10c      	bne.n	800249e <HAL_RCC_OscConfig+0x356>
 8002484:	4b61      	ldr	r3, [pc, #388]	; (800260c <HAL_RCC_OscConfig+0x4c4>)
 8002486:	6a1b      	ldr	r3, [r3, #32]
 8002488:	4a60      	ldr	r2, [pc, #384]	; (800260c <HAL_RCC_OscConfig+0x4c4>)
 800248a:	f043 0304 	orr.w	r3, r3, #4
 800248e:	6213      	str	r3, [r2, #32]
 8002490:	4b5e      	ldr	r3, [pc, #376]	; (800260c <HAL_RCC_OscConfig+0x4c4>)
 8002492:	6a1b      	ldr	r3, [r3, #32]
 8002494:	4a5d      	ldr	r2, [pc, #372]	; (800260c <HAL_RCC_OscConfig+0x4c4>)
 8002496:	f043 0301 	orr.w	r3, r3, #1
 800249a:	6213      	str	r3, [r2, #32]
 800249c:	e00b      	b.n	80024b6 <HAL_RCC_OscConfig+0x36e>
 800249e:	4b5b      	ldr	r3, [pc, #364]	; (800260c <HAL_RCC_OscConfig+0x4c4>)
 80024a0:	6a1b      	ldr	r3, [r3, #32]
 80024a2:	4a5a      	ldr	r2, [pc, #360]	; (800260c <HAL_RCC_OscConfig+0x4c4>)
 80024a4:	f023 0301 	bic.w	r3, r3, #1
 80024a8:	6213      	str	r3, [r2, #32]
 80024aa:	4b58      	ldr	r3, [pc, #352]	; (800260c <HAL_RCC_OscConfig+0x4c4>)
 80024ac:	6a1b      	ldr	r3, [r3, #32]
 80024ae:	4a57      	ldr	r2, [pc, #348]	; (800260c <HAL_RCC_OscConfig+0x4c4>)
 80024b0:	f023 0304 	bic.w	r3, r3, #4
 80024b4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	68db      	ldr	r3, [r3, #12]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d015      	beq.n	80024ea <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024be:	f7ff fac5 	bl	8001a4c <HAL_GetTick>
 80024c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024c4:	e00a      	b.n	80024dc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024c6:	f7ff fac1 	bl	8001a4c <HAL_GetTick>
 80024ca:	4602      	mov	r2, r0
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d901      	bls.n	80024dc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80024d8:	2303      	movs	r3, #3
 80024da:	e0b1      	b.n	8002640 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024dc:	4b4b      	ldr	r3, [pc, #300]	; (800260c <HAL_RCC_OscConfig+0x4c4>)
 80024de:	6a1b      	ldr	r3, [r3, #32]
 80024e0:	f003 0302 	and.w	r3, r3, #2
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d0ee      	beq.n	80024c6 <HAL_RCC_OscConfig+0x37e>
 80024e8:	e014      	b.n	8002514 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024ea:	f7ff faaf 	bl	8001a4c <HAL_GetTick>
 80024ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024f0:	e00a      	b.n	8002508 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024f2:	f7ff faab 	bl	8001a4c <HAL_GetTick>
 80024f6:	4602      	mov	r2, r0
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	1ad3      	subs	r3, r2, r3
 80024fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002500:	4293      	cmp	r3, r2
 8002502:	d901      	bls.n	8002508 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002504:	2303      	movs	r3, #3
 8002506:	e09b      	b.n	8002640 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002508:	4b40      	ldr	r3, [pc, #256]	; (800260c <HAL_RCC_OscConfig+0x4c4>)
 800250a:	6a1b      	ldr	r3, [r3, #32]
 800250c:	f003 0302 	and.w	r3, r3, #2
 8002510:	2b00      	cmp	r3, #0
 8002512:	d1ee      	bne.n	80024f2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002514:	7dfb      	ldrb	r3, [r7, #23]
 8002516:	2b01      	cmp	r3, #1
 8002518:	d105      	bne.n	8002526 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800251a:	4b3c      	ldr	r3, [pc, #240]	; (800260c <HAL_RCC_OscConfig+0x4c4>)
 800251c:	69db      	ldr	r3, [r3, #28]
 800251e:	4a3b      	ldr	r2, [pc, #236]	; (800260c <HAL_RCC_OscConfig+0x4c4>)
 8002520:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002524:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	69db      	ldr	r3, [r3, #28]
 800252a:	2b00      	cmp	r3, #0
 800252c:	f000 8087 	beq.w	800263e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002530:	4b36      	ldr	r3, [pc, #216]	; (800260c <HAL_RCC_OscConfig+0x4c4>)
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f003 030c 	and.w	r3, r3, #12
 8002538:	2b08      	cmp	r3, #8
 800253a:	d061      	beq.n	8002600 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	69db      	ldr	r3, [r3, #28]
 8002540:	2b02      	cmp	r3, #2
 8002542:	d146      	bne.n	80025d2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002544:	4b33      	ldr	r3, [pc, #204]	; (8002614 <HAL_RCC_OscConfig+0x4cc>)
 8002546:	2200      	movs	r2, #0
 8002548:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800254a:	f7ff fa7f 	bl	8001a4c <HAL_GetTick>
 800254e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002550:	e008      	b.n	8002564 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002552:	f7ff fa7b 	bl	8001a4c <HAL_GetTick>
 8002556:	4602      	mov	r2, r0
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	2b02      	cmp	r3, #2
 800255e:	d901      	bls.n	8002564 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002560:	2303      	movs	r3, #3
 8002562:	e06d      	b.n	8002640 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002564:	4b29      	ldr	r3, [pc, #164]	; (800260c <HAL_RCC_OscConfig+0x4c4>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800256c:	2b00      	cmp	r3, #0
 800256e:	d1f0      	bne.n	8002552 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6a1b      	ldr	r3, [r3, #32]
 8002574:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002578:	d108      	bne.n	800258c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800257a:	4b24      	ldr	r3, [pc, #144]	; (800260c <HAL_RCC_OscConfig+0x4c4>)
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	4921      	ldr	r1, [pc, #132]	; (800260c <HAL_RCC_OscConfig+0x4c4>)
 8002588:	4313      	orrs	r3, r2
 800258a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800258c:	4b1f      	ldr	r3, [pc, #124]	; (800260c <HAL_RCC_OscConfig+0x4c4>)
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6a19      	ldr	r1, [r3, #32]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800259c:	430b      	orrs	r3, r1
 800259e:	491b      	ldr	r1, [pc, #108]	; (800260c <HAL_RCC_OscConfig+0x4c4>)
 80025a0:	4313      	orrs	r3, r2
 80025a2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025a4:	4b1b      	ldr	r3, [pc, #108]	; (8002614 <HAL_RCC_OscConfig+0x4cc>)
 80025a6:	2201      	movs	r2, #1
 80025a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025aa:	f7ff fa4f 	bl	8001a4c <HAL_GetTick>
 80025ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025b0:	e008      	b.n	80025c4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025b2:	f7ff fa4b 	bl	8001a4c <HAL_GetTick>
 80025b6:	4602      	mov	r2, r0
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	2b02      	cmp	r3, #2
 80025be:	d901      	bls.n	80025c4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80025c0:	2303      	movs	r3, #3
 80025c2:	e03d      	b.n	8002640 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025c4:	4b11      	ldr	r3, [pc, #68]	; (800260c <HAL_RCC_OscConfig+0x4c4>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d0f0      	beq.n	80025b2 <HAL_RCC_OscConfig+0x46a>
 80025d0:	e035      	b.n	800263e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025d2:	4b10      	ldr	r3, [pc, #64]	; (8002614 <HAL_RCC_OscConfig+0x4cc>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025d8:	f7ff fa38 	bl	8001a4c <HAL_GetTick>
 80025dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025de:	e008      	b.n	80025f2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025e0:	f7ff fa34 	bl	8001a4c <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d901      	bls.n	80025f2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	e026      	b.n	8002640 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025f2:	4b06      	ldr	r3, [pc, #24]	; (800260c <HAL_RCC_OscConfig+0x4c4>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d1f0      	bne.n	80025e0 <HAL_RCC_OscConfig+0x498>
 80025fe:	e01e      	b.n	800263e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	69db      	ldr	r3, [r3, #28]
 8002604:	2b01      	cmp	r3, #1
 8002606:	d107      	bne.n	8002618 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	e019      	b.n	8002640 <HAL_RCC_OscConfig+0x4f8>
 800260c:	40021000 	.word	0x40021000
 8002610:	40007000 	.word	0x40007000
 8002614:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002618:	4b0b      	ldr	r3, [pc, #44]	; (8002648 <HAL_RCC_OscConfig+0x500>)
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6a1b      	ldr	r3, [r3, #32]
 8002628:	429a      	cmp	r2, r3
 800262a:	d106      	bne.n	800263a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002636:	429a      	cmp	r2, r3
 8002638:	d001      	beq.n	800263e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e000      	b.n	8002640 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800263e:	2300      	movs	r3, #0
}
 8002640:	4618      	mov	r0, r3
 8002642:	3718      	adds	r7, #24
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	40021000 	.word	0x40021000

0800264c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b084      	sub	sp, #16
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d101      	bne.n	8002660 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e0d0      	b.n	8002802 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002660:	4b6a      	ldr	r3, [pc, #424]	; (800280c <HAL_RCC_ClockConfig+0x1c0>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 0307 	and.w	r3, r3, #7
 8002668:	683a      	ldr	r2, [r7, #0]
 800266a:	429a      	cmp	r2, r3
 800266c:	d910      	bls.n	8002690 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800266e:	4b67      	ldr	r3, [pc, #412]	; (800280c <HAL_RCC_ClockConfig+0x1c0>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f023 0207 	bic.w	r2, r3, #7
 8002676:	4965      	ldr	r1, [pc, #404]	; (800280c <HAL_RCC_ClockConfig+0x1c0>)
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	4313      	orrs	r3, r2
 800267c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800267e:	4b63      	ldr	r3, [pc, #396]	; (800280c <HAL_RCC_ClockConfig+0x1c0>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0307 	and.w	r3, r3, #7
 8002686:	683a      	ldr	r2, [r7, #0]
 8002688:	429a      	cmp	r2, r3
 800268a:	d001      	beq.n	8002690 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e0b8      	b.n	8002802 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0302 	and.w	r3, r3, #2
 8002698:	2b00      	cmp	r3, #0
 800269a:	d020      	beq.n	80026de <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 0304 	and.w	r3, r3, #4
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d005      	beq.n	80026b4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026a8:	4b59      	ldr	r3, [pc, #356]	; (8002810 <HAL_RCC_ClockConfig+0x1c4>)
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	4a58      	ldr	r2, [pc, #352]	; (8002810 <HAL_RCC_ClockConfig+0x1c4>)
 80026ae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80026b2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 0308 	and.w	r3, r3, #8
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d005      	beq.n	80026cc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026c0:	4b53      	ldr	r3, [pc, #332]	; (8002810 <HAL_RCC_ClockConfig+0x1c4>)
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	4a52      	ldr	r2, [pc, #328]	; (8002810 <HAL_RCC_ClockConfig+0x1c4>)
 80026c6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80026ca:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026cc:	4b50      	ldr	r3, [pc, #320]	; (8002810 <HAL_RCC_ClockConfig+0x1c4>)
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	494d      	ldr	r1, [pc, #308]	; (8002810 <HAL_RCC_ClockConfig+0x1c4>)
 80026da:	4313      	orrs	r3, r2
 80026dc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0301 	and.w	r3, r3, #1
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d040      	beq.n	800276c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d107      	bne.n	8002702 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026f2:	4b47      	ldr	r3, [pc, #284]	; (8002810 <HAL_RCC_ClockConfig+0x1c4>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d115      	bne.n	800272a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e07f      	b.n	8002802 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	2b02      	cmp	r3, #2
 8002708:	d107      	bne.n	800271a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800270a:	4b41      	ldr	r3, [pc, #260]	; (8002810 <HAL_RCC_ClockConfig+0x1c4>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d109      	bne.n	800272a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e073      	b.n	8002802 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800271a:	4b3d      	ldr	r3, [pc, #244]	; (8002810 <HAL_RCC_ClockConfig+0x1c4>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0302 	and.w	r3, r3, #2
 8002722:	2b00      	cmp	r3, #0
 8002724:	d101      	bne.n	800272a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e06b      	b.n	8002802 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800272a:	4b39      	ldr	r3, [pc, #228]	; (8002810 <HAL_RCC_ClockConfig+0x1c4>)
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	f023 0203 	bic.w	r2, r3, #3
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	4936      	ldr	r1, [pc, #216]	; (8002810 <HAL_RCC_ClockConfig+0x1c4>)
 8002738:	4313      	orrs	r3, r2
 800273a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800273c:	f7ff f986 	bl	8001a4c <HAL_GetTick>
 8002740:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002742:	e00a      	b.n	800275a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002744:	f7ff f982 	bl	8001a4c <HAL_GetTick>
 8002748:	4602      	mov	r2, r0
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002752:	4293      	cmp	r3, r2
 8002754:	d901      	bls.n	800275a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	e053      	b.n	8002802 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800275a:	4b2d      	ldr	r3, [pc, #180]	; (8002810 <HAL_RCC_ClockConfig+0x1c4>)
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	f003 020c 	and.w	r2, r3, #12
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	429a      	cmp	r2, r3
 800276a:	d1eb      	bne.n	8002744 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800276c:	4b27      	ldr	r3, [pc, #156]	; (800280c <HAL_RCC_ClockConfig+0x1c0>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 0307 	and.w	r3, r3, #7
 8002774:	683a      	ldr	r2, [r7, #0]
 8002776:	429a      	cmp	r2, r3
 8002778:	d210      	bcs.n	800279c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800277a:	4b24      	ldr	r3, [pc, #144]	; (800280c <HAL_RCC_ClockConfig+0x1c0>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f023 0207 	bic.w	r2, r3, #7
 8002782:	4922      	ldr	r1, [pc, #136]	; (800280c <HAL_RCC_ClockConfig+0x1c0>)
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	4313      	orrs	r3, r2
 8002788:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800278a:	4b20      	ldr	r3, [pc, #128]	; (800280c <HAL_RCC_ClockConfig+0x1c0>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 0307 	and.w	r3, r3, #7
 8002792:	683a      	ldr	r2, [r7, #0]
 8002794:	429a      	cmp	r2, r3
 8002796:	d001      	beq.n	800279c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e032      	b.n	8002802 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 0304 	and.w	r3, r3, #4
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d008      	beq.n	80027ba <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027a8:	4b19      	ldr	r3, [pc, #100]	; (8002810 <HAL_RCC_ClockConfig+0x1c4>)
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	4916      	ldr	r1, [pc, #88]	; (8002810 <HAL_RCC_ClockConfig+0x1c4>)
 80027b6:	4313      	orrs	r3, r2
 80027b8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 0308 	and.w	r3, r3, #8
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d009      	beq.n	80027da <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80027c6:	4b12      	ldr	r3, [pc, #72]	; (8002810 <HAL_RCC_ClockConfig+0x1c4>)
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	691b      	ldr	r3, [r3, #16]
 80027d2:	00db      	lsls	r3, r3, #3
 80027d4:	490e      	ldr	r1, [pc, #56]	; (8002810 <HAL_RCC_ClockConfig+0x1c4>)
 80027d6:	4313      	orrs	r3, r2
 80027d8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80027da:	f000 f821 	bl	8002820 <HAL_RCC_GetSysClockFreq>
 80027de:	4602      	mov	r2, r0
 80027e0:	4b0b      	ldr	r3, [pc, #44]	; (8002810 <HAL_RCC_ClockConfig+0x1c4>)
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	091b      	lsrs	r3, r3, #4
 80027e6:	f003 030f 	and.w	r3, r3, #15
 80027ea:	490a      	ldr	r1, [pc, #40]	; (8002814 <HAL_RCC_ClockConfig+0x1c8>)
 80027ec:	5ccb      	ldrb	r3, [r1, r3]
 80027ee:	fa22 f303 	lsr.w	r3, r2, r3
 80027f2:	4a09      	ldr	r2, [pc, #36]	; (8002818 <HAL_RCC_ClockConfig+0x1cc>)
 80027f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80027f6:	4b09      	ldr	r3, [pc, #36]	; (800281c <HAL_RCC_ClockConfig+0x1d0>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4618      	mov	r0, r3
 80027fc:	f7ff f8e4 	bl	80019c8 <HAL_InitTick>

  return HAL_OK;
 8002800:	2300      	movs	r3, #0
}
 8002802:	4618      	mov	r0, r3
 8002804:	3710      	adds	r7, #16
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	40022000 	.word	0x40022000
 8002810:	40021000 	.word	0x40021000
 8002814:	08004ea0 	.word	0x08004ea0
 8002818:	20000038 	.word	0x20000038
 800281c:	20000040 	.word	0x20000040

08002820 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002820:	b480      	push	{r7}
 8002822:	b087      	sub	sp, #28
 8002824:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002826:	2300      	movs	r3, #0
 8002828:	60fb      	str	r3, [r7, #12]
 800282a:	2300      	movs	r3, #0
 800282c:	60bb      	str	r3, [r7, #8]
 800282e:	2300      	movs	r3, #0
 8002830:	617b      	str	r3, [r7, #20]
 8002832:	2300      	movs	r3, #0
 8002834:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002836:	2300      	movs	r3, #0
 8002838:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800283a:	4b1e      	ldr	r3, [pc, #120]	; (80028b4 <HAL_RCC_GetSysClockFreq+0x94>)
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	f003 030c 	and.w	r3, r3, #12
 8002846:	2b04      	cmp	r3, #4
 8002848:	d002      	beq.n	8002850 <HAL_RCC_GetSysClockFreq+0x30>
 800284a:	2b08      	cmp	r3, #8
 800284c:	d003      	beq.n	8002856 <HAL_RCC_GetSysClockFreq+0x36>
 800284e:	e027      	b.n	80028a0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002850:	4b19      	ldr	r3, [pc, #100]	; (80028b8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002852:	613b      	str	r3, [r7, #16]
      break;
 8002854:	e027      	b.n	80028a6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	0c9b      	lsrs	r3, r3, #18
 800285a:	f003 030f 	and.w	r3, r3, #15
 800285e:	4a17      	ldr	r2, [pc, #92]	; (80028bc <HAL_RCC_GetSysClockFreq+0x9c>)
 8002860:	5cd3      	ldrb	r3, [r2, r3]
 8002862:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d010      	beq.n	8002890 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800286e:	4b11      	ldr	r3, [pc, #68]	; (80028b4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	0c5b      	lsrs	r3, r3, #17
 8002874:	f003 0301 	and.w	r3, r3, #1
 8002878:	4a11      	ldr	r2, [pc, #68]	; (80028c0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800287a:	5cd3      	ldrb	r3, [r2, r3]
 800287c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	4a0d      	ldr	r2, [pc, #52]	; (80028b8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002882:	fb03 f202 	mul.w	r2, r3, r2
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	fbb2 f3f3 	udiv	r3, r2, r3
 800288c:	617b      	str	r3, [r7, #20]
 800288e:	e004      	b.n	800289a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	4a0c      	ldr	r2, [pc, #48]	; (80028c4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002894:	fb02 f303 	mul.w	r3, r2, r3
 8002898:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	613b      	str	r3, [r7, #16]
      break;
 800289e:	e002      	b.n	80028a6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80028a0:	4b05      	ldr	r3, [pc, #20]	; (80028b8 <HAL_RCC_GetSysClockFreq+0x98>)
 80028a2:	613b      	str	r3, [r7, #16]
      break;
 80028a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028a6:	693b      	ldr	r3, [r7, #16]
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	371c      	adds	r7, #28
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bc80      	pop	{r7}
 80028b0:	4770      	bx	lr
 80028b2:	bf00      	nop
 80028b4:	40021000 	.word	0x40021000
 80028b8:	007a1200 	.word	0x007a1200
 80028bc:	08004eb8 	.word	0x08004eb8
 80028c0:	08004ec8 	.word	0x08004ec8
 80028c4:	003d0900 	.word	0x003d0900

080028c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028c8:	b480      	push	{r7}
 80028ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028cc:	4b02      	ldr	r3, [pc, #8]	; (80028d8 <HAL_RCC_GetHCLKFreq+0x10>)
 80028ce:	681b      	ldr	r3, [r3, #0]
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bc80      	pop	{r7}
 80028d6:	4770      	bx	lr
 80028d8:	20000038 	.word	0x20000038

080028dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80028e0:	f7ff fff2 	bl	80028c8 <HAL_RCC_GetHCLKFreq>
 80028e4:	4602      	mov	r2, r0
 80028e6:	4b05      	ldr	r3, [pc, #20]	; (80028fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	0a1b      	lsrs	r3, r3, #8
 80028ec:	f003 0307 	and.w	r3, r3, #7
 80028f0:	4903      	ldr	r1, [pc, #12]	; (8002900 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028f2:	5ccb      	ldrb	r3, [r1, r3]
 80028f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	bd80      	pop	{r7, pc}
 80028fc:	40021000 	.word	0x40021000
 8002900:	08004eb0 	.word	0x08004eb0

08002904 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002908:	f7ff ffde 	bl	80028c8 <HAL_RCC_GetHCLKFreq>
 800290c:	4602      	mov	r2, r0
 800290e:	4b05      	ldr	r3, [pc, #20]	; (8002924 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	0adb      	lsrs	r3, r3, #11
 8002914:	f003 0307 	and.w	r3, r3, #7
 8002918:	4903      	ldr	r1, [pc, #12]	; (8002928 <HAL_RCC_GetPCLK2Freq+0x24>)
 800291a:	5ccb      	ldrb	r3, [r1, r3]
 800291c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002920:	4618      	mov	r0, r3
 8002922:	bd80      	pop	{r7, pc}
 8002924:	40021000 	.word	0x40021000
 8002928:	08004eb0 	.word	0x08004eb0

0800292c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800292c:	b480      	push	{r7}
 800292e:	b085      	sub	sp, #20
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002934:	4b0a      	ldr	r3, [pc, #40]	; (8002960 <RCC_Delay+0x34>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a0a      	ldr	r2, [pc, #40]	; (8002964 <RCC_Delay+0x38>)
 800293a:	fba2 2303 	umull	r2, r3, r2, r3
 800293e:	0a5b      	lsrs	r3, r3, #9
 8002940:	687a      	ldr	r2, [r7, #4]
 8002942:	fb02 f303 	mul.w	r3, r2, r3
 8002946:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002948:	bf00      	nop
  }
  while (Delay --);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	1e5a      	subs	r2, r3, #1
 800294e:	60fa      	str	r2, [r7, #12]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d1f9      	bne.n	8002948 <RCC_Delay+0x1c>
}
 8002954:	bf00      	nop
 8002956:	bf00      	nop
 8002958:	3714      	adds	r7, #20
 800295a:	46bd      	mov	sp, r7
 800295c:	bc80      	pop	{r7}
 800295e:	4770      	bx	lr
 8002960:	20000038 	.word	0x20000038
 8002964:	10624dd3 	.word	0x10624dd3

08002968 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b082      	sub	sp, #8
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d101      	bne.n	800297a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e041      	b.n	80029fe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002980:	b2db      	uxtb	r3, r3
 8002982:	2b00      	cmp	r3, #0
 8002984:	d106      	bne.n	8002994 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2200      	movs	r2, #0
 800298a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f7fe fcee 	bl	8001370 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2202      	movs	r2, #2
 8002998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	3304      	adds	r3, #4
 80029a4:	4619      	mov	r1, r3
 80029a6:	4610      	mov	r0, r2
 80029a8:	f000 fc30 	bl	800320c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2201      	movs	r2, #1
 80029b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2201      	movs	r2, #1
 80029b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2201      	movs	r2, #1
 80029c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2201      	movs	r2, #1
 80029c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2201      	movs	r2, #1
 80029d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2201      	movs	r2, #1
 80029d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2201      	movs	r2, #1
 80029e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2201      	movs	r2, #1
 80029e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2201      	movs	r2, #1
 80029f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2201      	movs	r2, #1
 80029f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029fc:	2300      	movs	r3, #0
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3708      	adds	r7, #8
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
	...

08002a08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b085      	sub	sp, #20
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d001      	beq.n	8002a20 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e03a      	b.n	8002a96 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2202      	movs	r2, #2
 8002a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	68da      	ldr	r2, [r3, #12]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f042 0201 	orr.w	r2, r2, #1
 8002a36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a18      	ldr	r2, [pc, #96]	; (8002aa0 <HAL_TIM_Base_Start_IT+0x98>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d00e      	beq.n	8002a60 <HAL_TIM_Base_Start_IT+0x58>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a4a:	d009      	beq.n	8002a60 <HAL_TIM_Base_Start_IT+0x58>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a14      	ldr	r2, [pc, #80]	; (8002aa4 <HAL_TIM_Base_Start_IT+0x9c>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d004      	beq.n	8002a60 <HAL_TIM_Base_Start_IT+0x58>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a13      	ldr	r2, [pc, #76]	; (8002aa8 <HAL_TIM_Base_Start_IT+0xa0>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d111      	bne.n	8002a84 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	f003 0307 	and.w	r3, r3, #7
 8002a6a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2b06      	cmp	r3, #6
 8002a70:	d010      	beq.n	8002a94 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f042 0201 	orr.w	r2, r2, #1
 8002a80:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a82:	e007      	b.n	8002a94 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f042 0201 	orr.w	r2, r2, #1
 8002a92:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a94:	2300      	movs	r3, #0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3714      	adds	r7, #20
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bc80      	pop	{r7}
 8002a9e:	4770      	bx	lr
 8002aa0:	40012c00 	.word	0x40012c00
 8002aa4:	40000400 	.word	0x40000400
 8002aa8:	40000800 	.word	0x40000800

08002aac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b082      	sub	sp, #8
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d101      	bne.n	8002abe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e041      	b.n	8002b42 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d106      	bne.n	8002ad8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2200      	movs	r2, #0
 8002ace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f000 f839 	bl	8002b4a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2202      	movs	r2, #2
 8002adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	3304      	adds	r3, #4
 8002ae8:	4619      	mov	r1, r3
 8002aea:	4610      	mov	r0, r2
 8002aec:	f000 fb8e 	bl	800320c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2201      	movs	r2, #1
 8002af4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2201      	movs	r2, #1
 8002afc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2201      	movs	r2, #1
 8002b04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2201      	movs	r2, #1
 8002b14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2201      	movs	r2, #1
 8002b24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2201      	movs	r2, #1
 8002b34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b40:	2300      	movs	r3, #0
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3708      	adds	r7, #8
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}

08002b4a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002b4a:	b480      	push	{r7}
 8002b4c:	b083      	sub	sp, #12
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002b52:	bf00      	nop
 8002b54:	370c      	adds	r7, #12
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bc80      	pop	{r7}
 8002b5a:	4770      	bx	lr

08002b5c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b084      	sub	sp, #16
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
 8002b64:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d109      	bne.n	8002b80 <HAL_TIM_PWM_Start+0x24>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	bf14      	ite	ne
 8002b78:	2301      	movne	r3, #1
 8002b7a:	2300      	moveq	r3, #0
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	e022      	b.n	8002bc6 <HAL_TIM_PWM_Start+0x6a>
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	2b04      	cmp	r3, #4
 8002b84:	d109      	bne.n	8002b9a <HAL_TIM_PWM_Start+0x3e>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	bf14      	ite	ne
 8002b92:	2301      	movne	r3, #1
 8002b94:	2300      	moveq	r3, #0
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	e015      	b.n	8002bc6 <HAL_TIM_PWM_Start+0x6a>
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	2b08      	cmp	r3, #8
 8002b9e:	d109      	bne.n	8002bb4 <HAL_TIM_PWM_Start+0x58>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	bf14      	ite	ne
 8002bac:	2301      	movne	r3, #1
 8002bae:	2300      	moveq	r3, #0
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	e008      	b.n	8002bc6 <HAL_TIM_PWM_Start+0x6a>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	bf14      	ite	ne
 8002bc0:	2301      	movne	r3, #1
 8002bc2:	2300      	moveq	r3, #0
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d001      	beq.n	8002bce <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e05e      	b.n	8002c8c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d104      	bne.n	8002bde <HAL_TIM_PWM_Start+0x82>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2202      	movs	r2, #2
 8002bd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002bdc:	e013      	b.n	8002c06 <HAL_TIM_PWM_Start+0xaa>
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	2b04      	cmp	r3, #4
 8002be2:	d104      	bne.n	8002bee <HAL_TIM_PWM_Start+0x92>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2202      	movs	r2, #2
 8002be8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002bec:	e00b      	b.n	8002c06 <HAL_TIM_PWM_Start+0xaa>
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	2b08      	cmp	r3, #8
 8002bf2:	d104      	bne.n	8002bfe <HAL_TIM_PWM_Start+0xa2>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2202      	movs	r2, #2
 8002bf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002bfc:	e003      	b.n	8002c06 <HAL_TIM_PWM_Start+0xaa>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2202      	movs	r2, #2
 8002c02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	6839      	ldr	r1, [r7, #0]
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f000 fd7c 	bl	800370c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a1e      	ldr	r2, [pc, #120]	; (8002c94 <HAL_TIM_PWM_Start+0x138>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d107      	bne.n	8002c2e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c2c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a18      	ldr	r2, [pc, #96]	; (8002c94 <HAL_TIM_PWM_Start+0x138>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d00e      	beq.n	8002c56 <HAL_TIM_PWM_Start+0xfa>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c40:	d009      	beq.n	8002c56 <HAL_TIM_PWM_Start+0xfa>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a14      	ldr	r2, [pc, #80]	; (8002c98 <HAL_TIM_PWM_Start+0x13c>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d004      	beq.n	8002c56 <HAL_TIM_PWM_Start+0xfa>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a12      	ldr	r2, [pc, #72]	; (8002c9c <HAL_TIM_PWM_Start+0x140>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d111      	bne.n	8002c7a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	f003 0307 	and.w	r3, r3, #7
 8002c60:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2b06      	cmp	r3, #6
 8002c66:	d010      	beq.n	8002c8a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f042 0201 	orr.w	r2, r2, #1
 8002c76:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c78:	e007      	b.n	8002c8a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f042 0201 	orr.w	r2, r2, #1
 8002c88:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c8a:	2300      	movs	r3, #0
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	3710      	adds	r7, #16
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	40012c00 	.word	0x40012c00
 8002c98:	40000400 	.word	0x40000400
 8002c9c:	40000800 	.word	0x40000800

08002ca0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b082      	sub	sp, #8
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	691b      	ldr	r3, [r3, #16]
 8002cae:	f003 0302 	and.w	r3, r3, #2
 8002cb2:	2b02      	cmp	r3, #2
 8002cb4:	d122      	bne.n	8002cfc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	f003 0302 	and.w	r3, r3, #2
 8002cc0:	2b02      	cmp	r3, #2
 8002cc2:	d11b      	bne.n	8002cfc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f06f 0202 	mvn.w	r2, #2
 8002ccc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	699b      	ldr	r3, [r3, #24]
 8002cda:	f003 0303 	and.w	r3, r3, #3
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d003      	beq.n	8002cea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f000 fa76 	bl	80031d4 <HAL_TIM_IC_CaptureCallback>
 8002ce8:	e005      	b.n	8002cf6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f000 fa69 	bl	80031c2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	f000 fa78 	bl	80031e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	691b      	ldr	r3, [r3, #16]
 8002d02:	f003 0304 	and.w	r3, r3, #4
 8002d06:	2b04      	cmp	r3, #4
 8002d08:	d122      	bne.n	8002d50 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	f003 0304 	and.w	r3, r3, #4
 8002d14:	2b04      	cmp	r3, #4
 8002d16:	d11b      	bne.n	8002d50 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f06f 0204 	mvn.w	r2, #4
 8002d20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2202      	movs	r2, #2
 8002d26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	699b      	ldr	r3, [r3, #24]
 8002d2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d003      	beq.n	8002d3e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f000 fa4c 	bl	80031d4 <HAL_TIM_IC_CaptureCallback>
 8002d3c:	e005      	b.n	8002d4a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f000 fa3f 	bl	80031c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	f000 fa4e 	bl	80031e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	691b      	ldr	r3, [r3, #16]
 8002d56:	f003 0308 	and.w	r3, r3, #8
 8002d5a:	2b08      	cmp	r3, #8
 8002d5c:	d122      	bne.n	8002da4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	f003 0308 	and.w	r3, r3, #8
 8002d68:	2b08      	cmp	r3, #8
 8002d6a:	d11b      	bne.n	8002da4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f06f 0208 	mvn.w	r2, #8
 8002d74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2204      	movs	r2, #4
 8002d7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	69db      	ldr	r3, [r3, #28]
 8002d82:	f003 0303 	and.w	r3, r3, #3
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d003      	beq.n	8002d92 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f000 fa22 	bl	80031d4 <HAL_TIM_IC_CaptureCallback>
 8002d90:	e005      	b.n	8002d9e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f000 fa15 	bl	80031c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	f000 fa24 	bl	80031e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2200      	movs	r2, #0
 8002da2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	691b      	ldr	r3, [r3, #16]
 8002daa:	f003 0310 	and.w	r3, r3, #16
 8002dae:	2b10      	cmp	r3, #16
 8002db0:	d122      	bne.n	8002df8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	f003 0310 	and.w	r3, r3, #16
 8002dbc:	2b10      	cmp	r3, #16
 8002dbe:	d11b      	bne.n	8002df8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f06f 0210 	mvn.w	r2, #16
 8002dc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2208      	movs	r2, #8
 8002dce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	69db      	ldr	r3, [r3, #28]
 8002dd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d003      	beq.n	8002de6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f000 f9f8 	bl	80031d4 <HAL_TIM_IC_CaptureCallback>
 8002de4:	e005      	b.n	8002df2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f000 f9eb 	bl	80031c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dec:	6878      	ldr	r0, [r7, #4]
 8002dee:	f000 f9fa 	bl	80031e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2200      	movs	r2, #0
 8002df6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	691b      	ldr	r3, [r3, #16]
 8002dfe:	f003 0301 	and.w	r3, r3, #1
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d10e      	bne.n	8002e24 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	f003 0301 	and.w	r3, r3, #1
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d107      	bne.n	8002e24 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f06f 0201 	mvn.w	r2, #1
 8002e1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f7fe fa62 	bl	80012e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	691b      	ldr	r3, [r3, #16]
 8002e2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e2e:	2b80      	cmp	r3, #128	; 0x80
 8002e30:	d10e      	bne.n	8002e50 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e3c:	2b80      	cmp	r3, #128	; 0x80
 8002e3e:	d107      	bne.n	8002e50 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002e48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f000 fce9 	bl	8003822 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	691b      	ldr	r3, [r3, #16]
 8002e56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e5a:	2b40      	cmp	r3, #64	; 0x40
 8002e5c:	d10e      	bne.n	8002e7c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e68:	2b40      	cmp	r3, #64	; 0x40
 8002e6a:	d107      	bne.n	8002e7c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002e74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f000 f9be 	bl	80031f8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	691b      	ldr	r3, [r3, #16]
 8002e82:	f003 0320 	and.w	r3, r3, #32
 8002e86:	2b20      	cmp	r3, #32
 8002e88:	d10e      	bne.n	8002ea8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	f003 0320 	and.w	r3, r3, #32
 8002e94:	2b20      	cmp	r3, #32
 8002e96:	d107      	bne.n	8002ea8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f06f 0220 	mvn.w	r2, #32
 8002ea0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f000 fcb4 	bl	8003810 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ea8:	bf00      	nop
 8002eaa:	3708      	adds	r7, #8
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}

08002eb0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b086      	sub	sp, #24
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	60f8      	str	r0, [r7, #12]
 8002eb8:	60b9      	str	r1, [r7, #8]
 8002eba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d101      	bne.n	8002ece <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002eca:	2302      	movs	r3, #2
 8002ecc:	e0ae      	b.n	800302c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2b0c      	cmp	r3, #12
 8002eda:	f200 809f 	bhi.w	800301c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002ede:	a201      	add	r2, pc, #4	; (adr r2, 8002ee4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ee4:	08002f19 	.word	0x08002f19
 8002ee8:	0800301d 	.word	0x0800301d
 8002eec:	0800301d 	.word	0x0800301d
 8002ef0:	0800301d 	.word	0x0800301d
 8002ef4:	08002f59 	.word	0x08002f59
 8002ef8:	0800301d 	.word	0x0800301d
 8002efc:	0800301d 	.word	0x0800301d
 8002f00:	0800301d 	.word	0x0800301d
 8002f04:	08002f9b 	.word	0x08002f9b
 8002f08:	0800301d 	.word	0x0800301d
 8002f0c:	0800301d 	.word	0x0800301d
 8002f10:	0800301d 	.word	0x0800301d
 8002f14:	08002fdb 	.word	0x08002fdb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	68b9      	ldr	r1, [r7, #8]
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f000 f9d6 	bl	80032d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	699a      	ldr	r2, [r3, #24]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f042 0208 	orr.w	r2, r2, #8
 8002f32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	699a      	ldr	r2, [r3, #24]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f022 0204 	bic.w	r2, r2, #4
 8002f42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	6999      	ldr	r1, [r3, #24]
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	691a      	ldr	r2, [r3, #16]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	430a      	orrs	r2, r1
 8002f54:	619a      	str	r2, [r3, #24]
      break;
 8002f56:	e064      	b.n	8003022 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	68b9      	ldr	r1, [r7, #8]
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f000 fa1c 	bl	800339c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	699a      	ldr	r2, [r3, #24]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	699a      	ldr	r2, [r3, #24]
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	6999      	ldr	r1, [r3, #24]
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	691b      	ldr	r3, [r3, #16]
 8002f8e:	021a      	lsls	r2, r3, #8
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	430a      	orrs	r2, r1
 8002f96:	619a      	str	r2, [r3, #24]
      break;
 8002f98:	e043      	b.n	8003022 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	68b9      	ldr	r1, [r7, #8]
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f000 fa65 	bl	8003470 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	69da      	ldr	r2, [r3, #28]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f042 0208 	orr.w	r2, r2, #8
 8002fb4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	69da      	ldr	r2, [r3, #28]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f022 0204 	bic.w	r2, r2, #4
 8002fc4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	69d9      	ldr	r1, [r3, #28]
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	691a      	ldr	r2, [r3, #16]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	430a      	orrs	r2, r1
 8002fd6:	61da      	str	r2, [r3, #28]
      break;
 8002fd8:	e023      	b.n	8003022 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	68b9      	ldr	r1, [r7, #8]
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f000 faaf 	bl	8003544 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	69da      	ldr	r2, [r3, #28]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ff4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	69da      	ldr	r2, [r3, #28]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003004:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	69d9      	ldr	r1, [r3, #28]
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	691b      	ldr	r3, [r3, #16]
 8003010:	021a      	lsls	r2, r3, #8
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	430a      	orrs	r2, r1
 8003018:	61da      	str	r2, [r3, #28]
      break;
 800301a:	e002      	b.n	8003022 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	75fb      	strb	r3, [r7, #23]
      break;
 8003020:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2200      	movs	r2, #0
 8003026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800302a:	7dfb      	ldrb	r3, [r7, #23]
}
 800302c:	4618      	mov	r0, r3
 800302e:	3718      	adds	r7, #24
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}

08003034 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b084      	sub	sp, #16
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
 800303c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800303e:	2300      	movs	r3, #0
 8003040:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003048:	2b01      	cmp	r3, #1
 800304a:	d101      	bne.n	8003050 <HAL_TIM_ConfigClockSource+0x1c>
 800304c:	2302      	movs	r3, #2
 800304e:	e0b4      	b.n	80031ba <HAL_TIM_ConfigClockSource+0x186>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2201      	movs	r2, #1
 8003054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2202      	movs	r2, #2
 800305c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800306e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003076:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	68ba      	ldr	r2, [r7, #8]
 800307e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003088:	d03e      	beq.n	8003108 <HAL_TIM_ConfigClockSource+0xd4>
 800308a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800308e:	f200 8087 	bhi.w	80031a0 <HAL_TIM_ConfigClockSource+0x16c>
 8003092:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003096:	f000 8086 	beq.w	80031a6 <HAL_TIM_ConfigClockSource+0x172>
 800309a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800309e:	d87f      	bhi.n	80031a0 <HAL_TIM_ConfigClockSource+0x16c>
 80030a0:	2b70      	cmp	r3, #112	; 0x70
 80030a2:	d01a      	beq.n	80030da <HAL_TIM_ConfigClockSource+0xa6>
 80030a4:	2b70      	cmp	r3, #112	; 0x70
 80030a6:	d87b      	bhi.n	80031a0 <HAL_TIM_ConfigClockSource+0x16c>
 80030a8:	2b60      	cmp	r3, #96	; 0x60
 80030aa:	d050      	beq.n	800314e <HAL_TIM_ConfigClockSource+0x11a>
 80030ac:	2b60      	cmp	r3, #96	; 0x60
 80030ae:	d877      	bhi.n	80031a0 <HAL_TIM_ConfigClockSource+0x16c>
 80030b0:	2b50      	cmp	r3, #80	; 0x50
 80030b2:	d03c      	beq.n	800312e <HAL_TIM_ConfigClockSource+0xfa>
 80030b4:	2b50      	cmp	r3, #80	; 0x50
 80030b6:	d873      	bhi.n	80031a0 <HAL_TIM_ConfigClockSource+0x16c>
 80030b8:	2b40      	cmp	r3, #64	; 0x40
 80030ba:	d058      	beq.n	800316e <HAL_TIM_ConfigClockSource+0x13a>
 80030bc:	2b40      	cmp	r3, #64	; 0x40
 80030be:	d86f      	bhi.n	80031a0 <HAL_TIM_ConfigClockSource+0x16c>
 80030c0:	2b30      	cmp	r3, #48	; 0x30
 80030c2:	d064      	beq.n	800318e <HAL_TIM_ConfigClockSource+0x15a>
 80030c4:	2b30      	cmp	r3, #48	; 0x30
 80030c6:	d86b      	bhi.n	80031a0 <HAL_TIM_ConfigClockSource+0x16c>
 80030c8:	2b20      	cmp	r3, #32
 80030ca:	d060      	beq.n	800318e <HAL_TIM_ConfigClockSource+0x15a>
 80030cc:	2b20      	cmp	r3, #32
 80030ce:	d867      	bhi.n	80031a0 <HAL_TIM_ConfigClockSource+0x16c>
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d05c      	beq.n	800318e <HAL_TIM_ConfigClockSource+0x15a>
 80030d4:	2b10      	cmp	r3, #16
 80030d6:	d05a      	beq.n	800318e <HAL_TIM_ConfigClockSource+0x15a>
 80030d8:	e062      	b.n	80031a0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80030ea:	f000 faf0 	bl	80036ce <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80030fc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	68ba      	ldr	r2, [r7, #8]
 8003104:	609a      	str	r2, [r3, #8]
      break;
 8003106:	e04f      	b.n	80031a8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003118:	f000 fad9 	bl	80036ce <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	689a      	ldr	r2, [r3, #8]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800312a:	609a      	str	r2, [r3, #8]
      break;
 800312c:	e03c      	b.n	80031a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800313a:	461a      	mov	r2, r3
 800313c:	f000 fa50 	bl	80035e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	2150      	movs	r1, #80	; 0x50
 8003146:	4618      	mov	r0, r3
 8003148:	f000 faa7 	bl	800369a <TIM_ITRx_SetConfig>
      break;
 800314c:	e02c      	b.n	80031a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800315a:	461a      	mov	r2, r3
 800315c:	f000 fa6e 	bl	800363c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	2160      	movs	r1, #96	; 0x60
 8003166:	4618      	mov	r0, r3
 8003168:	f000 fa97 	bl	800369a <TIM_ITRx_SetConfig>
      break;
 800316c:	e01c      	b.n	80031a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800317a:	461a      	mov	r2, r3
 800317c:	f000 fa30 	bl	80035e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	2140      	movs	r1, #64	; 0x40
 8003186:	4618      	mov	r0, r3
 8003188:	f000 fa87 	bl	800369a <TIM_ITRx_SetConfig>
      break;
 800318c:	e00c      	b.n	80031a8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4619      	mov	r1, r3
 8003198:	4610      	mov	r0, r2
 800319a:	f000 fa7e 	bl	800369a <TIM_ITRx_SetConfig>
      break;
 800319e:	e003      	b.n	80031a8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	73fb      	strb	r3, [r7, #15]
      break;
 80031a4:	e000      	b.n	80031a8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80031a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2201      	movs	r2, #1
 80031ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2200      	movs	r2, #0
 80031b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80031b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3710      	adds	r7, #16
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}

080031c2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031c2:	b480      	push	{r7}
 80031c4:	b083      	sub	sp, #12
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80031ca:	bf00      	nop
 80031cc:	370c      	adds	r7, #12
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bc80      	pop	{r7}
 80031d2:	4770      	bx	lr

080031d4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80031dc:	bf00      	nop
 80031de:	370c      	adds	r7, #12
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bc80      	pop	{r7}
 80031e4:	4770      	bx	lr

080031e6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80031e6:	b480      	push	{r7}
 80031e8:	b083      	sub	sp, #12
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80031ee:	bf00      	nop
 80031f0:	370c      	adds	r7, #12
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bc80      	pop	{r7}
 80031f6:	4770      	bx	lr

080031f8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b083      	sub	sp, #12
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003200:	bf00      	nop
 8003202:	370c      	adds	r7, #12
 8003204:	46bd      	mov	sp, r7
 8003206:	bc80      	pop	{r7}
 8003208:	4770      	bx	lr
	...

0800320c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800320c:	b480      	push	{r7}
 800320e:	b085      	sub	sp, #20
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	4a29      	ldr	r2, [pc, #164]	; (80032c4 <TIM_Base_SetConfig+0xb8>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d00b      	beq.n	800323c <TIM_Base_SetConfig+0x30>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800322a:	d007      	beq.n	800323c <TIM_Base_SetConfig+0x30>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	4a26      	ldr	r2, [pc, #152]	; (80032c8 <TIM_Base_SetConfig+0xbc>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d003      	beq.n	800323c <TIM_Base_SetConfig+0x30>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	4a25      	ldr	r2, [pc, #148]	; (80032cc <TIM_Base_SetConfig+0xc0>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d108      	bne.n	800324e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003242:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	68fa      	ldr	r2, [r7, #12]
 800324a:	4313      	orrs	r3, r2
 800324c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	4a1c      	ldr	r2, [pc, #112]	; (80032c4 <TIM_Base_SetConfig+0xb8>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d00b      	beq.n	800326e <TIM_Base_SetConfig+0x62>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800325c:	d007      	beq.n	800326e <TIM_Base_SetConfig+0x62>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4a19      	ldr	r2, [pc, #100]	; (80032c8 <TIM_Base_SetConfig+0xbc>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d003      	beq.n	800326e <TIM_Base_SetConfig+0x62>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	4a18      	ldr	r2, [pc, #96]	; (80032cc <TIM_Base_SetConfig+0xc0>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d108      	bne.n	8003280 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003274:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	68db      	ldr	r3, [r3, #12]
 800327a:	68fa      	ldr	r2, [r7, #12]
 800327c:	4313      	orrs	r3, r2
 800327e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	695b      	ldr	r3, [r3, #20]
 800328a:	4313      	orrs	r3, r2
 800328c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	68fa      	ldr	r2, [r7, #12]
 8003292:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	689a      	ldr	r2, [r3, #8]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	4a07      	ldr	r2, [pc, #28]	; (80032c4 <TIM_Base_SetConfig+0xb8>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d103      	bne.n	80032b4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	691a      	ldr	r2, [r3, #16]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2201      	movs	r2, #1
 80032b8:	615a      	str	r2, [r3, #20]
}
 80032ba:	bf00      	nop
 80032bc:	3714      	adds	r7, #20
 80032be:	46bd      	mov	sp, r7
 80032c0:	bc80      	pop	{r7}
 80032c2:	4770      	bx	lr
 80032c4:	40012c00 	.word	0x40012c00
 80032c8:	40000400 	.word	0x40000400
 80032cc:	40000800 	.word	0x40000800

080032d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b087      	sub	sp, #28
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6a1b      	ldr	r3, [r3, #32]
 80032de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6a1b      	ldr	r3, [r3, #32]
 80032e4:	f023 0201 	bic.w	r2, r3, #1
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	699b      	ldr	r3, [r3, #24]
 80032f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f023 0303 	bic.w	r3, r3, #3
 8003306:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	68fa      	ldr	r2, [r7, #12]
 800330e:	4313      	orrs	r3, r2
 8003310:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	f023 0302 	bic.w	r3, r3, #2
 8003318:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	697a      	ldr	r2, [r7, #20]
 8003320:	4313      	orrs	r3, r2
 8003322:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	4a1c      	ldr	r2, [pc, #112]	; (8003398 <TIM_OC1_SetConfig+0xc8>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d10c      	bne.n	8003346 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	f023 0308 	bic.w	r3, r3, #8
 8003332:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	697a      	ldr	r2, [r7, #20]
 800333a:	4313      	orrs	r3, r2
 800333c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	f023 0304 	bic.w	r3, r3, #4
 8003344:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	4a13      	ldr	r2, [pc, #76]	; (8003398 <TIM_OC1_SetConfig+0xc8>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d111      	bne.n	8003372 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003354:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800335c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	695b      	ldr	r3, [r3, #20]
 8003362:	693a      	ldr	r2, [r7, #16]
 8003364:	4313      	orrs	r3, r2
 8003366:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	699b      	ldr	r3, [r3, #24]
 800336c:	693a      	ldr	r2, [r7, #16]
 800336e:	4313      	orrs	r3, r2
 8003370:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	693a      	ldr	r2, [r7, #16]
 8003376:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	68fa      	ldr	r2, [r7, #12]
 800337c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	685a      	ldr	r2, [r3, #4]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	697a      	ldr	r2, [r7, #20]
 800338a:	621a      	str	r2, [r3, #32]
}
 800338c:	bf00      	nop
 800338e:	371c      	adds	r7, #28
 8003390:	46bd      	mov	sp, r7
 8003392:	bc80      	pop	{r7}
 8003394:	4770      	bx	lr
 8003396:	bf00      	nop
 8003398:	40012c00 	.word	0x40012c00

0800339c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800339c:	b480      	push	{r7}
 800339e:	b087      	sub	sp, #28
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
 80033a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6a1b      	ldr	r3, [r3, #32]
 80033aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6a1b      	ldr	r3, [r3, #32]
 80033b0:	f023 0210 	bic.w	r2, r3, #16
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	699b      	ldr	r3, [r3, #24]
 80033c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	021b      	lsls	r3, r3, #8
 80033da:	68fa      	ldr	r2, [r7, #12]
 80033dc:	4313      	orrs	r3, r2
 80033de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	f023 0320 	bic.w	r3, r3, #32
 80033e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	011b      	lsls	r3, r3, #4
 80033ee:	697a      	ldr	r2, [r7, #20]
 80033f0:	4313      	orrs	r3, r2
 80033f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	4a1d      	ldr	r2, [pc, #116]	; (800346c <TIM_OC2_SetConfig+0xd0>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d10d      	bne.n	8003418 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003402:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	011b      	lsls	r3, r3, #4
 800340a:	697a      	ldr	r2, [r7, #20]
 800340c:	4313      	orrs	r3, r2
 800340e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003416:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	4a14      	ldr	r2, [pc, #80]	; (800346c <TIM_OC2_SetConfig+0xd0>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d113      	bne.n	8003448 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003426:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800342e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	695b      	ldr	r3, [r3, #20]
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	693a      	ldr	r2, [r7, #16]
 8003438:	4313      	orrs	r3, r2
 800343a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	699b      	ldr	r3, [r3, #24]
 8003440:	009b      	lsls	r3, r3, #2
 8003442:	693a      	ldr	r2, [r7, #16]
 8003444:	4313      	orrs	r3, r2
 8003446:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	693a      	ldr	r2, [r7, #16]
 800344c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	68fa      	ldr	r2, [r7, #12]
 8003452:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	685a      	ldr	r2, [r3, #4]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	697a      	ldr	r2, [r7, #20]
 8003460:	621a      	str	r2, [r3, #32]
}
 8003462:	bf00      	nop
 8003464:	371c      	adds	r7, #28
 8003466:	46bd      	mov	sp, r7
 8003468:	bc80      	pop	{r7}
 800346a:	4770      	bx	lr
 800346c:	40012c00 	.word	0x40012c00

08003470 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003470:	b480      	push	{r7}
 8003472:	b087      	sub	sp, #28
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
 8003478:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6a1b      	ldr	r3, [r3, #32]
 800347e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6a1b      	ldr	r3, [r3, #32]
 8003484:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	69db      	ldr	r3, [r3, #28]
 8003496:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800349e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f023 0303 	bic.w	r3, r3, #3
 80034a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	68fa      	ldr	r2, [r7, #12]
 80034ae:	4313      	orrs	r3, r2
 80034b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80034b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	021b      	lsls	r3, r3, #8
 80034c0:	697a      	ldr	r2, [r7, #20]
 80034c2:	4313      	orrs	r3, r2
 80034c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	4a1d      	ldr	r2, [pc, #116]	; (8003540 <TIM_OC3_SetConfig+0xd0>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d10d      	bne.n	80034ea <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80034d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	68db      	ldr	r3, [r3, #12]
 80034da:	021b      	lsls	r3, r3, #8
 80034dc:	697a      	ldr	r2, [r7, #20]
 80034de:	4313      	orrs	r3, r2
 80034e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80034e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4a14      	ldr	r2, [pc, #80]	; (8003540 <TIM_OC3_SetConfig+0xd0>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d113      	bne.n	800351a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80034f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003500:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	695b      	ldr	r3, [r3, #20]
 8003506:	011b      	lsls	r3, r3, #4
 8003508:	693a      	ldr	r2, [r7, #16]
 800350a:	4313      	orrs	r3, r2
 800350c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	699b      	ldr	r3, [r3, #24]
 8003512:	011b      	lsls	r3, r3, #4
 8003514:	693a      	ldr	r2, [r7, #16]
 8003516:	4313      	orrs	r3, r2
 8003518:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	693a      	ldr	r2, [r7, #16]
 800351e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	68fa      	ldr	r2, [r7, #12]
 8003524:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	685a      	ldr	r2, [r3, #4]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	697a      	ldr	r2, [r7, #20]
 8003532:	621a      	str	r2, [r3, #32]
}
 8003534:	bf00      	nop
 8003536:	371c      	adds	r7, #28
 8003538:	46bd      	mov	sp, r7
 800353a:	bc80      	pop	{r7}
 800353c:	4770      	bx	lr
 800353e:	bf00      	nop
 8003540:	40012c00 	.word	0x40012c00

08003544 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003544:	b480      	push	{r7}
 8003546:	b087      	sub	sp, #28
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6a1b      	ldr	r3, [r3, #32]
 8003552:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6a1b      	ldr	r3, [r3, #32]
 8003558:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	69db      	ldr	r3, [r3, #28]
 800356a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003572:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800357a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	021b      	lsls	r3, r3, #8
 8003582:	68fa      	ldr	r2, [r7, #12]
 8003584:	4313      	orrs	r3, r2
 8003586:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800358e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	031b      	lsls	r3, r3, #12
 8003596:	693a      	ldr	r2, [r7, #16]
 8003598:	4313      	orrs	r3, r2
 800359a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	4a0f      	ldr	r2, [pc, #60]	; (80035dc <TIM_OC4_SetConfig+0x98>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d109      	bne.n	80035b8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80035aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	695b      	ldr	r3, [r3, #20]
 80035b0:	019b      	lsls	r3, r3, #6
 80035b2:	697a      	ldr	r2, [r7, #20]
 80035b4:	4313      	orrs	r3, r2
 80035b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	697a      	ldr	r2, [r7, #20]
 80035bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	68fa      	ldr	r2, [r7, #12]
 80035c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	685a      	ldr	r2, [r3, #4]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	693a      	ldr	r2, [r7, #16]
 80035d0:	621a      	str	r2, [r3, #32]
}
 80035d2:	bf00      	nop
 80035d4:	371c      	adds	r7, #28
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bc80      	pop	{r7}
 80035da:	4770      	bx	lr
 80035dc:	40012c00 	.word	0x40012c00

080035e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b087      	sub	sp, #28
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	60f8      	str	r0, [r7, #12]
 80035e8:	60b9      	str	r1, [r7, #8]
 80035ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	6a1b      	ldr	r3, [r3, #32]
 80035f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	6a1b      	ldr	r3, [r3, #32]
 80035f6:	f023 0201 	bic.w	r2, r3, #1
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	699b      	ldr	r3, [r3, #24]
 8003602:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800360a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	011b      	lsls	r3, r3, #4
 8003610:	693a      	ldr	r2, [r7, #16]
 8003612:	4313      	orrs	r3, r2
 8003614:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	f023 030a 	bic.w	r3, r3, #10
 800361c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800361e:	697a      	ldr	r2, [r7, #20]
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	4313      	orrs	r3, r2
 8003624:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	693a      	ldr	r2, [r7, #16]
 800362a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	697a      	ldr	r2, [r7, #20]
 8003630:	621a      	str	r2, [r3, #32]
}
 8003632:	bf00      	nop
 8003634:	371c      	adds	r7, #28
 8003636:	46bd      	mov	sp, r7
 8003638:	bc80      	pop	{r7}
 800363a:	4770      	bx	lr

0800363c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800363c:	b480      	push	{r7}
 800363e:	b087      	sub	sp, #28
 8003640:	af00      	add	r7, sp, #0
 8003642:	60f8      	str	r0, [r7, #12]
 8003644:	60b9      	str	r1, [r7, #8]
 8003646:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	6a1b      	ldr	r3, [r3, #32]
 800364c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	6a1b      	ldr	r3, [r3, #32]
 8003652:	f023 0210 	bic.w	r2, r3, #16
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	699b      	ldr	r3, [r3, #24]
 800365e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003666:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	031b      	lsls	r3, r3, #12
 800366c:	693a      	ldr	r2, [r7, #16]
 800366e:	4313      	orrs	r3, r2
 8003670:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003678:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	011b      	lsls	r3, r3, #4
 800367e:	697a      	ldr	r2, [r7, #20]
 8003680:	4313      	orrs	r3, r2
 8003682:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	693a      	ldr	r2, [r7, #16]
 8003688:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	697a      	ldr	r2, [r7, #20]
 800368e:	621a      	str	r2, [r3, #32]
}
 8003690:	bf00      	nop
 8003692:	371c      	adds	r7, #28
 8003694:	46bd      	mov	sp, r7
 8003696:	bc80      	pop	{r7}
 8003698:	4770      	bx	lr

0800369a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800369a:	b480      	push	{r7}
 800369c:	b085      	sub	sp, #20
 800369e:	af00      	add	r7, sp, #0
 80036a0:	6078      	str	r0, [r7, #4]
 80036a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80036b2:	683a      	ldr	r2, [r7, #0]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	f043 0307 	orr.w	r3, r3, #7
 80036bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	68fa      	ldr	r2, [r7, #12]
 80036c2:	609a      	str	r2, [r3, #8]
}
 80036c4:	bf00      	nop
 80036c6:	3714      	adds	r7, #20
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bc80      	pop	{r7}
 80036cc:	4770      	bx	lr

080036ce <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80036ce:	b480      	push	{r7}
 80036d0:	b087      	sub	sp, #28
 80036d2:	af00      	add	r7, sp, #0
 80036d4:	60f8      	str	r0, [r7, #12]
 80036d6:	60b9      	str	r1, [r7, #8]
 80036d8:	607a      	str	r2, [r7, #4]
 80036da:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80036e8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	021a      	lsls	r2, r3, #8
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	431a      	orrs	r2, r3
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	4313      	orrs	r3, r2
 80036f6:	697a      	ldr	r2, [r7, #20]
 80036f8:	4313      	orrs	r3, r2
 80036fa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	697a      	ldr	r2, [r7, #20]
 8003700:	609a      	str	r2, [r3, #8]
}
 8003702:	bf00      	nop
 8003704:	371c      	adds	r7, #28
 8003706:	46bd      	mov	sp, r7
 8003708:	bc80      	pop	{r7}
 800370a:	4770      	bx	lr

0800370c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800370c:	b480      	push	{r7}
 800370e:	b087      	sub	sp, #28
 8003710:	af00      	add	r7, sp, #0
 8003712:	60f8      	str	r0, [r7, #12]
 8003714:	60b9      	str	r1, [r7, #8]
 8003716:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	f003 031f 	and.w	r3, r3, #31
 800371e:	2201      	movs	r2, #1
 8003720:	fa02 f303 	lsl.w	r3, r2, r3
 8003724:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	6a1a      	ldr	r2, [r3, #32]
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	43db      	mvns	r3, r3
 800372e:	401a      	ands	r2, r3
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	6a1a      	ldr	r2, [r3, #32]
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	f003 031f 	and.w	r3, r3, #31
 800373e:	6879      	ldr	r1, [r7, #4]
 8003740:	fa01 f303 	lsl.w	r3, r1, r3
 8003744:	431a      	orrs	r2, r3
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	621a      	str	r2, [r3, #32]
}
 800374a:	bf00      	nop
 800374c:	371c      	adds	r7, #28
 800374e:	46bd      	mov	sp, r7
 8003750:	bc80      	pop	{r7}
 8003752:	4770      	bx	lr

08003754 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003754:	b480      	push	{r7}
 8003756:	b085      	sub	sp, #20
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
 800375c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003764:	2b01      	cmp	r3, #1
 8003766:	d101      	bne.n	800376c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003768:	2302      	movs	r3, #2
 800376a:	e046      	b.n	80037fa <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2201      	movs	r2, #1
 8003770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2202      	movs	r2, #2
 8003778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003792:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	68fa      	ldr	r2, [r7, #12]
 800379a:	4313      	orrs	r3, r2
 800379c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	68fa      	ldr	r2, [r7, #12]
 80037a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a16      	ldr	r2, [pc, #88]	; (8003804 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d00e      	beq.n	80037ce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037b8:	d009      	beq.n	80037ce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a12      	ldr	r2, [pc, #72]	; (8003808 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d004      	beq.n	80037ce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a10      	ldr	r2, [pc, #64]	; (800380c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d10c      	bne.n	80037e8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	68ba      	ldr	r2, [r7, #8]
 80037dc:	4313      	orrs	r3, r2
 80037de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	68ba      	ldr	r2, [r7, #8]
 80037e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2201      	movs	r2, #1
 80037ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2200      	movs	r2, #0
 80037f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80037f8:	2300      	movs	r3, #0
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3714      	adds	r7, #20
 80037fe:	46bd      	mov	sp, r7
 8003800:	bc80      	pop	{r7}
 8003802:	4770      	bx	lr
 8003804:	40012c00 	.word	0x40012c00
 8003808:	40000400 	.word	0x40000400
 800380c:	40000800 	.word	0x40000800

08003810 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003810:	b480      	push	{r7}
 8003812:	b083      	sub	sp, #12
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003818:	bf00      	nop
 800381a:	370c      	adds	r7, #12
 800381c:	46bd      	mov	sp, r7
 800381e:	bc80      	pop	{r7}
 8003820:	4770      	bx	lr

08003822 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003822:	b480      	push	{r7}
 8003824:	b083      	sub	sp, #12
 8003826:	af00      	add	r7, sp, #0
 8003828:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800382a:	bf00      	nop
 800382c:	370c      	adds	r7, #12
 800382e:	46bd      	mov	sp, r7
 8003830:	bc80      	pop	{r7}
 8003832:	4770      	bx	lr

08003834 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b082      	sub	sp, #8
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d101      	bne.n	8003846 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e042      	b.n	80038cc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800384c:	b2db      	uxtb	r3, r3
 800384e:	2b00      	cmp	r3, #0
 8003850:	d106      	bne.n	8003860 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2200      	movs	r2, #0
 8003856:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f7fd fdfa 	bl	8001454 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2224      	movs	r2, #36	; 0x24
 8003864:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	68da      	ldr	r2, [r3, #12]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003876:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	f000 fd71 	bl	8004360 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	691a      	ldr	r2, [r3, #16]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800388c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	695a      	ldr	r2, [r3, #20]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800389c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	68da      	ldr	r2, [r3, #12]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2200      	movs	r2, #0
 80038b2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2220      	movs	r2, #32
 80038b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2220      	movs	r2, #32
 80038c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2200      	movs	r2, #0
 80038c8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80038ca:	2300      	movs	r3, #0
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3708      	adds	r7, #8
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}

080038d4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b08a      	sub	sp, #40	; 0x28
 80038d8:	af02      	add	r7, sp, #8
 80038da:	60f8      	str	r0, [r7, #12]
 80038dc:	60b9      	str	r1, [r7, #8]
 80038de:	603b      	str	r3, [r7, #0]
 80038e0:	4613      	mov	r3, r2
 80038e2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80038e4:	2300      	movs	r3, #0
 80038e6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	2b20      	cmp	r3, #32
 80038f2:	d16d      	bne.n	80039d0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d002      	beq.n	8003900 <HAL_UART_Transmit+0x2c>
 80038fa:	88fb      	ldrh	r3, [r7, #6]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d101      	bne.n	8003904 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	e066      	b.n	80039d2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2200      	movs	r2, #0
 8003908:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2221      	movs	r2, #33	; 0x21
 800390e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003912:	f7fe f89b 	bl	8001a4c <HAL_GetTick>
 8003916:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	88fa      	ldrh	r2, [r7, #6]
 800391c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	88fa      	ldrh	r2, [r7, #6]
 8003922:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800392c:	d108      	bne.n	8003940 <HAL_UART_Transmit+0x6c>
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	691b      	ldr	r3, [r3, #16]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d104      	bne.n	8003940 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003936:	2300      	movs	r3, #0
 8003938:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	61bb      	str	r3, [r7, #24]
 800393e:	e003      	b.n	8003948 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003944:	2300      	movs	r3, #0
 8003946:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003948:	e02a      	b.n	80039a0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	9300      	str	r3, [sp, #0]
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	2200      	movs	r2, #0
 8003952:	2180      	movs	r1, #128	; 0x80
 8003954:	68f8      	ldr	r0, [r7, #12]
 8003956:	f000 faf9 	bl	8003f4c <UART_WaitOnFlagUntilTimeout>
 800395a:	4603      	mov	r3, r0
 800395c:	2b00      	cmp	r3, #0
 800395e:	d001      	beq.n	8003964 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003960:	2303      	movs	r3, #3
 8003962:	e036      	b.n	80039d2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d10b      	bne.n	8003982 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800396a:	69bb      	ldr	r3, [r7, #24]
 800396c:	881b      	ldrh	r3, [r3, #0]
 800396e:	461a      	mov	r2, r3
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003978:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800397a:	69bb      	ldr	r3, [r7, #24]
 800397c:	3302      	adds	r3, #2
 800397e:	61bb      	str	r3, [r7, #24]
 8003980:	e007      	b.n	8003992 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003982:	69fb      	ldr	r3, [r7, #28]
 8003984:	781a      	ldrb	r2, [r3, #0]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	3301      	adds	r3, #1
 8003990:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003996:	b29b      	uxth	r3, r3
 8003998:	3b01      	subs	r3, #1
 800399a:	b29a      	uxth	r2, r3
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d1cf      	bne.n	800394a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	9300      	str	r3, [sp, #0]
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	2200      	movs	r2, #0
 80039b2:	2140      	movs	r1, #64	; 0x40
 80039b4:	68f8      	ldr	r0, [r7, #12]
 80039b6:	f000 fac9 	bl	8003f4c <UART_WaitOnFlagUntilTimeout>
 80039ba:	4603      	mov	r3, r0
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d001      	beq.n	80039c4 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80039c0:	2303      	movs	r3, #3
 80039c2:	e006      	b.n	80039d2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2220      	movs	r2, #32
 80039c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80039cc:	2300      	movs	r3, #0
 80039ce:	e000      	b.n	80039d2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80039d0:	2302      	movs	r3, #2
  }
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3720      	adds	r7, #32
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}
	...

080039dc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b0ba      	sub	sp, #232	; 0xe8
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	68db      	ldr	r3, [r3, #12]
 80039f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	695b      	ldr	r3, [r3, #20]
 80039fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003a02:	2300      	movs	r3, #0
 8003a04:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003a0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a12:	f003 030f 	and.w	r3, r3, #15
 8003a16:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003a1a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d10f      	bne.n	8003a42 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a26:	f003 0320 	and.w	r3, r3, #32
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d009      	beq.n	8003a42 <HAL_UART_IRQHandler+0x66>
 8003a2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a32:	f003 0320 	and.w	r3, r3, #32
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d003      	beq.n	8003a42 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f000 fbd1 	bl	80041e2 <UART_Receive_IT>
      return;
 8003a40:	e25b      	b.n	8003efa <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003a42:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	f000 80de 	beq.w	8003c08 <HAL_UART_IRQHandler+0x22c>
 8003a4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a50:	f003 0301 	and.w	r3, r3, #1
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d106      	bne.n	8003a66 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003a58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a5c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	f000 80d1 	beq.w	8003c08 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003a66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a6a:	f003 0301 	and.w	r3, r3, #1
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d00b      	beq.n	8003a8a <HAL_UART_IRQHandler+0xae>
 8003a72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d005      	beq.n	8003a8a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a82:	f043 0201 	orr.w	r2, r3, #1
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a8e:	f003 0304 	and.w	r3, r3, #4
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d00b      	beq.n	8003aae <HAL_UART_IRQHandler+0xd2>
 8003a96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a9a:	f003 0301 	and.w	r3, r3, #1
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d005      	beq.n	8003aae <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aa6:	f043 0202 	orr.w	r2, r3, #2
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003aae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ab2:	f003 0302 	and.w	r3, r3, #2
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d00b      	beq.n	8003ad2 <HAL_UART_IRQHandler+0xf6>
 8003aba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003abe:	f003 0301 	and.w	r3, r3, #1
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d005      	beq.n	8003ad2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aca:	f043 0204 	orr.w	r2, r3, #4
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003ad2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ad6:	f003 0308 	and.w	r3, r3, #8
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d011      	beq.n	8003b02 <HAL_UART_IRQHandler+0x126>
 8003ade:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ae2:	f003 0320 	and.w	r3, r3, #32
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d105      	bne.n	8003af6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003aea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003aee:	f003 0301 	and.w	r3, r3, #1
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d005      	beq.n	8003b02 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003afa:	f043 0208 	orr.w	r2, r3, #8
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	f000 81f2 	beq.w	8003ef0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b10:	f003 0320 	and.w	r3, r3, #32
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d008      	beq.n	8003b2a <HAL_UART_IRQHandler+0x14e>
 8003b18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b1c:	f003 0320 	and.w	r3, r3, #32
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d002      	beq.n	8003b2a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003b24:	6878      	ldr	r0, [r7, #4]
 8003b26:	f000 fb5c 	bl	80041e2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	695b      	ldr	r3, [r3, #20]
 8003b30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	bf14      	ite	ne
 8003b38:	2301      	movne	r3, #1
 8003b3a:	2300      	moveq	r3, #0
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b46:	f003 0308 	and.w	r3, r3, #8
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d103      	bne.n	8003b56 <HAL_UART_IRQHandler+0x17a>
 8003b4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d04f      	beq.n	8003bf6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f000 fa66 	bl	8004028 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	695b      	ldr	r3, [r3, #20]
 8003b62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d041      	beq.n	8003bee <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	3314      	adds	r3, #20
 8003b70:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b74:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003b78:	e853 3f00 	ldrex	r3, [r3]
 8003b7c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003b80:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003b84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b88:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	3314      	adds	r3, #20
 8003b92:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003b96:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003b9a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b9e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003ba2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003ba6:	e841 2300 	strex	r3, r2, [r1]
 8003baa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003bae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d1d9      	bne.n	8003b6a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d013      	beq.n	8003be6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bc2:	4a7e      	ldr	r2, [pc, #504]	; (8003dbc <HAL_UART_IRQHandler+0x3e0>)
 8003bc4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f7fe f890 	bl	8001cf0 <HAL_DMA_Abort_IT>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d016      	beq.n	8003c04 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bdc:	687a      	ldr	r2, [r7, #4]
 8003bde:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003be0:	4610      	mov	r0, r2
 8003be2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003be4:	e00e      	b.n	8003c04 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f000 f99c 	bl	8003f24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bec:	e00a      	b.n	8003c04 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f000 f998 	bl	8003f24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bf4:	e006      	b.n	8003c04 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f000 f994 	bl	8003f24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003c02:	e175      	b.n	8003ef0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c04:	bf00      	nop
    return;
 8003c06:	e173      	b.n	8003ef0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	f040 814f 	bne.w	8003eb0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003c12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c16:	f003 0310 	and.w	r3, r3, #16
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	f000 8148 	beq.w	8003eb0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003c20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c24:	f003 0310 	and.w	r3, r3, #16
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	f000 8141 	beq.w	8003eb0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003c2e:	2300      	movs	r3, #0
 8003c30:	60bb      	str	r3, [r7, #8]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	60bb      	str	r3, [r7, #8]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	60bb      	str	r3, [r7, #8]
 8003c42:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	695b      	ldr	r3, [r3, #20]
 8003c4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	f000 80b6 	beq.w	8003dc0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003c60:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	f000 8145 	beq.w	8003ef4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003c6e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003c72:	429a      	cmp	r2, r3
 8003c74:	f080 813e 	bcs.w	8003ef4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003c7e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c84:	699b      	ldr	r3, [r3, #24]
 8003c86:	2b20      	cmp	r3, #32
 8003c88:	f000 8088 	beq.w	8003d9c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	330c      	adds	r3, #12
 8003c92:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c96:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003c9a:	e853 3f00 	ldrex	r3, [r3]
 8003c9e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003ca2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003ca6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003caa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	330c      	adds	r3, #12
 8003cb4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003cb8:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003cbc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cc0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003cc4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003cc8:	e841 2300 	strex	r3, r2, [r1]
 8003ccc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003cd0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d1d9      	bne.n	8003c8c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	3314      	adds	r3, #20
 8003cde:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ce0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ce2:	e853 3f00 	ldrex	r3, [r3]
 8003ce6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003ce8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003cea:	f023 0301 	bic.w	r3, r3, #1
 8003cee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	3314      	adds	r3, #20
 8003cf8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003cfc:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003d00:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d02:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003d04:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003d08:	e841 2300 	strex	r3, r2, [r1]
 8003d0c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003d0e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d1e1      	bne.n	8003cd8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	3314      	adds	r3, #20
 8003d1a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d1c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d1e:	e853 3f00 	ldrex	r3, [r3]
 8003d22:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003d24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d2a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	3314      	adds	r3, #20
 8003d34:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003d38:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003d3a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d3c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003d3e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003d40:	e841 2300 	strex	r3, r2, [r1]
 8003d44:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003d46:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d1e3      	bne.n	8003d14 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2220      	movs	r2, #32
 8003d50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2200      	movs	r2, #0
 8003d58:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	330c      	adds	r3, #12
 8003d60:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d64:	e853 3f00 	ldrex	r3, [r3]
 8003d68:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003d6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d6c:	f023 0310 	bic.w	r3, r3, #16
 8003d70:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	330c      	adds	r3, #12
 8003d7a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003d7e:	65ba      	str	r2, [r7, #88]	; 0x58
 8003d80:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d82:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003d84:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003d86:	e841 2300 	strex	r3, r2, [r1]
 8003d8a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003d8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d1e3      	bne.n	8003d5a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d96:	4618      	mov	r0, r3
 8003d98:	f7fd ff6f 	bl	8001c7a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2202      	movs	r2, #2
 8003da0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003daa:	b29b      	uxth	r3, r3
 8003dac:	1ad3      	subs	r3, r2, r3
 8003dae:	b29b      	uxth	r3, r3
 8003db0:	4619      	mov	r1, r3
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f000 f8bf 	bl	8003f36 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003db8:	e09c      	b.n	8003ef4 <HAL_UART_IRQHandler+0x518>
 8003dba:	bf00      	nop
 8003dbc:	080040ed 	.word	0x080040ed
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003dc8:	b29b      	uxth	r3, r3
 8003dca:	1ad3      	subs	r3, r2, r3
 8003dcc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003dd4:	b29b      	uxth	r3, r3
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	f000 808e 	beq.w	8003ef8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003ddc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	f000 8089 	beq.w	8003ef8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	330c      	adds	r3, #12
 8003dec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003df0:	e853 3f00 	ldrex	r3, [r3]
 8003df4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003df6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003df8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003dfc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	330c      	adds	r3, #12
 8003e06:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003e0a:	647a      	str	r2, [r7, #68]	; 0x44
 8003e0c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e0e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003e10:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e12:	e841 2300 	strex	r3, r2, [r1]
 8003e16:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003e18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d1e3      	bne.n	8003de6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	3314      	adds	r3, #20
 8003e24:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e28:	e853 3f00 	ldrex	r3, [r3]
 8003e2c:	623b      	str	r3, [r7, #32]
   return(result);
 8003e2e:	6a3b      	ldr	r3, [r7, #32]
 8003e30:	f023 0301 	bic.w	r3, r3, #1
 8003e34:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	3314      	adds	r3, #20
 8003e3e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003e42:	633a      	str	r2, [r7, #48]	; 0x30
 8003e44:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e46:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e4a:	e841 2300 	strex	r3, r2, [r1]
 8003e4e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d1e3      	bne.n	8003e1e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2220      	movs	r2, #32
 8003e5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2200      	movs	r2, #0
 8003e62:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	330c      	adds	r3, #12
 8003e6a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	e853 3f00 	ldrex	r3, [r3]
 8003e72:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	f023 0310 	bic.w	r3, r3, #16
 8003e7a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	330c      	adds	r3, #12
 8003e84:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003e88:	61fa      	str	r2, [r7, #28]
 8003e8a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e8c:	69b9      	ldr	r1, [r7, #24]
 8003e8e:	69fa      	ldr	r2, [r7, #28]
 8003e90:	e841 2300 	strex	r3, r2, [r1]
 8003e94:	617b      	str	r3, [r7, #20]
   return(result);
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d1e3      	bne.n	8003e64 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2202      	movs	r2, #2
 8003ea0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003ea2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003ea6:	4619      	mov	r1, r3
 8003ea8:	6878      	ldr	r0, [r7, #4]
 8003eaa:	f000 f844 	bl	8003f36 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003eae:	e023      	b.n	8003ef8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003eb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003eb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d009      	beq.n	8003ed0 <HAL_UART_IRQHandler+0x4f4>
 8003ebc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ec0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d003      	beq.n	8003ed0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003ec8:	6878      	ldr	r0, [r7, #4]
 8003eca:	f000 f923 	bl	8004114 <UART_Transmit_IT>
    return;
 8003ece:	e014      	b.n	8003efa <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003ed0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ed4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d00e      	beq.n	8003efa <HAL_UART_IRQHandler+0x51e>
 8003edc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d008      	beq.n	8003efa <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	f000 f962 	bl	80041b2 <UART_EndTransmit_IT>
    return;
 8003eee:	e004      	b.n	8003efa <HAL_UART_IRQHandler+0x51e>
    return;
 8003ef0:	bf00      	nop
 8003ef2:	e002      	b.n	8003efa <HAL_UART_IRQHandler+0x51e>
      return;
 8003ef4:	bf00      	nop
 8003ef6:	e000      	b.n	8003efa <HAL_UART_IRQHandler+0x51e>
      return;
 8003ef8:	bf00      	nop
  }
}
 8003efa:	37e8      	adds	r7, #232	; 0xe8
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}

08003f00 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b083      	sub	sp, #12
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003f08:	bf00      	nop
 8003f0a:	370c      	adds	r7, #12
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bc80      	pop	{r7}
 8003f10:	4770      	bx	lr

08003f12 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f12:	b480      	push	{r7}
 8003f14:	b083      	sub	sp, #12
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003f1a:	bf00      	nop
 8003f1c:	370c      	adds	r7, #12
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bc80      	pop	{r7}
 8003f22:	4770      	bx	lr

08003f24 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b083      	sub	sp, #12
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003f2c:	bf00      	nop
 8003f2e:	370c      	adds	r7, #12
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bc80      	pop	{r7}
 8003f34:	4770      	bx	lr

08003f36 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003f36:	b480      	push	{r7}
 8003f38:	b083      	sub	sp, #12
 8003f3a:	af00      	add	r7, sp, #0
 8003f3c:	6078      	str	r0, [r7, #4]
 8003f3e:	460b      	mov	r3, r1
 8003f40:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003f42:	bf00      	nop
 8003f44:	370c      	adds	r7, #12
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bc80      	pop	{r7}
 8003f4a:	4770      	bx	lr

08003f4c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b090      	sub	sp, #64	; 0x40
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	60f8      	str	r0, [r7, #12]
 8003f54:	60b9      	str	r1, [r7, #8]
 8003f56:	603b      	str	r3, [r7, #0]
 8003f58:	4613      	mov	r3, r2
 8003f5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f5c:	e050      	b.n	8004000 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f64:	d04c      	beq.n	8004000 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003f66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d007      	beq.n	8003f7c <UART_WaitOnFlagUntilTimeout+0x30>
 8003f6c:	f7fd fd6e 	bl	8001a4c <HAL_GetTick>
 8003f70:	4602      	mov	r2, r0
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	1ad3      	subs	r3, r2, r3
 8003f76:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d241      	bcs.n	8004000 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	330c      	adds	r3, #12
 8003f82:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f86:	e853 3f00 	ldrex	r3, [r3]
 8003f8a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003f92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	330c      	adds	r3, #12
 8003f9a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003f9c:	637a      	str	r2, [r7, #52]	; 0x34
 8003f9e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fa0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003fa2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003fa4:	e841 2300 	strex	r3, r2, [r1]
 8003fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d1e5      	bne.n	8003f7c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	3314      	adds	r3, #20
 8003fb6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	e853 3f00 	ldrex	r3, [r3]
 8003fbe:	613b      	str	r3, [r7, #16]
   return(result);
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	f023 0301 	bic.w	r3, r3, #1
 8003fc6:	63bb      	str	r3, [r7, #56]	; 0x38
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	3314      	adds	r3, #20
 8003fce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003fd0:	623a      	str	r2, [r7, #32]
 8003fd2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fd4:	69f9      	ldr	r1, [r7, #28]
 8003fd6:	6a3a      	ldr	r2, [r7, #32]
 8003fd8:	e841 2300 	strex	r3, r2, [r1]
 8003fdc:	61bb      	str	r3, [r7, #24]
   return(result);
 8003fde:	69bb      	ldr	r3, [r7, #24]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d1e5      	bne.n	8003fb0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2220      	movs	r2, #32
 8003fe8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2220      	movs	r2, #32
 8003ff0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003ffc:	2303      	movs	r3, #3
 8003ffe:	e00f      	b.n	8004020 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	4013      	ands	r3, r2
 800400a:	68ba      	ldr	r2, [r7, #8]
 800400c:	429a      	cmp	r2, r3
 800400e:	bf0c      	ite	eq
 8004010:	2301      	moveq	r3, #1
 8004012:	2300      	movne	r3, #0
 8004014:	b2db      	uxtb	r3, r3
 8004016:	461a      	mov	r2, r3
 8004018:	79fb      	ldrb	r3, [r7, #7]
 800401a:	429a      	cmp	r2, r3
 800401c:	d09f      	beq.n	8003f5e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800401e:	2300      	movs	r3, #0
}
 8004020:	4618      	mov	r0, r3
 8004022:	3740      	adds	r7, #64	; 0x40
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}

08004028 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004028:	b480      	push	{r7}
 800402a:	b095      	sub	sp, #84	; 0x54
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	330c      	adds	r3, #12
 8004036:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004038:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800403a:	e853 3f00 	ldrex	r3, [r3]
 800403e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004042:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004046:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	330c      	adds	r3, #12
 800404e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004050:	643a      	str	r2, [r7, #64]	; 0x40
 8004052:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004054:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004056:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004058:	e841 2300 	strex	r3, r2, [r1]
 800405c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800405e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004060:	2b00      	cmp	r3, #0
 8004062:	d1e5      	bne.n	8004030 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	3314      	adds	r3, #20
 800406a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800406c:	6a3b      	ldr	r3, [r7, #32]
 800406e:	e853 3f00 	ldrex	r3, [r3]
 8004072:	61fb      	str	r3, [r7, #28]
   return(result);
 8004074:	69fb      	ldr	r3, [r7, #28]
 8004076:	f023 0301 	bic.w	r3, r3, #1
 800407a:	64bb      	str	r3, [r7, #72]	; 0x48
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	3314      	adds	r3, #20
 8004082:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004084:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004086:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004088:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800408a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800408c:	e841 2300 	strex	r3, r2, [r1]
 8004090:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004094:	2b00      	cmp	r3, #0
 8004096:	d1e5      	bne.n	8004064 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800409c:	2b01      	cmp	r3, #1
 800409e:	d119      	bne.n	80040d4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	330c      	adds	r3, #12
 80040a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	e853 3f00 	ldrex	r3, [r3]
 80040ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	f023 0310 	bic.w	r3, r3, #16
 80040b6:	647b      	str	r3, [r7, #68]	; 0x44
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	330c      	adds	r3, #12
 80040be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80040c0:	61ba      	str	r2, [r7, #24]
 80040c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040c4:	6979      	ldr	r1, [r7, #20]
 80040c6:	69ba      	ldr	r2, [r7, #24]
 80040c8:	e841 2300 	strex	r3, r2, [r1]
 80040cc:	613b      	str	r3, [r7, #16]
   return(result);
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d1e5      	bne.n	80040a0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2220      	movs	r2, #32
 80040d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2200      	movs	r2, #0
 80040e0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80040e2:	bf00      	nop
 80040e4:	3754      	adds	r7, #84	; 0x54
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bc80      	pop	{r7}
 80040ea:	4770      	bx	lr

080040ec <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b084      	sub	sp, #16
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2200      	movs	r2, #0
 80040fe:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2200      	movs	r2, #0
 8004104:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004106:	68f8      	ldr	r0, [r7, #12]
 8004108:	f7ff ff0c 	bl	8003f24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800410c:	bf00      	nop
 800410e:	3710      	adds	r7, #16
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}

08004114 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004114:	b480      	push	{r7}
 8004116:	b085      	sub	sp, #20
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004122:	b2db      	uxtb	r3, r3
 8004124:	2b21      	cmp	r3, #33	; 0x21
 8004126:	d13e      	bne.n	80041a6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004130:	d114      	bne.n	800415c <UART_Transmit_IT+0x48>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	691b      	ldr	r3, [r3, #16]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d110      	bne.n	800415c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6a1b      	ldr	r3, [r3, #32]
 800413e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	881b      	ldrh	r3, [r3, #0]
 8004144:	461a      	mov	r2, r3
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800414e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6a1b      	ldr	r3, [r3, #32]
 8004154:	1c9a      	adds	r2, r3, #2
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	621a      	str	r2, [r3, #32]
 800415a:	e008      	b.n	800416e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6a1b      	ldr	r3, [r3, #32]
 8004160:	1c59      	adds	r1, r3, #1
 8004162:	687a      	ldr	r2, [r7, #4]
 8004164:	6211      	str	r1, [r2, #32]
 8004166:	781a      	ldrb	r2, [r3, #0]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004172:	b29b      	uxth	r3, r3
 8004174:	3b01      	subs	r3, #1
 8004176:	b29b      	uxth	r3, r3
 8004178:	687a      	ldr	r2, [r7, #4]
 800417a:	4619      	mov	r1, r3
 800417c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800417e:	2b00      	cmp	r3, #0
 8004180:	d10f      	bne.n	80041a2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	68da      	ldr	r2, [r3, #12]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004190:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	68da      	ldr	r2, [r3, #12]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041a0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80041a2:	2300      	movs	r3, #0
 80041a4:	e000      	b.n	80041a8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80041a6:	2302      	movs	r3, #2
  }
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	3714      	adds	r7, #20
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bc80      	pop	{r7}
 80041b0:	4770      	bx	lr

080041b2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80041b2:	b580      	push	{r7, lr}
 80041b4:	b082      	sub	sp, #8
 80041b6:	af00      	add	r7, sp, #0
 80041b8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	68da      	ldr	r2, [r3, #12]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041c8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2220      	movs	r2, #32
 80041ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	f7ff fe94 	bl	8003f00 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80041d8:	2300      	movs	r3, #0
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3708      	adds	r7, #8
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}

080041e2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80041e2:	b580      	push	{r7, lr}
 80041e4:	b08c      	sub	sp, #48	; 0x30
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80041f0:	b2db      	uxtb	r3, r3
 80041f2:	2b22      	cmp	r3, #34	; 0x22
 80041f4:	f040 80ae 	bne.w	8004354 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004200:	d117      	bne.n	8004232 <UART_Receive_IT+0x50>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	691b      	ldr	r3, [r3, #16]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d113      	bne.n	8004232 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800420a:	2300      	movs	r3, #0
 800420c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004212:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	b29b      	uxth	r3, r3
 800421c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004220:	b29a      	uxth	r2, r3
 8004222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004224:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800422a:	1c9a      	adds	r2, r3, #2
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	629a      	str	r2, [r3, #40]	; 0x28
 8004230:	e026      	b.n	8004280 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004236:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004238:	2300      	movs	r3, #0
 800423a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004244:	d007      	beq.n	8004256 <UART_Receive_IT+0x74>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d10a      	bne.n	8004264 <UART_Receive_IT+0x82>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	691b      	ldr	r3, [r3, #16]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d106      	bne.n	8004264 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	b2da      	uxtb	r2, r3
 800425e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004260:	701a      	strb	r2, [r3, #0]
 8004262:	e008      	b.n	8004276 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	b2db      	uxtb	r3, r3
 800426c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004270:	b2da      	uxtb	r2, r3
 8004272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004274:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800427a:	1c5a      	adds	r2, r3, #1
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004284:	b29b      	uxth	r3, r3
 8004286:	3b01      	subs	r3, #1
 8004288:	b29b      	uxth	r3, r3
 800428a:	687a      	ldr	r2, [r7, #4]
 800428c:	4619      	mov	r1, r3
 800428e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004290:	2b00      	cmp	r3, #0
 8004292:	d15d      	bne.n	8004350 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	68da      	ldr	r2, [r3, #12]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f022 0220 	bic.w	r2, r2, #32
 80042a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	68da      	ldr	r2, [r3, #12]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80042b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	695a      	ldr	r2, [r3, #20]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f022 0201 	bic.w	r2, r2, #1
 80042c2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2220      	movs	r2, #32
 80042c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2200      	movs	r2, #0
 80042d0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d135      	bne.n	8004346 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2200      	movs	r2, #0
 80042de:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	330c      	adds	r3, #12
 80042e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	e853 3f00 	ldrex	r3, [r3]
 80042ee:	613b      	str	r3, [r7, #16]
   return(result);
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	f023 0310 	bic.w	r3, r3, #16
 80042f6:	627b      	str	r3, [r7, #36]	; 0x24
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	330c      	adds	r3, #12
 80042fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004300:	623a      	str	r2, [r7, #32]
 8004302:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004304:	69f9      	ldr	r1, [r7, #28]
 8004306:	6a3a      	ldr	r2, [r7, #32]
 8004308:	e841 2300 	strex	r3, r2, [r1]
 800430c:	61bb      	str	r3, [r7, #24]
   return(result);
 800430e:	69bb      	ldr	r3, [r7, #24]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d1e5      	bne.n	80042e0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 0310 	and.w	r3, r3, #16
 800431e:	2b10      	cmp	r3, #16
 8004320:	d10a      	bne.n	8004338 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004322:	2300      	movs	r3, #0
 8004324:	60fb      	str	r3, [r7, #12]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	60fb      	str	r3, [r7, #12]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	60fb      	str	r3, [r7, #12]
 8004336:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800433c:	4619      	mov	r1, r3
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f7ff fdf9 	bl	8003f36 <HAL_UARTEx_RxEventCallback>
 8004344:	e002      	b.n	800434c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f7ff fde3 	bl	8003f12 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800434c:	2300      	movs	r3, #0
 800434e:	e002      	b.n	8004356 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004350:	2300      	movs	r3, #0
 8004352:	e000      	b.n	8004356 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004354:	2302      	movs	r3, #2
  }
}
 8004356:	4618      	mov	r0, r3
 8004358:	3730      	adds	r7, #48	; 0x30
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
	...

08004360 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b084      	sub	sp, #16
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	691b      	ldr	r3, [r3, #16]
 800436e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	68da      	ldr	r2, [r3, #12]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	430a      	orrs	r2, r1
 800437c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	689a      	ldr	r2, [r3, #8]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	691b      	ldr	r3, [r3, #16]
 8004386:	431a      	orrs	r2, r3
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	695b      	ldr	r3, [r3, #20]
 800438c:	4313      	orrs	r3, r2
 800438e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	68db      	ldr	r3, [r3, #12]
 8004396:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800439a:	f023 030c 	bic.w	r3, r3, #12
 800439e:	687a      	ldr	r2, [r7, #4]
 80043a0:	6812      	ldr	r2, [r2, #0]
 80043a2:	68b9      	ldr	r1, [r7, #8]
 80043a4:	430b      	orrs	r3, r1
 80043a6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	695b      	ldr	r3, [r3, #20]
 80043ae:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	699a      	ldr	r2, [r3, #24]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	430a      	orrs	r2, r1
 80043bc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a2c      	ldr	r2, [pc, #176]	; (8004474 <UART_SetConfig+0x114>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d103      	bne.n	80043d0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80043c8:	f7fe fa9c 	bl	8002904 <HAL_RCC_GetPCLK2Freq>
 80043cc:	60f8      	str	r0, [r7, #12]
 80043ce:	e002      	b.n	80043d6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80043d0:	f7fe fa84 	bl	80028dc <HAL_RCC_GetPCLK1Freq>
 80043d4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80043d6:	68fa      	ldr	r2, [r7, #12]
 80043d8:	4613      	mov	r3, r2
 80043da:	009b      	lsls	r3, r3, #2
 80043dc:	4413      	add	r3, r2
 80043de:	009a      	lsls	r2, r3, #2
 80043e0:	441a      	add	r2, r3
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	009b      	lsls	r3, r3, #2
 80043e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80043ec:	4a22      	ldr	r2, [pc, #136]	; (8004478 <UART_SetConfig+0x118>)
 80043ee:	fba2 2303 	umull	r2, r3, r2, r3
 80043f2:	095b      	lsrs	r3, r3, #5
 80043f4:	0119      	lsls	r1, r3, #4
 80043f6:	68fa      	ldr	r2, [r7, #12]
 80043f8:	4613      	mov	r3, r2
 80043fa:	009b      	lsls	r3, r3, #2
 80043fc:	4413      	add	r3, r2
 80043fe:	009a      	lsls	r2, r3, #2
 8004400:	441a      	add	r2, r3
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	009b      	lsls	r3, r3, #2
 8004408:	fbb2 f2f3 	udiv	r2, r2, r3
 800440c:	4b1a      	ldr	r3, [pc, #104]	; (8004478 <UART_SetConfig+0x118>)
 800440e:	fba3 0302 	umull	r0, r3, r3, r2
 8004412:	095b      	lsrs	r3, r3, #5
 8004414:	2064      	movs	r0, #100	; 0x64
 8004416:	fb00 f303 	mul.w	r3, r0, r3
 800441a:	1ad3      	subs	r3, r2, r3
 800441c:	011b      	lsls	r3, r3, #4
 800441e:	3332      	adds	r3, #50	; 0x32
 8004420:	4a15      	ldr	r2, [pc, #84]	; (8004478 <UART_SetConfig+0x118>)
 8004422:	fba2 2303 	umull	r2, r3, r2, r3
 8004426:	095b      	lsrs	r3, r3, #5
 8004428:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800442c:	4419      	add	r1, r3
 800442e:	68fa      	ldr	r2, [r7, #12]
 8004430:	4613      	mov	r3, r2
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	4413      	add	r3, r2
 8004436:	009a      	lsls	r2, r3, #2
 8004438:	441a      	add	r2, r3
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	009b      	lsls	r3, r3, #2
 8004440:	fbb2 f2f3 	udiv	r2, r2, r3
 8004444:	4b0c      	ldr	r3, [pc, #48]	; (8004478 <UART_SetConfig+0x118>)
 8004446:	fba3 0302 	umull	r0, r3, r3, r2
 800444a:	095b      	lsrs	r3, r3, #5
 800444c:	2064      	movs	r0, #100	; 0x64
 800444e:	fb00 f303 	mul.w	r3, r0, r3
 8004452:	1ad3      	subs	r3, r2, r3
 8004454:	011b      	lsls	r3, r3, #4
 8004456:	3332      	adds	r3, #50	; 0x32
 8004458:	4a07      	ldr	r2, [pc, #28]	; (8004478 <UART_SetConfig+0x118>)
 800445a:	fba2 2303 	umull	r2, r3, r2, r3
 800445e:	095b      	lsrs	r3, r3, #5
 8004460:	f003 020f 	and.w	r2, r3, #15
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	440a      	add	r2, r1
 800446a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800446c:	bf00      	nop
 800446e:	3710      	adds	r7, #16
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}
 8004474:	40013800 	.word	0x40013800
 8004478:	51eb851f 	.word	0x51eb851f

0800447c <siprintf>:
 800447c:	b40e      	push	{r1, r2, r3}
 800447e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004482:	b500      	push	{lr}
 8004484:	b09c      	sub	sp, #112	; 0x70
 8004486:	ab1d      	add	r3, sp, #116	; 0x74
 8004488:	9002      	str	r0, [sp, #8]
 800448a:	9006      	str	r0, [sp, #24]
 800448c:	9107      	str	r1, [sp, #28]
 800448e:	9104      	str	r1, [sp, #16]
 8004490:	4808      	ldr	r0, [pc, #32]	; (80044b4 <siprintf+0x38>)
 8004492:	4909      	ldr	r1, [pc, #36]	; (80044b8 <siprintf+0x3c>)
 8004494:	f853 2b04 	ldr.w	r2, [r3], #4
 8004498:	9105      	str	r1, [sp, #20]
 800449a:	6800      	ldr	r0, [r0, #0]
 800449c:	a902      	add	r1, sp, #8
 800449e:	9301      	str	r3, [sp, #4]
 80044a0:	f000 f98e 	bl	80047c0 <_svfiprintf_r>
 80044a4:	2200      	movs	r2, #0
 80044a6:	9b02      	ldr	r3, [sp, #8]
 80044a8:	701a      	strb	r2, [r3, #0]
 80044aa:	b01c      	add	sp, #112	; 0x70
 80044ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80044b0:	b003      	add	sp, #12
 80044b2:	4770      	bx	lr
 80044b4:	20000094 	.word	0x20000094
 80044b8:	ffff0208 	.word	0xffff0208

080044bc <memset>:
 80044bc:	4603      	mov	r3, r0
 80044be:	4402      	add	r2, r0
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d100      	bne.n	80044c6 <memset+0xa>
 80044c4:	4770      	bx	lr
 80044c6:	f803 1b01 	strb.w	r1, [r3], #1
 80044ca:	e7f9      	b.n	80044c0 <memset+0x4>

080044cc <__errno>:
 80044cc:	4b01      	ldr	r3, [pc, #4]	; (80044d4 <__errno+0x8>)
 80044ce:	6818      	ldr	r0, [r3, #0]
 80044d0:	4770      	bx	lr
 80044d2:	bf00      	nop
 80044d4:	20000094 	.word	0x20000094

080044d8 <__libc_init_array>:
 80044d8:	b570      	push	{r4, r5, r6, lr}
 80044da:	2600      	movs	r6, #0
 80044dc:	4d0c      	ldr	r5, [pc, #48]	; (8004510 <__libc_init_array+0x38>)
 80044de:	4c0d      	ldr	r4, [pc, #52]	; (8004514 <__libc_init_array+0x3c>)
 80044e0:	1b64      	subs	r4, r4, r5
 80044e2:	10a4      	asrs	r4, r4, #2
 80044e4:	42a6      	cmp	r6, r4
 80044e6:	d109      	bne.n	80044fc <__libc_init_array+0x24>
 80044e8:	f000 fc7a 	bl	8004de0 <_init>
 80044ec:	2600      	movs	r6, #0
 80044ee:	4d0a      	ldr	r5, [pc, #40]	; (8004518 <__libc_init_array+0x40>)
 80044f0:	4c0a      	ldr	r4, [pc, #40]	; (800451c <__libc_init_array+0x44>)
 80044f2:	1b64      	subs	r4, r4, r5
 80044f4:	10a4      	asrs	r4, r4, #2
 80044f6:	42a6      	cmp	r6, r4
 80044f8:	d105      	bne.n	8004506 <__libc_init_array+0x2e>
 80044fa:	bd70      	pop	{r4, r5, r6, pc}
 80044fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004500:	4798      	blx	r3
 8004502:	3601      	adds	r6, #1
 8004504:	e7ee      	b.n	80044e4 <__libc_init_array+0xc>
 8004506:	f855 3b04 	ldr.w	r3, [r5], #4
 800450a:	4798      	blx	r3
 800450c:	3601      	adds	r6, #1
 800450e:	e7f2      	b.n	80044f6 <__libc_init_array+0x1e>
 8004510:	08004f00 	.word	0x08004f00
 8004514:	08004f00 	.word	0x08004f00
 8004518:	08004f00 	.word	0x08004f00
 800451c:	08004f04 	.word	0x08004f04

08004520 <__retarget_lock_acquire_recursive>:
 8004520:	4770      	bx	lr

08004522 <__retarget_lock_release_recursive>:
 8004522:	4770      	bx	lr

08004524 <_free_r>:
 8004524:	b538      	push	{r3, r4, r5, lr}
 8004526:	4605      	mov	r5, r0
 8004528:	2900      	cmp	r1, #0
 800452a:	d040      	beq.n	80045ae <_free_r+0x8a>
 800452c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004530:	1f0c      	subs	r4, r1, #4
 8004532:	2b00      	cmp	r3, #0
 8004534:	bfb8      	it	lt
 8004536:	18e4      	addlt	r4, r4, r3
 8004538:	f000 f8dc 	bl	80046f4 <__malloc_lock>
 800453c:	4a1c      	ldr	r2, [pc, #112]	; (80045b0 <_free_r+0x8c>)
 800453e:	6813      	ldr	r3, [r2, #0]
 8004540:	b933      	cbnz	r3, 8004550 <_free_r+0x2c>
 8004542:	6063      	str	r3, [r4, #4]
 8004544:	6014      	str	r4, [r2, #0]
 8004546:	4628      	mov	r0, r5
 8004548:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800454c:	f000 b8d8 	b.w	8004700 <__malloc_unlock>
 8004550:	42a3      	cmp	r3, r4
 8004552:	d908      	bls.n	8004566 <_free_r+0x42>
 8004554:	6820      	ldr	r0, [r4, #0]
 8004556:	1821      	adds	r1, r4, r0
 8004558:	428b      	cmp	r3, r1
 800455a:	bf01      	itttt	eq
 800455c:	6819      	ldreq	r1, [r3, #0]
 800455e:	685b      	ldreq	r3, [r3, #4]
 8004560:	1809      	addeq	r1, r1, r0
 8004562:	6021      	streq	r1, [r4, #0]
 8004564:	e7ed      	b.n	8004542 <_free_r+0x1e>
 8004566:	461a      	mov	r2, r3
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	b10b      	cbz	r3, 8004570 <_free_r+0x4c>
 800456c:	42a3      	cmp	r3, r4
 800456e:	d9fa      	bls.n	8004566 <_free_r+0x42>
 8004570:	6811      	ldr	r1, [r2, #0]
 8004572:	1850      	adds	r0, r2, r1
 8004574:	42a0      	cmp	r0, r4
 8004576:	d10b      	bne.n	8004590 <_free_r+0x6c>
 8004578:	6820      	ldr	r0, [r4, #0]
 800457a:	4401      	add	r1, r0
 800457c:	1850      	adds	r0, r2, r1
 800457e:	4283      	cmp	r3, r0
 8004580:	6011      	str	r1, [r2, #0]
 8004582:	d1e0      	bne.n	8004546 <_free_r+0x22>
 8004584:	6818      	ldr	r0, [r3, #0]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	4408      	add	r0, r1
 800458a:	6010      	str	r0, [r2, #0]
 800458c:	6053      	str	r3, [r2, #4]
 800458e:	e7da      	b.n	8004546 <_free_r+0x22>
 8004590:	d902      	bls.n	8004598 <_free_r+0x74>
 8004592:	230c      	movs	r3, #12
 8004594:	602b      	str	r3, [r5, #0]
 8004596:	e7d6      	b.n	8004546 <_free_r+0x22>
 8004598:	6820      	ldr	r0, [r4, #0]
 800459a:	1821      	adds	r1, r4, r0
 800459c:	428b      	cmp	r3, r1
 800459e:	bf01      	itttt	eq
 80045a0:	6819      	ldreq	r1, [r3, #0]
 80045a2:	685b      	ldreq	r3, [r3, #4]
 80045a4:	1809      	addeq	r1, r1, r0
 80045a6:	6021      	streq	r1, [r4, #0]
 80045a8:	6063      	str	r3, [r4, #4]
 80045aa:	6054      	str	r4, [r2, #4]
 80045ac:	e7cb      	b.n	8004546 <_free_r+0x22>
 80045ae:	bd38      	pop	{r3, r4, r5, pc}
 80045b0:	20000334 	.word	0x20000334

080045b4 <sbrk_aligned>:
 80045b4:	b570      	push	{r4, r5, r6, lr}
 80045b6:	4e0e      	ldr	r6, [pc, #56]	; (80045f0 <sbrk_aligned+0x3c>)
 80045b8:	460c      	mov	r4, r1
 80045ba:	6831      	ldr	r1, [r6, #0]
 80045bc:	4605      	mov	r5, r0
 80045be:	b911      	cbnz	r1, 80045c6 <sbrk_aligned+0x12>
 80045c0:	f000 fbaa 	bl	8004d18 <_sbrk_r>
 80045c4:	6030      	str	r0, [r6, #0]
 80045c6:	4621      	mov	r1, r4
 80045c8:	4628      	mov	r0, r5
 80045ca:	f000 fba5 	bl	8004d18 <_sbrk_r>
 80045ce:	1c43      	adds	r3, r0, #1
 80045d0:	d00a      	beq.n	80045e8 <sbrk_aligned+0x34>
 80045d2:	1cc4      	adds	r4, r0, #3
 80045d4:	f024 0403 	bic.w	r4, r4, #3
 80045d8:	42a0      	cmp	r0, r4
 80045da:	d007      	beq.n	80045ec <sbrk_aligned+0x38>
 80045dc:	1a21      	subs	r1, r4, r0
 80045de:	4628      	mov	r0, r5
 80045e0:	f000 fb9a 	bl	8004d18 <_sbrk_r>
 80045e4:	3001      	adds	r0, #1
 80045e6:	d101      	bne.n	80045ec <sbrk_aligned+0x38>
 80045e8:	f04f 34ff 	mov.w	r4, #4294967295
 80045ec:	4620      	mov	r0, r4
 80045ee:	bd70      	pop	{r4, r5, r6, pc}
 80045f0:	20000338 	.word	0x20000338

080045f4 <_malloc_r>:
 80045f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80045f8:	1ccd      	adds	r5, r1, #3
 80045fa:	f025 0503 	bic.w	r5, r5, #3
 80045fe:	3508      	adds	r5, #8
 8004600:	2d0c      	cmp	r5, #12
 8004602:	bf38      	it	cc
 8004604:	250c      	movcc	r5, #12
 8004606:	2d00      	cmp	r5, #0
 8004608:	4607      	mov	r7, r0
 800460a:	db01      	blt.n	8004610 <_malloc_r+0x1c>
 800460c:	42a9      	cmp	r1, r5
 800460e:	d905      	bls.n	800461c <_malloc_r+0x28>
 8004610:	230c      	movs	r3, #12
 8004612:	2600      	movs	r6, #0
 8004614:	603b      	str	r3, [r7, #0]
 8004616:	4630      	mov	r0, r6
 8004618:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800461c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80046f0 <_malloc_r+0xfc>
 8004620:	f000 f868 	bl	80046f4 <__malloc_lock>
 8004624:	f8d8 3000 	ldr.w	r3, [r8]
 8004628:	461c      	mov	r4, r3
 800462a:	bb5c      	cbnz	r4, 8004684 <_malloc_r+0x90>
 800462c:	4629      	mov	r1, r5
 800462e:	4638      	mov	r0, r7
 8004630:	f7ff ffc0 	bl	80045b4 <sbrk_aligned>
 8004634:	1c43      	adds	r3, r0, #1
 8004636:	4604      	mov	r4, r0
 8004638:	d155      	bne.n	80046e6 <_malloc_r+0xf2>
 800463a:	f8d8 4000 	ldr.w	r4, [r8]
 800463e:	4626      	mov	r6, r4
 8004640:	2e00      	cmp	r6, #0
 8004642:	d145      	bne.n	80046d0 <_malloc_r+0xdc>
 8004644:	2c00      	cmp	r4, #0
 8004646:	d048      	beq.n	80046da <_malloc_r+0xe6>
 8004648:	6823      	ldr	r3, [r4, #0]
 800464a:	4631      	mov	r1, r6
 800464c:	4638      	mov	r0, r7
 800464e:	eb04 0903 	add.w	r9, r4, r3
 8004652:	f000 fb61 	bl	8004d18 <_sbrk_r>
 8004656:	4581      	cmp	r9, r0
 8004658:	d13f      	bne.n	80046da <_malloc_r+0xe6>
 800465a:	6821      	ldr	r1, [r4, #0]
 800465c:	4638      	mov	r0, r7
 800465e:	1a6d      	subs	r5, r5, r1
 8004660:	4629      	mov	r1, r5
 8004662:	f7ff ffa7 	bl	80045b4 <sbrk_aligned>
 8004666:	3001      	adds	r0, #1
 8004668:	d037      	beq.n	80046da <_malloc_r+0xe6>
 800466a:	6823      	ldr	r3, [r4, #0]
 800466c:	442b      	add	r3, r5
 800466e:	6023      	str	r3, [r4, #0]
 8004670:	f8d8 3000 	ldr.w	r3, [r8]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d038      	beq.n	80046ea <_malloc_r+0xf6>
 8004678:	685a      	ldr	r2, [r3, #4]
 800467a:	42a2      	cmp	r2, r4
 800467c:	d12b      	bne.n	80046d6 <_malloc_r+0xe2>
 800467e:	2200      	movs	r2, #0
 8004680:	605a      	str	r2, [r3, #4]
 8004682:	e00f      	b.n	80046a4 <_malloc_r+0xb0>
 8004684:	6822      	ldr	r2, [r4, #0]
 8004686:	1b52      	subs	r2, r2, r5
 8004688:	d41f      	bmi.n	80046ca <_malloc_r+0xd6>
 800468a:	2a0b      	cmp	r2, #11
 800468c:	d917      	bls.n	80046be <_malloc_r+0xca>
 800468e:	1961      	adds	r1, r4, r5
 8004690:	42a3      	cmp	r3, r4
 8004692:	6025      	str	r5, [r4, #0]
 8004694:	bf18      	it	ne
 8004696:	6059      	strne	r1, [r3, #4]
 8004698:	6863      	ldr	r3, [r4, #4]
 800469a:	bf08      	it	eq
 800469c:	f8c8 1000 	streq.w	r1, [r8]
 80046a0:	5162      	str	r2, [r4, r5]
 80046a2:	604b      	str	r3, [r1, #4]
 80046a4:	4638      	mov	r0, r7
 80046a6:	f104 060b 	add.w	r6, r4, #11
 80046aa:	f000 f829 	bl	8004700 <__malloc_unlock>
 80046ae:	f026 0607 	bic.w	r6, r6, #7
 80046b2:	1d23      	adds	r3, r4, #4
 80046b4:	1af2      	subs	r2, r6, r3
 80046b6:	d0ae      	beq.n	8004616 <_malloc_r+0x22>
 80046b8:	1b9b      	subs	r3, r3, r6
 80046ba:	50a3      	str	r3, [r4, r2]
 80046bc:	e7ab      	b.n	8004616 <_malloc_r+0x22>
 80046be:	42a3      	cmp	r3, r4
 80046c0:	6862      	ldr	r2, [r4, #4]
 80046c2:	d1dd      	bne.n	8004680 <_malloc_r+0x8c>
 80046c4:	f8c8 2000 	str.w	r2, [r8]
 80046c8:	e7ec      	b.n	80046a4 <_malloc_r+0xb0>
 80046ca:	4623      	mov	r3, r4
 80046cc:	6864      	ldr	r4, [r4, #4]
 80046ce:	e7ac      	b.n	800462a <_malloc_r+0x36>
 80046d0:	4634      	mov	r4, r6
 80046d2:	6876      	ldr	r6, [r6, #4]
 80046d4:	e7b4      	b.n	8004640 <_malloc_r+0x4c>
 80046d6:	4613      	mov	r3, r2
 80046d8:	e7cc      	b.n	8004674 <_malloc_r+0x80>
 80046da:	230c      	movs	r3, #12
 80046dc:	4638      	mov	r0, r7
 80046de:	603b      	str	r3, [r7, #0]
 80046e0:	f000 f80e 	bl	8004700 <__malloc_unlock>
 80046e4:	e797      	b.n	8004616 <_malloc_r+0x22>
 80046e6:	6025      	str	r5, [r4, #0]
 80046e8:	e7dc      	b.n	80046a4 <_malloc_r+0xb0>
 80046ea:	605b      	str	r3, [r3, #4]
 80046ec:	deff      	udf	#255	; 0xff
 80046ee:	bf00      	nop
 80046f0:	20000334 	.word	0x20000334

080046f4 <__malloc_lock>:
 80046f4:	4801      	ldr	r0, [pc, #4]	; (80046fc <__malloc_lock+0x8>)
 80046f6:	f7ff bf13 	b.w	8004520 <__retarget_lock_acquire_recursive>
 80046fa:	bf00      	nop
 80046fc:	20000330 	.word	0x20000330

08004700 <__malloc_unlock>:
 8004700:	4801      	ldr	r0, [pc, #4]	; (8004708 <__malloc_unlock+0x8>)
 8004702:	f7ff bf0e 	b.w	8004522 <__retarget_lock_release_recursive>
 8004706:	bf00      	nop
 8004708:	20000330 	.word	0x20000330

0800470c <__ssputs_r>:
 800470c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004710:	461f      	mov	r7, r3
 8004712:	688e      	ldr	r6, [r1, #8]
 8004714:	4682      	mov	sl, r0
 8004716:	42be      	cmp	r6, r7
 8004718:	460c      	mov	r4, r1
 800471a:	4690      	mov	r8, r2
 800471c:	680b      	ldr	r3, [r1, #0]
 800471e:	d82c      	bhi.n	800477a <__ssputs_r+0x6e>
 8004720:	898a      	ldrh	r2, [r1, #12]
 8004722:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004726:	d026      	beq.n	8004776 <__ssputs_r+0x6a>
 8004728:	6965      	ldr	r5, [r4, #20]
 800472a:	6909      	ldr	r1, [r1, #16]
 800472c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004730:	eba3 0901 	sub.w	r9, r3, r1
 8004734:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004738:	1c7b      	adds	r3, r7, #1
 800473a:	444b      	add	r3, r9
 800473c:	106d      	asrs	r5, r5, #1
 800473e:	429d      	cmp	r5, r3
 8004740:	bf38      	it	cc
 8004742:	461d      	movcc	r5, r3
 8004744:	0553      	lsls	r3, r2, #21
 8004746:	d527      	bpl.n	8004798 <__ssputs_r+0x8c>
 8004748:	4629      	mov	r1, r5
 800474a:	f7ff ff53 	bl	80045f4 <_malloc_r>
 800474e:	4606      	mov	r6, r0
 8004750:	b360      	cbz	r0, 80047ac <__ssputs_r+0xa0>
 8004752:	464a      	mov	r2, r9
 8004754:	6921      	ldr	r1, [r4, #16]
 8004756:	f000 fafd 	bl	8004d54 <memcpy>
 800475a:	89a3      	ldrh	r3, [r4, #12]
 800475c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004760:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004764:	81a3      	strh	r3, [r4, #12]
 8004766:	6126      	str	r6, [r4, #16]
 8004768:	444e      	add	r6, r9
 800476a:	6026      	str	r6, [r4, #0]
 800476c:	463e      	mov	r6, r7
 800476e:	6165      	str	r5, [r4, #20]
 8004770:	eba5 0509 	sub.w	r5, r5, r9
 8004774:	60a5      	str	r5, [r4, #8]
 8004776:	42be      	cmp	r6, r7
 8004778:	d900      	bls.n	800477c <__ssputs_r+0x70>
 800477a:	463e      	mov	r6, r7
 800477c:	4632      	mov	r2, r6
 800477e:	4641      	mov	r1, r8
 8004780:	6820      	ldr	r0, [r4, #0]
 8004782:	f000 faaf 	bl	8004ce4 <memmove>
 8004786:	2000      	movs	r0, #0
 8004788:	68a3      	ldr	r3, [r4, #8]
 800478a:	1b9b      	subs	r3, r3, r6
 800478c:	60a3      	str	r3, [r4, #8]
 800478e:	6823      	ldr	r3, [r4, #0]
 8004790:	4433      	add	r3, r6
 8004792:	6023      	str	r3, [r4, #0]
 8004794:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004798:	462a      	mov	r2, r5
 800479a:	f000 fae9 	bl	8004d70 <_realloc_r>
 800479e:	4606      	mov	r6, r0
 80047a0:	2800      	cmp	r0, #0
 80047a2:	d1e0      	bne.n	8004766 <__ssputs_r+0x5a>
 80047a4:	4650      	mov	r0, sl
 80047a6:	6921      	ldr	r1, [r4, #16]
 80047a8:	f7ff febc 	bl	8004524 <_free_r>
 80047ac:	230c      	movs	r3, #12
 80047ae:	f8ca 3000 	str.w	r3, [sl]
 80047b2:	89a3      	ldrh	r3, [r4, #12]
 80047b4:	f04f 30ff 	mov.w	r0, #4294967295
 80047b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047bc:	81a3      	strh	r3, [r4, #12]
 80047be:	e7e9      	b.n	8004794 <__ssputs_r+0x88>

080047c0 <_svfiprintf_r>:
 80047c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047c4:	4698      	mov	r8, r3
 80047c6:	898b      	ldrh	r3, [r1, #12]
 80047c8:	4607      	mov	r7, r0
 80047ca:	061b      	lsls	r3, r3, #24
 80047cc:	460d      	mov	r5, r1
 80047ce:	4614      	mov	r4, r2
 80047d0:	b09d      	sub	sp, #116	; 0x74
 80047d2:	d50e      	bpl.n	80047f2 <_svfiprintf_r+0x32>
 80047d4:	690b      	ldr	r3, [r1, #16]
 80047d6:	b963      	cbnz	r3, 80047f2 <_svfiprintf_r+0x32>
 80047d8:	2140      	movs	r1, #64	; 0x40
 80047da:	f7ff ff0b 	bl	80045f4 <_malloc_r>
 80047de:	6028      	str	r0, [r5, #0]
 80047e0:	6128      	str	r0, [r5, #16]
 80047e2:	b920      	cbnz	r0, 80047ee <_svfiprintf_r+0x2e>
 80047e4:	230c      	movs	r3, #12
 80047e6:	603b      	str	r3, [r7, #0]
 80047e8:	f04f 30ff 	mov.w	r0, #4294967295
 80047ec:	e0d0      	b.n	8004990 <_svfiprintf_r+0x1d0>
 80047ee:	2340      	movs	r3, #64	; 0x40
 80047f0:	616b      	str	r3, [r5, #20]
 80047f2:	2300      	movs	r3, #0
 80047f4:	9309      	str	r3, [sp, #36]	; 0x24
 80047f6:	2320      	movs	r3, #32
 80047f8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80047fc:	2330      	movs	r3, #48	; 0x30
 80047fe:	f04f 0901 	mov.w	r9, #1
 8004802:	f8cd 800c 	str.w	r8, [sp, #12]
 8004806:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80049a8 <_svfiprintf_r+0x1e8>
 800480a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800480e:	4623      	mov	r3, r4
 8004810:	469a      	mov	sl, r3
 8004812:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004816:	b10a      	cbz	r2, 800481c <_svfiprintf_r+0x5c>
 8004818:	2a25      	cmp	r2, #37	; 0x25
 800481a:	d1f9      	bne.n	8004810 <_svfiprintf_r+0x50>
 800481c:	ebba 0b04 	subs.w	fp, sl, r4
 8004820:	d00b      	beq.n	800483a <_svfiprintf_r+0x7a>
 8004822:	465b      	mov	r3, fp
 8004824:	4622      	mov	r2, r4
 8004826:	4629      	mov	r1, r5
 8004828:	4638      	mov	r0, r7
 800482a:	f7ff ff6f 	bl	800470c <__ssputs_r>
 800482e:	3001      	adds	r0, #1
 8004830:	f000 80a9 	beq.w	8004986 <_svfiprintf_r+0x1c6>
 8004834:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004836:	445a      	add	r2, fp
 8004838:	9209      	str	r2, [sp, #36]	; 0x24
 800483a:	f89a 3000 	ldrb.w	r3, [sl]
 800483e:	2b00      	cmp	r3, #0
 8004840:	f000 80a1 	beq.w	8004986 <_svfiprintf_r+0x1c6>
 8004844:	2300      	movs	r3, #0
 8004846:	f04f 32ff 	mov.w	r2, #4294967295
 800484a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800484e:	f10a 0a01 	add.w	sl, sl, #1
 8004852:	9304      	str	r3, [sp, #16]
 8004854:	9307      	str	r3, [sp, #28]
 8004856:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800485a:	931a      	str	r3, [sp, #104]	; 0x68
 800485c:	4654      	mov	r4, sl
 800485e:	2205      	movs	r2, #5
 8004860:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004864:	4850      	ldr	r0, [pc, #320]	; (80049a8 <_svfiprintf_r+0x1e8>)
 8004866:	f000 fa67 	bl	8004d38 <memchr>
 800486a:	9a04      	ldr	r2, [sp, #16]
 800486c:	b9d8      	cbnz	r0, 80048a6 <_svfiprintf_r+0xe6>
 800486e:	06d0      	lsls	r0, r2, #27
 8004870:	bf44      	itt	mi
 8004872:	2320      	movmi	r3, #32
 8004874:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004878:	0711      	lsls	r1, r2, #28
 800487a:	bf44      	itt	mi
 800487c:	232b      	movmi	r3, #43	; 0x2b
 800487e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004882:	f89a 3000 	ldrb.w	r3, [sl]
 8004886:	2b2a      	cmp	r3, #42	; 0x2a
 8004888:	d015      	beq.n	80048b6 <_svfiprintf_r+0xf6>
 800488a:	4654      	mov	r4, sl
 800488c:	2000      	movs	r0, #0
 800488e:	f04f 0c0a 	mov.w	ip, #10
 8004892:	9a07      	ldr	r2, [sp, #28]
 8004894:	4621      	mov	r1, r4
 8004896:	f811 3b01 	ldrb.w	r3, [r1], #1
 800489a:	3b30      	subs	r3, #48	; 0x30
 800489c:	2b09      	cmp	r3, #9
 800489e:	d94d      	bls.n	800493c <_svfiprintf_r+0x17c>
 80048a0:	b1b0      	cbz	r0, 80048d0 <_svfiprintf_r+0x110>
 80048a2:	9207      	str	r2, [sp, #28]
 80048a4:	e014      	b.n	80048d0 <_svfiprintf_r+0x110>
 80048a6:	eba0 0308 	sub.w	r3, r0, r8
 80048aa:	fa09 f303 	lsl.w	r3, r9, r3
 80048ae:	4313      	orrs	r3, r2
 80048b0:	46a2      	mov	sl, r4
 80048b2:	9304      	str	r3, [sp, #16]
 80048b4:	e7d2      	b.n	800485c <_svfiprintf_r+0x9c>
 80048b6:	9b03      	ldr	r3, [sp, #12]
 80048b8:	1d19      	adds	r1, r3, #4
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	9103      	str	r1, [sp, #12]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	bfbb      	ittet	lt
 80048c2:	425b      	neglt	r3, r3
 80048c4:	f042 0202 	orrlt.w	r2, r2, #2
 80048c8:	9307      	strge	r3, [sp, #28]
 80048ca:	9307      	strlt	r3, [sp, #28]
 80048cc:	bfb8      	it	lt
 80048ce:	9204      	strlt	r2, [sp, #16]
 80048d0:	7823      	ldrb	r3, [r4, #0]
 80048d2:	2b2e      	cmp	r3, #46	; 0x2e
 80048d4:	d10c      	bne.n	80048f0 <_svfiprintf_r+0x130>
 80048d6:	7863      	ldrb	r3, [r4, #1]
 80048d8:	2b2a      	cmp	r3, #42	; 0x2a
 80048da:	d134      	bne.n	8004946 <_svfiprintf_r+0x186>
 80048dc:	9b03      	ldr	r3, [sp, #12]
 80048de:	3402      	adds	r4, #2
 80048e0:	1d1a      	adds	r2, r3, #4
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	9203      	str	r2, [sp, #12]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	bfb8      	it	lt
 80048ea:	f04f 33ff 	movlt.w	r3, #4294967295
 80048ee:	9305      	str	r3, [sp, #20]
 80048f0:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80049ac <_svfiprintf_r+0x1ec>
 80048f4:	2203      	movs	r2, #3
 80048f6:	4650      	mov	r0, sl
 80048f8:	7821      	ldrb	r1, [r4, #0]
 80048fa:	f000 fa1d 	bl	8004d38 <memchr>
 80048fe:	b138      	cbz	r0, 8004910 <_svfiprintf_r+0x150>
 8004900:	2240      	movs	r2, #64	; 0x40
 8004902:	9b04      	ldr	r3, [sp, #16]
 8004904:	eba0 000a 	sub.w	r0, r0, sl
 8004908:	4082      	lsls	r2, r0
 800490a:	4313      	orrs	r3, r2
 800490c:	3401      	adds	r4, #1
 800490e:	9304      	str	r3, [sp, #16]
 8004910:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004914:	2206      	movs	r2, #6
 8004916:	4826      	ldr	r0, [pc, #152]	; (80049b0 <_svfiprintf_r+0x1f0>)
 8004918:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800491c:	f000 fa0c 	bl	8004d38 <memchr>
 8004920:	2800      	cmp	r0, #0
 8004922:	d038      	beq.n	8004996 <_svfiprintf_r+0x1d6>
 8004924:	4b23      	ldr	r3, [pc, #140]	; (80049b4 <_svfiprintf_r+0x1f4>)
 8004926:	bb1b      	cbnz	r3, 8004970 <_svfiprintf_r+0x1b0>
 8004928:	9b03      	ldr	r3, [sp, #12]
 800492a:	3307      	adds	r3, #7
 800492c:	f023 0307 	bic.w	r3, r3, #7
 8004930:	3308      	adds	r3, #8
 8004932:	9303      	str	r3, [sp, #12]
 8004934:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004936:	4433      	add	r3, r6
 8004938:	9309      	str	r3, [sp, #36]	; 0x24
 800493a:	e768      	b.n	800480e <_svfiprintf_r+0x4e>
 800493c:	460c      	mov	r4, r1
 800493e:	2001      	movs	r0, #1
 8004940:	fb0c 3202 	mla	r2, ip, r2, r3
 8004944:	e7a6      	b.n	8004894 <_svfiprintf_r+0xd4>
 8004946:	2300      	movs	r3, #0
 8004948:	f04f 0c0a 	mov.w	ip, #10
 800494c:	4619      	mov	r1, r3
 800494e:	3401      	adds	r4, #1
 8004950:	9305      	str	r3, [sp, #20]
 8004952:	4620      	mov	r0, r4
 8004954:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004958:	3a30      	subs	r2, #48	; 0x30
 800495a:	2a09      	cmp	r2, #9
 800495c:	d903      	bls.n	8004966 <_svfiprintf_r+0x1a6>
 800495e:	2b00      	cmp	r3, #0
 8004960:	d0c6      	beq.n	80048f0 <_svfiprintf_r+0x130>
 8004962:	9105      	str	r1, [sp, #20]
 8004964:	e7c4      	b.n	80048f0 <_svfiprintf_r+0x130>
 8004966:	4604      	mov	r4, r0
 8004968:	2301      	movs	r3, #1
 800496a:	fb0c 2101 	mla	r1, ip, r1, r2
 800496e:	e7f0      	b.n	8004952 <_svfiprintf_r+0x192>
 8004970:	ab03      	add	r3, sp, #12
 8004972:	9300      	str	r3, [sp, #0]
 8004974:	462a      	mov	r2, r5
 8004976:	4638      	mov	r0, r7
 8004978:	4b0f      	ldr	r3, [pc, #60]	; (80049b8 <_svfiprintf_r+0x1f8>)
 800497a:	a904      	add	r1, sp, #16
 800497c:	f3af 8000 	nop.w
 8004980:	1c42      	adds	r2, r0, #1
 8004982:	4606      	mov	r6, r0
 8004984:	d1d6      	bne.n	8004934 <_svfiprintf_r+0x174>
 8004986:	89ab      	ldrh	r3, [r5, #12]
 8004988:	065b      	lsls	r3, r3, #25
 800498a:	f53f af2d 	bmi.w	80047e8 <_svfiprintf_r+0x28>
 800498e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004990:	b01d      	add	sp, #116	; 0x74
 8004992:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004996:	ab03      	add	r3, sp, #12
 8004998:	9300      	str	r3, [sp, #0]
 800499a:	462a      	mov	r2, r5
 800499c:	4638      	mov	r0, r7
 800499e:	4b06      	ldr	r3, [pc, #24]	; (80049b8 <_svfiprintf_r+0x1f8>)
 80049a0:	a904      	add	r1, sp, #16
 80049a2:	f000 f87d 	bl	8004aa0 <_printf_i>
 80049a6:	e7eb      	b.n	8004980 <_svfiprintf_r+0x1c0>
 80049a8:	08004eca 	.word	0x08004eca
 80049ac:	08004ed0 	.word	0x08004ed0
 80049b0:	08004ed4 	.word	0x08004ed4
 80049b4:	00000000 	.word	0x00000000
 80049b8:	0800470d 	.word	0x0800470d

080049bc <_printf_common>:
 80049bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049c0:	4616      	mov	r6, r2
 80049c2:	4699      	mov	r9, r3
 80049c4:	688a      	ldr	r2, [r1, #8]
 80049c6:	690b      	ldr	r3, [r1, #16]
 80049c8:	4607      	mov	r7, r0
 80049ca:	4293      	cmp	r3, r2
 80049cc:	bfb8      	it	lt
 80049ce:	4613      	movlt	r3, r2
 80049d0:	6033      	str	r3, [r6, #0]
 80049d2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80049d6:	460c      	mov	r4, r1
 80049d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80049dc:	b10a      	cbz	r2, 80049e2 <_printf_common+0x26>
 80049de:	3301      	adds	r3, #1
 80049e0:	6033      	str	r3, [r6, #0]
 80049e2:	6823      	ldr	r3, [r4, #0]
 80049e4:	0699      	lsls	r1, r3, #26
 80049e6:	bf42      	ittt	mi
 80049e8:	6833      	ldrmi	r3, [r6, #0]
 80049ea:	3302      	addmi	r3, #2
 80049ec:	6033      	strmi	r3, [r6, #0]
 80049ee:	6825      	ldr	r5, [r4, #0]
 80049f0:	f015 0506 	ands.w	r5, r5, #6
 80049f4:	d106      	bne.n	8004a04 <_printf_common+0x48>
 80049f6:	f104 0a19 	add.w	sl, r4, #25
 80049fa:	68e3      	ldr	r3, [r4, #12]
 80049fc:	6832      	ldr	r2, [r6, #0]
 80049fe:	1a9b      	subs	r3, r3, r2
 8004a00:	42ab      	cmp	r3, r5
 8004a02:	dc2b      	bgt.n	8004a5c <_printf_common+0xa0>
 8004a04:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004a08:	1e13      	subs	r3, r2, #0
 8004a0a:	6822      	ldr	r2, [r4, #0]
 8004a0c:	bf18      	it	ne
 8004a0e:	2301      	movne	r3, #1
 8004a10:	0692      	lsls	r2, r2, #26
 8004a12:	d430      	bmi.n	8004a76 <_printf_common+0xba>
 8004a14:	4649      	mov	r1, r9
 8004a16:	4638      	mov	r0, r7
 8004a18:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004a1c:	47c0      	blx	r8
 8004a1e:	3001      	adds	r0, #1
 8004a20:	d023      	beq.n	8004a6a <_printf_common+0xae>
 8004a22:	6823      	ldr	r3, [r4, #0]
 8004a24:	6922      	ldr	r2, [r4, #16]
 8004a26:	f003 0306 	and.w	r3, r3, #6
 8004a2a:	2b04      	cmp	r3, #4
 8004a2c:	bf14      	ite	ne
 8004a2e:	2500      	movne	r5, #0
 8004a30:	6833      	ldreq	r3, [r6, #0]
 8004a32:	f04f 0600 	mov.w	r6, #0
 8004a36:	bf08      	it	eq
 8004a38:	68e5      	ldreq	r5, [r4, #12]
 8004a3a:	f104 041a 	add.w	r4, r4, #26
 8004a3e:	bf08      	it	eq
 8004a40:	1aed      	subeq	r5, r5, r3
 8004a42:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004a46:	bf08      	it	eq
 8004a48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	bfc4      	itt	gt
 8004a50:	1a9b      	subgt	r3, r3, r2
 8004a52:	18ed      	addgt	r5, r5, r3
 8004a54:	42b5      	cmp	r5, r6
 8004a56:	d11a      	bne.n	8004a8e <_printf_common+0xd2>
 8004a58:	2000      	movs	r0, #0
 8004a5a:	e008      	b.n	8004a6e <_printf_common+0xb2>
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	4652      	mov	r2, sl
 8004a60:	4649      	mov	r1, r9
 8004a62:	4638      	mov	r0, r7
 8004a64:	47c0      	blx	r8
 8004a66:	3001      	adds	r0, #1
 8004a68:	d103      	bne.n	8004a72 <_printf_common+0xb6>
 8004a6a:	f04f 30ff 	mov.w	r0, #4294967295
 8004a6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a72:	3501      	adds	r5, #1
 8004a74:	e7c1      	b.n	80049fa <_printf_common+0x3e>
 8004a76:	2030      	movs	r0, #48	; 0x30
 8004a78:	18e1      	adds	r1, r4, r3
 8004a7a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004a7e:	1c5a      	adds	r2, r3, #1
 8004a80:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004a84:	4422      	add	r2, r4
 8004a86:	3302      	adds	r3, #2
 8004a88:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004a8c:	e7c2      	b.n	8004a14 <_printf_common+0x58>
 8004a8e:	2301      	movs	r3, #1
 8004a90:	4622      	mov	r2, r4
 8004a92:	4649      	mov	r1, r9
 8004a94:	4638      	mov	r0, r7
 8004a96:	47c0      	blx	r8
 8004a98:	3001      	adds	r0, #1
 8004a9a:	d0e6      	beq.n	8004a6a <_printf_common+0xae>
 8004a9c:	3601      	adds	r6, #1
 8004a9e:	e7d9      	b.n	8004a54 <_printf_common+0x98>

08004aa0 <_printf_i>:
 8004aa0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004aa4:	7e0f      	ldrb	r7, [r1, #24]
 8004aa6:	4691      	mov	r9, r2
 8004aa8:	2f78      	cmp	r7, #120	; 0x78
 8004aaa:	4680      	mov	r8, r0
 8004aac:	460c      	mov	r4, r1
 8004aae:	469a      	mov	sl, r3
 8004ab0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004ab2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004ab6:	d807      	bhi.n	8004ac8 <_printf_i+0x28>
 8004ab8:	2f62      	cmp	r7, #98	; 0x62
 8004aba:	d80a      	bhi.n	8004ad2 <_printf_i+0x32>
 8004abc:	2f00      	cmp	r7, #0
 8004abe:	f000 80d5 	beq.w	8004c6c <_printf_i+0x1cc>
 8004ac2:	2f58      	cmp	r7, #88	; 0x58
 8004ac4:	f000 80c1 	beq.w	8004c4a <_printf_i+0x1aa>
 8004ac8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004acc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004ad0:	e03a      	b.n	8004b48 <_printf_i+0xa8>
 8004ad2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004ad6:	2b15      	cmp	r3, #21
 8004ad8:	d8f6      	bhi.n	8004ac8 <_printf_i+0x28>
 8004ada:	a101      	add	r1, pc, #4	; (adr r1, 8004ae0 <_printf_i+0x40>)
 8004adc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004ae0:	08004b39 	.word	0x08004b39
 8004ae4:	08004b4d 	.word	0x08004b4d
 8004ae8:	08004ac9 	.word	0x08004ac9
 8004aec:	08004ac9 	.word	0x08004ac9
 8004af0:	08004ac9 	.word	0x08004ac9
 8004af4:	08004ac9 	.word	0x08004ac9
 8004af8:	08004b4d 	.word	0x08004b4d
 8004afc:	08004ac9 	.word	0x08004ac9
 8004b00:	08004ac9 	.word	0x08004ac9
 8004b04:	08004ac9 	.word	0x08004ac9
 8004b08:	08004ac9 	.word	0x08004ac9
 8004b0c:	08004c53 	.word	0x08004c53
 8004b10:	08004b79 	.word	0x08004b79
 8004b14:	08004c0d 	.word	0x08004c0d
 8004b18:	08004ac9 	.word	0x08004ac9
 8004b1c:	08004ac9 	.word	0x08004ac9
 8004b20:	08004c75 	.word	0x08004c75
 8004b24:	08004ac9 	.word	0x08004ac9
 8004b28:	08004b79 	.word	0x08004b79
 8004b2c:	08004ac9 	.word	0x08004ac9
 8004b30:	08004ac9 	.word	0x08004ac9
 8004b34:	08004c15 	.word	0x08004c15
 8004b38:	682b      	ldr	r3, [r5, #0]
 8004b3a:	1d1a      	adds	r2, r3, #4
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	602a      	str	r2, [r5, #0]
 8004b40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004b48:	2301      	movs	r3, #1
 8004b4a:	e0a0      	b.n	8004c8e <_printf_i+0x1ee>
 8004b4c:	6820      	ldr	r0, [r4, #0]
 8004b4e:	682b      	ldr	r3, [r5, #0]
 8004b50:	0607      	lsls	r7, r0, #24
 8004b52:	f103 0104 	add.w	r1, r3, #4
 8004b56:	6029      	str	r1, [r5, #0]
 8004b58:	d501      	bpl.n	8004b5e <_printf_i+0xbe>
 8004b5a:	681e      	ldr	r6, [r3, #0]
 8004b5c:	e003      	b.n	8004b66 <_printf_i+0xc6>
 8004b5e:	0646      	lsls	r6, r0, #25
 8004b60:	d5fb      	bpl.n	8004b5a <_printf_i+0xba>
 8004b62:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004b66:	2e00      	cmp	r6, #0
 8004b68:	da03      	bge.n	8004b72 <_printf_i+0xd2>
 8004b6a:	232d      	movs	r3, #45	; 0x2d
 8004b6c:	4276      	negs	r6, r6
 8004b6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b72:	230a      	movs	r3, #10
 8004b74:	4859      	ldr	r0, [pc, #356]	; (8004cdc <_printf_i+0x23c>)
 8004b76:	e012      	b.n	8004b9e <_printf_i+0xfe>
 8004b78:	682b      	ldr	r3, [r5, #0]
 8004b7a:	6820      	ldr	r0, [r4, #0]
 8004b7c:	1d19      	adds	r1, r3, #4
 8004b7e:	6029      	str	r1, [r5, #0]
 8004b80:	0605      	lsls	r5, r0, #24
 8004b82:	d501      	bpl.n	8004b88 <_printf_i+0xe8>
 8004b84:	681e      	ldr	r6, [r3, #0]
 8004b86:	e002      	b.n	8004b8e <_printf_i+0xee>
 8004b88:	0641      	lsls	r1, r0, #25
 8004b8a:	d5fb      	bpl.n	8004b84 <_printf_i+0xe4>
 8004b8c:	881e      	ldrh	r6, [r3, #0]
 8004b8e:	2f6f      	cmp	r7, #111	; 0x6f
 8004b90:	bf0c      	ite	eq
 8004b92:	2308      	moveq	r3, #8
 8004b94:	230a      	movne	r3, #10
 8004b96:	4851      	ldr	r0, [pc, #324]	; (8004cdc <_printf_i+0x23c>)
 8004b98:	2100      	movs	r1, #0
 8004b9a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004b9e:	6865      	ldr	r5, [r4, #4]
 8004ba0:	2d00      	cmp	r5, #0
 8004ba2:	bfa8      	it	ge
 8004ba4:	6821      	ldrge	r1, [r4, #0]
 8004ba6:	60a5      	str	r5, [r4, #8]
 8004ba8:	bfa4      	itt	ge
 8004baa:	f021 0104 	bicge.w	r1, r1, #4
 8004bae:	6021      	strge	r1, [r4, #0]
 8004bb0:	b90e      	cbnz	r6, 8004bb6 <_printf_i+0x116>
 8004bb2:	2d00      	cmp	r5, #0
 8004bb4:	d04b      	beq.n	8004c4e <_printf_i+0x1ae>
 8004bb6:	4615      	mov	r5, r2
 8004bb8:	fbb6 f1f3 	udiv	r1, r6, r3
 8004bbc:	fb03 6711 	mls	r7, r3, r1, r6
 8004bc0:	5dc7      	ldrb	r7, [r0, r7]
 8004bc2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004bc6:	4637      	mov	r7, r6
 8004bc8:	42bb      	cmp	r3, r7
 8004bca:	460e      	mov	r6, r1
 8004bcc:	d9f4      	bls.n	8004bb8 <_printf_i+0x118>
 8004bce:	2b08      	cmp	r3, #8
 8004bd0:	d10b      	bne.n	8004bea <_printf_i+0x14a>
 8004bd2:	6823      	ldr	r3, [r4, #0]
 8004bd4:	07de      	lsls	r6, r3, #31
 8004bd6:	d508      	bpl.n	8004bea <_printf_i+0x14a>
 8004bd8:	6923      	ldr	r3, [r4, #16]
 8004bda:	6861      	ldr	r1, [r4, #4]
 8004bdc:	4299      	cmp	r1, r3
 8004bde:	bfde      	ittt	le
 8004be0:	2330      	movle	r3, #48	; 0x30
 8004be2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004be6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004bea:	1b52      	subs	r2, r2, r5
 8004bec:	6122      	str	r2, [r4, #16]
 8004bee:	464b      	mov	r3, r9
 8004bf0:	4621      	mov	r1, r4
 8004bf2:	4640      	mov	r0, r8
 8004bf4:	f8cd a000 	str.w	sl, [sp]
 8004bf8:	aa03      	add	r2, sp, #12
 8004bfa:	f7ff fedf 	bl	80049bc <_printf_common>
 8004bfe:	3001      	adds	r0, #1
 8004c00:	d14a      	bne.n	8004c98 <_printf_i+0x1f8>
 8004c02:	f04f 30ff 	mov.w	r0, #4294967295
 8004c06:	b004      	add	sp, #16
 8004c08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c0c:	6823      	ldr	r3, [r4, #0]
 8004c0e:	f043 0320 	orr.w	r3, r3, #32
 8004c12:	6023      	str	r3, [r4, #0]
 8004c14:	2778      	movs	r7, #120	; 0x78
 8004c16:	4832      	ldr	r0, [pc, #200]	; (8004ce0 <_printf_i+0x240>)
 8004c18:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004c1c:	6823      	ldr	r3, [r4, #0]
 8004c1e:	6829      	ldr	r1, [r5, #0]
 8004c20:	061f      	lsls	r7, r3, #24
 8004c22:	f851 6b04 	ldr.w	r6, [r1], #4
 8004c26:	d402      	bmi.n	8004c2e <_printf_i+0x18e>
 8004c28:	065f      	lsls	r7, r3, #25
 8004c2a:	bf48      	it	mi
 8004c2c:	b2b6      	uxthmi	r6, r6
 8004c2e:	07df      	lsls	r7, r3, #31
 8004c30:	bf48      	it	mi
 8004c32:	f043 0320 	orrmi.w	r3, r3, #32
 8004c36:	6029      	str	r1, [r5, #0]
 8004c38:	bf48      	it	mi
 8004c3a:	6023      	strmi	r3, [r4, #0]
 8004c3c:	b91e      	cbnz	r6, 8004c46 <_printf_i+0x1a6>
 8004c3e:	6823      	ldr	r3, [r4, #0]
 8004c40:	f023 0320 	bic.w	r3, r3, #32
 8004c44:	6023      	str	r3, [r4, #0]
 8004c46:	2310      	movs	r3, #16
 8004c48:	e7a6      	b.n	8004b98 <_printf_i+0xf8>
 8004c4a:	4824      	ldr	r0, [pc, #144]	; (8004cdc <_printf_i+0x23c>)
 8004c4c:	e7e4      	b.n	8004c18 <_printf_i+0x178>
 8004c4e:	4615      	mov	r5, r2
 8004c50:	e7bd      	b.n	8004bce <_printf_i+0x12e>
 8004c52:	682b      	ldr	r3, [r5, #0]
 8004c54:	6826      	ldr	r6, [r4, #0]
 8004c56:	1d18      	adds	r0, r3, #4
 8004c58:	6961      	ldr	r1, [r4, #20]
 8004c5a:	6028      	str	r0, [r5, #0]
 8004c5c:	0635      	lsls	r5, r6, #24
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	d501      	bpl.n	8004c66 <_printf_i+0x1c6>
 8004c62:	6019      	str	r1, [r3, #0]
 8004c64:	e002      	b.n	8004c6c <_printf_i+0x1cc>
 8004c66:	0670      	lsls	r0, r6, #25
 8004c68:	d5fb      	bpl.n	8004c62 <_printf_i+0x1c2>
 8004c6a:	8019      	strh	r1, [r3, #0]
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	4615      	mov	r5, r2
 8004c70:	6123      	str	r3, [r4, #16]
 8004c72:	e7bc      	b.n	8004bee <_printf_i+0x14e>
 8004c74:	682b      	ldr	r3, [r5, #0]
 8004c76:	2100      	movs	r1, #0
 8004c78:	1d1a      	adds	r2, r3, #4
 8004c7a:	602a      	str	r2, [r5, #0]
 8004c7c:	681d      	ldr	r5, [r3, #0]
 8004c7e:	6862      	ldr	r2, [r4, #4]
 8004c80:	4628      	mov	r0, r5
 8004c82:	f000 f859 	bl	8004d38 <memchr>
 8004c86:	b108      	cbz	r0, 8004c8c <_printf_i+0x1ec>
 8004c88:	1b40      	subs	r0, r0, r5
 8004c8a:	6060      	str	r0, [r4, #4]
 8004c8c:	6863      	ldr	r3, [r4, #4]
 8004c8e:	6123      	str	r3, [r4, #16]
 8004c90:	2300      	movs	r3, #0
 8004c92:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c96:	e7aa      	b.n	8004bee <_printf_i+0x14e>
 8004c98:	462a      	mov	r2, r5
 8004c9a:	4649      	mov	r1, r9
 8004c9c:	4640      	mov	r0, r8
 8004c9e:	6923      	ldr	r3, [r4, #16]
 8004ca0:	47d0      	blx	sl
 8004ca2:	3001      	adds	r0, #1
 8004ca4:	d0ad      	beq.n	8004c02 <_printf_i+0x162>
 8004ca6:	6823      	ldr	r3, [r4, #0]
 8004ca8:	079b      	lsls	r3, r3, #30
 8004caa:	d413      	bmi.n	8004cd4 <_printf_i+0x234>
 8004cac:	68e0      	ldr	r0, [r4, #12]
 8004cae:	9b03      	ldr	r3, [sp, #12]
 8004cb0:	4298      	cmp	r0, r3
 8004cb2:	bfb8      	it	lt
 8004cb4:	4618      	movlt	r0, r3
 8004cb6:	e7a6      	b.n	8004c06 <_printf_i+0x166>
 8004cb8:	2301      	movs	r3, #1
 8004cba:	4632      	mov	r2, r6
 8004cbc:	4649      	mov	r1, r9
 8004cbe:	4640      	mov	r0, r8
 8004cc0:	47d0      	blx	sl
 8004cc2:	3001      	adds	r0, #1
 8004cc4:	d09d      	beq.n	8004c02 <_printf_i+0x162>
 8004cc6:	3501      	adds	r5, #1
 8004cc8:	68e3      	ldr	r3, [r4, #12]
 8004cca:	9903      	ldr	r1, [sp, #12]
 8004ccc:	1a5b      	subs	r3, r3, r1
 8004cce:	42ab      	cmp	r3, r5
 8004cd0:	dcf2      	bgt.n	8004cb8 <_printf_i+0x218>
 8004cd2:	e7eb      	b.n	8004cac <_printf_i+0x20c>
 8004cd4:	2500      	movs	r5, #0
 8004cd6:	f104 0619 	add.w	r6, r4, #25
 8004cda:	e7f5      	b.n	8004cc8 <_printf_i+0x228>
 8004cdc:	08004edb 	.word	0x08004edb
 8004ce0:	08004eec 	.word	0x08004eec

08004ce4 <memmove>:
 8004ce4:	4288      	cmp	r0, r1
 8004ce6:	b510      	push	{r4, lr}
 8004ce8:	eb01 0402 	add.w	r4, r1, r2
 8004cec:	d902      	bls.n	8004cf4 <memmove+0x10>
 8004cee:	4284      	cmp	r4, r0
 8004cf0:	4623      	mov	r3, r4
 8004cf2:	d807      	bhi.n	8004d04 <memmove+0x20>
 8004cf4:	1e43      	subs	r3, r0, #1
 8004cf6:	42a1      	cmp	r1, r4
 8004cf8:	d008      	beq.n	8004d0c <memmove+0x28>
 8004cfa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004cfe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004d02:	e7f8      	b.n	8004cf6 <memmove+0x12>
 8004d04:	4601      	mov	r1, r0
 8004d06:	4402      	add	r2, r0
 8004d08:	428a      	cmp	r2, r1
 8004d0a:	d100      	bne.n	8004d0e <memmove+0x2a>
 8004d0c:	bd10      	pop	{r4, pc}
 8004d0e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004d12:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004d16:	e7f7      	b.n	8004d08 <memmove+0x24>

08004d18 <_sbrk_r>:
 8004d18:	b538      	push	{r3, r4, r5, lr}
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	4d05      	ldr	r5, [pc, #20]	; (8004d34 <_sbrk_r+0x1c>)
 8004d1e:	4604      	mov	r4, r0
 8004d20:	4608      	mov	r0, r1
 8004d22:	602b      	str	r3, [r5, #0]
 8004d24:	f7fc fc2e 	bl	8001584 <_sbrk>
 8004d28:	1c43      	adds	r3, r0, #1
 8004d2a:	d102      	bne.n	8004d32 <_sbrk_r+0x1a>
 8004d2c:	682b      	ldr	r3, [r5, #0]
 8004d2e:	b103      	cbz	r3, 8004d32 <_sbrk_r+0x1a>
 8004d30:	6023      	str	r3, [r4, #0]
 8004d32:	bd38      	pop	{r3, r4, r5, pc}
 8004d34:	2000032c 	.word	0x2000032c

08004d38 <memchr>:
 8004d38:	4603      	mov	r3, r0
 8004d3a:	b510      	push	{r4, lr}
 8004d3c:	b2c9      	uxtb	r1, r1
 8004d3e:	4402      	add	r2, r0
 8004d40:	4293      	cmp	r3, r2
 8004d42:	4618      	mov	r0, r3
 8004d44:	d101      	bne.n	8004d4a <memchr+0x12>
 8004d46:	2000      	movs	r0, #0
 8004d48:	e003      	b.n	8004d52 <memchr+0x1a>
 8004d4a:	7804      	ldrb	r4, [r0, #0]
 8004d4c:	3301      	adds	r3, #1
 8004d4e:	428c      	cmp	r4, r1
 8004d50:	d1f6      	bne.n	8004d40 <memchr+0x8>
 8004d52:	bd10      	pop	{r4, pc}

08004d54 <memcpy>:
 8004d54:	440a      	add	r2, r1
 8004d56:	4291      	cmp	r1, r2
 8004d58:	f100 33ff 	add.w	r3, r0, #4294967295
 8004d5c:	d100      	bne.n	8004d60 <memcpy+0xc>
 8004d5e:	4770      	bx	lr
 8004d60:	b510      	push	{r4, lr}
 8004d62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d66:	4291      	cmp	r1, r2
 8004d68:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d6c:	d1f9      	bne.n	8004d62 <memcpy+0xe>
 8004d6e:	bd10      	pop	{r4, pc}

08004d70 <_realloc_r>:
 8004d70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d74:	4680      	mov	r8, r0
 8004d76:	4614      	mov	r4, r2
 8004d78:	460e      	mov	r6, r1
 8004d7a:	b921      	cbnz	r1, 8004d86 <_realloc_r+0x16>
 8004d7c:	4611      	mov	r1, r2
 8004d7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d82:	f7ff bc37 	b.w	80045f4 <_malloc_r>
 8004d86:	b92a      	cbnz	r2, 8004d94 <_realloc_r+0x24>
 8004d88:	f7ff fbcc 	bl	8004524 <_free_r>
 8004d8c:	4625      	mov	r5, r4
 8004d8e:	4628      	mov	r0, r5
 8004d90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d94:	f000 f81b 	bl	8004dce <_malloc_usable_size_r>
 8004d98:	4284      	cmp	r4, r0
 8004d9a:	4607      	mov	r7, r0
 8004d9c:	d802      	bhi.n	8004da4 <_realloc_r+0x34>
 8004d9e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004da2:	d812      	bhi.n	8004dca <_realloc_r+0x5a>
 8004da4:	4621      	mov	r1, r4
 8004da6:	4640      	mov	r0, r8
 8004da8:	f7ff fc24 	bl	80045f4 <_malloc_r>
 8004dac:	4605      	mov	r5, r0
 8004dae:	2800      	cmp	r0, #0
 8004db0:	d0ed      	beq.n	8004d8e <_realloc_r+0x1e>
 8004db2:	42bc      	cmp	r4, r7
 8004db4:	4622      	mov	r2, r4
 8004db6:	4631      	mov	r1, r6
 8004db8:	bf28      	it	cs
 8004dba:	463a      	movcs	r2, r7
 8004dbc:	f7ff ffca 	bl	8004d54 <memcpy>
 8004dc0:	4631      	mov	r1, r6
 8004dc2:	4640      	mov	r0, r8
 8004dc4:	f7ff fbae 	bl	8004524 <_free_r>
 8004dc8:	e7e1      	b.n	8004d8e <_realloc_r+0x1e>
 8004dca:	4635      	mov	r5, r6
 8004dcc:	e7df      	b.n	8004d8e <_realloc_r+0x1e>

08004dce <_malloc_usable_size_r>:
 8004dce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004dd2:	1f18      	subs	r0, r3, #4
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	bfbc      	itt	lt
 8004dd8:	580b      	ldrlt	r3, [r1, r0]
 8004dda:	18c0      	addlt	r0, r0, r3
 8004ddc:	4770      	bx	lr
	...

08004de0 <_init>:
 8004de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004de2:	bf00      	nop
 8004de4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004de6:	bc08      	pop	{r3}
 8004de8:	469e      	mov	lr, r3
 8004dea:	4770      	bx	lr

08004dec <_fini>:
 8004dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dee:	bf00      	nop
 8004df0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004df2:	bc08      	pop	{r3}
 8004df4:	469e      	mov	lr, r3
 8004df6:	4770      	bx	lr
