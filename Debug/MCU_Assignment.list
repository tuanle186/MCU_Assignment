
MCU_Assignment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003188  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08003294  08003294  00013294  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080032b8  080032b8  00020048  2**0
                  CONTENTS
  4 .ARM          00000000  080032b8  080032b8  00020048  2**0
                  CONTENTS
  5 .preinit_array 00000000  080032b8  080032b8  00020048  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080032b8  080032b8  000132b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080032bc  080032bc  000132bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000048  20000000  080032c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  20000048  08003308  00020048  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000150  08003308  00020150  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020071  2**0
                  CONTENTS, READONLY
 13 .debug_info   000089df  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b60  00000000  00000000  00028a93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000af0  00000000  00000000  0002a5f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000852  00000000  00000000  0002b0e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017185  00000000  00000000  0002b93a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cc16  00000000  00000000  00042abf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000848d2  00000000  00000000  0004f6d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002ae8  00000000  00000000  000d3fa8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000048  00000000  00000000  000d6a90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000048 	.word	0x20000048
 8000128:	00000000 	.word	0x00000000
 800012c:	0800327c 	.word	0x0800327c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000004c 	.word	0x2000004c
 8000148:	0800327c 	.word	0x0800327c

0800014c <fsm_automatic>:
#include "timer.h"
#include "input_reading.h"
//#include "seven_seg.h"

//int counter_1 = 0, counter_2 = 0;
void fsm_automatic() {
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	switch (status) {
 8000150:	4b49      	ldr	r3, [pc, #292]	; (8000278 <fsm_automatic+0x12c>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	3301      	adds	r3, #1
 8000156:	2b05      	cmp	r3, #5
 8000158:	f200 8083 	bhi.w	8000262 <fsm_automatic+0x116>
 800015c:	a201      	add	r2, pc, #4	; (adr r2, 8000164 <fsm_automatic+0x18>)
 800015e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000162:	bf00      	nop
 8000164:	0800017d 	.word	0x0800017d
 8000168:	08000185 	.word	0x08000185
 800016c:	080001b1 	.word	0x080001b1
 8000170:	080001e3 	.word	0x080001e3
 8000174:	08000209 	.word	0x08000209
 8000178:	0800022f 	.word	0x0800022f
		case INIT:
			status = MODE1;
 800017c:	4b3e      	ldr	r3, [pc, #248]	; (8000278 <fsm_automatic+0x12c>)
 800017e:	2200      	movs	r2, #0
 8000180:	601a      	str	r2, [r3, #0]
			break;
 8000182:	e077      	b.n	8000274 <fsm_automatic+0x128>
		case MODE1:
			led_config();
 8000184:	f000 f92c 	bl	80003e0 <led_config>
//			counter_1 = T_RED;
//			counter_2 = T_GREEN;
//			update7SEG_buffer_auto(counter_1, counter_2);
			setTimer0(T_GREEN*1000);
 8000188:	4b3c      	ldr	r3, [pc, #240]	; (800027c <fsm_automatic+0x130>)
 800018a:	681b      	ldr	r3, [r3, #0]
 800018c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000190:	fb02 f303 	mul.w	r3, r2, r3
 8000194:	4618      	mov	r0, r3
 8000196:	f001 f8bd 	bl	8001314 <setTimer0>
//			setTimer4(1000);
			buzzer_period=500;
 800019a:	4b39      	ldr	r3, [pc, #228]	; (8000280 <fsm_automatic+0x134>)
 800019c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80001a0:	601a      	str	r2, [r3, #0]
			volume = 20;
 80001a2:	4b38      	ldr	r3, [pc, #224]	; (8000284 <fsm_automatic+0x138>)
 80001a4:	2214      	movs	r2, #20
 80001a6:	601a      	str	r2, [r3, #0]
			status = RED_GREEN;
 80001a8:	4b33      	ldr	r3, [pc, #204]	; (8000278 <fsm_automatic+0x12c>)
 80001aa:	2201      	movs	r2, #1
 80001ac:	601a      	str	r2, [r3, #0]
			break;
 80001ae:	e061      	b.n	8000274 <fsm_automatic+0x128>
		case RED_GREEN:
			led_config();
 80001b0:	f000 f916 	bl	80003e0 <led_config>
//				counter_2--;
//				if (counter_2 <= 0) counter_2 = T_AMBER;
//				update7SEG_buffer_auto(counter_1, counter_2);
//				setTimer4(1000);
//			}
			if (timer0_flag == 1) {
 80001b4:	4b34      	ldr	r3, [pc, #208]	; (8000288 <fsm_automatic+0x13c>)
 80001b6:	681b      	ldr	r3, [r3, #0]
 80001b8:	2b01      	cmp	r3, #1
 80001ba:	d154      	bne.n	8000266 <fsm_automatic+0x11a>
				setTimer0(T_AMBER*1000);
 80001bc:	4b33      	ldr	r3, [pc, #204]	; (800028c <fsm_automatic+0x140>)
 80001be:	681b      	ldr	r3, [r3, #0]
 80001c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80001c4:	fb02 f303 	mul.w	r3, r2, r3
 80001c8:	4618      	mov	r0, r3
 80001ca:	f001 f8a3 	bl	8001314 <setTimer0>
				status = RED_AMBER;
 80001ce:	4b2a      	ldr	r3, [pc, #168]	; (8000278 <fsm_automatic+0x12c>)
 80001d0:	2202      	movs	r2, #2
 80001d2:	601a      	str	r2, [r3, #0]
				buzzer_period = 75;
 80001d4:	4b2a      	ldr	r3, [pc, #168]	; (8000280 <fsm_automatic+0x134>)
 80001d6:	224b      	movs	r2, #75	; 0x4b
 80001d8:	601a      	str	r2, [r3, #0]
				volume = 100;
 80001da:	4b2a      	ldr	r3, [pc, #168]	; (8000284 <fsm_automatic+0x138>)
 80001dc:	2264      	movs	r2, #100	; 0x64
 80001de:	601a      	str	r2, [r3, #0]
			}
			break;
 80001e0:	e041      	b.n	8000266 <fsm_automatic+0x11a>
		case RED_AMBER:
			led_config();
 80001e2:	f000 f8fd 	bl	80003e0 <led_config>
//					counter_2 = T_RED;
//				}
//				update7SEG_buffer_auto(counter_1, counter_2);
//				setTimer4(1000);
//			}
			if (timer0_flag == 1) {
 80001e6:	4b28      	ldr	r3, [pc, #160]	; (8000288 <fsm_automatic+0x13c>)
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	2b01      	cmp	r3, #1
 80001ec:	d13d      	bne.n	800026a <fsm_automatic+0x11e>
				setTimer0(T_GREEN*1000);
 80001ee:	4b23      	ldr	r3, [pc, #140]	; (800027c <fsm_automatic+0x130>)
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80001f6:	fb02 f303 	mul.w	r3, r2, r3
 80001fa:	4618      	mov	r0, r3
 80001fc:	f001 f88a 	bl	8001314 <setTimer0>
				status = GREEN_RED;
 8000200:	4b1d      	ldr	r3, [pc, #116]	; (8000278 <fsm_automatic+0x12c>)
 8000202:	2203      	movs	r2, #3
 8000204:	601a      	str	r2, [r3, #0]
			}
			break;
 8000206:	e030      	b.n	800026a <fsm_automatic+0x11e>
		case GREEN_RED:
			led_config();
 8000208:	f000 f8ea 	bl	80003e0 <led_config>
//				counter_2--;
//				if (counter_1 <= 0) counter_1 = T_AMBER;
//				update7SEG_buffer_auto(counter_1, counter_2);
//				setTimer4(1000);
//			}
			if (timer0_flag == 1) {
 800020c:	4b1e      	ldr	r3, [pc, #120]	; (8000288 <fsm_automatic+0x13c>)
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	2b01      	cmp	r3, #1
 8000212:	d12c      	bne.n	800026e <fsm_automatic+0x122>
				setTimer0(T_AMBER*1000);
 8000214:	4b1d      	ldr	r3, [pc, #116]	; (800028c <fsm_automatic+0x140>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800021c:	fb02 f303 	mul.w	r3, r2, r3
 8000220:	4618      	mov	r0, r3
 8000222:	f001 f877 	bl	8001314 <setTimer0>
				status = AMBER_RED;
 8000226:	4b14      	ldr	r3, [pc, #80]	; (8000278 <fsm_automatic+0x12c>)
 8000228:	2204      	movs	r2, #4
 800022a:	601a      	str	r2, [r3, #0]
			}
			break;
 800022c:	e01f      	b.n	800026e <fsm_automatic+0x122>
		case AMBER_RED:
			led_config();
 800022e:	f000 f8d7 	bl	80003e0 <led_config>
//					counter_2 = T_GREEN;
//				}
//				update7SEG_buffer_auto(counter_1, counter_2);
//				setTimer4(1000);
//			}
			if (timer0_flag == 1) {
 8000232:	4b15      	ldr	r3, [pc, #84]	; (8000288 <fsm_automatic+0x13c>)
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	2b01      	cmp	r3, #1
 8000238:	d11b      	bne.n	8000272 <fsm_automatic+0x126>
				setTimer0(T_GREEN*1000);
 800023a:	4b10      	ldr	r3, [pc, #64]	; (800027c <fsm_automatic+0x130>)
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000242:	fb02 f303 	mul.w	r3, r2, r3
 8000246:	4618      	mov	r0, r3
 8000248:	f001 f864 	bl	8001314 <setTimer0>
				buzzer_period=500;
 800024c:	4b0c      	ldr	r3, [pc, #48]	; (8000280 <fsm_automatic+0x134>)
 800024e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000252:	601a      	str	r2, [r3, #0]
				volume = 20;
 8000254:	4b0b      	ldr	r3, [pc, #44]	; (8000284 <fsm_automatic+0x138>)
 8000256:	2214      	movs	r2, #20
 8000258:	601a      	str	r2, [r3, #0]
				status = RED_GREEN;
 800025a:	4b07      	ldr	r3, [pc, #28]	; (8000278 <fsm_automatic+0x12c>)
 800025c:	2201      	movs	r2, #1
 800025e:	601a      	str	r2, [r3, #0]
			}
			break;
 8000260:	e007      	b.n	8000272 <fsm_automatic+0x126>
		default:
			break;
 8000262:	bf00      	nop
 8000264:	e006      	b.n	8000274 <fsm_automatic+0x128>
			break;
 8000266:	bf00      	nop
 8000268:	e004      	b.n	8000274 <fsm_automatic+0x128>
			break;
 800026a:	bf00      	nop
 800026c:	e002      	b.n	8000274 <fsm_automatic+0x128>
			break;
 800026e:	bf00      	nop
 8000270:	e000      	b.n	8000274 <fsm_automatic+0x128>
			break;
 8000272:	bf00      	nop
	}
}
 8000274:	bf00      	nop
 8000276:	bd80      	pop	{r7, pc}
 8000278:	2000000c 	.word	0x2000000c
 800027c:	20000008 	.word	0x20000008
 8000280:	20000014 	.word	0x20000014
 8000284:	20000018 	.word	0x20000018
 8000288:	20000130 	.word	0x20000130
 800028c:	20000004 	.word	0x20000004

08000290 <fsm_red_manual>:
#include "global.h"
#include "fsm_manual.h"
#include "timer.h"
//#include "seven_seg.h"

void fsm_red_manual() {
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0
	switch(status) {
 8000294:	4b18      	ldr	r3, [pc, #96]	; (80002f8 <fsm_red_manual+0x68>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	2b07      	cmp	r3, #7
 800029a:	d01b      	beq.n	80002d4 <fsm_red_manual+0x44>
 800029c:	2b07      	cmp	r3, #7
 800029e:	dc24      	bgt.n	80002ea <fsm_red_manual+0x5a>
 80002a0:	2b05      	cmp	r3, #5
 80002a2:	d002      	beq.n	80002aa <fsm_red_manual+0x1a>
 80002a4:	2b06      	cmp	r3, #6
 80002a6:	d00a      	beq.n	80002be <fsm_red_manual+0x2e>
				toggle_red();
				setTimer1(500);
			}
			break;
		default:
			break;
 80002a8:	e01f      	b.n	80002ea <fsm_red_manual+0x5a>
			led_config();
 80002aa:	f000 f899 	bl	80003e0 <led_config>
			setTimer1(500);
 80002ae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80002b2:	f001 f849 	bl	8001348 <setTimer1>
			status = AUTO_RED;
 80002b6:	4b10      	ldr	r3, [pc, #64]	; (80002f8 <fsm_red_manual+0x68>)
 80002b8:	2206      	movs	r2, #6
 80002ba:	601a      	str	r2, [r3, #0]
			break;
 80002bc:	e01a      	b.n	80002f4 <fsm_red_manual+0x64>
			if (timer1_flag == 1) {
 80002be:	4b0f      	ldr	r3, [pc, #60]	; (80002fc <fsm_red_manual+0x6c>)
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	2b01      	cmp	r3, #1
 80002c4:	d113      	bne.n	80002ee <fsm_red_manual+0x5e>
				toggle_red();
 80002c6:	f000 f9dd 	bl	8000684 <toggle_red>
				setTimer1(500);
 80002ca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80002ce:	f001 f83b 	bl	8001348 <setTimer1>
			break;
 80002d2:	e00c      	b.n	80002ee <fsm_red_manual+0x5e>
			if (timer1_flag == 1) {
 80002d4:	4b09      	ldr	r3, [pc, #36]	; (80002fc <fsm_red_manual+0x6c>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	2b01      	cmp	r3, #1
 80002da:	d10a      	bne.n	80002f2 <fsm_red_manual+0x62>
				toggle_red();
 80002dc:	f000 f9d2 	bl	8000684 <toggle_red>
				setTimer1(500);
 80002e0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80002e4:	f001 f830 	bl	8001348 <setTimer1>
			break;
 80002e8:	e003      	b.n	80002f2 <fsm_red_manual+0x62>
			break;
 80002ea:	bf00      	nop
 80002ec:	e002      	b.n	80002f4 <fsm_red_manual+0x64>
			break;
 80002ee:	bf00      	nop
 80002f0:	e000      	b.n	80002f4 <fsm_red_manual+0x64>
			break;
 80002f2:	bf00      	nop
	}
}
 80002f4:	bf00      	nop
 80002f6:	bd80      	pop	{r7, pc}
 80002f8:	2000000c 	.word	0x2000000c
 80002fc:	20000134 	.word	0x20000134

08000300 <fsm_amber_manual>:

void fsm_amber_manual() {
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0
	switch(status) {
 8000304:	4b18      	ldr	r3, [pc, #96]	; (8000368 <fsm_amber_manual+0x68>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	2b0a      	cmp	r3, #10
 800030a:	d01b      	beq.n	8000344 <fsm_amber_manual+0x44>
 800030c:	2b0a      	cmp	r3, #10
 800030e:	dc24      	bgt.n	800035a <fsm_amber_manual+0x5a>
 8000310:	2b08      	cmp	r3, #8
 8000312:	d002      	beq.n	800031a <fsm_amber_manual+0x1a>
 8000314:	2b09      	cmp	r3, #9
 8000316:	d00a      	beq.n	800032e <fsm_amber_manual+0x2e>
				toggle_amber();
				setTimer1(500);
			}
			break;
		default:
			break;
 8000318:	e01f      	b.n	800035a <fsm_amber_manual+0x5a>
			led_config();
 800031a:	f000 f861 	bl	80003e0 <led_config>
			setTimer1(500);
 800031e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000322:	f001 f811 	bl	8001348 <setTimer1>
			status = AUTO_AMBER;
 8000326:	4b10      	ldr	r3, [pc, #64]	; (8000368 <fsm_amber_manual+0x68>)
 8000328:	2209      	movs	r2, #9
 800032a:	601a      	str	r2, [r3, #0]
			break;
 800032c:	e01a      	b.n	8000364 <fsm_amber_manual+0x64>
			if (timer1_flag == 1) {
 800032e:	4b0f      	ldr	r3, [pc, #60]	; (800036c <fsm_amber_manual+0x6c>)
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	2b01      	cmp	r3, #1
 8000334:	d113      	bne.n	800035e <fsm_amber_manual+0x5e>
				toggle_amber();
 8000336:	f000 f9bf 	bl	80006b8 <toggle_amber>
				setTimer1(500);
 800033a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800033e:	f001 f803 	bl	8001348 <setTimer1>
			break;
 8000342:	e00c      	b.n	800035e <fsm_amber_manual+0x5e>
			if (timer1_flag == 1) {
 8000344:	4b09      	ldr	r3, [pc, #36]	; (800036c <fsm_amber_manual+0x6c>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	2b01      	cmp	r3, #1
 800034a:	d10a      	bne.n	8000362 <fsm_amber_manual+0x62>
				toggle_amber();
 800034c:	f000 f9b4 	bl	80006b8 <toggle_amber>
				setTimer1(500);
 8000350:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000354:	f000 fff8 	bl	8001348 <setTimer1>
			break;
 8000358:	e003      	b.n	8000362 <fsm_amber_manual+0x62>
			break;
 800035a:	bf00      	nop
 800035c:	e002      	b.n	8000364 <fsm_amber_manual+0x64>
			break;
 800035e:	bf00      	nop
 8000360:	e000      	b.n	8000364 <fsm_amber_manual+0x64>
			break;
 8000362:	bf00      	nop
	}
}
 8000364:	bf00      	nop
 8000366:	bd80      	pop	{r7, pc}
 8000368:	2000000c 	.word	0x2000000c
 800036c:	20000134 	.word	0x20000134

08000370 <fsm_green_manual>:

void fsm_green_manual() {
 8000370:	b580      	push	{r7, lr}
 8000372:	af00      	add	r7, sp, #0
	switch(status) {
 8000374:	4b18      	ldr	r3, [pc, #96]	; (80003d8 <fsm_green_manual+0x68>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	2b0d      	cmp	r3, #13
 800037a:	d01b      	beq.n	80003b4 <fsm_green_manual+0x44>
 800037c:	2b0d      	cmp	r3, #13
 800037e:	dc24      	bgt.n	80003ca <fsm_green_manual+0x5a>
 8000380:	2b0b      	cmp	r3, #11
 8000382:	d002      	beq.n	800038a <fsm_green_manual+0x1a>
 8000384:	2b0c      	cmp	r3, #12
 8000386:	d00a      	beq.n	800039e <fsm_green_manual+0x2e>
				toggle_green();
				setTimer1(500);
			}
			break;
		default:
			break;
 8000388:	e01f      	b.n	80003ca <fsm_green_manual+0x5a>
			led_config();
 800038a:	f000 f829 	bl	80003e0 <led_config>
			setTimer1(500);
 800038e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000392:	f000 ffd9 	bl	8001348 <setTimer1>
			status = AUTO_GREEN;
 8000396:	4b10      	ldr	r3, [pc, #64]	; (80003d8 <fsm_green_manual+0x68>)
 8000398:	220c      	movs	r2, #12
 800039a:	601a      	str	r2, [r3, #0]
			break;
 800039c:	e01a      	b.n	80003d4 <fsm_green_manual+0x64>
			if (timer1_flag == 1) {
 800039e:	4b0f      	ldr	r3, [pc, #60]	; (80003dc <fsm_green_manual+0x6c>)
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	2b01      	cmp	r3, #1
 80003a4:	d113      	bne.n	80003ce <fsm_green_manual+0x5e>
				toggle_green();
 80003a6:	f000 f9a1 	bl	80006ec <toggle_green>
				setTimer1(500);
 80003aa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80003ae:	f000 ffcb 	bl	8001348 <setTimer1>
			break;
 80003b2:	e00c      	b.n	80003ce <fsm_green_manual+0x5e>
			if (timer1_flag == 1) {
 80003b4:	4b09      	ldr	r3, [pc, #36]	; (80003dc <fsm_green_manual+0x6c>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	2b01      	cmp	r3, #1
 80003ba:	d10a      	bne.n	80003d2 <fsm_green_manual+0x62>
				toggle_green();
 80003bc:	f000 f996 	bl	80006ec <toggle_green>
				setTimer1(500);
 80003c0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80003c4:	f000 ffc0 	bl	8001348 <setTimer1>
			break;
 80003c8:	e003      	b.n	80003d2 <fsm_green_manual+0x62>
			break;
 80003ca:	bf00      	nop
 80003cc:	e002      	b.n	80003d4 <fsm_green_manual+0x64>
			break;
 80003ce:	bf00      	nop
 80003d0:	e000      	b.n	80003d4 <fsm_green_manual+0x64>
			break;
 80003d2:	bf00      	nop
	}
}
 80003d4:	bf00      	nop
 80003d6:	bd80      	pop	{r7, pc}
 80003d8:	2000000c 	.word	0x2000000c
 80003dc:	20000134 	.word	0x20000134

080003e0 <led_config>:
void on_red_pedestrian();
void on_green_pedestrian();

void set_buzzer();

void led_config() {
 80003e0:	b580      	push	{r7, lr}
 80003e2:	af00      	add	r7, sp, #0
	pedestrian_buzzer_config();
 80003e4:	f000 f9d8 	bl	8000798 <pedestrian_buzzer_config>
	pedestrian_led_config();
 80003e8:	f000 f856 	bl	8000498 <pedestrian_led_config>
	switch (status) {
 80003ec:	4b28      	ldr	r3, [pc, #160]	; (8000490 <led_config+0xb0>)
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	2b0b      	cmp	r3, #11
 80003f2:	d84a      	bhi.n	800048a <led_config+0xaa>
 80003f4:	a201      	add	r2, pc, #4	; (adr r2, 80003fc <led_config+0x1c>)
 80003f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003fa:	bf00      	nop
 80003fc:	0800042d 	.word	0x0800042d
 8000400:	0800043b 	.word	0x0800043b
 8000404:	08000445 	.word	0x08000445
 8000408:	0800044b 	.word	0x0800044b
 800040c:	08000455 	.word	0x08000455
 8000410:	0800045b 	.word	0x0800045b
 8000414:	0800048b 	.word	0x0800048b
 8000418:	0800048b 	.word	0x0800048b
 800041c:	0800046b 	.word	0x0800046b
 8000420:	0800048b 	.word	0x0800048b
 8000424:	0800048b 	.word	0x0800048b
 8000428:	0800047b 	.word	0x0800047b
		case MODE1:
			off_all_leds_road_1();
 800042c:	f000 f89a 	bl	8000564 <off_all_leds_road_1>
			off_all_leds_road_2();
 8000430:	f000 f8ac 	bl	800058c <off_all_leds_road_2>
			off_pedestrian();
 8000434:	f000 f974 	bl	8000720 <off_pedestrian>
			break;
 8000438:	e028      	b.n	800048c <led_config+0xac>
		case RED_GREEN:
			on_red_road_1();
 800043a:	f000 f8b7 	bl	80005ac <on_red_road_1>
			on_green_road_2();
 800043e:	f000 f911 	bl	8000664 <on_green_road_2>

			break;
 8000442:	e023      	b.n	800048c <led_config+0xac>
		case RED_AMBER:
			on_amber_road_2();
 8000444:	f000 f8ea 	bl	800061c <on_amber_road_2>
			break;
 8000448:	e020      	b.n	800048c <led_config+0xac>
		case GREEN_RED:
			on_green_road_1();
 800044a:	f000 f8f7 	bl	800063c <on_green_road_1>
			on_red_road_2();
 800044e:	f000 f8c1 	bl	80005d4 <on_red_road_2>
			break;
 8000452:	e01b      	b.n	800048c <led_config+0xac>
		case AMBER_RED:
			on_amber_road_1();
 8000454:	f000 f8ce 	bl	80005f4 <on_amber_road_1>
			break;
 8000458:	e018      	b.n	800048c <led_config+0xac>
		case MODE2:
			on_red_road_1();
 800045a:	f000 f8a7 	bl	80005ac <on_red_road_1>
			on_red_road_2();
 800045e:	f000 f8b9 	bl	80005d4 <on_red_road_2>
			toggle_flag = 0;
 8000462:	4b0c      	ldr	r3, [pc, #48]	; (8000494 <led_config+0xb4>)
 8000464:	2200      	movs	r2, #0
 8000466:	601a      	str	r2, [r3, #0]
			break;
 8000468:	e010      	b.n	800048c <led_config+0xac>
		case MODE3:
			on_amber_road_1();
 800046a:	f000 f8c3 	bl	80005f4 <on_amber_road_1>
			on_amber_road_2();
 800046e:	f000 f8d5 	bl	800061c <on_amber_road_2>
			toggle_flag = 0;
 8000472:	4b08      	ldr	r3, [pc, #32]	; (8000494 <led_config+0xb4>)
 8000474:	2200      	movs	r2, #0
 8000476:	601a      	str	r2, [r3, #0]
			break;
 8000478:	e008      	b.n	800048c <led_config+0xac>
		case MODE4:
			on_green_road_1();
 800047a:	f000 f8df 	bl	800063c <on_green_road_1>
			on_green_road_2();
 800047e:	f000 f8f1 	bl	8000664 <on_green_road_2>
			toggle_flag = 0;
 8000482:	4b04      	ldr	r3, [pc, #16]	; (8000494 <led_config+0xb4>)
 8000484:	2200      	movs	r2, #0
 8000486:	601a      	str	r2, [r3, #0]
			break;
 8000488:	e000      	b.n	800048c <led_config+0xac>
		default:
			break;
 800048a:	bf00      	nop
	}
}
 800048c:	bf00      	nop
 800048e:	bd80      	pop	{r7, pc}
 8000490:	2000000c 	.word	0x2000000c
 8000494:	20000064 	.word	0x20000064

08000498 <pedestrian_led_config>:
void pedestrian_led_config(){
 8000498:	b580      	push	{r7, lr}
 800049a:	af00      	add	r7, sp, #0
	switch (status) {
 800049c:	4b2f      	ldr	r3, [pc, #188]	; (800055c <pedestrian_led_config+0xc4>)
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	2b0b      	cmp	r3, #11
 80004a2:	d858      	bhi.n	8000556 <pedestrian_led_config+0xbe>
 80004a4:	a201      	add	r2, pc, #4	; (adr r2, 80004ac <pedestrian_led_config+0x14>)
 80004a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004aa:	bf00      	nop
 80004ac:	080004dd 	.word	0x080004dd
 80004b0:	080004e3 	.word	0x080004e3
 80004b4:	080004f7 	.word	0x080004f7
 80004b8:	0800050b 	.word	0x0800050b
 80004bc:	0800051f 	.word	0x0800051f
 80004c0:	08000533 	.word	0x08000533
 80004c4:	08000557 	.word	0x08000557
 80004c8:	08000557 	.word	0x08000557
 80004cc:	0800053f 	.word	0x0800053f
 80004d0:	08000557 	.word	0x08000557
 80004d4:	08000557 	.word	0x08000557
 80004d8:	0800054b 	.word	0x0800054b
			case MODE1:
				off_pedestrian();
 80004dc:	f000 f920 	bl	8000720 <off_pedestrian>
				break;
 80004e0:	e03a      	b.n	8000558 <pedestrian_led_config+0xc0>
			case RED_GREEN:
				if(curr_ped_status==PED_ON){
 80004e2:	4b1f      	ldr	r3, [pc, #124]	; (8000560 <pedestrian_led_config+0xc8>)
 80004e4:	781b      	ldrb	r3, [r3, #0]
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d102      	bne.n	80004f0 <pedestrian_led_config+0x58>
					on_green_pedestrian();
 80004ea:	f000 f941 	bl	8000770 <on_green_pedestrian>
					break;
 80004ee:	e033      	b.n	8000558 <pedestrian_led_config+0xc0>
				}
				off_pedestrian();
 80004f0:	f000 f916 	bl	8000720 <off_pedestrian>
				break;
 80004f4:	e030      	b.n	8000558 <pedestrian_led_config+0xc0>
			case RED_AMBER:
				if(curr_ped_status==PED_ON){
 80004f6:	4b1a      	ldr	r3, [pc, #104]	; (8000560 <pedestrian_led_config+0xc8>)
 80004f8:	781b      	ldrb	r3, [r3, #0]
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d102      	bne.n	8000504 <pedestrian_led_config+0x6c>
					on_green_pedestrian();
 80004fe:	f000 f937 	bl	8000770 <on_green_pedestrian>
					break;
 8000502:	e029      	b.n	8000558 <pedestrian_led_config+0xc0>
				}
				off_pedestrian();
 8000504:	f000 f90c 	bl	8000720 <off_pedestrian>
				break;
 8000508:	e026      	b.n	8000558 <pedestrian_led_config+0xc0>
			case GREEN_RED:
				if(curr_ped_status==PED_ON){
 800050a:	4b15      	ldr	r3, [pc, #84]	; (8000560 <pedestrian_led_config+0xc8>)
 800050c:	781b      	ldrb	r3, [r3, #0]
 800050e:	2b00      	cmp	r3, #0
 8000510:	d102      	bne.n	8000518 <pedestrian_led_config+0x80>
					on_red_pedestrian();
 8000512:	f000 f919 	bl	8000748 <on_red_pedestrian>
					break;
 8000516:	e01f      	b.n	8000558 <pedestrian_led_config+0xc0>
				}
				off_pedestrian();
 8000518:	f000 f902 	bl	8000720 <off_pedestrian>
				break;
 800051c:	e01c      	b.n	8000558 <pedestrian_led_config+0xc0>
			case AMBER_RED:
				if(curr_ped_status==PED_ON){
 800051e:	4b10      	ldr	r3, [pc, #64]	; (8000560 <pedestrian_led_config+0xc8>)
 8000520:	781b      	ldrb	r3, [r3, #0]
 8000522:	2b00      	cmp	r3, #0
 8000524:	d102      	bne.n	800052c <pedestrian_led_config+0x94>
					on_red_pedestrian();
 8000526:	f000 f90f 	bl	8000748 <on_red_pedestrian>
					break;
 800052a:	e015      	b.n	8000558 <pedestrian_led_config+0xc0>
				}
				off_pedestrian();
 800052c:	f000 f8f8 	bl	8000720 <off_pedestrian>
				break;
 8000530:	e012      	b.n	8000558 <pedestrian_led_config+0xc0>
			case MODE2:
				curr_ped_status=PED_OFF;
 8000532:	4b0b      	ldr	r3, [pc, #44]	; (8000560 <pedestrian_led_config+0xc8>)
 8000534:	2201      	movs	r2, #1
 8000536:	701a      	strb	r2, [r3, #0]
				off_pedestrian();
 8000538:	f000 f8f2 	bl	8000720 <off_pedestrian>
				break;
 800053c:	e00c      	b.n	8000558 <pedestrian_led_config+0xc0>
			case MODE3:
				curr_ped_status=PED_OFF;
 800053e:	4b08      	ldr	r3, [pc, #32]	; (8000560 <pedestrian_led_config+0xc8>)
 8000540:	2201      	movs	r2, #1
 8000542:	701a      	strb	r2, [r3, #0]
				off_pedestrian();
 8000544:	f000 f8ec 	bl	8000720 <off_pedestrian>
				break;
 8000548:	e006      	b.n	8000558 <pedestrian_led_config+0xc0>
			case MODE4:
				curr_ped_status=PED_OFF;
 800054a:	4b05      	ldr	r3, [pc, #20]	; (8000560 <pedestrian_led_config+0xc8>)
 800054c:	2201      	movs	r2, #1
 800054e:	701a      	strb	r2, [r3, #0]
				off_pedestrian();
 8000550:	f000 f8e6 	bl	8000720 <off_pedestrian>
				break;
 8000554:	e000      	b.n	8000558 <pedestrian_led_config+0xc0>
			default:
				break;
 8000556:	bf00      	nop
		}
}
 8000558:	bf00      	nop
 800055a:	bd80      	pop	{r7, pc}
 800055c:	2000000c 	.word	0x2000000c
 8000560:	20000010 	.word	0x20000010

08000564 <off_all_leds_road_1>:
void off_all_leds_road_1() {
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (D2_LED1_GPIO_Port, D2_LED1_Pin, 0);
 8000568:	2200      	movs	r2, #0
 800056a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800056e:	4805      	ldr	r0, [pc, #20]	; (8000584 <off_all_leds_road_1+0x20>)
 8000570:	f001 fafb 	bl	8001b6a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (D3_LED1_GPIO_Port, D3_LED1_Pin, 0);
 8000574:	2200      	movs	r2, #0
 8000576:	2108      	movs	r1, #8
 8000578:	4803      	ldr	r0, [pc, #12]	; (8000588 <off_all_leds_road_1+0x24>)
 800057a:	f001 faf6 	bl	8001b6a <HAL_GPIO_WritePin>
}
 800057e:	bf00      	nop
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	40010800 	.word	0x40010800
 8000588:	40010c00 	.word	0x40010c00

0800058c <off_all_leds_road_2>:

void off_all_leds_road_2() {
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (D4_LED2_GPIO_Port, D4_LED2_Pin, 0);
 8000590:	2200      	movs	r2, #0
 8000592:	2120      	movs	r1, #32
 8000594:	4804      	ldr	r0, [pc, #16]	; (80005a8 <off_all_leds_road_2+0x1c>)
 8000596:	f001 fae8 	bl	8001b6a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (D5_LED2_GPIO_Port, D5_LED2_Pin, 0);
 800059a:	2200      	movs	r2, #0
 800059c:	2110      	movs	r1, #16
 800059e:	4802      	ldr	r0, [pc, #8]	; (80005a8 <off_all_leds_road_2+0x1c>)
 80005a0:	f001 fae3 	bl	8001b6a <HAL_GPIO_WritePin>
}
 80005a4:	bf00      	nop
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	40010c00 	.word	0x40010c00

080005ac <on_red_road_1>:

void on_red_road_1() {
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (D2_LED1_GPIO_Port, D2_LED1_Pin, 1);
 80005b0:	2201      	movs	r2, #1
 80005b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005b6:	4805      	ldr	r0, [pc, #20]	; (80005cc <on_red_road_1+0x20>)
 80005b8:	f001 fad7 	bl	8001b6a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (D3_LED1_GPIO_Port, D3_LED1_Pin, 0);
 80005bc:	2200      	movs	r2, #0
 80005be:	2108      	movs	r1, #8
 80005c0:	4803      	ldr	r0, [pc, #12]	; (80005d0 <on_red_road_1+0x24>)
 80005c2:	f001 fad2 	bl	8001b6a <HAL_GPIO_WritePin>
}
 80005c6:	bf00      	nop
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	40010800 	.word	0x40010800
 80005d0:	40010c00 	.word	0x40010c00

080005d4 <on_red_road_2>:

void on_red_road_2() {
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (D4_LED2_GPIO_Port, D4_LED2_Pin, 1);
 80005d8:	2201      	movs	r2, #1
 80005da:	2120      	movs	r1, #32
 80005dc:	4804      	ldr	r0, [pc, #16]	; (80005f0 <on_red_road_2+0x1c>)
 80005de:	f001 fac4 	bl	8001b6a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (D5_LED2_GPIO_Port, D5_LED2_Pin, 0);
 80005e2:	2200      	movs	r2, #0
 80005e4:	2110      	movs	r1, #16
 80005e6:	4802      	ldr	r0, [pc, #8]	; (80005f0 <on_red_road_2+0x1c>)
 80005e8:	f001 fabf 	bl	8001b6a <HAL_GPIO_WritePin>
}
 80005ec:	bf00      	nop
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	40010c00 	.word	0x40010c00

080005f4 <on_amber_road_1>:

void on_amber_road_1() {
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (D2_LED1_GPIO_Port, D2_LED1_Pin, 1);
 80005f8:	2201      	movs	r2, #1
 80005fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005fe:	4805      	ldr	r0, [pc, #20]	; (8000614 <on_amber_road_1+0x20>)
 8000600:	f001 fab3 	bl	8001b6a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (D3_LED1_GPIO_Port, D3_LED1_Pin, 1);
 8000604:	2201      	movs	r2, #1
 8000606:	2108      	movs	r1, #8
 8000608:	4803      	ldr	r0, [pc, #12]	; (8000618 <on_amber_road_1+0x24>)
 800060a:	f001 faae 	bl	8001b6a <HAL_GPIO_WritePin>
}
 800060e:	bf00      	nop
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	40010800 	.word	0x40010800
 8000618:	40010c00 	.word	0x40010c00

0800061c <on_amber_road_2>:

void on_amber_road_2() {
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (D4_LED2_GPIO_Port, D4_LED2_Pin, 1);
 8000620:	2201      	movs	r2, #1
 8000622:	2120      	movs	r1, #32
 8000624:	4804      	ldr	r0, [pc, #16]	; (8000638 <on_amber_road_2+0x1c>)
 8000626:	f001 faa0 	bl	8001b6a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (D5_LED2_GPIO_Port, D5_LED2_Pin, 1);
 800062a:	2201      	movs	r2, #1
 800062c:	2110      	movs	r1, #16
 800062e:	4802      	ldr	r0, [pc, #8]	; (8000638 <on_amber_road_2+0x1c>)
 8000630:	f001 fa9b 	bl	8001b6a <HAL_GPIO_WritePin>
}
 8000634:	bf00      	nop
 8000636:	bd80      	pop	{r7, pc}
 8000638:	40010c00 	.word	0x40010c00

0800063c <on_green_road_1>:

void on_green_road_1() {
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (D2_LED1_GPIO_Port, D2_LED1_Pin, 0);
 8000640:	2200      	movs	r2, #0
 8000642:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000646:	4805      	ldr	r0, [pc, #20]	; (800065c <on_green_road_1+0x20>)
 8000648:	f001 fa8f 	bl	8001b6a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (D3_LED1_GPIO_Port, D3_LED1_Pin, 1);
 800064c:	2201      	movs	r2, #1
 800064e:	2108      	movs	r1, #8
 8000650:	4803      	ldr	r0, [pc, #12]	; (8000660 <on_green_road_1+0x24>)
 8000652:	f001 fa8a 	bl	8001b6a <HAL_GPIO_WritePin>
}
 8000656:	bf00      	nop
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	40010800 	.word	0x40010800
 8000660:	40010c00 	.word	0x40010c00

08000664 <on_green_road_2>:

void on_green_road_2() {
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (D4_LED2_GPIO_Port, D4_LED2_Pin, 0);
 8000668:	2200      	movs	r2, #0
 800066a:	2120      	movs	r1, #32
 800066c:	4804      	ldr	r0, [pc, #16]	; (8000680 <on_green_road_2+0x1c>)
 800066e:	f001 fa7c 	bl	8001b6a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (D5_LED2_GPIO_Port, D5_LED2_Pin, 1);
 8000672:	2201      	movs	r2, #1
 8000674:	2110      	movs	r1, #16
 8000676:	4802      	ldr	r0, [pc, #8]	; (8000680 <on_green_road_2+0x1c>)
 8000678:	f001 fa77 	bl	8001b6a <HAL_GPIO_WritePin>
}
 800067c:	bf00      	nop
 800067e:	bd80      	pop	{r7, pc}
 8000680:	40010c00 	.word	0x40010c00

08000684 <toggle_red>:


void toggle_red() {
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
	if (toggle_flag == 0) {
 8000688:	4b0a      	ldr	r3, [pc, #40]	; (80006b4 <toggle_red+0x30>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	2b00      	cmp	r3, #0
 800068e:	d107      	bne.n	80006a0 <toggle_red+0x1c>
		on_red_road_1();
 8000690:	f7ff ff8c 	bl	80005ac <on_red_road_1>
		on_red_road_2();
 8000694:	f7ff ff9e 	bl	80005d4 <on_red_road_2>
		toggle_flag = 1;
 8000698:	4b06      	ldr	r3, [pc, #24]	; (80006b4 <toggle_red+0x30>)
 800069a:	2201      	movs	r2, #1
 800069c:	601a      	str	r2, [r3, #0]
	} else {
		off_all_leds_road_1();
		off_all_leds_road_2();
		toggle_flag = 0;
	}
}
 800069e:	e006      	b.n	80006ae <toggle_red+0x2a>
		off_all_leds_road_1();
 80006a0:	f7ff ff60 	bl	8000564 <off_all_leds_road_1>
		off_all_leds_road_2();
 80006a4:	f7ff ff72 	bl	800058c <off_all_leds_road_2>
		toggle_flag = 0;
 80006a8:	4b02      	ldr	r3, [pc, #8]	; (80006b4 <toggle_red+0x30>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	601a      	str	r2, [r3, #0]
}
 80006ae:	bf00      	nop
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	20000064 	.word	0x20000064

080006b8 <toggle_amber>:

void toggle_amber() {
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
	if (toggle_flag == 0) {
 80006bc:	4b0a      	ldr	r3, [pc, #40]	; (80006e8 <toggle_amber+0x30>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d107      	bne.n	80006d4 <toggle_amber+0x1c>
		on_amber_road_1();
 80006c4:	f7ff ff96 	bl	80005f4 <on_amber_road_1>
		on_amber_road_2();
 80006c8:	f7ff ffa8 	bl	800061c <on_amber_road_2>
		toggle_flag = 1;
 80006cc:	4b06      	ldr	r3, [pc, #24]	; (80006e8 <toggle_amber+0x30>)
 80006ce:	2201      	movs	r2, #1
 80006d0:	601a      	str	r2, [r3, #0]
	} else {
		off_all_leds_road_1();
		off_all_leds_road_2();
		toggle_flag = 0;
	}
}
 80006d2:	e006      	b.n	80006e2 <toggle_amber+0x2a>
		off_all_leds_road_1();
 80006d4:	f7ff ff46 	bl	8000564 <off_all_leds_road_1>
		off_all_leds_road_2();
 80006d8:	f7ff ff58 	bl	800058c <off_all_leds_road_2>
		toggle_flag = 0;
 80006dc:	4b02      	ldr	r3, [pc, #8]	; (80006e8 <toggle_amber+0x30>)
 80006de:	2200      	movs	r2, #0
 80006e0:	601a      	str	r2, [r3, #0]
}
 80006e2:	bf00      	nop
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	20000064 	.word	0x20000064

080006ec <toggle_green>:

void toggle_green() {
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
	if (toggle_flag == 0) {
 80006f0:	4b0a      	ldr	r3, [pc, #40]	; (800071c <toggle_green+0x30>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d107      	bne.n	8000708 <toggle_green+0x1c>
		on_green_road_1();
 80006f8:	f7ff ffa0 	bl	800063c <on_green_road_1>
		on_green_road_2();
 80006fc:	f7ff ffb2 	bl	8000664 <on_green_road_2>
		toggle_flag = 1;
 8000700:	4b06      	ldr	r3, [pc, #24]	; (800071c <toggle_green+0x30>)
 8000702:	2201      	movs	r2, #1
 8000704:	601a      	str	r2, [r3, #0]
	} else {
		off_all_leds_road_1();
		off_all_leds_road_2();
		toggle_flag = 0;
	}
}
 8000706:	e006      	b.n	8000716 <toggle_green+0x2a>
		off_all_leds_road_1();
 8000708:	f7ff ff2c 	bl	8000564 <off_all_leds_road_1>
		off_all_leds_road_2();
 800070c:	f7ff ff3e 	bl	800058c <off_all_leds_road_2>
		toggle_flag = 0;
 8000710:	4b02      	ldr	r3, [pc, #8]	; (800071c <toggle_green+0x30>)
 8000712:	2200      	movs	r2, #0
 8000714:	601a      	str	r2, [r3, #0]
}
 8000716:	bf00      	nop
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	20000064 	.word	0x20000064

08000720 <off_pedestrian>:

void off_pedestrian(){
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (D6_PedLED_GPIO_Port, D6_PedLED_Pin, 0);
 8000724:	2200      	movs	r2, #0
 8000726:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800072a:	4805      	ldr	r0, [pc, #20]	; (8000740 <off_pedestrian+0x20>)
 800072c:	f001 fa1d 	bl	8001b6a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (D7_PedLED_GPIO_Port, D7_PedLED_Pin, 0);
 8000730:	2200      	movs	r2, #0
 8000732:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000736:	4803      	ldr	r0, [pc, #12]	; (8000744 <off_pedestrian+0x24>)
 8000738:	f001 fa17 	bl	8001b6a <HAL_GPIO_WritePin>
}
 800073c:	bf00      	nop
 800073e:	bd80      	pop	{r7, pc}
 8000740:	40010c00 	.word	0x40010c00
 8000744:	40010800 	.word	0x40010800

08000748 <on_red_pedestrian>:
void on_red_pedestrian(){
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (D6_PedLED_GPIO_Port, D6_PedLED_Pin, 1);
 800074c:	2201      	movs	r2, #1
 800074e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000752:	4805      	ldr	r0, [pc, #20]	; (8000768 <on_red_pedestrian+0x20>)
 8000754:	f001 fa09 	bl	8001b6a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (D7_PedLED_GPIO_Port, D7_PedLED_Pin, 0);
 8000758:	2200      	movs	r2, #0
 800075a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800075e:	4803      	ldr	r0, [pc, #12]	; (800076c <on_red_pedestrian+0x24>)
 8000760:	f001 fa03 	bl	8001b6a <HAL_GPIO_WritePin>
}
 8000764:	bf00      	nop
 8000766:	bd80      	pop	{r7, pc}
 8000768:	40010c00 	.word	0x40010c00
 800076c:	40010800 	.word	0x40010800

08000770 <on_green_pedestrian>:
void on_green_pedestrian(){
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (D6_PedLED_GPIO_Port, D6_PedLED_Pin, 0);
 8000774:	2200      	movs	r2, #0
 8000776:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800077a:	4805      	ldr	r0, [pc, #20]	; (8000790 <on_green_pedestrian+0x20>)
 800077c:	f001 f9f5 	bl	8001b6a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (D7_PedLED_GPIO_Port, D7_PedLED_Pin, 1);
 8000780:	2201      	movs	r2, #1
 8000782:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000786:	4803      	ldr	r0, [pc, #12]	; (8000794 <on_green_pedestrian+0x24>)
 8000788:	f001 f9ef 	bl	8001b6a <HAL_GPIO_WritePin>
}
 800078c:	bf00      	nop
 800078e:	bd80      	pop	{r7, pc}
 8000790:	40010c00 	.word	0x40010c00
 8000794:	40010800 	.word	0x40010800

08000798 <pedestrian_buzzer_config>:

void pedestrian_buzzer_config(){
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
	switch (status) {
 800079c:	4b34      	ldr	r3, [pc, #208]	; (8000870 <pedestrian_buzzer_config+0xd8>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	2b0b      	cmp	r3, #11
 80007a2:	d862      	bhi.n	800086a <pedestrian_buzzer_config+0xd2>
 80007a4:	a201      	add	r2, pc, #4	; (adr r2, 80007ac <pedestrian_buzzer_config+0x14>)
 80007a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007aa:	bf00      	nop
 80007ac:	080007dd 	.word	0x080007dd
 80007b0:	080007e5 	.word	0x080007e5
 80007b4:	080007fb 	.word	0x080007fb
 80007b8:	08000811 	.word	0x08000811
 80007bc:	08000829 	.word	0x08000829
 80007c0:	08000841 	.word	0x08000841
 80007c4:	0800086b 	.word	0x0800086b
 80007c8:	0800086b 	.word	0x0800086b
 80007cc:	0800084f 	.word	0x0800084f
 80007d0:	0800086b 	.word	0x0800086b
 80007d4:	0800086b 	.word	0x0800086b
 80007d8:	0800085d 	.word	0x0800085d
			case MODE1:
				buzzer(0);
 80007dc:	2000      	movs	r0, #0
 80007de:	f000 faf5 	bl	8000dcc <buzzer>
				break;
 80007e2:	e043      	b.n	800086c <pedestrian_buzzer_config+0xd4>
			case RED_GREEN:
				if(curr_ped_status==PED_ON){
 80007e4:	4b23      	ldr	r3, [pc, #140]	; (8000874 <pedestrian_buzzer_config+0xdc>)
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d102      	bne.n	80007f2 <pedestrian_buzzer_config+0x5a>
					set_buzzer();
 80007ec:	f000 f844 	bl	8000878 <set_buzzer>
					break;
 80007f0:	e03c      	b.n	800086c <pedestrian_buzzer_config+0xd4>
				}
				buzzer(0);
 80007f2:	2000      	movs	r0, #0
 80007f4:	f000 faea 	bl	8000dcc <buzzer>
				break;
 80007f8:	e038      	b.n	800086c <pedestrian_buzzer_config+0xd4>
			case RED_AMBER:
				if(curr_ped_status==PED_ON){
 80007fa:	4b1e      	ldr	r3, [pc, #120]	; (8000874 <pedestrian_buzzer_config+0xdc>)
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d102      	bne.n	8000808 <pedestrian_buzzer_config+0x70>
					set_buzzer();
 8000802:	f000 f839 	bl	8000878 <set_buzzer>
					break;
 8000806:	e031      	b.n	800086c <pedestrian_buzzer_config+0xd4>
				}
				buzzer(0);
 8000808:	2000      	movs	r0, #0
 800080a:	f000 fadf 	bl	8000dcc <buzzer>
				break;
 800080e:	e02d      	b.n	800086c <pedestrian_buzzer_config+0xd4>
			case GREEN_RED:
				if(curr_ped_status==PED_ON){
 8000810:	4b18      	ldr	r3, [pc, #96]	; (8000874 <pedestrian_buzzer_config+0xdc>)
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d103      	bne.n	8000820 <pedestrian_buzzer_config+0x88>
					buzzer(0);
 8000818:	2000      	movs	r0, #0
 800081a:	f000 fad7 	bl	8000dcc <buzzer>
					break;
 800081e:	e025      	b.n	800086c <pedestrian_buzzer_config+0xd4>
				}
				buzzer(0);
 8000820:	2000      	movs	r0, #0
 8000822:	f000 fad3 	bl	8000dcc <buzzer>
				break;
 8000826:	e021      	b.n	800086c <pedestrian_buzzer_config+0xd4>
			case AMBER_RED:
				if(curr_ped_status==PED_ON){
 8000828:	4b12      	ldr	r3, [pc, #72]	; (8000874 <pedestrian_buzzer_config+0xdc>)
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	2b00      	cmp	r3, #0
 800082e:	d103      	bne.n	8000838 <pedestrian_buzzer_config+0xa0>
					buzzer(0);
 8000830:	2000      	movs	r0, #0
 8000832:	f000 facb 	bl	8000dcc <buzzer>
					break;
 8000836:	e019      	b.n	800086c <pedestrian_buzzer_config+0xd4>
				}
				buzzer(0);
 8000838:	2000      	movs	r0, #0
 800083a:	f000 fac7 	bl	8000dcc <buzzer>
				break;
 800083e:	e015      	b.n	800086c <pedestrian_buzzer_config+0xd4>
			case MODE2:
				curr_ped_status=PED_OFF;
 8000840:	4b0c      	ldr	r3, [pc, #48]	; (8000874 <pedestrian_buzzer_config+0xdc>)
 8000842:	2201      	movs	r2, #1
 8000844:	701a      	strb	r2, [r3, #0]
				buzzer(0);
 8000846:	2000      	movs	r0, #0
 8000848:	f000 fac0 	bl	8000dcc <buzzer>
				break;
 800084c:	e00e      	b.n	800086c <pedestrian_buzzer_config+0xd4>
			case MODE3:
				curr_ped_status=PED_OFF;
 800084e:	4b09      	ldr	r3, [pc, #36]	; (8000874 <pedestrian_buzzer_config+0xdc>)
 8000850:	2201      	movs	r2, #1
 8000852:	701a      	strb	r2, [r3, #0]
				buzzer(0);
 8000854:	2000      	movs	r0, #0
 8000856:	f000 fab9 	bl	8000dcc <buzzer>
				break;
 800085a:	e007      	b.n	800086c <pedestrian_buzzer_config+0xd4>
			case MODE4:
				curr_ped_status=PED_OFF;
 800085c:	4b05      	ldr	r3, [pc, #20]	; (8000874 <pedestrian_buzzer_config+0xdc>)
 800085e:	2201      	movs	r2, #1
 8000860:	701a      	strb	r2, [r3, #0]
				buzzer(0);
 8000862:	2000      	movs	r0, #0
 8000864:	f000 fab2 	bl	8000dcc <buzzer>
				break;
 8000868:	e000      	b.n	800086c <pedestrian_buzzer_config+0xd4>
			default:
				break;
 800086a:	bf00      	nop
		}
}
 800086c:	bf00      	nop
 800086e:	bd80      	pop	{r7, pc}
 8000870:	2000000c 	.word	0x2000000c
 8000874:	20000010 	.word	0x20000010

08000878 <set_buzzer>:


void set_buzzer(){
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
//	setTimer6(500);
	if (timer6_flag == 1){
 800087c:	4b0e      	ldr	r3, [pc, #56]	; (80008b8 <set_buzzer+0x40>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	2b01      	cmp	r3, #1
 8000882:	d117      	bne.n	80008b4 <set_buzzer+0x3c>
		setTimer6(buzzer_period);
 8000884:	4b0d      	ldr	r3, [pc, #52]	; (80008bc <set_buzzer+0x44>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	4618      	mov	r0, r3
 800088a:	f000 fd91 	bl	80013b0 <setTimer6>
		if (buzzer_flag == 0){
 800088e:	4b0c      	ldr	r3, [pc, #48]	; (80008c0 <set_buzzer+0x48>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	2b00      	cmp	r3, #0
 8000894:	d108      	bne.n	80008a8 <set_buzzer+0x30>
			buzzer(volume);
 8000896:	4b0b      	ldr	r3, [pc, #44]	; (80008c4 <set_buzzer+0x4c>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	4618      	mov	r0, r3
 800089c:	f000 fa96 	bl	8000dcc <buzzer>
			buzzer_flag = 1;
 80008a0:	4b07      	ldr	r3, [pc, #28]	; (80008c0 <set_buzzer+0x48>)
 80008a2:	2201      	movs	r2, #1
 80008a4:	601a      	str	r2, [r3, #0]
		}else {
			buzzer(0);
			buzzer_flag = 0;
		}
	}
}
 80008a6:	e005      	b.n	80008b4 <set_buzzer+0x3c>
			buzzer(0);
 80008a8:	2000      	movs	r0, #0
 80008aa:	f000 fa8f 	bl	8000dcc <buzzer>
			buzzer_flag = 0;
 80008ae:	4b04      	ldr	r3, [pc, #16]	; (80008c0 <set_buzzer+0x48>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	601a      	str	r2, [r3, #0]
}
 80008b4:	bf00      	nop
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	20000148 	.word	0x20000148
 80008bc:	20000014 	.word	0x20000014
 80008c0:	20000068 	.word	0x20000068
 80008c4:	20000018 	.word	0x20000018

080008c8 <fsm_button_processing>:
enum ButtonState button_0_state = BUTTON_PRESSED;
enum ButtonState button_1_state = BUTTON_PRESSED;
enum ButtonState button_2_state = BUTTON_PRESSED;
enum ButtonState button_3_state = BUTTON_PRESSED;

void fsm_button_processing() {
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
	if(timer5_flag==1){
 80008cc:	4b98      	ldr	r3, [pc, #608]	; (8000b30 <fsm_button_processing+0x268>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	2b01      	cmp	r3, #1
 80008d2:	d105      	bne.n	80008e0 <fsm_button_processing+0x18>
		timer5_flag=0;
 80008d4:	4b96      	ldr	r3, [pc, #600]	; (8000b30 <fsm_button_processing+0x268>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	601a      	str	r2, [r3, #0]
		curr_ped_status=PED_OFF;
 80008da:	4b96      	ldr	r3, [pc, #600]	; (8000b34 <fsm_button_processing+0x26c>)
 80008dc:	2201      	movs	r2, #1
 80008de:	701a      	strb	r2, [r3, #0]
	}
	switch (button_0_state) {
 80008e0:	4b95      	ldr	r3, [pc, #596]	; (8000b38 <fsm_button_processing+0x270>)
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	2b02      	cmp	r3, #2
 80008e6:	d043      	beq.n	8000970 <fsm_button_processing+0xa8>
 80008e8:	2b02      	cmp	r3, #2
 80008ea:	dc50      	bgt.n	800098e <fsm_button_processing+0xc6>
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d002      	beq.n	80008f6 <fsm_button_processing+0x2e>
 80008f0:	2b01      	cmp	r3, #1
 80008f2:	d029      	beq.n	8000948 <fsm_button_processing+0x80>
 80008f4:	e04b      	b.n	800098e <fsm_button_processing+0xc6>
			case BUTTON_RELEASED:
				if (is_button_pressed(0)) {
 80008f6:	2000      	movs	r0, #0
 80008f8:	f000 fa34 	bl	8000d64 <is_button_pressed>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d040      	beq.n	8000984 <fsm_button_processing+0xbc>
					button_0_state = BUTTON_PRESSED;
 8000902:	4b8d      	ldr	r3, [pc, #564]	; (8000b38 <fsm_button_processing+0x270>)
 8000904:	2201      	movs	r2, #1
 8000906:	701a      	strb	r2, [r3, #0]
					if(curr_ped_status==PED_OFF&&(status==MODE1||status==RED_GREEN||status==RED_AMBER||status==GREEN_RED||status==AMBER_RED)){
 8000908:	4b8a      	ldr	r3, [pc, #552]	; (8000b34 <fsm_button_processing+0x26c>)
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	2b01      	cmp	r3, #1
 800090e:	d139      	bne.n	8000984 <fsm_button_processing+0xbc>
 8000910:	4b8a      	ldr	r3, [pc, #552]	; (8000b3c <fsm_button_processing+0x274>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	2b00      	cmp	r3, #0
 8000916:	d00f      	beq.n	8000938 <fsm_button_processing+0x70>
 8000918:	4b88      	ldr	r3, [pc, #544]	; (8000b3c <fsm_button_processing+0x274>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	2b01      	cmp	r3, #1
 800091e:	d00b      	beq.n	8000938 <fsm_button_processing+0x70>
 8000920:	4b86      	ldr	r3, [pc, #536]	; (8000b3c <fsm_button_processing+0x274>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	2b02      	cmp	r3, #2
 8000926:	d007      	beq.n	8000938 <fsm_button_processing+0x70>
 8000928:	4b84      	ldr	r3, [pc, #528]	; (8000b3c <fsm_button_processing+0x274>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	2b03      	cmp	r3, #3
 800092e:	d003      	beq.n	8000938 <fsm_button_processing+0x70>
 8000930:	4b82      	ldr	r3, [pc, #520]	; (8000b3c <fsm_button_processing+0x274>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	2b04      	cmp	r3, #4
 8000936:	d125      	bne.n	8000984 <fsm_button_processing+0xbc>
						curr_ped_status=PED_ON;
 8000938:	4b7e      	ldr	r3, [pc, #504]	; (8000b34 <fsm_button_processing+0x26c>)
 800093a:	2200      	movs	r2, #0
 800093c:	701a      	strb	r2, [r3, #0]
						setTimer5(10*1000);
 800093e:	f242 7010 	movw	r0, #10000	; 0x2710
 8000942:	f000 fd1b 	bl	800137c <setTimer5>
					}
				}
				break;
 8000946:	e01d      	b.n	8000984 <fsm_button_processing+0xbc>
			case BUTTON_PRESSED:
				if (!is_button_pressed(0)) {
 8000948:	2000      	movs	r0, #0
 800094a:	f000 fa0b 	bl	8000d64 <is_button_pressed>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d103      	bne.n	800095c <fsm_button_processing+0x94>
					button_0_state = BUTTON_RELEASED;
 8000954:	4b78      	ldr	r3, [pc, #480]	; (8000b38 <fsm_button_processing+0x270>)
 8000956:	2200      	movs	r2, #0
 8000958:	701a      	strb	r2, [r3, #0]
				} else {
					if (is_button_pressed_1s(0)) {
						button_0_state = BUTTON_PRESSED_MORE_THAN_1_SECOND;
					}
				}
				break;
 800095a:	e015      	b.n	8000988 <fsm_button_processing+0xc0>
					if (is_button_pressed_1s(0)) {
 800095c:	2000      	movs	r0, #0
 800095e:	f000 fa1b 	bl	8000d98 <is_button_pressed_1s>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d00f      	beq.n	8000988 <fsm_button_processing+0xc0>
						button_0_state = BUTTON_PRESSED_MORE_THAN_1_SECOND;
 8000968:	4b73      	ldr	r3, [pc, #460]	; (8000b38 <fsm_button_processing+0x270>)
 800096a:	2202      	movs	r2, #2
 800096c:	701a      	strb	r2, [r3, #0]
				break;
 800096e:	e00b      	b.n	8000988 <fsm_button_processing+0xc0>
			case BUTTON_PRESSED_MORE_THAN_1_SECOND:
				if (!is_button_pressed(0)) {
 8000970:	2000      	movs	r0, #0
 8000972:	f000 f9f7 	bl	8000d64 <is_button_pressed>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d107      	bne.n	800098c <fsm_button_processing+0xc4>
					button_0_state = BUTTON_RELEASED;
 800097c:	4b6e      	ldr	r3, [pc, #440]	; (8000b38 <fsm_button_processing+0x270>)
 800097e:	2200      	movs	r2, #0
 8000980:	701a      	strb	r2, [r3, #0]
				}
				// do nothing, wait for the button to be released
				break;
 8000982:	e003      	b.n	800098c <fsm_button_processing+0xc4>
				break;
 8000984:	bf00      	nop
 8000986:	e002      	b.n	800098e <fsm_button_processing+0xc6>
				break;
 8000988:	bf00      	nop
 800098a:	e000      	b.n	800098e <fsm_button_processing+0xc6>
				break;
 800098c:	bf00      	nop
		}
	switch (button_1_state) {
 800098e:	4b6c      	ldr	r3, [pc, #432]	; (8000b40 <fsm_button_processing+0x278>)
 8000990:	781b      	ldrb	r3, [r3, #0]
 8000992:	2b02      	cmp	r3, #2
 8000994:	d040      	beq.n	8000a18 <fsm_button_processing+0x150>
 8000996:	2b02      	cmp	r3, #2
 8000998:	dc4d      	bgt.n	8000a36 <fsm_button_processing+0x16e>
 800099a:	2b00      	cmp	r3, #0
 800099c:	d002      	beq.n	80009a4 <fsm_button_processing+0xdc>
 800099e:	2b01      	cmp	r3, #1
 80009a0:	d026      	beq.n	80009f0 <fsm_button_processing+0x128>
 80009a2:	e048      	b.n	8000a36 <fsm_button_processing+0x16e>
		case BUTTON_RELEASED:
			if (is_button_pressed(1)) {
 80009a4:	2001      	movs	r0, #1
 80009a6:	f000 f9dd 	bl	8000d64 <is_button_pressed>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d03d      	beq.n	8000a2c <fsm_button_processing+0x164>
				button_1_state = BUTTON_PRESSED;
 80009b0:	4b63      	ldr	r3, [pc, #396]	; (8000b40 <fsm_button_processing+0x278>)
 80009b2:	2201      	movs	r2, #1
 80009b4:	701a      	strb	r2, [r3, #0]
				if (status == RED_GREEN) 	status = MODE2;
 80009b6:	4b61      	ldr	r3, [pc, #388]	; (8000b3c <fsm_button_processing+0x274>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	2b01      	cmp	r3, #1
 80009bc:	d102      	bne.n	80009c4 <fsm_button_processing+0xfc>
 80009be:	4b5f      	ldr	r3, [pc, #380]	; (8000b3c <fsm_button_processing+0x274>)
 80009c0:	2205      	movs	r2, #5
 80009c2:	601a      	str	r2, [r3, #0]
				if (status == AUTO_RED) 	status = MODE3;
 80009c4:	4b5d      	ldr	r3, [pc, #372]	; (8000b3c <fsm_button_processing+0x274>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	2b06      	cmp	r3, #6
 80009ca:	d102      	bne.n	80009d2 <fsm_button_processing+0x10a>
 80009cc:	4b5b      	ldr	r3, [pc, #364]	; (8000b3c <fsm_button_processing+0x274>)
 80009ce:	2208      	movs	r2, #8
 80009d0:	601a      	str	r2, [r3, #0]
				if (status == AUTO_AMBER) 	status = MODE4;
 80009d2:	4b5a      	ldr	r3, [pc, #360]	; (8000b3c <fsm_button_processing+0x274>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	2b09      	cmp	r3, #9
 80009d8:	d102      	bne.n	80009e0 <fsm_button_processing+0x118>
 80009da:	4b58      	ldr	r3, [pc, #352]	; (8000b3c <fsm_button_processing+0x274>)
 80009dc:	220b      	movs	r2, #11
 80009de:	601a      	str	r2, [r3, #0]
				if (status == AUTO_GREEN) 	status = MODE1;
 80009e0:	4b56      	ldr	r3, [pc, #344]	; (8000b3c <fsm_button_processing+0x274>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	2b0c      	cmp	r3, #12
 80009e6:	d121      	bne.n	8000a2c <fsm_button_processing+0x164>
 80009e8:	4b54      	ldr	r3, [pc, #336]	; (8000b3c <fsm_button_processing+0x274>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	601a      	str	r2, [r3, #0]
			}
			break;
 80009ee:	e01d      	b.n	8000a2c <fsm_button_processing+0x164>
		case BUTTON_PRESSED:
			if (!is_button_pressed(1)) {
 80009f0:	2001      	movs	r0, #1
 80009f2:	f000 f9b7 	bl	8000d64 <is_button_pressed>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d103      	bne.n	8000a04 <fsm_button_processing+0x13c>
				button_1_state = BUTTON_RELEASED;
 80009fc:	4b50      	ldr	r3, [pc, #320]	; (8000b40 <fsm_button_processing+0x278>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	701a      	strb	r2, [r3, #0]
			} else {
				if (is_button_pressed_1s(1)) {
					button_1_state = BUTTON_PRESSED_MORE_THAN_1_SECOND;
				}
			}
			break;
 8000a02:	e015      	b.n	8000a30 <fsm_button_processing+0x168>
				if (is_button_pressed_1s(1)) {
 8000a04:	2001      	movs	r0, #1
 8000a06:	f000 f9c7 	bl	8000d98 <is_button_pressed_1s>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d00f      	beq.n	8000a30 <fsm_button_processing+0x168>
					button_1_state = BUTTON_PRESSED_MORE_THAN_1_SECOND;
 8000a10:	4b4b      	ldr	r3, [pc, #300]	; (8000b40 <fsm_button_processing+0x278>)
 8000a12:	2202      	movs	r2, #2
 8000a14:	701a      	strb	r2, [r3, #0]
			break;
 8000a16:	e00b      	b.n	8000a30 <fsm_button_processing+0x168>
		case BUTTON_PRESSED_MORE_THAN_1_SECOND:
			if (!is_button_pressed(1)) {
 8000a18:	2001      	movs	r0, #1
 8000a1a:	f000 f9a3 	bl	8000d64 <is_button_pressed>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d107      	bne.n	8000a34 <fsm_button_processing+0x16c>
				button_1_state = BUTTON_RELEASED;
 8000a24:	4b46      	ldr	r3, [pc, #280]	; (8000b40 <fsm_button_processing+0x278>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	701a      	strb	r2, [r3, #0]
			}
			// do nothing, wait for the button to be released
			break;
 8000a2a:	e003      	b.n	8000a34 <fsm_button_processing+0x16c>
			break;
 8000a2c:	bf00      	nop
 8000a2e:	e002      	b.n	8000a36 <fsm_button_processing+0x16e>
			break;
 8000a30:	bf00      	nop
 8000a32:	e000      	b.n	8000a36 <fsm_button_processing+0x16e>
			break;
 8000a34:	bf00      	nop
	}

	switch (button_2_state) {
 8000a36:	4b43      	ldr	r3, [pc, #268]	; (8000b44 <fsm_button_processing+0x27c>)
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	2b02      	cmp	r3, #2
 8000a3c:	d06a      	beq.n	8000b14 <fsm_button_processing+0x24c>
 8000a3e:	2b02      	cmp	r3, #2
 8000a40:	f300 8089 	bgt.w	8000b56 <fsm_button_processing+0x28e>
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d002      	beq.n	8000a4e <fsm_button_processing+0x186>
 8000a48:	2b01      	cmp	r3, #1
 8000a4a:	d04f      	beq.n	8000aec <fsm_button_processing+0x224>
 8000a4c:	e083      	b.n	8000b56 <fsm_button_processing+0x28e>
		case BUTTON_RELEASED:
			if (is_button_pressed(2)) {
 8000a4e:	2002      	movs	r0, #2
 8000a50:	f000 f988 	bl	8000d64 <is_button_pressed>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d066      	beq.n	8000b28 <fsm_button_processing+0x260>
				button_2_state = BUTTON_PRESSED;
 8000a5a:	4b3a      	ldr	r3, [pc, #232]	; (8000b44 <fsm_button_processing+0x27c>)
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	701a      	strb	r2, [r3, #0]
				if (status == AUTO_RED || status == ADJ_RED) {
 8000a60:	4b36      	ldr	r3, [pc, #216]	; (8000b3c <fsm_button_processing+0x274>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	2b06      	cmp	r3, #6
 8000a66:	d003      	beq.n	8000a70 <fsm_button_processing+0x1a8>
 8000a68:	4b34      	ldr	r3, [pc, #208]	; (8000b3c <fsm_button_processing+0x274>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	2b07      	cmp	r3, #7
 8000a6e:	d10e      	bne.n	8000a8e <fsm_button_processing+0x1c6>
					status = ADJ_RED;
 8000a70:	4b32      	ldr	r3, [pc, #200]	; (8000b3c <fsm_button_processing+0x274>)
 8000a72:	2207      	movs	r2, #7
 8000a74:	601a      	str	r2, [r3, #0]
					T_RED++;
 8000a76:	4b34      	ldr	r3, [pc, #208]	; (8000b48 <fsm_button_processing+0x280>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	3301      	adds	r3, #1
 8000a7c:	4a32      	ldr	r2, [pc, #200]	; (8000b48 <fsm_button_processing+0x280>)
 8000a7e:	6013      	str	r3, [r2, #0]
					if (T_RED >= 99) T_RED = 1;
 8000a80:	4b31      	ldr	r3, [pc, #196]	; (8000b48 <fsm_button_processing+0x280>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	2b62      	cmp	r3, #98	; 0x62
 8000a86:	dd02      	ble.n	8000a8e <fsm_button_processing+0x1c6>
 8000a88:	4b2f      	ldr	r3, [pc, #188]	; (8000b48 <fsm_button_processing+0x280>)
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	601a      	str	r2, [r3, #0]
//					update7SEG_buffer_manual(2, T_RED);
				}
				if (status == AUTO_AMBER || status == ADJ_AMBER) {
 8000a8e:	4b2b      	ldr	r3, [pc, #172]	; (8000b3c <fsm_button_processing+0x274>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	2b09      	cmp	r3, #9
 8000a94:	d003      	beq.n	8000a9e <fsm_button_processing+0x1d6>
 8000a96:	4b29      	ldr	r3, [pc, #164]	; (8000b3c <fsm_button_processing+0x274>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	2b0a      	cmp	r3, #10
 8000a9c:	d10e      	bne.n	8000abc <fsm_button_processing+0x1f4>
					status = ADJ_AMBER;
 8000a9e:	4b27      	ldr	r3, [pc, #156]	; (8000b3c <fsm_button_processing+0x274>)
 8000aa0:	220a      	movs	r2, #10
 8000aa2:	601a      	str	r2, [r3, #0]
					T_AMBER++;
 8000aa4:	4b29      	ldr	r3, [pc, #164]	; (8000b4c <fsm_button_processing+0x284>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	3301      	adds	r3, #1
 8000aaa:	4a28      	ldr	r2, [pc, #160]	; (8000b4c <fsm_button_processing+0x284>)
 8000aac:	6013      	str	r3, [r2, #0]
					if (T_AMBER >= 5) T_AMBER = 1;
 8000aae:	4b27      	ldr	r3, [pc, #156]	; (8000b4c <fsm_button_processing+0x284>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	2b04      	cmp	r3, #4
 8000ab4:	dd02      	ble.n	8000abc <fsm_button_processing+0x1f4>
 8000ab6:	4b25      	ldr	r3, [pc, #148]	; (8000b4c <fsm_button_processing+0x284>)
 8000ab8:	2201      	movs	r2, #1
 8000aba:	601a      	str	r2, [r3, #0]
//					update7SEG_buffer_manual(3, T_AMBER);
				}
				if (status == AUTO_GREEN || status == ADJ_GREEN) {
 8000abc:	4b1f      	ldr	r3, [pc, #124]	; (8000b3c <fsm_button_processing+0x274>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	2b0c      	cmp	r3, #12
 8000ac2:	d003      	beq.n	8000acc <fsm_button_processing+0x204>
 8000ac4:	4b1d      	ldr	r3, [pc, #116]	; (8000b3c <fsm_button_processing+0x274>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	2b0d      	cmp	r3, #13
 8000aca:	d12d      	bne.n	8000b28 <fsm_button_processing+0x260>
					status = ADJ_GREEN;
 8000acc:	4b1b      	ldr	r3, [pc, #108]	; (8000b3c <fsm_button_processing+0x274>)
 8000ace:	220d      	movs	r2, #13
 8000ad0:	601a      	str	r2, [r3, #0]
					T_GREEN++;
 8000ad2:	4b1f      	ldr	r3, [pc, #124]	; (8000b50 <fsm_button_processing+0x288>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	3301      	adds	r3, #1
 8000ad8:	4a1d      	ldr	r2, [pc, #116]	; (8000b50 <fsm_button_processing+0x288>)
 8000ada:	6013      	str	r3, [r2, #0]
					if (T_GREEN >= 99) T_GREEN = 1;
 8000adc:	4b1c      	ldr	r3, [pc, #112]	; (8000b50 <fsm_button_processing+0x288>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	2b62      	cmp	r3, #98	; 0x62
 8000ae2:	dd21      	ble.n	8000b28 <fsm_button_processing+0x260>
 8000ae4:	4b1a      	ldr	r3, [pc, #104]	; (8000b50 <fsm_button_processing+0x288>)
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	601a      	str	r2, [r3, #0]
//					update7SEG_buffer_manual(4, T_GREEN);
				}
			}
			break;
 8000aea:	e01d      	b.n	8000b28 <fsm_button_processing+0x260>
		case BUTTON_PRESSED:
			if (!is_button_pressed(2)) {
 8000aec:	2002      	movs	r0, #2
 8000aee:	f000 f939 	bl	8000d64 <is_button_pressed>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d103      	bne.n	8000b00 <fsm_button_processing+0x238>
				button_2_state = BUTTON_RELEASED;
 8000af8:	4b12      	ldr	r3, [pc, #72]	; (8000b44 <fsm_button_processing+0x27c>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	701a      	strb	r2, [r3, #0]
			} else {
				if (is_button_pressed_1s(2)) {
					button_2_state = BUTTON_PRESSED_MORE_THAN_1_SECOND;
				}
			}
			break;
 8000afe:	e015      	b.n	8000b2c <fsm_button_processing+0x264>
				if (is_button_pressed_1s(2)) {
 8000b00:	2002      	movs	r0, #2
 8000b02:	f000 f949 	bl	8000d98 <is_button_pressed_1s>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d00f      	beq.n	8000b2c <fsm_button_processing+0x264>
					button_2_state = BUTTON_PRESSED_MORE_THAN_1_SECOND;
 8000b0c:	4b0d      	ldr	r3, [pc, #52]	; (8000b44 <fsm_button_processing+0x27c>)
 8000b0e:	2202      	movs	r2, #2
 8000b10:	701a      	strb	r2, [r3, #0]
			break;
 8000b12:	e00b      	b.n	8000b2c <fsm_button_processing+0x264>
		case BUTTON_PRESSED_MORE_THAN_1_SECOND:
			if (!is_button_pressed(2)) {
 8000b14:	2002      	movs	r0, #2
 8000b16:	f000 f925 	bl	8000d64 <is_button_pressed>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d119      	bne.n	8000b54 <fsm_button_processing+0x28c>
				button_2_state = BUTTON_RELEASED;
 8000b20:	4b08      	ldr	r3, [pc, #32]	; (8000b44 <fsm_button_processing+0x27c>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	701a      	strb	r2, [r3, #0]
			}
			// do nothing, wait for the button to be released
			break;
 8000b26:	e015      	b.n	8000b54 <fsm_button_processing+0x28c>
			break;
 8000b28:	bf00      	nop
 8000b2a:	e014      	b.n	8000b56 <fsm_button_processing+0x28e>
			break;
 8000b2c:	bf00      	nop
 8000b2e:	e012      	b.n	8000b56 <fsm_button_processing+0x28e>
 8000b30:	20000144 	.word	0x20000144
 8000b34:	20000010 	.word	0x20000010
 8000b38:	2000001c 	.word	0x2000001c
 8000b3c:	2000000c 	.word	0x2000000c
 8000b40:	2000001d 	.word	0x2000001d
 8000b44:	2000001e 	.word	0x2000001e
 8000b48:	20000000 	.word	0x20000000
 8000b4c:	20000004 	.word	0x20000004
 8000b50:	20000008 	.word	0x20000008
			break;
 8000b54:	bf00      	nop
	}

	switch (button_3_state) {
 8000b56:	4b43      	ldr	r3, [pc, #268]	; (8000c64 <fsm_button_processing+0x39c>)
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	2b02      	cmp	r3, #2
 8000b5c:	d071      	beq.n	8000c42 <fsm_button_processing+0x37a>
 8000b5e:	2b02      	cmp	r3, #2
 8000b60:	dc7e      	bgt.n	8000c60 <fsm_button_processing+0x398>
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d002      	beq.n	8000b6c <fsm_button_processing+0x2a4>
 8000b66:	2b01      	cmp	r3, #1
 8000b68:	d057      	beq.n	8000c1a <fsm_button_processing+0x352>
				button_3_state = BUTTON_RELEASED;
			}
			// do nothing, wait for the button to be released
			break;
	}
}
 8000b6a:	e079      	b.n	8000c60 <fsm_button_processing+0x398>
			if (is_button_pressed(3)) {
 8000b6c:	2003      	movs	r0, #3
 8000b6e:	f000 f8f9 	bl	8000d64 <is_button_pressed>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d06e      	beq.n	8000c56 <fsm_button_processing+0x38e>
				button_3_state = BUTTON_PRESSED;
 8000b78:	4b3a      	ldr	r3, [pc, #232]	; (8000c64 <fsm_button_processing+0x39c>)
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	701a      	strb	r2, [r3, #0]
				if (status == ADJ_RED) {
 8000b7e:	4b3a      	ldr	r3, [pc, #232]	; (8000c68 <fsm_button_processing+0x3a0>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	2b07      	cmp	r3, #7
 8000b84:	d114      	bne.n	8000bb0 <fsm_button_processing+0x2e8>
					status = AUTO_RED;
 8000b86:	4b38      	ldr	r3, [pc, #224]	; (8000c68 <fsm_button_processing+0x3a0>)
 8000b88:	2206      	movs	r2, #6
 8000b8a:	601a      	str	r2, [r3, #0]
					if (T_RED <= T_AMBER) T_RED = T_AMBER + 1;
 8000b8c:	4b37      	ldr	r3, [pc, #220]	; (8000c6c <fsm_button_processing+0x3a4>)
 8000b8e:	681a      	ldr	r2, [r3, #0]
 8000b90:	4b37      	ldr	r3, [pc, #220]	; (8000c70 <fsm_button_processing+0x3a8>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	429a      	cmp	r2, r3
 8000b96:	dc04      	bgt.n	8000ba2 <fsm_button_processing+0x2da>
 8000b98:	4b35      	ldr	r3, [pc, #212]	; (8000c70 <fsm_button_processing+0x3a8>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	3301      	adds	r3, #1
 8000b9e:	4a33      	ldr	r2, [pc, #204]	; (8000c6c <fsm_button_processing+0x3a4>)
 8000ba0:	6013      	str	r3, [r2, #0]
					T_GREEN = T_RED - T_AMBER;
 8000ba2:	4b32      	ldr	r3, [pc, #200]	; (8000c6c <fsm_button_processing+0x3a4>)
 8000ba4:	681a      	ldr	r2, [r3, #0]
 8000ba6:	4b32      	ldr	r3, [pc, #200]	; (8000c70 <fsm_button_processing+0x3a8>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	1ad3      	subs	r3, r2, r3
 8000bac:	4a31      	ldr	r2, [pc, #196]	; (8000c74 <fsm_button_processing+0x3ac>)
 8000bae:	6013      	str	r3, [r2, #0]
				if (status == ADJ_AMBER) {
 8000bb0:	4b2d      	ldr	r3, [pc, #180]	; (8000c68 <fsm_button_processing+0x3a0>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	2b0a      	cmp	r3, #10
 8000bb6:	d114      	bne.n	8000be2 <fsm_button_processing+0x31a>
					status = AUTO_AMBER;
 8000bb8:	4b2b      	ldr	r3, [pc, #172]	; (8000c68 <fsm_button_processing+0x3a0>)
 8000bba:	2209      	movs	r2, #9
 8000bbc:	601a      	str	r2, [r3, #0]
					if (T_RED <= T_AMBER) T_RED = T_AMBER + 1;
 8000bbe:	4b2b      	ldr	r3, [pc, #172]	; (8000c6c <fsm_button_processing+0x3a4>)
 8000bc0:	681a      	ldr	r2, [r3, #0]
 8000bc2:	4b2b      	ldr	r3, [pc, #172]	; (8000c70 <fsm_button_processing+0x3a8>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	429a      	cmp	r2, r3
 8000bc8:	dc04      	bgt.n	8000bd4 <fsm_button_processing+0x30c>
 8000bca:	4b29      	ldr	r3, [pc, #164]	; (8000c70 <fsm_button_processing+0x3a8>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	3301      	adds	r3, #1
 8000bd0:	4a26      	ldr	r2, [pc, #152]	; (8000c6c <fsm_button_processing+0x3a4>)
 8000bd2:	6013      	str	r3, [r2, #0]
					T_GREEN = T_RED - T_AMBER;
 8000bd4:	4b25      	ldr	r3, [pc, #148]	; (8000c6c <fsm_button_processing+0x3a4>)
 8000bd6:	681a      	ldr	r2, [r3, #0]
 8000bd8:	4b25      	ldr	r3, [pc, #148]	; (8000c70 <fsm_button_processing+0x3a8>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	1ad3      	subs	r3, r2, r3
 8000bde:	4a25      	ldr	r2, [pc, #148]	; (8000c74 <fsm_button_processing+0x3ac>)
 8000be0:	6013      	str	r3, [r2, #0]
				if (status == ADJ_GREEN) {
 8000be2:	4b21      	ldr	r3, [pc, #132]	; (8000c68 <fsm_button_processing+0x3a0>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	2b0d      	cmp	r3, #13
 8000be8:	d135      	bne.n	8000c56 <fsm_button_processing+0x38e>
					status = AUTO_GREEN;
 8000bea:	4b1f      	ldr	r3, [pc, #124]	; (8000c68 <fsm_button_processing+0x3a0>)
 8000bec:	220c      	movs	r2, #12
 8000bee:	601a      	str	r2, [r3, #0]
					if (T_AMBER + T_GREEN >= 99) {
 8000bf0:	4b1f      	ldr	r3, [pc, #124]	; (8000c70 <fsm_button_processing+0x3a8>)
 8000bf2:	681a      	ldr	r2, [r3, #0]
 8000bf4:	4b1f      	ldr	r3, [pc, #124]	; (8000c74 <fsm_button_processing+0x3ac>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4413      	add	r3, r2
 8000bfa:	2b62      	cmp	r3, #98	; 0x62
 8000bfc:	dd05      	ble.n	8000c0a <fsm_button_processing+0x342>
						T_AMBER = 4;
 8000bfe:	4b1c      	ldr	r3, [pc, #112]	; (8000c70 <fsm_button_processing+0x3a8>)
 8000c00:	2204      	movs	r2, #4
 8000c02:	601a      	str	r2, [r3, #0]
						T_GREEN = 95;
 8000c04:	4b1b      	ldr	r3, [pc, #108]	; (8000c74 <fsm_button_processing+0x3ac>)
 8000c06:	225f      	movs	r2, #95	; 0x5f
 8000c08:	601a      	str	r2, [r3, #0]
					T_RED = T_AMBER + T_GREEN;
 8000c0a:	4b19      	ldr	r3, [pc, #100]	; (8000c70 <fsm_button_processing+0x3a8>)
 8000c0c:	681a      	ldr	r2, [r3, #0]
 8000c0e:	4b19      	ldr	r3, [pc, #100]	; (8000c74 <fsm_button_processing+0x3ac>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4413      	add	r3, r2
 8000c14:	4a15      	ldr	r2, [pc, #84]	; (8000c6c <fsm_button_processing+0x3a4>)
 8000c16:	6013      	str	r3, [r2, #0]
			break;
 8000c18:	e01d      	b.n	8000c56 <fsm_button_processing+0x38e>
			if (!is_button_pressed(3)) {
 8000c1a:	2003      	movs	r0, #3
 8000c1c:	f000 f8a2 	bl	8000d64 <is_button_pressed>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d103      	bne.n	8000c2e <fsm_button_processing+0x366>
				button_3_state = BUTTON_RELEASED;
 8000c26:	4b0f      	ldr	r3, [pc, #60]	; (8000c64 <fsm_button_processing+0x39c>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	701a      	strb	r2, [r3, #0]
			break;
 8000c2c:	e015      	b.n	8000c5a <fsm_button_processing+0x392>
				if (is_button_pressed_1s(3)) {
 8000c2e:	2003      	movs	r0, #3
 8000c30:	f000 f8b2 	bl	8000d98 <is_button_pressed_1s>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d00f      	beq.n	8000c5a <fsm_button_processing+0x392>
					button_3_state = BUTTON_PRESSED_MORE_THAN_1_SECOND;
 8000c3a:	4b0a      	ldr	r3, [pc, #40]	; (8000c64 <fsm_button_processing+0x39c>)
 8000c3c:	2202      	movs	r2, #2
 8000c3e:	701a      	strb	r2, [r3, #0]
			break;
 8000c40:	e00b      	b.n	8000c5a <fsm_button_processing+0x392>
			if (!is_button_pressed(3)) {
 8000c42:	2003      	movs	r0, #3
 8000c44:	f000 f88e 	bl	8000d64 <is_button_pressed>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d107      	bne.n	8000c5e <fsm_button_processing+0x396>
				button_3_state = BUTTON_RELEASED;
 8000c4e:	4b05      	ldr	r3, [pc, #20]	; (8000c64 <fsm_button_processing+0x39c>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	701a      	strb	r2, [r3, #0]
			break;
 8000c54:	e003      	b.n	8000c5e <fsm_button_processing+0x396>
			break;
 8000c56:	bf00      	nop
 8000c58:	e002      	b.n	8000c60 <fsm_button_processing+0x398>
			break;
 8000c5a:	bf00      	nop
 8000c5c:	e000      	b.n	8000c60 <fsm_button_processing+0x398>
			break;
 8000c5e:	bf00      	nop
}
 8000c60:	bf00      	nop
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	2000001f 	.word	0x2000001f
 8000c68:	2000000c 	.word	0x2000000c
 8000c6c:	20000000 	.word	0x20000000
 8000c70:	20000004 	.word	0x20000004
 8000c74:	20000008 	.word	0x20000008

08000c78 <button_reading>:
static uint16_t counterForButtonPress1s[N0_OF_BUTTONS];

static GPIO_TypeDef* button_ports[N0_OF_BUTTONS] = {A0_PedButton_GPIO_Port, A1_Button1_GPIO_Port, A2_Button2_GPIO_Port, A3_Button3_GPIO_Port};
static uint16_t button_pins[N0_OF_BUTTONS] = {A0_PedButton_Pin, A1_Button1_Pin, A2_Button2_Pin, A3_Button3_Pin};

void button_reading(void) {
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
	for (int i = 0; i < N0_OF_BUTTONS; i++) {
 8000c7e:	2300      	movs	r3, #0
 8000c80:	607b      	str	r3, [r7, #4]
 8000c82:	e058      	b.n	8000d36 <button_reading+0xbe>
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 8000c84:	4a30      	ldr	r2, [pc, #192]	; (8000d48 <button_reading+0xd0>)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	4413      	add	r3, r2
 8000c8a:	7819      	ldrb	r1, [r3, #0]
 8000c8c:	4a2f      	ldr	r2, [pc, #188]	; (8000d4c <button_reading+0xd4>)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	4413      	add	r3, r2
 8000c92:	460a      	mov	r2, r1
 8000c94:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(button_ports[i], button_pins[i]);
 8000c96:	4a2e      	ldr	r2, [pc, #184]	; (8000d50 <button_reading+0xd8>)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000c9e:	492d      	ldr	r1, [pc, #180]	; (8000d54 <button_reading+0xdc>)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	4610      	mov	r0, r2
 8000caa:	f000 ff47 	bl	8001b3c <HAL_GPIO_ReadPin>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	4a25      	ldr	r2, [pc, #148]	; (8000d48 <button_reading+0xd0>)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	4413      	add	r3, r2
 8000cb8:	460a      	mov	r2, r1
 8000cba:	701a      	strb	r2, [r3, #0]

		if (debounceButtonBuffer1[i] == debounceButtonBuffer2[i])
 8000cbc:	4a22      	ldr	r2, [pc, #136]	; (8000d48 <button_reading+0xd0>)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	4413      	add	r3, r2
 8000cc2:	781a      	ldrb	r2, [r3, #0]
 8000cc4:	4921      	ldr	r1, [pc, #132]	; (8000d4c <button_reading+0xd4>)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	440b      	add	r3, r1
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	429a      	cmp	r2, r3
 8000cce:	d108      	bne.n	8000ce2 <button_reading+0x6a>
			buttonBuffer[i] = debounceButtonBuffer1[i];
 8000cd0:	4a1d      	ldr	r2, [pc, #116]	; (8000d48 <button_reading+0xd0>)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	4413      	add	r3, r2
 8000cd6:	7819      	ldrb	r1, [r3, #0]
 8000cd8:	4a1f      	ldr	r2, [pc, #124]	; (8000d58 <button_reading+0xe0>)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	4413      	add	r3, r2
 8000cde:	460a      	mov	r2, r1
 8000ce0:	701a      	strb	r2, [r3, #0]

		if (buttonBuffer[i] == BUTTON_IS_PRESSED) {
 8000ce2:	4a1d      	ldr	r2, [pc, #116]	; (8000d58 <button_reading+0xe0>)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	4413      	add	r3, r2
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d116      	bne.n	8000d1c <button_reading+0xa4>
			//if a button is pressed, we start counting
			if (counterForButtonPress1s[i] < DURATION_FOR_AUTO_INCREASING) {
 8000cee:	4a1b      	ldr	r2, [pc, #108]	; (8000d5c <button_reading+0xe4>)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000cf6:	2b63      	cmp	r3, #99	; 0x63
 8000cf8:	d80a      	bhi.n	8000d10 <button_reading+0x98>
				counterForButtonPress1s[i]++;
 8000cfa:	4a18      	ldr	r2, [pc, #96]	; (8000d5c <button_reading+0xe4>)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d02:	3301      	adds	r3, #1
 8000d04:	b299      	uxth	r1, r3
 8000d06:	4a15      	ldr	r2, [pc, #84]	; (8000d5c <button_reading+0xe4>)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000d0e:	e00f      	b.n	8000d30 <button_reading+0xb8>
			} else {
				//the flag is turned on when 1 second has passed
				//since the button is pressed.
				flagForButtonPress1s[i] = 1;
 8000d10:	4a13      	ldr	r2, [pc, #76]	; (8000d60 <button_reading+0xe8>)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	4413      	add	r3, r2
 8000d16:	2201      	movs	r2, #1
 8000d18:	701a      	strb	r2, [r3, #0]
 8000d1a:	e009      	b.n	8000d30 <button_reading+0xb8>
			}
		} else {
			counterForButtonPress1s[i] = 0;
 8000d1c:	4a0f      	ldr	r2, [pc, #60]	; (8000d5c <button_reading+0xe4>)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	2100      	movs	r1, #0
 8000d22:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			flagForButtonPress1s[i] = 0;
 8000d26:	4a0e      	ldr	r2, [pc, #56]	; (8000d60 <button_reading+0xe8>)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	4413      	add	r3, r2
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < N0_OF_BUTTONS; i++) {
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	3301      	adds	r3, #1
 8000d34:	607b      	str	r3, [r7, #4]
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	2b03      	cmp	r3, #3
 8000d3a:	dda3      	ble.n	8000c84 <button_reading+0xc>
		}
	}
}
 8000d3c:	bf00      	nop
 8000d3e:	bf00      	nop
 8000d40:	3708      	adds	r7, #8
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	20000070 	.word	0x20000070
 8000d4c:	20000074 	.word	0x20000074
 8000d50:	20000020 	.word	0x20000020
 8000d54:	20000030 	.word	0x20000030
 8000d58:	2000006c 	.word	0x2000006c
 8000d5c:	2000007c 	.word	0x2000007c
 8000d60:	20000078 	.word	0x20000078

08000d64 <is_button_pressed>:

unsigned char is_button_pressed(uint8_t index){
 8000d64:	b480      	push	{r7}
 8000d66:	b083      	sub	sp, #12
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	71fb      	strb	r3, [r7, #7]
	if (index >= N0_OF_BUTTONS) return 0;
 8000d6e:	79fb      	ldrb	r3, [r7, #7]
 8000d70:	2b03      	cmp	r3, #3
 8000d72:	d901      	bls.n	8000d78 <is_button_pressed+0x14>
 8000d74:	2300      	movs	r3, #0
 8000d76:	e007      	b.n	8000d88 <is_button_pressed+0x24>
	return (buttonBuffer[index] == BUTTON_IS_PRESSED);
 8000d78:	79fb      	ldrb	r3, [r7, #7]
 8000d7a:	4a06      	ldr	r2, [pc, #24]	; (8000d94 <is_button_pressed+0x30>)
 8000d7c:	5cd3      	ldrb	r3, [r2, r3]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	bf0c      	ite	eq
 8000d82:	2301      	moveq	r3, #1
 8000d84:	2300      	movne	r3, #0
 8000d86:	b2db      	uxtb	r3, r3
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	370c      	adds	r7, #12
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bc80      	pop	{r7}
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	2000006c 	.word	0x2000006c

08000d98 <is_button_pressed_1s>:

unsigned char is_button_pressed_1s(unsigned char index){
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	4603      	mov	r3, r0
 8000da0:	71fb      	strb	r3, [r7, #7]
	if (index >= N0_OF_BUTTONS) return 0;
 8000da2:	79fb      	ldrb	r3, [r7, #7]
 8000da4:	2b03      	cmp	r3, #3
 8000da6:	d901      	bls.n	8000dac <is_button_pressed_1s+0x14>
 8000da8:	2300      	movs	r3, #0
 8000daa:	e007      	b.n	8000dbc <is_button_pressed_1s+0x24>
	return (flagForButtonPress1s[index] == 1);
 8000dac:	79fb      	ldrb	r3, [r7, #7]
 8000dae:	4a06      	ldr	r2, [pc, #24]	; (8000dc8 <is_button_pressed_1s+0x30>)
 8000db0:	5cd3      	ldrb	r3, [r2, r3]
 8000db2:	2b01      	cmp	r3, #1
 8000db4:	bf0c      	ite	eq
 8000db6:	2301      	moveq	r3, #1
 8000db8:	2300      	movne	r3, #0
 8000dba:	b2db      	uxtb	r3, r3
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	370c      	adds	r7, #12
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bc80      	pop	{r7}
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	20000078 	.word	0x20000078

08000dcc <buzzer>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void buzzer(int vol){
 8000dcc:	b480      	push	{r7}
 8000dce:	b083      	sub	sp, #12
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, vol);
 8000dd4:	4b04      	ldr	r3, [pc, #16]	; (8000de8 <buzzer+0x1c>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	687a      	ldr	r2, [r7, #4]
 8000dda:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000ddc:	bf00      	nop
 8000dde:	370c      	adds	r7, #12
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bc80      	pop	{r7}
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	200000cc 	.word	0x200000cc

08000dec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000df0:	f000 fbb0 	bl	8001554 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000df4:	f000 f824 	bl	8000e40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000df8:	f000 f926 	bl	8001048 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000dfc:	f000 f862 	bl	8000ec4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000e00:	f000 f8ac 	bl	8000f5c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000e04:	480c      	ldr	r0, [pc, #48]	; (8000e38 <main+0x4c>)
 8000e06:	f001 faf7 	bl	80023f8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8000e0a:	480c      	ldr	r0, [pc, #48]	; (8000e3c <main+0x50>)
 8000e0c:	f001 faf4 	bl	80023f8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000e10:	2100      	movs	r1, #0
 8000e12:	480a      	ldr	r0, [pc, #40]	; (8000e3c <main+0x50>)
 8000e14:	f001 fb9a 	bl	800254c <HAL_TIM_PWM_Start>
  setTimer6(500);
 8000e18:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e1c:	f000 fac8 	bl	80013b0 <setTimer6>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  fsm_automatic();
 8000e20:	f7ff f994 	bl	800014c <fsm_automatic>
	  fsm_red_manual();
 8000e24:	f7ff fa34 	bl	8000290 <fsm_red_manual>
	  fsm_amber_manual();
 8000e28:	f7ff fa6a 	bl	8000300 <fsm_amber_manual>
	  fsm_green_manual();
 8000e2c:	f7ff faa0 	bl	8000370 <fsm_green_manual>
	  fsm_button_processing();
 8000e30:	f7ff fd4a 	bl	80008c8 <fsm_button_processing>
	  fsm_automatic();
 8000e34:	e7f4      	b.n	8000e20 <main+0x34>
 8000e36:	bf00      	nop
 8000e38:	20000084 	.word	0x20000084
 8000e3c:	200000cc 	.word	0x200000cc

08000e40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b090      	sub	sp, #64	; 0x40
 8000e44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e46:	f107 0318 	add.w	r3, r7, #24
 8000e4a:	2228      	movs	r2, #40	; 0x28
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f002 f9e8 	bl	8003224 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e54:	1d3b      	adds	r3, r7, #4
 8000e56:	2200      	movs	r2, #0
 8000e58:	601a      	str	r2, [r3, #0]
 8000e5a:	605a      	str	r2, [r3, #4]
 8000e5c:	609a      	str	r2, [r3, #8]
 8000e5e:	60da      	str	r2, [r3, #12]
 8000e60:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e62:	2302      	movs	r3, #2
 8000e64:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e66:	2301      	movs	r3, #1
 8000e68:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e6a:	2310      	movs	r3, #16
 8000e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e6e:	2302      	movs	r3, #2
 8000e70:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000e72:	2300      	movs	r3, #0
 8000e74:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000e76:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000e7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e7c:	f107 0318 	add.w	r3, r7, #24
 8000e80:	4618      	mov	r0, r3
 8000e82:	f000 fe8b 	bl	8001b9c <HAL_RCC_OscConfig>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000e8c:	f000 f956 	bl	800113c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e90:	230f      	movs	r3, #15
 8000e92:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e94:	2302      	movs	r3, #2
 8000e96:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ea0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ea6:	1d3b      	adds	r3, r7, #4
 8000ea8:	2102      	movs	r1, #2
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f001 f8f8 	bl	80020a0 <HAL_RCC_ClockConfig>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000eb6:	f000 f941 	bl	800113c <Error_Handler>
  }
}
 8000eba:	bf00      	nop
 8000ebc:	3740      	adds	r7, #64	; 0x40
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
	...

08000ec4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b086      	sub	sp, #24
 8000ec8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000eca:	f107 0308 	add.w	r3, r7, #8
 8000ece:	2200      	movs	r2, #0
 8000ed0:	601a      	str	r2, [r3, #0]
 8000ed2:	605a      	str	r2, [r3, #4]
 8000ed4:	609a      	str	r2, [r3, #8]
 8000ed6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ed8:	463b      	mov	r3, r7
 8000eda:	2200      	movs	r2, #0
 8000edc:	601a      	str	r2, [r3, #0]
 8000ede:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ee0:	4b1d      	ldr	r3, [pc, #116]	; (8000f58 <MX_TIM2_Init+0x94>)
 8000ee2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ee6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63999;
 8000ee8:	4b1b      	ldr	r3, [pc, #108]	; (8000f58 <MX_TIM2_Init+0x94>)
 8000eea:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8000eee:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ef0:	4b19      	ldr	r3, [pc, #100]	; (8000f58 <MX_TIM2_Init+0x94>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000ef6:	4b18      	ldr	r3, [pc, #96]	; (8000f58 <MX_TIM2_Init+0x94>)
 8000ef8:	2209      	movs	r2, #9
 8000efa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000efc:	4b16      	ldr	r3, [pc, #88]	; (8000f58 <MX_TIM2_Init+0x94>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f02:	4b15      	ldr	r3, [pc, #84]	; (8000f58 <MX_TIM2_Init+0x94>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f08:	4813      	ldr	r0, [pc, #76]	; (8000f58 <MX_TIM2_Init+0x94>)
 8000f0a:	f001 fa25 	bl	8002358 <HAL_TIM_Base_Init>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000f14:	f000 f912 	bl	800113c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f1c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f1e:	f107 0308 	add.w	r3, r7, #8
 8000f22:	4619      	mov	r1, r3
 8000f24:	480c      	ldr	r0, [pc, #48]	; (8000f58 <MX_TIM2_Init+0x94>)
 8000f26:	f001 fd7d 	bl	8002a24 <HAL_TIM_ConfigClockSource>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000f30:	f000 f904 	bl	800113c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f34:	2300      	movs	r3, #0
 8000f36:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f3c:	463b      	mov	r3, r7
 8000f3e:	4619      	mov	r1, r3
 8000f40:	4805      	ldr	r0, [pc, #20]	; (8000f58 <MX_TIM2_Init+0x94>)
 8000f42:	f002 f8ff 	bl	8003144 <HAL_TIMEx_MasterConfigSynchronization>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000f4c:	f000 f8f6 	bl	800113c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f50:	bf00      	nop
 8000f52:	3718      	adds	r7, #24
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	20000084 	.word	0x20000084

08000f5c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b08e      	sub	sp, #56	; 0x38
 8000f60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f62:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f66:	2200      	movs	r2, #0
 8000f68:	601a      	str	r2, [r3, #0]
 8000f6a:	605a      	str	r2, [r3, #4]
 8000f6c:	609a      	str	r2, [r3, #8]
 8000f6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f70:	f107 0320 	add.w	r3, r7, #32
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
 8000f78:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f7a:	1d3b      	adds	r3, r7, #4
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
 8000f80:	605a      	str	r2, [r3, #4]
 8000f82:	609a      	str	r2, [r3, #8]
 8000f84:	60da      	str	r2, [r3, #12]
 8000f86:	611a      	str	r2, [r3, #16]
 8000f88:	615a      	str	r2, [r3, #20]
 8000f8a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f8c:	4b2c      	ldr	r3, [pc, #176]	; (8001040 <MX_TIM3_Init+0xe4>)
 8000f8e:	4a2d      	ldr	r2, [pc, #180]	; (8001044 <MX_TIM3_Init+0xe8>)
 8000f90:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63999;
 8000f92:	4b2b      	ldr	r3, [pc, #172]	; (8001040 <MX_TIM3_Init+0xe4>)
 8000f94:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8000f98:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f9a:	4b29      	ldr	r3, [pc, #164]	; (8001040 <MX_TIM3_Init+0xe4>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9;
 8000fa0:	4b27      	ldr	r3, [pc, #156]	; (8001040 <MX_TIM3_Init+0xe4>)
 8000fa2:	2209      	movs	r2, #9
 8000fa4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fa6:	4b26      	ldr	r3, [pc, #152]	; (8001040 <MX_TIM3_Init+0xe4>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fac:	4b24      	ldr	r3, [pc, #144]	; (8001040 <MX_TIM3_Init+0xe4>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000fb2:	4823      	ldr	r0, [pc, #140]	; (8001040 <MX_TIM3_Init+0xe4>)
 8000fb4:	f001 f9d0 	bl	8002358 <HAL_TIM_Base_Init>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000fbe:	f000 f8bd 	bl	800113c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fc6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000fc8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fcc:	4619      	mov	r1, r3
 8000fce:	481c      	ldr	r0, [pc, #112]	; (8001040 <MX_TIM3_Init+0xe4>)
 8000fd0:	f001 fd28 	bl	8002a24 <HAL_TIM_ConfigClockSource>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000fda:	f000 f8af 	bl	800113c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000fde:	4818      	ldr	r0, [pc, #96]	; (8001040 <MX_TIM3_Init+0xe4>)
 8000fe0:	f001 fa5c 	bl	800249c <HAL_TIM_PWM_Init>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000fea:	f000 f8a7 	bl	800113c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ff6:	f107 0320 	add.w	r3, r7, #32
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	4810      	ldr	r0, [pc, #64]	; (8001040 <MX_TIM3_Init+0xe4>)
 8000ffe:	f002 f8a1 	bl	8003144 <HAL_TIMEx_MasterConfigSynchronization>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001008:	f000 f898 	bl	800113c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800100c:	2360      	movs	r3, #96	; 0x60
 800100e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001010:	2300      	movs	r3, #0
 8001012:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001014:	2300      	movs	r3, #0
 8001016:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001018:	2300      	movs	r3, #0
 800101a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800101c:	1d3b      	adds	r3, r7, #4
 800101e:	2200      	movs	r2, #0
 8001020:	4619      	mov	r1, r3
 8001022:	4807      	ldr	r0, [pc, #28]	; (8001040 <MX_TIM3_Init+0xe4>)
 8001024:	f001 fc3c 	bl	80028a0 <HAL_TIM_PWM_ConfigChannel>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800102e:	f000 f885 	bl	800113c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001032:	4803      	ldr	r0, [pc, #12]	; (8001040 <MX_TIM3_Init+0xe4>)
 8001034:	f000 f8fa 	bl	800122c <HAL_TIM_MspPostInit>

}
 8001038:	bf00      	nop
 800103a:	3738      	adds	r7, #56	; 0x38
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	200000cc 	.word	0x200000cc
 8001044:	40000400 	.word	0x40000400

08001048 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b086      	sub	sp, #24
 800104c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800104e:	f107 0308 	add.w	r3, r7, #8
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]
 8001056:	605a      	str	r2, [r3, #4]
 8001058:	609a      	str	r2, [r3, #8]
 800105a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800105c:	4b2e      	ldr	r3, [pc, #184]	; (8001118 <MX_GPIO_Init+0xd0>)
 800105e:	699b      	ldr	r3, [r3, #24]
 8001060:	4a2d      	ldr	r2, [pc, #180]	; (8001118 <MX_GPIO_Init+0xd0>)
 8001062:	f043 0304 	orr.w	r3, r3, #4
 8001066:	6193      	str	r3, [r2, #24]
 8001068:	4b2b      	ldr	r3, [pc, #172]	; (8001118 <MX_GPIO_Init+0xd0>)
 800106a:	699b      	ldr	r3, [r3, #24]
 800106c:	f003 0304 	and.w	r3, r3, #4
 8001070:	607b      	str	r3, [r7, #4]
 8001072:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001074:	4b28      	ldr	r3, [pc, #160]	; (8001118 <MX_GPIO_Init+0xd0>)
 8001076:	699b      	ldr	r3, [r3, #24]
 8001078:	4a27      	ldr	r2, [pc, #156]	; (8001118 <MX_GPIO_Init+0xd0>)
 800107a:	f043 0308 	orr.w	r3, r3, #8
 800107e:	6193      	str	r3, [r2, #24]
 8001080:	4b25      	ldr	r3, [pc, #148]	; (8001118 <MX_GPIO_Init+0xd0>)
 8001082:	699b      	ldr	r3, [r3, #24]
 8001084:	f003 0308 	and.w	r3, r3, #8
 8001088:	603b      	str	r3, [r7, #0]
 800108a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_PedLED_Pin|D3_LED1_Pin|D5_LED2_Pin|D4_LED2_Pin, GPIO_PIN_RESET);
 800108c:	2200      	movs	r2, #0
 800108e:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8001092:	4822      	ldr	r0, [pc, #136]	; (800111c <MX_GPIO_Init+0xd4>)
 8001094:	f000 fd69 	bl	8001b6a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D7_PedLED_Pin|D2_LED1_Pin, GPIO_PIN_RESET);
 8001098:	2200      	movs	r2, #0
 800109a:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 800109e:	4820      	ldr	r0, [pc, #128]	; (8001120 <MX_GPIO_Init+0xd8>)
 80010a0:	f000 fd63 	bl	8001b6a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_PedButton_Pin A1_Button1_Pin A2_Button2_Pin */
  GPIO_InitStruct.Pin = A0_PedButton_Pin|A1_Button1_Pin|A2_Button2_Pin;
 80010a4:	2313      	movs	r3, #19
 80010a6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010a8:	2300      	movs	r3, #0
 80010aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ac:	2300      	movs	r3, #0
 80010ae:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010b0:	f107 0308 	add.w	r3, r7, #8
 80010b4:	4619      	mov	r1, r3
 80010b6:	481a      	ldr	r0, [pc, #104]	; (8001120 <MX_GPIO_Init+0xd8>)
 80010b8:	f000 fbbc 	bl	8001834 <HAL_GPIO_Init>

  /*Configure GPIO pin : A3_Button3_Pin */
  GPIO_InitStruct.Pin = A3_Button3_Pin;
 80010bc:	2301      	movs	r3, #1
 80010be:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010c0:	2300      	movs	r3, #0
 80010c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c4:	2300      	movs	r3, #0
 80010c6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(A3_Button3_GPIO_Port, &GPIO_InitStruct);
 80010c8:	f107 0308 	add.w	r3, r7, #8
 80010cc:	4619      	mov	r1, r3
 80010ce:	4813      	ldr	r0, [pc, #76]	; (800111c <MX_GPIO_Init+0xd4>)
 80010d0:	f000 fbb0 	bl	8001834 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_PedLED_Pin D3_LED1_Pin D5_LED2_Pin D4_LED2_Pin */
  GPIO_InitStruct.Pin = D6_PedLED_Pin|D3_LED1_Pin|D5_LED2_Pin|D4_LED2_Pin;
 80010d4:	f44f 6387 	mov.w	r3, #1080	; 0x438
 80010d8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010da:	2301      	movs	r3, #1
 80010dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010de:	2300      	movs	r3, #0
 80010e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e2:	2302      	movs	r3, #2
 80010e4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010e6:	f107 0308 	add.w	r3, r7, #8
 80010ea:	4619      	mov	r1, r3
 80010ec:	480b      	ldr	r0, [pc, #44]	; (800111c <MX_GPIO_Init+0xd4>)
 80010ee:	f000 fba1 	bl	8001834 <HAL_GPIO_Init>

  /*Configure GPIO pins : D7_PedLED_Pin D2_LED1_Pin */
  GPIO_InitStruct.Pin = D7_PedLED_Pin|D2_LED1_Pin;
 80010f2:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80010f6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010f8:	2301      	movs	r3, #1
 80010fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fc:	2300      	movs	r3, #0
 80010fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001100:	2302      	movs	r3, #2
 8001102:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001104:	f107 0308 	add.w	r3, r7, #8
 8001108:	4619      	mov	r1, r3
 800110a:	4805      	ldr	r0, [pc, #20]	; (8001120 <MX_GPIO_Init+0xd8>)
 800110c:	f000 fb92 	bl	8001834 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001110:	bf00      	nop
 8001112:	3718      	adds	r7, #24
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	40021000 	.word	0x40021000
 800111c:	40010c00 	.word	0x40010c00
 8001120:	40010800 	.word	0x40010800

08001124 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim2) {
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
	timer_run();
 800112c:	f000 f95a 	bl	80013e4 <timer_run>
	button_reading();
 8001130:	f7ff fda2 	bl	8000c78 <button_reading>
}
 8001134:	bf00      	nop
 8001136:	3708      	adds	r7, #8
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}

0800113c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001140:	b672      	cpsid	i
}
 8001142:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001144:	e7fe      	b.n	8001144 <Error_Handler+0x8>
	...

08001148 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001148:	b480      	push	{r7}
 800114a:	b085      	sub	sp, #20
 800114c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800114e:	4b15      	ldr	r3, [pc, #84]	; (80011a4 <HAL_MspInit+0x5c>)
 8001150:	699b      	ldr	r3, [r3, #24]
 8001152:	4a14      	ldr	r2, [pc, #80]	; (80011a4 <HAL_MspInit+0x5c>)
 8001154:	f043 0301 	orr.w	r3, r3, #1
 8001158:	6193      	str	r3, [r2, #24]
 800115a:	4b12      	ldr	r3, [pc, #72]	; (80011a4 <HAL_MspInit+0x5c>)
 800115c:	699b      	ldr	r3, [r3, #24]
 800115e:	f003 0301 	and.w	r3, r3, #1
 8001162:	60bb      	str	r3, [r7, #8]
 8001164:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001166:	4b0f      	ldr	r3, [pc, #60]	; (80011a4 <HAL_MspInit+0x5c>)
 8001168:	69db      	ldr	r3, [r3, #28]
 800116a:	4a0e      	ldr	r2, [pc, #56]	; (80011a4 <HAL_MspInit+0x5c>)
 800116c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001170:	61d3      	str	r3, [r2, #28]
 8001172:	4b0c      	ldr	r3, [pc, #48]	; (80011a4 <HAL_MspInit+0x5c>)
 8001174:	69db      	ldr	r3, [r3, #28]
 8001176:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800117a:	607b      	str	r3, [r7, #4]
 800117c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800117e:	4b0a      	ldr	r3, [pc, #40]	; (80011a8 <HAL_MspInit+0x60>)
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	60fb      	str	r3, [r7, #12]
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800118a:	60fb      	str	r3, [r7, #12]
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001192:	60fb      	str	r3, [r7, #12]
 8001194:	4a04      	ldr	r2, [pc, #16]	; (80011a8 <HAL_MspInit+0x60>)
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800119a:	bf00      	nop
 800119c:	3714      	adds	r7, #20
 800119e:	46bd      	mov	sp, r7
 80011a0:	bc80      	pop	{r7}
 80011a2:	4770      	bx	lr
 80011a4:	40021000 	.word	0x40021000
 80011a8:	40010000 	.word	0x40010000

080011ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b084      	sub	sp, #16
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011bc:	d114      	bne.n	80011e8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011be:	4b19      	ldr	r3, [pc, #100]	; (8001224 <HAL_TIM_Base_MspInit+0x78>)
 80011c0:	69db      	ldr	r3, [r3, #28]
 80011c2:	4a18      	ldr	r2, [pc, #96]	; (8001224 <HAL_TIM_Base_MspInit+0x78>)
 80011c4:	f043 0301 	orr.w	r3, r3, #1
 80011c8:	61d3      	str	r3, [r2, #28]
 80011ca:	4b16      	ldr	r3, [pc, #88]	; (8001224 <HAL_TIM_Base_MspInit+0x78>)
 80011cc:	69db      	ldr	r3, [r3, #28]
 80011ce:	f003 0301 	and.w	r3, r3, #1
 80011d2:	60fb      	str	r3, [r7, #12]
 80011d4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80011d6:	2200      	movs	r2, #0
 80011d8:	2100      	movs	r1, #0
 80011da:	201c      	movs	r0, #28
 80011dc:	f000 faf3 	bl	80017c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80011e0:	201c      	movs	r0, #28
 80011e2:	f000 fb0c 	bl	80017fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80011e6:	e018      	b.n	800121a <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a0e      	ldr	r2, [pc, #56]	; (8001228 <HAL_TIM_Base_MspInit+0x7c>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d113      	bne.n	800121a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80011f2:	4b0c      	ldr	r3, [pc, #48]	; (8001224 <HAL_TIM_Base_MspInit+0x78>)
 80011f4:	69db      	ldr	r3, [r3, #28]
 80011f6:	4a0b      	ldr	r2, [pc, #44]	; (8001224 <HAL_TIM_Base_MspInit+0x78>)
 80011f8:	f043 0302 	orr.w	r3, r3, #2
 80011fc:	61d3      	str	r3, [r2, #28]
 80011fe:	4b09      	ldr	r3, [pc, #36]	; (8001224 <HAL_TIM_Base_MspInit+0x78>)
 8001200:	69db      	ldr	r3, [r3, #28]
 8001202:	f003 0302 	and.w	r3, r3, #2
 8001206:	60bb      	str	r3, [r7, #8]
 8001208:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800120a:	2200      	movs	r2, #0
 800120c:	2100      	movs	r1, #0
 800120e:	201d      	movs	r0, #29
 8001210:	f000 fad9 	bl	80017c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001214:	201d      	movs	r0, #29
 8001216:	f000 faf2 	bl	80017fe <HAL_NVIC_EnableIRQ>
}
 800121a:	bf00      	nop
 800121c:	3710      	adds	r7, #16
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	40021000 	.word	0x40021000
 8001228:	40000400 	.word	0x40000400

0800122c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b088      	sub	sp, #32
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001234:	f107 0310 	add.w	r3, r7, #16
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	605a      	str	r2, [r3, #4]
 800123e:	609a      	str	r2, [r3, #8]
 8001240:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4a0f      	ldr	r2, [pc, #60]	; (8001284 <HAL_TIM_MspPostInit+0x58>)
 8001248:	4293      	cmp	r3, r2
 800124a:	d117      	bne.n	800127c <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800124c:	4b0e      	ldr	r3, [pc, #56]	; (8001288 <HAL_TIM_MspPostInit+0x5c>)
 800124e:	699b      	ldr	r3, [r3, #24]
 8001250:	4a0d      	ldr	r2, [pc, #52]	; (8001288 <HAL_TIM_MspPostInit+0x5c>)
 8001252:	f043 0304 	orr.w	r3, r3, #4
 8001256:	6193      	str	r3, [r2, #24]
 8001258:	4b0b      	ldr	r3, [pc, #44]	; (8001288 <HAL_TIM_MspPostInit+0x5c>)
 800125a:	699b      	ldr	r3, [r3, #24]
 800125c:	f003 0304 	and.w	r3, r3, #4
 8001260:	60fb      	str	r3, [r7, #12]
 8001262:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001264:	2340      	movs	r3, #64	; 0x40
 8001266:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001268:	2302      	movs	r3, #2
 800126a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800126c:	2302      	movs	r3, #2
 800126e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001270:	f107 0310 	add.w	r3, r7, #16
 8001274:	4619      	mov	r1, r3
 8001276:	4805      	ldr	r0, [pc, #20]	; (800128c <HAL_TIM_MspPostInit+0x60>)
 8001278:	f000 fadc 	bl	8001834 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800127c:	bf00      	nop
 800127e:	3720      	adds	r7, #32
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	40000400 	.word	0x40000400
 8001288:	40021000 	.word	0x40021000
 800128c:	40010800 	.word	0x40010800

08001290 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001294:	e7fe      	b.n	8001294 <NMI_Handler+0x4>

08001296 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001296:	b480      	push	{r7}
 8001298:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800129a:	e7fe      	b.n	800129a <HardFault_Handler+0x4>

0800129c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012a0:	e7fe      	b.n	80012a0 <MemManage_Handler+0x4>

080012a2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012a2:	b480      	push	{r7}
 80012a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012a6:	e7fe      	b.n	80012a6 <BusFault_Handler+0x4>

080012a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012ac:	e7fe      	b.n	80012ac <UsageFault_Handler+0x4>

080012ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012ae:	b480      	push	{r7}
 80012b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012b2:	bf00      	nop
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bc80      	pop	{r7}
 80012b8:	4770      	bx	lr

080012ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012ba:	b480      	push	{r7}
 80012bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012be:	bf00      	nop
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bc80      	pop	{r7}
 80012c4:	4770      	bx	lr

080012c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012c6:	b480      	push	{r7}
 80012c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012ca:	bf00      	nop
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bc80      	pop	{r7}
 80012d0:	4770      	bx	lr

080012d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012d2:	b580      	push	{r7, lr}
 80012d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012d6:	f000 f983 	bl	80015e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012da:	bf00      	nop
 80012dc:	bd80      	pop	{r7, pc}
	...

080012e0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80012e4:	4802      	ldr	r0, [pc, #8]	; (80012f0 <TIM2_IRQHandler+0x10>)
 80012e6:	f001 f9d3 	bl	8002690 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80012ea:	bf00      	nop
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	20000084 	.word	0x20000084

080012f4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80012f8:	4802      	ldr	r0, [pc, #8]	; (8001304 <TIM3_IRQHandler+0x10>)
 80012fa:	f001 f9c9 	bl	8002690 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80012fe:	bf00      	nop
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	200000cc 	.word	0x200000cc

08001308 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800130c:	bf00      	nop
 800130e:	46bd      	mov	sp, r7
 8001310:	bc80      	pop	{r7}
 8001312:	4770      	bx	lr

08001314 <setTimer0>:

int TIMER_CYCLE = 10;
int timer0_counter = 0, timer1_counter = 0, timer2_counter = 0, timer3_counter = 0, timer4_counter, timer5_counter = 0, timer6_counter = 0;
int timer0_flag = 0, timer1_flag = 0, timer2_flag = 0, timer3_flag = 0, timer4_flag = 0, timer5_flag = 0, timer6_flag = 0;

void setTimer0(int duration) {
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
	timer0_counter = duration/TIMER_CYCLE;
 800131c:	4b07      	ldr	r3, [pc, #28]	; (800133c <setTimer0+0x28>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	687a      	ldr	r2, [r7, #4]
 8001322:	fb92 f3f3 	sdiv	r3, r2, r3
 8001326:	4a06      	ldr	r2, [pc, #24]	; (8001340 <setTimer0+0x2c>)
 8001328:	6013      	str	r3, [r2, #0]
	timer0_flag = 0;
 800132a:	4b06      	ldr	r3, [pc, #24]	; (8001344 <setTimer0+0x30>)
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
}
 8001330:	bf00      	nop
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	bc80      	pop	{r7}
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	2000003c 	.word	0x2000003c
 8001340:	20000114 	.word	0x20000114
 8001344:	20000130 	.word	0x20000130

08001348 <setTimer1>:

void setTimer1(int duration) {
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
	timer1_counter = duration/TIMER_CYCLE;
 8001350:	4b07      	ldr	r3, [pc, #28]	; (8001370 <setTimer1+0x28>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	687a      	ldr	r2, [r7, #4]
 8001356:	fb92 f3f3 	sdiv	r3, r2, r3
 800135a:	4a06      	ldr	r2, [pc, #24]	; (8001374 <setTimer1+0x2c>)
 800135c:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 800135e:	4b06      	ldr	r3, [pc, #24]	; (8001378 <setTimer1+0x30>)
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]
}
 8001364:	bf00      	nop
 8001366:	370c      	adds	r7, #12
 8001368:	46bd      	mov	sp, r7
 800136a:	bc80      	pop	{r7}
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	2000003c 	.word	0x2000003c
 8001374:	20000118 	.word	0x20000118
 8001378:	20000134 	.word	0x20000134

0800137c <setTimer5>:
void setTimer4(int duration) {
	timer4_counter = duration/TIMER_CYCLE;
	timer4_flag = 0;
}

void setTimer5(int duration) {
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
	timer5_counter = duration/TIMER_CYCLE;
 8001384:	4b07      	ldr	r3, [pc, #28]	; (80013a4 <setTimer5+0x28>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	687a      	ldr	r2, [r7, #4]
 800138a:	fb92 f3f3 	sdiv	r3, r2, r3
 800138e:	4a06      	ldr	r2, [pc, #24]	; (80013a8 <setTimer5+0x2c>)
 8001390:	6013      	str	r3, [r2, #0]
	timer5_flag = 0;
 8001392:	4b06      	ldr	r3, [pc, #24]	; (80013ac <setTimer5+0x30>)
 8001394:	2200      	movs	r2, #0
 8001396:	601a      	str	r2, [r3, #0]
}
 8001398:	bf00      	nop
 800139a:	370c      	adds	r7, #12
 800139c:	46bd      	mov	sp, r7
 800139e:	bc80      	pop	{r7}
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	2000003c 	.word	0x2000003c
 80013a8:	20000128 	.word	0x20000128
 80013ac:	20000144 	.word	0x20000144

080013b0 <setTimer6>:

void setTimer6(int duration) {
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
	timer6_counter = duration/TIMER_CYCLE;
 80013b8:	4b07      	ldr	r3, [pc, #28]	; (80013d8 <setTimer6+0x28>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	687a      	ldr	r2, [r7, #4]
 80013be:	fb92 f3f3 	sdiv	r3, r2, r3
 80013c2:	4a06      	ldr	r2, [pc, #24]	; (80013dc <setTimer6+0x2c>)
 80013c4:	6013      	str	r3, [r2, #0]
	timer6_flag = 0;
 80013c6:	4b06      	ldr	r3, [pc, #24]	; (80013e0 <setTimer6+0x30>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	601a      	str	r2, [r3, #0]
}
 80013cc:	bf00      	nop
 80013ce:	370c      	adds	r7, #12
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bc80      	pop	{r7}
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	2000003c 	.word	0x2000003c
 80013dc:	2000012c 	.word	0x2000012c
 80013e0:	20000148 	.word	0x20000148

080013e4 <timer_run>:

void timer_run() {
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
	if (timer0_counter > 0) {
 80013e8:	4b39      	ldr	r3, [pc, #228]	; (80014d0 <timer_run+0xec>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	dd0b      	ble.n	8001408 <timer_run+0x24>
		timer0_counter--;
 80013f0:	4b37      	ldr	r3, [pc, #220]	; (80014d0 <timer_run+0xec>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	3b01      	subs	r3, #1
 80013f6:	4a36      	ldr	r2, [pc, #216]	; (80014d0 <timer_run+0xec>)
 80013f8:	6013      	str	r3, [r2, #0]
		if (timer0_counter == 0) timer0_flag = 1;
 80013fa:	4b35      	ldr	r3, [pc, #212]	; (80014d0 <timer_run+0xec>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d102      	bne.n	8001408 <timer_run+0x24>
 8001402:	4b34      	ldr	r3, [pc, #208]	; (80014d4 <timer_run+0xf0>)
 8001404:	2201      	movs	r2, #1
 8001406:	601a      	str	r2, [r3, #0]
	}
	if (timer1_counter > 0) {
 8001408:	4b33      	ldr	r3, [pc, #204]	; (80014d8 <timer_run+0xf4>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	2b00      	cmp	r3, #0
 800140e:	dd0b      	ble.n	8001428 <timer_run+0x44>
		timer1_counter--;
 8001410:	4b31      	ldr	r3, [pc, #196]	; (80014d8 <timer_run+0xf4>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	3b01      	subs	r3, #1
 8001416:	4a30      	ldr	r2, [pc, #192]	; (80014d8 <timer_run+0xf4>)
 8001418:	6013      	str	r3, [r2, #0]
		if (timer1_counter == 0) timer1_flag = 1;
 800141a:	4b2f      	ldr	r3, [pc, #188]	; (80014d8 <timer_run+0xf4>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d102      	bne.n	8001428 <timer_run+0x44>
 8001422:	4b2e      	ldr	r3, [pc, #184]	; (80014dc <timer_run+0xf8>)
 8001424:	2201      	movs	r2, #1
 8001426:	601a      	str	r2, [r3, #0]
	}
	if (timer2_counter > 0) {
 8001428:	4b2d      	ldr	r3, [pc, #180]	; (80014e0 <timer_run+0xfc>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	2b00      	cmp	r3, #0
 800142e:	dd0b      	ble.n	8001448 <timer_run+0x64>
		timer2_counter--;
 8001430:	4b2b      	ldr	r3, [pc, #172]	; (80014e0 <timer_run+0xfc>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	3b01      	subs	r3, #1
 8001436:	4a2a      	ldr	r2, [pc, #168]	; (80014e0 <timer_run+0xfc>)
 8001438:	6013      	str	r3, [r2, #0]
		if (timer2_counter == 0) timer2_flag = 1;
 800143a:	4b29      	ldr	r3, [pc, #164]	; (80014e0 <timer_run+0xfc>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d102      	bne.n	8001448 <timer_run+0x64>
 8001442:	4b28      	ldr	r3, [pc, #160]	; (80014e4 <timer_run+0x100>)
 8001444:	2201      	movs	r2, #1
 8001446:	601a      	str	r2, [r3, #0]
	}
	if (timer3_counter > 0) {
 8001448:	4b27      	ldr	r3, [pc, #156]	; (80014e8 <timer_run+0x104>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	2b00      	cmp	r3, #0
 800144e:	dd0b      	ble.n	8001468 <timer_run+0x84>
		timer3_counter--;
 8001450:	4b25      	ldr	r3, [pc, #148]	; (80014e8 <timer_run+0x104>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	3b01      	subs	r3, #1
 8001456:	4a24      	ldr	r2, [pc, #144]	; (80014e8 <timer_run+0x104>)
 8001458:	6013      	str	r3, [r2, #0]
		if (timer3_counter == 0) timer3_flag = 1;
 800145a:	4b23      	ldr	r3, [pc, #140]	; (80014e8 <timer_run+0x104>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d102      	bne.n	8001468 <timer_run+0x84>
 8001462:	4b22      	ldr	r3, [pc, #136]	; (80014ec <timer_run+0x108>)
 8001464:	2201      	movs	r2, #1
 8001466:	601a      	str	r2, [r3, #0]
	}
	if (timer4_counter > 0) {
 8001468:	4b21      	ldr	r3, [pc, #132]	; (80014f0 <timer_run+0x10c>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	2b00      	cmp	r3, #0
 800146e:	dd0b      	ble.n	8001488 <timer_run+0xa4>
		timer4_counter--;
 8001470:	4b1f      	ldr	r3, [pc, #124]	; (80014f0 <timer_run+0x10c>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	3b01      	subs	r3, #1
 8001476:	4a1e      	ldr	r2, [pc, #120]	; (80014f0 <timer_run+0x10c>)
 8001478:	6013      	str	r3, [r2, #0]
		if (timer4_counter == 0) timer4_flag = 1;
 800147a:	4b1d      	ldr	r3, [pc, #116]	; (80014f0 <timer_run+0x10c>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d102      	bne.n	8001488 <timer_run+0xa4>
 8001482:	4b1c      	ldr	r3, [pc, #112]	; (80014f4 <timer_run+0x110>)
 8001484:	2201      	movs	r2, #1
 8001486:	601a      	str	r2, [r3, #0]
	}
	if (timer5_counter > 0) {
 8001488:	4b1b      	ldr	r3, [pc, #108]	; (80014f8 <timer_run+0x114>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	2b00      	cmp	r3, #0
 800148e:	dd0b      	ble.n	80014a8 <timer_run+0xc4>
		timer5_counter--;
 8001490:	4b19      	ldr	r3, [pc, #100]	; (80014f8 <timer_run+0x114>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	3b01      	subs	r3, #1
 8001496:	4a18      	ldr	r2, [pc, #96]	; (80014f8 <timer_run+0x114>)
 8001498:	6013      	str	r3, [r2, #0]
		if (timer5_counter == 0) timer5_flag = 1;
 800149a:	4b17      	ldr	r3, [pc, #92]	; (80014f8 <timer_run+0x114>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d102      	bne.n	80014a8 <timer_run+0xc4>
 80014a2:	4b16      	ldr	r3, [pc, #88]	; (80014fc <timer_run+0x118>)
 80014a4:	2201      	movs	r2, #1
 80014a6:	601a      	str	r2, [r3, #0]
	}
	if (timer6_counter > 0) {
 80014a8:	4b15      	ldr	r3, [pc, #84]	; (8001500 <timer_run+0x11c>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	dd0b      	ble.n	80014c8 <timer_run+0xe4>
		timer6_counter--;
 80014b0:	4b13      	ldr	r3, [pc, #76]	; (8001500 <timer_run+0x11c>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	3b01      	subs	r3, #1
 80014b6:	4a12      	ldr	r2, [pc, #72]	; (8001500 <timer_run+0x11c>)
 80014b8:	6013      	str	r3, [r2, #0]
		if (timer6_counter == 0) timer6_flag = 1;
 80014ba:	4b11      	ldr	r3, [pc, #68]	; (8001500 <timer_run+0x11c>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d102      	bne.n	80014c8 <timer_run+0xe4>
 80014c2:	4b10      	ldr	r3, [pc, #64]	; (8001504 <timer_run+0x120>)
 80014c4:	2201      	movs	r2, #1
 80014c6:	601a      	str	r2, [r3, #0]
	}
}
 80014c8:	bf00      	nop
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bc80      	pop	{r7}
 80014ce:	4770      	bx	lr
 80014d0:	20000114 	.word	0x20000114
 80014d4:	20000130 	.word	0x20000130
 80014d8:	20000118 	.word	0x20000118
 80014dc:	20000134 	.word	0x20000134
 80014e0:	2000011c 	.word	0x2000011c
 80014e4:	20000138 	.word	0x20000138
 80014e8:	20000120 	.word	0x20000120
 80014ec:	2000013c 	.word	0x2000013c
 80014f0:	20000124 	.word	0x20000124
 80014f4:	20000140 	.word	0x20000140
 80014f8:	20000128 	.word	0x20000128
 80014fc:	20000144 	.word	0x20000144
 8001500:	2000012c 	.word	0x2000012c
 8001504:	20000148 	.word	0x20000148

08001508 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001508:	f7ff fefe 	bl	8001308 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800150c:	480b      	ldr	r0, [pc, #44]	; (800153c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800150e:	490c      	ldr	r1, [pc, #48]	; (8001540 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001510:	4a0c      	ldr	r2, [pc, #48]	; (8001544 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001512:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001514:	e002      	b.n	800151c <LoopCopyDataInit>

08001516 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001516:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001518:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800151a:	3304      	adds	r3, #4

0800151c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800151c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800151e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001520:	d3f9      	bcc.n	8001516 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001522:	4a09      	ldr	r2, [pc, #36]	; (8001548 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001524:	4c09      	ldr	r4, [pc, #36]	; (800154c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001526:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001528:	e001      	b.n	800152e <LoopFillZerobss>

0800152a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800152a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800152c:	3204      	adds	r2, #4

0800152e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800152e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001530:	d3fb      	bcc.n	800152a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001532:	f001 fe7f 	bl	8003234 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001536:	f7ff fc59 	bl	8000dec <main>
  bx lr
 800153a:	4770      	bx	lr
  ldr r0, =_sdata
 800153c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001540:	20000048 	.word	0x20000048
  ldr r2, =_sidata
 8001544:	080032c0 	.word	0x080032c0
  ldr r2, =_sbss
 8001548:	20000048 	.word	0x20000048
  ldr r4, =_ebss
 800154c:	20000150 	.word	0x20000150

08001550 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001550:	e7fe      	b.n	8001550 <ADC1_2_IRQHandler>
	...

08001554 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001558:	4b08      	ldr	r3, [pc, #32]	; (800157c <HAL_Init+0x28>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a07      	ldr	r2, [pc, #28]	; (800157c <HAL_Init+0x28>)
 800155e:	f043 0310 	orr.w	r3, r3, #16
 8001562:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001564:	2003      	movs	r0, #3
 8001566:	f000 f923 	bl	80017b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800156a:	200f      	movs	r0, #15
 800156c:	f000 f808 	bl	8001580 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001570:	f7ff fdea 	bl	8001148 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001574:	2300      	movs	r3, #0
}
 8001576:	4618      	mov	r0, r3
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	40022000 	.word	0x40022000

08001580 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001588:	4b12      	ldr	r3, [pc, #72]	; (80015d4 <HAL_InitTick+0x54>)
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	4b12      	ldr	r3, [pc, #72]	; (80015d8 <HAL_InitTick+0x58>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	4619      	mov	r1, r3
 8001592:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001596:	fbb3 f3f1 	udiv	r3, r3, r1
 800159a:	fbb2 f3f3 	udiv	r3, r2, r3
 800159e:	4618      	mov	r0, r3
 80015a0:	f000 f93b 	bl	800181a <HAL_SYSTICK_Config>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e00e      	b.n	80015cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2b0f      	cmp	r3, #15
 80015b2:	d80a      	bhi.n	80015ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015b4:	2200      	movs	r2, #0
 80015b6:	6879      	ldr	r1, [r7, #4]
 80015b8:	f04f 30ff 	mov.w	r0, #4294967295
 80015bc:	f000 f903 	bl	80017c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015c0:	4a06      	ldr	r2, [pc, #24]	; (80015dc <HAL_InitTick+0x5c>)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015c6:	2300      	movs	r3, #0
 80015c8:	e000      	b.n	80015cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	3708      	adds	r7, #8
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	20000038 	.word	0x20000038
 80015d8:	20000044 	.word	0x20000044
 80015dc:	20000040 	.word	0x20000040

080015e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015e4:	4b05      	ldr	r3, [pc, #20]	; (80015fc <HAL_IncTick+0x1c>)
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	461a      	mov	r2, r3
 80015ea:	4b05      	ldr	r3, [pc, #20]	; (8001600 <HAL_IncTick+0x20>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4413      	add	r3, r2
 80015f0:	4a03      	ldr	r2, [pc, #12]	; (8001600 <HAL_IncTick+0x20>)
 80015f2:	6013      	str	r3, [r2, #0]
}
 80015f4:	bf00      	nop
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bc80      	pop	{r7}
 80015fa:	4770      	bx	lr
 80015fc:	20000044 	.word	0x20000044
 8001600:	2000014c 	.word	0x2000014c

08001604 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  return uwTick;
 8001608:	4b02      	ldr	r3, [pc, #8]	; (8001614 <HAL_GetTick+0x10>)
 800160a:	681b      	ldr	r3, [r3, #0]
}
 800160c:	4618      	mov	r0, r3
 800160e:	46bd      	mov	sp, r7
 8001610:	bc80      	pop	{r7}
 8001612:	4770      	bx	lr
 8001614:	2000014c 	.word	0x2000014c

08001618 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001618:	b480      	push	{r7}
 800161a:	b085      	sub	sp, #20
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	f003 0307 	and.w	r3, r3, #7
 8001626:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001628:	4b0c      	ldr	r3, [pc, #48]	; (800165c <__NVIC_SetPriorityGrouping+0x44>)
 800162a:	68db      	ldr	r3, [r3, #12]
 800162c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800162e:	68ba      	ldr	r2, [r7, #8]
 8001630:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001634:	4013      	ands	r3, r2
 8001636:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001640:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001644:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001648:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800164a:	4a04      	ldr	r2, [pc, #16]	; (800165c <__NVIC_SetPriorityGrouping+0x44>)
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	60d3      	str	r3, [r2, #12]
}
 8001650:	bf00      	nop
 8001652:	3714      	adds	r7, #20
 8001654:	46bd      	mov	sp, r7
 8001656:	bc80      	pop	{r7}
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	e000ed00 	.word	0xe000ed00

08001660 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001664:	4b04      	ldr	r3, [pc, #16]	; (8001678 <__NVIC_GetPriorityGrouping+0x18>)
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	0a1b      	lsrs	r3, r3, #8
 800166a:	f003 0307 	and.w	r3, r3, #7
}
 800166e:	4618      	mov	r0, r3
 8001670:	46bd      	mov	sp, r7
 8001672:	bc80      	pop	{r7}
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	e000ed00 	.word	0xe000ed00

0800167c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	4603      	mov	r3, r0
 8001684:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800168a:	2b00      	cmp	r3, #0
 800168c:	db0b      	blt.n	80016a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800168e:	79fb      	ldrb	r3, [r7, #7]
 8001690:	f003 021f 	and.w	r2, r3, #31
 8001694:	4906      	ldr	r1, [pc, #24]	; (80016b0 <__NVIC_EnableIRQ+0x34>)
 8001696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800169a:	095b      	lsrs	r3, r3, #5
 800169c:	2001      	movs	r0, #1
 800169e:	fa00 f202 	lsl.w	r2, r0, r2
 80016a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016a6:	bf00      	nop
 80016a8:	370c      	adds	r7, #12
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bc80      	pop	{r7}
 80016ae:	4770      	bx	lr
 80016b0:	e000e100 	.word	0xe000e100

080016b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	4603      	mov	r3, r0
 80016bc:	6039      	str	r1, [r7, #0]
 80016be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	db0a      	blt.n	80016de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	b2da      	uxtb	r2, r3
 80016cc:	490c      	ldr	r1, [pc, #48]	; (8001700 <__NVIC_SetPriority+0x4c>)
 80016ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d2:	0112      	lsls	r2, r2, #4
 80016d4:	b2d2      	uxtb	r2, r2
 80016d6:	440b      	add	r3, r1
 80016d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016dc:	e00a      	b.n	80016f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	b2da      	uxtb	r2, r3
 80016e2:	4908      	ldr	r1, [pc, #32]	; (8001704 <__NVIC_SetPriority+0x50>)
 80016e4:	79fb      	ldrb	r3, [r7, #7]
 80016e6:	f003 030f 	and.w	r3, r3, #15
 80016ea:	3b04      	subs	r3, #4
 80016ec:	0112      	lsls	r2, r2, #4
 80016ee:	b2d2      	uxtb	r2, r2
 80016f0:	440b      	add	r3, r1
 80016f2:	761a      	strb	r2, [r3, #24]
}
 80016f4:	bf00      	nop
 80016f6:	370c      	adds	r7, #12
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bc80      	pop	{r7}
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	e000e100 	.word	0xe000e100
 8001704:	e000ed00 	.word	0xe000ed00

08001708 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001708:	b480      	push	{r7}
 800170a:	b089      	sub	sp, #36	; 0x24
 800170c:	af00      	add	r7, sp, #0
 800170e:	60f8      	str	r0, [r7, #12]
 8001710:	60b9      	str	r1, [r7, #8]
 8001712:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	f003 0307 	and.w	r3, r3, #7
 800171a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800171c:	69fb      	ldr	r3, [r7, #28]
 800171e:	f1c3 0307 	rsb	r3, r3, #7
 8001722:	2b04      	cmp	r3, #4
 8001724:	bf28      	it	cs
 8001726:	2304      	movcs	r3, #4
 8001728:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	3304      	adds	r3, #4
 800172e:	2b06      	cmp	r3, #6
 8001730:	d902      	bls.n	8001738 <NVIC_EncodePriority+0x30>
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	3b03      	subs	r3, #3
 8001736:	e000      	b.n	800173a <NVIC_EncodePriority+0x32>
 8001738:	2300      	movs	r3, #0
 800173a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800173c:	f04f 32ff 	mov.w	r2, #4294967295
 8001740:	69bb      	ldr	r3, [r7, #24]
 8001742:	fa02 f303 	lsl.w	r3, r2, r3
 8001746:	43da      	mvns	r2, r3
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	401a      	ands	r2, r3
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001750:	f04f 31ff 	mov.w	r1, #4294967295
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	fa01 f303 	lsl.w	r3, r1, r3
 800175a:	43d9      	mvns	r1, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001760:	4313      	orrs	r3, r2
         );
}
 8001762:	4618      	mov	r0, r3
 8001764:	3724      	adds	r7, #36	; 0x24
 8001766:	46bd      	mov	sp, r7
 8001768:	bc80      	pop	{r7}
 800176a:	4770      	bx	lr

0800176c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	3b01      	subs	r3, #1
 8001778:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800177c:	d301      	bcc.n	8001782 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800177e:	2301      	movs	r3, #1
 8001780:	e00f      	b.n	80017a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001782:	4a0a      	ldr	r2, [pc, #40]	; (80017ac <SysTick_Config+0x40>)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	3b01      	subs	r3, #1
 8001788:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800178a:	210f      	movs	r1, #15
 800178c:	f04f 30ff 	mov.w	r0, #4294967295
 8001790:	f7ff ff90 	bl	80016b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001794:	4b05      	ldr	r3, [pc, #20]	; (80017ac <SysTick_Config+0x40>)
 8001796:	2200      	movs	r2, #0
 8001798:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800179a:	4b04      	ldr	r3, [pc, #16]	; (80017ac <SysTick_Config+0x40>)
 800179c:	2207      	movs	r2, #7
 800179e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017a0:	2300      	movs	r3, #0
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3708      	adds	r7, #8
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	e000e010 	.word	0xe000e010

080017b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017b8:	6878      	ldr	r0, [r7, #4]
 80017ba:	f7ff ff2d 	bl	8001618 <__NVIC_SetPriorityGrouping>
}
 80017be:	bf00      	nop
 80017c0:	3708      	adds	r7, #8
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}

080017c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017c6:	b580      	push	{r7, lr}
 80017c8:	b086      	sub	sp, #24
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	4603      	mov	r3, r0
 80017ce:	60b9      	str	r1, [r7, #8]
 80017d0:	607a      	str	r2, [r7, #4]
 80017d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017d4:	2300      	movs	r3, #0
 80017d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017d8:	f7ff ff42 	bl	8001660 <__NVIC_GetPriorityGrouping>
 80017dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017de:	687a      	ldr	r2, [r7, #4]
 80017e0:	68b9      	ldr	r1, [r7, #8]
 80017e2:	6978      	ldr	r0, [r7, #20]
 80017e4:	f7ff ff90 	bl	8001708 <NVIC_EncodePriority>
 80017e8:	4602      	mov	r2, r0
 80017ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017ee:	4611      	mov	r1, r2
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7ff ff5f 	bl	80016b4 <__NVIC_SetPriority>
}
 80017f6:	bf00      	nop
 80017f8:	3718      	adds	r7, #24
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}

080017fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017fe:	b580      	push	{r7, lr}
 8001800:	b082      	sub	sp, #8
 8001802:	af00      	add	r7, sp, #0
 8001804:	4603      	mov	r3, r0
 8001806:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001808:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800180c:	4618      	mov	r0, r3
 800180e:	f7ff ff35 	bl	800167c <__NVIC_EnableIRQ>
}
 8001812:	bf00      	nop
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}

0800181a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800181a:	b580      	push	{r7, lr}
 800181c:	b082      	sub	sp, #8
 800181e:	af00      	add	r7, sp, #0
 8001820:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f7ff ffa2 	bl	800176c <SysTick_Config>
 8001828:	4603      	mov	r3, r0
}
 800182a:	4618      	mov	r0, r3
 800182c:	3708      	adds	r7, #8
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
	...

08001834 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001834:	b480      	push	{r7}
 8001836:	b08b      	sub	sp, #44	; 0x2c
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800183e:	2300      	movs	r3, #0
 8001840:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001842:	2300      	movs	r3, #0
 8001844:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001846:	e169      	b.n	8001b1c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001848:	2201      	movs	r2, #1
 800184a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184c:	fa02 f303 	lsl.w	r3, r2, r3
 8001850:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	69fa      	ldr	r2, [r7, #28]
 8001858:	4013      	ands	r3, r2
 800185a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800185c:	69ba      	ldr	r2, [r7, #24]
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	429a      	cmp	r2, r3
 8001862:	f040 8158 	bne.w	8001b16 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	4a9a      	ldr	r2, [pc, #616]	; (8001ad4 <HAL_GPIO_Init+0x2a0>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d05e      	beq.n	800192e <HAL_GPIO_Init+0xfa>
 8001870:	4a98      	ldr	r2, [pc, #608]	; (8001ad4 <HAL_GPIO_Init+0x2a0>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d875      	bhi.n	8001962 <HAL_GPIO_Init+0x12e>
 8001876:	4a98      	ldr	r2, [pc, #608]	; (8001ad8 <HAL_GPIO_Init+0x2a4>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d058      	beq.n	800192e <HAL_GPIO_Init+0xfa>
 800187c:	4a96      	ldr	r2, [pc, #600]	; (8001ad8 <HAL_GPIO_Init+0x2a4>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d86f      	bhi.n	8001962 <HAL_GPIO_Init+0x12e>
 8001882:	4a96      	ldr	r2, [pc, #600]	; (8001adc <HAL_GPIO_Init+0x2a8>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d052      	beq.n	800192e <HAL_GPIO_Init+0xfa>
 8001888:	4a94      	ldr	r2, [pc, #592]	; (8001adc <HAL_GPIO_Init+0x2a8>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d869      	bhi.n	8001962 <HAL_GPIO_Init+0x12e>
 800188e:	4a94      	ldr	r2, [pc, #592]	; (8001ae0 <HAL_GPIO_Init+0x2ac>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d04c      	beq.n	800192e <HAL_GPIO_Init+0xfa>
 8001894:	4a92      	ldr	r2, [pc, #584]	; (8001ae0 <HAL_GPIO_Init+0x2ac>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d863      	bhi.n	8001962 <HAL_GPIO_Init+0x12e>
 800189a:	4a92      	ldr	r2, [pc, #584]	; (8001ae4 <HAL_GPIO_Init+0x2b0>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d046      	beq.n	800192e <HAL_GPIO_Init+0xfa>
 80018a0:	4a90      	ldr	r2, [pc, #576]	; (8001ae4 <HAL_GPIO_Init+0x2b0>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d85d      	bhi.n	8001962 <HAL_GPIO_Init+0x12e>
 80018a6:	2b12      	cmp	r3, #18
 80018a8:	d82a      	bhi.n	8001900 <HAL_GPIO_Init+0xcc>
 80018aa:	2b12      	cmp	r3, #18
 80018ac:	d859      	bhi.n	8001962 <HAL_GPIO_Init+0x12e>
 80018ae:	a201      	add	r2, pc, #4	; (adr r2, 80018b4 <HAL_GPIO_Init+0x80>)
 80018b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018b4:	0800192f 	.word	0x0800192f
 80018b8:	08001909 	.word	0x08001909
 80018bc:	0800191b 	.word	0x0800191b
 80018c0:	0800195d 	.word	0x0800195d
 80018c4:	08001963 	.word	0x08001963
 80018c8:	08001963 	.word	0x08001963
 80018cc:	08001963 	.word	0x08001963
 80018d0:	08001963 	.word	0x08001963
 80018d4:	08001963 	.word	0x08001963
 80018d8:	08001963 	.word	0x08001963
 80018dc:	08001963 	.word	0x08001963
 80018e0:	08001963 	.word	0x08001963
 80018e4:	08001963 	.word	0x08001963
 80018e8:	08001963 	.word	0x08001963
 80018ec:	08001963 	.word	0x08001963
 80018f0:	08001963 	.word	0x08001963
 80018f4:	08001963 	.word	0x08001963
 80018f8:	08001911 	.word	0x08001911
 80018fc:	08001925 	.word	0x08001925
 8001900:	4a79      	ldr	r2, [pc, #484]	; (8001ae8 <HAL_GPIO_Init+0x2b4>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d013      	beq.n	800192e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001906:	e02c      	b.n	8001962 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	623b      	str	r3, [r7, #32]
          break;
 800190e:	e029      	b.n	8001964 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	3304      	adds	r3, #4
 8001916:	623b      	str	r3, [r7, #32]
          break;
 8001918:	e024      	b.n	8001964 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	68db      	ldr	r3, [r3, #12]
 800191e:	3308      	adds	r3, #8
 8001920:	623b      	str	r3, [r7, #32]
          break;
 8001922:	e01f      	b.n	8001964 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	330c      	adds	r3, #12
 800192a:	623b      	str	r3, [r7, #32]
          break;
 800192c:	e01a      	b.n	8001964 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d102      	bne.n	800193c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001936:	2304      	movs	r3, #4
 8001938:	623b      	str	r3, [r7, #32]
          break;
 800193a:	e013      	b.n	8001964 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	2b01      	cmp	r3, #1
 8001942:	d105      	bne.n	8001950 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001944:	2308      	movs	r3, #8
 8001946:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	69fa      	ldr	r2, [r7, #28]
 800194c:	611a      	str	r2, [r3, #16]
          break;
 800194e:	e009      	b.n	8001964 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001950:	2308      	movs	r3, #8
 8001952:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	69fa      	ldr	r2, [r7, #28]
 8001958:	615a      	str	r2, [r3, #20]
          break;
 800195a:	e003      	b.n	8001964 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800195c:	2300      	movs	r3, #0
 800195e:	623b      	str	r3, [r7, #32]
          break;
 8001960:	e000      	b.n	8001964 <HAL_GPIO_Init+0x130>
          break;
 8001962:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001964:	69bb      	ldr	r3, [r7, #24]
 8001966:	2bff      	cmp	r3, #255	; 0xff
 8001968:	d801      	bhi.n	800196e <HAL_GPIO_Init+0x13a>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	e001      	b.n	8001972 <HAL_GPIO_Init+0x13e>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	3304      	adds	r3, #4
 8001972:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001974:	69bb      	ldr	r3, [r7, #24]
 8001976:	2bff      	cmp	r3, #255	; 0xff
 8001978:	d802      	bhi.n	8001980 <HAL_GPIO_Init+0x14c>
 800197a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197c:	009b      	lsls	r3, r3, #2
 800197e:	e002      	b.n	8001986 <HAL_GPIO_Init+0x152>
 8001980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001982:	3b08      	subs	r3, #8
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	210f      	movs	r1, #15
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	fa01 f303 	lsl.w	r3, r1, r3
 8001994:	43db      	mvns	r3, r3
 8001996:	401a      	ands	r2, r3
 8001998:	6a39      	ldr	r1, [r7, #32]
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	fa01 f303 	lsl.w	r3, r1, r3
 80019a0:	431a      	orrs	r2, r3
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	f000 80b1 	beq.w	8001b16 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80019b4:	4b4d      	ldr	r3, [pc, #308]	; (8001aec <HAL_GPIO_Init+0x2b8>)
 80019b6:	699b      	ldr	r3, [r3, #24]
 80019b8:	4a4c      	ldr	r2, [pc, #304]	; (8001aec <HAL_GPIO_Init+0x2b8>)
 80019ba:	f043 0301 	orr.w	r3, r3, #1
 80019be:	6193      	str	r3, [r2, #24]
 80019c0:	4b4a      	ldr	r3, [pc, #296]	; (8001aec <HAL_GPIO_Init+0x2b8>)
 80019c2:	699b      	ldr	r3, [r3, #24]
 80019c4:	f003 0301 	and.w	r3, r3, #1
 80019c8:	60bb      	str	r3, [r7, #8]
 80019ca:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80019cc:	4a48      	ldr	r2, [pc, #288]	; (8001af0 <HAL_GPIO_Init+0x2bc>)
 80019ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d0:	089b      	lsrs	r3, r3, #2
 80019d2:	3302      	adds	r3, #2
 80019d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019d8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80019da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019dc:	f003 0303 	and.w	r3, r3, #3
 80019e0:	009b      	lsls	r3, r3, #2
 80019e2:	220f      	movs	r2, #15
 80019e4:	fa02 f303 	lsl.w	r3, r2, r3
 80019e8:	43db      	mvns	r3, r3
 80019ea:	68fa      	ldr	r2, [r7, #12]
 80019ec:	4013      	ands	r3, r2
 80019ee:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	4a40      	ldr	r2, [pc, #256]	; (8001af4 <HAL_GPIO_Init+0x2c0>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d013      	beq.n	8001a20 <HAL_GPIO_Init+0x1ec>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	4a3f      	ldr	r2, [pc, #252]	; (8001af8 <HAL_GPIO_Init+0x2c4>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d00d      	beq.n	8001a1c <HAL_GPIO_Init+0x1e8>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	4a3e      	ldr	r2, [pc, #248]	; (8001afc <HAL_GPIO_Init+0x2c8>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d007      	beq.n	8001a18 <HAL_GPIO_Init+0x1e4>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	4a3d      	ldr	r2, [pc, #244]	; (8001b00 <HAL_GPIO_Init+0x2cc>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d101      	bne.n	8001a14 <HAL_GPIO_Init+0x1e0>
 8001a10:	2303      	movs	r3, #3
 8001a12:	e006      	b.n	8001a22 <HAL_GPIO_Init+0x1ee>
 8001a14:	2304      	movs	r3, #4
 8001a16:	e004      	b.n	8001a22 <HAL_GPIO_Init+0x1ee>
 8001a18:	2302      	movs	r3, #2
 8001a1a:	e002      	b.n	8001a22 <HAL_GPIO_Init+0x1ee>
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e000      	b.n	8001a22 <HAL_GPIO_Init+0x1ee>
 8001a20:	2300      	movs	r3, #0
 8001a22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a24:	f002 0203 	and.w	r2, r2, #3
 8001a28:	0092      	lsls	r2, r2, #2
 8001a2a:	4093      	lsls	r3, r2
 8001a2c:	68fa      	ldr	r2, [r7, #12]
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a32:	492f      	ldr	r1, [pc, #188]	; (8001af0 <HAL_GPIO_Init+0x2bc>)
 8001a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a36:	089b      	lsrs	r3, r3, #2
 8001a38:	3302      	adds	r3, #2
 8001a3a:	68fa      	ldr	r2, [r7, #12]
 8001a3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d006      	beq.n	8001a5a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a4c:	4b2d      	ldr	r3, [pc, #180]	; (8001b04 <HAL_GPIO_Init+0x2d0>)
 8001a4e:	689a      	ldr	r2, [r3, #8]
 8001a50:	492c      	ldr	r1, [pc, #176]	; (8001b04 <HAL_GPIO_Init+0x2d0>)
 8001a52:	69bb      	ldr	r3, [r7, #24]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	608b      	str	r3, [r1, #8]
 8001a58:	e006      	b.n	8001a68 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a5a:	4b2a      	ldr	r3, [pc, #168]	; (8001b04 <HAL_GPIO_Init+0x2d0>)
 8001a5c:	689a      	ldr	r2, [r3, #8]
 8001a5e:	69bb      	ldr	r3, [r7, #24]
 8001a60:	43db      	mvns	r3, r3
 8001a62:	4928      	ldr	r1, [pc, #160]	; (8001b04 <HAL_GPIO_Init+0x2d0>)
 8001a64:	4013      	ands	r3, r2
 8001a66:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d006      	beq.n	8001a82 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a74:	4b23      	ldr	r3, [pc, #140]	; (8001b04 <HAL_GPIO_Init+0x2d0>)
 8001a76:	68da      	ldr	r2, [r3, #12]
 8001a78:	4922      	ldr	r1, [pc, #136]	; (8001b04 <HAL_GPIO_Init+0x2d0>)
 8001a7a:	69bb      	ldr	r3, [r7, #24]
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	60cb      	str	r3, [r1, #12]
 8001a80:	e006      	b.n	8001a90 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a82:	4b20      	ldr	r3, [pc, #128]	; (8001b04 <HAL_GPIO_Init+0x2d0>)
 8001a84:	68da      	ldr	r2, [r3, #12]
 8001a86:	69bb      	ldr	r3, [r7, #24]
 8001a88:	43db      	mvns	r3, r3
 8001a8a:	491e      	ldr	r1, [pc, #120]	; (8001b04 <HAL_GPIO_Init+0x2d0>)
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d006      	beq.n	8001aaa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a9c:	4b19      	ldr	r3, [pc, #100]	; (8001b04 <HAL_GPIO_Init+0x2d0>)
 8001a9e:	685a      	ldr	r2, [r3, #4]
 8001aa0:	4918      	ldr	r1, [pc, #96]	; (8001b04 <HAL_GPIO_Init+0x2d0>)
 8001aa2:	69bb      	ldr	r3, [r7, #24]
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	604b      	str	r3, [r1, #4]
 8001aa8:	e006      	b.n	8001ab8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001aaa:	4b16      	ldr	r3, [pc, #88]	; (8001b04 <HAL_GPIO_Init+0x2d0>)
 8001aac:	685a      	ldr	r2, [r3, #4]
 8001aae:	69bb      	ldr	r3, [r7, #24]
 8001ab0:	43db      	mvns	r3, r3
 8001ab2:	4914      	ldr	r1, [pc, #80]	; (8001b04 <HAL_GPIO_Init+0x2d0>)
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d021      	beq.n	8001b08 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ac4:	4b0f      	ldr	r3, [pc, #60]	; (8001b04 <HAL_GPIO_Init+0x2d0>)
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	490e      	ldr	r1, [pc, #56]	; (8001b04 <HAL_GPIO_Init+0x2d0>)
 8001aca:	69bb      	ldr	r3, [r7, #24]
 8001acc:	4313      	orrs	r3, r2
 8001ace:	600b      	str	r3, [r1, #0]
 8001ad0:	e021      	b.n	8001b16 <HAL_GPIO_Init+0x2e2>
 8001ad2:	bf00      	nop
 8001ad4:	10320000 	.word	0x10320000
 8001ad8:	10310000 	.word	0x10310000
 8001adc:	10220000 	.word	0x10220000
 8001ae0:	10210000 	.word	0x10210000
 8001ae4:	10120000 	.word	0x10120000
 8001ae8:	10110000 	.word	0x10110000
 8001aec:	40021000 	.word	0x40021000
 8001af0:	40010000 	.word	0x40010000
 8001af4:	40010800 	.word	0x40010800
 8001af8:	40010c00 	.word	0x40010c00
 8001afc:	40011000 	.word	0x40011000
 8001b00:	40011400 	.word	0x40011400
 8001b04:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b08:	4b0b      	ldr	r3, [pc, #44]	; (8001b38 <HAL_GPIO_Init+0x304>)
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	69bb      	ldr	r3, [r7, #24]
 8001b0e:	43db      	mvns	r3, r3
 8001b10:	4909      	ldr	r1, [pc, #36]	; (8001b38 <HAL_GPIO_Init+0x304>)
 8001b12:	4013      	ands	r3, r2
 8001b14:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b18:	3301      	adds	r3, #1
 8001b1a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b22:	fa22 f303 	lsr.w	r3, r2, r3
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	f47f ae8e 	bne.w	8001848 <HAL_GPIO_Init+0x14>
  }
}
 8001b2c:	bf00      	nop
 8001b2e:	bf00      	nop
 8001b30:	372c      	adds	r7, #44	; 0x2c
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bc80      	pop	{r7}
 8001b36:	4770      	bx	lr
 8001b38:	40010400 	.word	0x40010400

08001b3c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b085      	sub	sp, #20
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	460b      	mov	r3, r1
 8001b46:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	689a      	ldr	r2, [r3, #8]
 8001b4c:	887b      	ldrh	r3, [r7, #2]
 8001b4e:	4013      	ands	r3, r2
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d002      	beq.n	8001b5a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b54:	2301      	movs	r3, #1
 8001b56:	73fb      	strb	r3, [r7, #15]
 8001b58:	e001      	b.n	8001b5e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	3714      	adds	r7, #20
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bc80      	pop	{r7}
 8001b68:	4770      	bx	lr

08001b6a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b6a:	b480      	push	{r7}
 8001b6c:	b083      	sub	sp, #12
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	6078      	str	r0, [r7, #4]
 8001b72:	460b      	mov	r3, r1
 8001b74:	807b      	strh	r3, [r7, #2]
 8001b76:	4613      	mov	r3, r2
 8001b78:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b7a:	787b      	ldrb	r3, [r7, #1]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d003      	beq.n	8001b88 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b80:	887a      	ldrh	r2, [r7, #2]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b86:	e003      	b.n	8001b90 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b88:	887b      	ldrh	r3, [r7, #2]
 8001b8a:	041a      	lsls	r2, r3, #16
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	611a      	str	r2, [r3, #16]
}
 8001b90:	bf00      	nop
 8001b92:	370c      	adds	r7, #12
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bc80      	pop	{r7}
 8001b98:	4770      	bx	lr
	...

08001b9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b086      	sub	sp, #24
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d101      	bne.n	8001bae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e272      	b.n	8002094 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 0301 	and.w	r3, r3, #1
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	f000 8087 	beq.w	8001cca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bbc:	4b92      	ldr	r3, [pc, #584]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f003 030c 	and.w	r3, r3, #12
 8001bc4:	2b04      	cmp	r3, #4
 8001bc6:	d00c      	beq.n	8001be2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001bc8:	4b8f      	ldr	r3, [pc, #572]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f003 030c 	and.w	r3, r3, #12
 8001bd0:	2b08      	cmp	r3, #8
 8001bd2:	d112      	bne.n	8001bfa <HAL_RCC_OscConfig+0x5e>
 8001bd4:	4b8c      	ldr	r3, [pc, #560]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001be0:	d10b      	bne.n	8001bfa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001be2:	4b89      	ldr	r3, [pc, #548]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d06c      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x12c>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d168      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e24c      	b.n	8002094 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c02:	d106      	bne.n	8001c12 <HAL_RCC_OscConfig+0x76>
 8001c04:	4b80      	ldr	r3, [pc, #512]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a7f      	ldr	r2, [pc, #508]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001c0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c0e:	6013      	str	r3, [r2, #0]
 8001c10:	e02e      	b.n	8001c70 <HAL_RCC_OscConfig+0xd4>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d10c      	bne.n	8001c34 <HAL_RCC_OscConfig+0x98>
 8001c1a:	4b7b      	ldr	r3, [pc, #492]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a7a      	ldr	r2, [pc, #488]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001c20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c24:	6013      	str	r3, [r2, #0]
 8001c26:	4b78      	ldr	r3, [pc, #480]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a77      	ldr	r2, [pc, #476]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001c2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c30:	6013      	str	r3, [r2, #0]
 8001c32:	e01d      	b.n	8001c70 <HAL_RCC_OscConfig+0xd4>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c3c:	d10c      	bne.n	8001c58 <HAL_RCC_OscConfig+0xbc>
 8001c3e:	4b72      	ldr	r3, [pc, #456]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a71      	ldr	r2, [pc, #452]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001c44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c48:	6013      	str	r3, [r2, #0]
 8001c4a:	4b6f      	ldr	r3, [pc, #444]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a6e      	ldr	r2, [pc, #440]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001c50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c54:	6013      	str	r3, [r2, #0]
 8001c56:	e00b      	b.n	8001c70 <HAL_RCC_OscConfig+0xd4>
 8001c58:	4b6b      	ldr	r3, [pc, #428]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a6a      	ldr	r2, [pc, #424]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001c5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c62:	6013      	str	r3, [r2, #0]
 8001c64:	4b68      	ldr	r3, [pc, #416]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a67      	ldr	r2, [pc, #412]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001c6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c6e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d013      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c78:	f7ff fcc4 	bl	8001604 <HAL_GetTick>
 8001c7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c7e:	e008      	b.n	8001c92 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c80:	f7ff fcc0 	bl	8001604 <HAL_GetTick>
 8001c84:	4602      	mov	r2, r0
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	2b64      	cmp	r3, #100	; 0x64
 8001c8c:	d901      	bls.n	8001c92 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e200      	b.n	8002094 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c92:	4b5d      	ldr	r3, [pc, #372]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d0f0      	beq.n	8001c80 <HAL_RCC_OscConfig+0xe4>
 8001c9e:	e014      	b.n	8001cca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca0:	f7ff fcb0 	bl	8001604 <HAL_GetTick>
 8001ca4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ca6:	e008      	b.n	8001cba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ca8:	f7ff fcac 	bl	8001604 <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	2b64      	cmp	r3, #100	; 0x64
 8001cb4:	d901      	bls.n	8001cba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e1ec      	b.n	8002094 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cba:	4b53      	ldr	r3, [pc, #332]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d1f0      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x10c>
 8001cc6:	e000      	b.n	8001cca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0302 	and.w	r3, r3, #2
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d063      	beq.n	8001d9e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cd6:	4b4c      	ldr	r3, [pc, #304]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	f003 030c 	and.w	r3, r3, #12
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d00b      	beq.n	8001cfa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001ce2:	4b49      	ldr	r3, [pc, #292]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	f003 030c 	and.w	r3, r3, #12
 8001cea:	2b08      	cmp	r3, #8
 8001cec:	d11c      	bne.n	8001d28 <HAL_RCC_OscConfig+0x18c>
 8001cee:	4b46      	ldr	r3, [pc, #280]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d116      	bne.n	8001d28 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cfa:	4b43      	ldr	r3, [pc, #268]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 0302 	and.w	r3, r3, #2
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d005      	beq.n	8001d12 <HAL_RCC_OscConfig+0x176>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	691b      	ldr	r3, [r3, #16]
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d001      	beq.n	8001d12 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e1c0      	b.n	8002094 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d12:	4b3d      	ldr	r3, [pc, #244]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	695b      	ldr	r3, [r3, #20]
 8001d1e:	00db      	lsls	r3, r3, #3
 8001d20:	4939      	ldr	r1, [pc, #228]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001d22:	4313      	orrs	r3, r2
 8001d24:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d26:	e03a      	b.n	8001d9e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	691b      	ldr	r3, [r3, #16]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d020      	beq.n	8001d72 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d30:	4b36      	ldr	r3, [pc, #216]	; (8001e0c <HAL_RCC_OscConfig+0x270>)
 8001d32:	2201      	movs	r2, #1
 8001d34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d36:	f7ff fc65 	bl	8001604 <HAL_GetTick>
 8001d3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d3c:	e008      	b.n	8001d50 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d3e:	f7ff fc61 	bl	8001604 <HAL_GetTick>
 8001d42:	4602      	mov	r2, r0
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	2b02      	cmp	r3, #2
 8001d4a:	d901      	bls.n	8001d50 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d4c:	2303      	movs	r3, #3
 8001d4e:	e1a1      	b.n	8002094 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d50:	4b2d      	ldr	r3, [pc, #180]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 0302 	and.w	r3, r3, #2
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d0f0      	beq.n	8001d3e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d5c:	4b2a      	ldr	r3, [pc, #168]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	695b      	ldr	r3, [r3, #20]
 8001d68:	00db      	lsls	r3, r3, #3
 8001d6a:	4927      	ldr	r1, [pc, #156]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	600b      	str	r3, [r1, #0]
 8001d70:	e015      	b.n	8001d9e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d72:	4b26      	ldr	r3, [pc, #152]	; (8001e0c <HAL_RCC_OscConfig+0x270>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d78:	f7ff fc44 	bl	8001604 <HAL_GetTick>
 8001d7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d7e:	e008      	b.n	8001d92 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d80:	f7ff fc40 	bl	8001604 <HAL_GetTick>
 8001d84:	4602      	mov	r2, r0
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	2b02      	cmp	r3, #2
 8001d8c:	d901      	bls.n	8001d92 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e180      	b.n	8002094 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d92:	4b1d      	ldr	r3, [pc, #116]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 0302 	and.w	r3, r3, #2
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d1f0      	bne.n	8001d80 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 0308 	and.w	r3, r3, #8
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d03a      	beq.n	8001e20 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	699b      	ldr	r3, [r3, #24]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d019      	beq.n	8001de6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001db2:	4b17      	ldr	r3, [pc, #92]	; (8001e10 <HAL_RCC_OscConfig+0x274>)
 8001db4:	2201      	movs	r2, #1
 8001db6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001db8:	f7ff fc24 	bl	8001604 <HAL_GetTick>
 8001dbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dbe:	e008      	b.n	8001dd2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dc0:	f7ff fc20 	bl	8001604 <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d901      	bls.n	8001dd2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e160      	b.n	8002094 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dd2:	4b0d      	ldr	r3, [pc, #52]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd6:	f003 0302 	and.w	r3, r3, #2
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d0f0      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001dde:	2001      	movs	r0, #1
 8001de0:	f000 fa9c 	bl	800231c <RCC_Delay>
 8001de4:	e01c      	b.n	8001e20 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001de6:	4b0a      	ldr	r3, [pc, #40]	; (8001e10 <HAL_RCC_OscConfig+0x274>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dec:	f7ff fc0a 	bl	8001604 <HAL_GetTick>
 8001df0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001df2:	e00f      	b.n	8001e14 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001df4:	f7ff fc06 	bl	8001604 <HAL_GetTick>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	2b02      	cmp	r3, #2
 8001e00:	d908      	bls.n	8001e14 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e02:	2303      	movs	r3, #3
 8001e04:	e146      	b.n	8002094 <HAL_RCC_OscConfig+0x4f8>
 8001e06:	bf00      	nop
 8001e08:	40021000 	.word	0x40021000
 8001e0c:	42420000 	.word	0x42420000
 8001e10:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e14:	4b92      	ldr	r3, [pc, #584]	; (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e18:	f003 0302 	and.w	r3, r3, #2
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d1e9      	bne.n	8001df4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0304 	and.w	r3, r3, #4
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	f000 80a6 	beq.w	8001f7a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e32:	4b8b      	ldr	r3, [pc, #556]	; (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001e34:	69db      	ldr	r3, [r3, #28]
 8001e36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d10d      	bne.n	8001e5a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e3e:	4b88      	ldr	r3, [pc, #544]	; (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001e40:	69db      	ldr	r3, [r3, #28]
 8001e42:	4a87      	ldr	r2, [pc, #540]	; (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001e44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e48:	61d3      	str	r3, [r2, #28]
 8001e4a:	4b85      	ldr	r3, [pc, #532]	; (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001e4c:	69db      	ldr	r3, [r3, #28]
 8001e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e52:	60bb      	str	r3, [r7, #8]
 8001e54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e56:	2301      	movs	r3, #1
 8001e58:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e5a:	4b82      	ldr	r3, [pc, #520]	; (8002064 <HAL_RCC_OscConfig+0x4c8>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d118      	bne.n	8001e98 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e66:	4b7f      	ldr	r3, [pc, #508]	; (8002064 <HAL_RCC_OscConfig+0x4c8>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a7e      	ldr	r2, [pc, #504]	; (8002064 <HAL_RCC_OscConfig+0x4c8>)
 8001e6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e72:	f7ff fbc7 	bl	8001604 <HAL_GetTick>
 8001e76:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e78:	e008      	b.n	8001e8c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e7a:	f7ff fbc3 	bl	8001604 <HAL_GetTick>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	1ad3      	subs	r3, r2, r3
 8001e84:	2b64      	cmp	r3, #100	; 0x64
 8001e86:	d901      	bls.n	8001e8c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001e88:	2303      	movs	r3, #3
 8001e8a:	e103      	b.n	8002094 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e8c:	4b75      	ldr	r3, [pc, #468]	; (8002064 <HAL_RCC_OscConfig+0x4c8>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d0f0      	beq.n	8001e7a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d106      	bne.n	8001eae <HAL_RCC_OscConfig+0x312>
 8001ea0:	4b6f      	ldr	r3, [pc, #444]	; (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001ea2:	6a1b      	ldr	r3, [r3, #32]
 8001ea4:	4a6e      	ldr	r2, [pc, #440]	; (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001ea6:	f043 0301 	orr.w	r3, r3, #1
 8001eaa:	6213      	str	r3, [r2, #32]
 8001eac:	e02d      	b.n	8001f0a <HAL_RCC_OscConfig+0x36e>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	68db      	ldr	r3, [r3, #12]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d10c      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x334>
 8001eb6:	4b6a      	ldr	r3, [pc, #424]	; (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001eb8:	6a1b      	ldr	r3, [r3, #32]
 8001eba:	4a69      	ldr	r2, [pc, #420]	; (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001ebc:	f023 0301 	bic.w	r3, r3, #1
 8001ec0:	6213      	str	r3, [r2, #32]
 8001ec2:	4b67      	ldr	r3, [pc, #412]	; (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001ec4:	6a1b      	ldr	r3, [r3, #32]
 8001ec6:	4a66      	ldr	r2, [pc, #408]	; (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001ec8:	f023 0304 	bic.w	r3, r3, #4
 8001ecc:	6213      	str	r3, [r2, #32]
 8001ece:	e01c      	b.n	8001f0a <HAL_RCC_OscConfig+0x36e>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	2b05      	cmp	r3, #5
 8001ed6:	d10c      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x356>
 8001ed8:	4b61      	ldr	r3, [pc, #388]	; (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001eda:	6a1b      	ldr	r3, [r3, #32]
 8001edc:	4a60      	ldr	r2, [pc, #384]	; (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001ede:	f043 0304 	orr.w	r3, r3, #4
 8001ee2:	6213      	str	r3, [r2, #32]
 8001ee4:	4b5e      	ldr	r3, [pc, #376]	; (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001ee6:	6a1b      	ldr	r3, [r3, #32]
 8001ee8:	4a5d      	ldr	r2, [pc, #372]	; (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001eea:	f043 0301 	orr.w	r3, r3, #1
 8001eee:	6213      	str	r3, [r2, #32]
 8001ef0:	e00b      	b.n	8001f0a <HAL_RCC_OscConfig+0x36e>
 8001ef2:	4b5b      	ldr	r3, [pc, #364]	; (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001ef4:	6a1b      	ldr	r3, [r3, #32]
 8001ef6:	4a5a      	ldr	r2, [pc, #360]	; (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001ef8:	f023 0301 	bic.w	r3, r3, #1
 8001efc:	6213      	str	r3, [r2, #32]
 8001efe:	4b58      	ldr	r3, [pc, #352]	; (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001f00:	6a1b      	ldr	r3, [r3, #32]
 8001f02:	4a57      	ldr	r2, [pc, #348]	; (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001f04:	f023 0304 	bic.w	r3, r3, #4
 8001f08:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	68db      	ldr	r3, [r3, #12]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d015      	beq.n	8001f3e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f12:	f7ff fb77 	bl	8001604 <HAL_GetTick>
 8001f16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f18:	e00a      	b.n	8001f30 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f1a:	f7ff fb73 	bl	8001604 <HAL_GetTick>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	1ad3      	subs	r3, r2, r3
 8001f24:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d901      	bls.n	8001f30 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	e0b1      	b.n	8002094 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f30:	4b4b      	ldr	r3, [pc, #300]	; (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001f32:	6a1b      	ldr	r3, [r3, #32]
 8001f34:	f003 0302 	and.w	r3, r3, #2
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d0ee      	beq.n	8001f1a <HAL_RCC_OscConfig+0x37e>
 8001f3c:	e014      	b.n	8001f68 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f3e:	f7ff fb61 	bl	8001604 <HAL_GetTick>
 8001f42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f44:	e00a      	b.n	8001f5c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f46:	f7ff fb5d 	bl	8001604 <HAL_GetTick>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	1ad3      	subs	r3, r2, r3
 8001f50:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d901      	bls.n	8001f5c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001f58:	2303      	movs	r3, #3
 8001f5a:	e09b      	b.n	8002094 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f5c:	4b40      	ldr	r3, [pc, #256]	; (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001f5e:	6a1b      	ldr	r3, [r3, #32]
 8001f60:	f003 0302 	and.w	r3, r3, #2
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d1ee      	bne.n	8001f46 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f68:	7dfb      	ldrb	r3, [r7, #23]
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d105      	bne.n	8001f7a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f6e:	4b3c      	ldr	r3, [pc, #240]	; (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001f70:	69db      	ldr	r3, [r3, #28]
 8001f72:	4a3b      	ldr	r2, [pc, #236]	; (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001f74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f78:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	69db      	ldr	r3, [r3, #28]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	f000 8087 	beq.w	8002092 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f84:	4b36      	ldr	r3, [pc, #216]	; (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f003 030c 	and.w	r3, r3, #12
 8001f8c:	2b08      	cmp	r3, #8
 8001f8e:	d061      	beq.n	8002054 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	69db      	ldr	r3, [r3, #28]
 8001f94:	2b02      	cmp	r3, #2
 8001f96:	d146      	bne.n	8002026 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f98:	4b33      	ldr	r3, [pc, #204]	; (8002068 <HAL_RCC_OscConfig+0x4cc>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f9e:	f7ff fb31 	bl	8001604 <HAL_GetTick>
 8001fa2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fa4:	e008      	b.n	8001fb8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fa6:	f7ff fb2d 	bl	8001604 <HAL_GetTick>
 8001faa:	4602      	mov	r2, r0
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	2b02      	cmp	r3, #2
 8001fb2:	d901      	bls.n	8001fb8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	e06d      	b.n	8002094 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fb8:	4b29      	ldr	r3, [pc, #164]	; (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d1f0      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6a1b      	ldr	r3, [r3, #32]
 8001fc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fcc:	d108      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001fce:	4b24      	ldr	r3, [pc, #144]	; (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	4921      	ldr	r1, [pc, #132]	; (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fe0:	4b1f      	ldr	r3, [pc, #124]	; (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6a19      	ldr	r1, [r3, #32]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff0:	430b      	orrs	r3, r1
 8001ff2:	491b      	ldr	r1, [pc, #108]	; (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ff8:	4b1b      	ldr	r3, [pc, #108]	; (8002068 <HAL_RCC_OscConfig+0x4cc>)
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ffe:	f7ff fb01 	bl	8001604 <HAL_GetTick>
 8002002:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002004:	e008      	b.n	8002018 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002006:	f7ff fafd 	bl	8001604 <HAL_GetTick>
 800200a:	4602      	mov	r2, r0
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	1ad3      	subs	r3, r2, r3
 8002010:	2b02      	cmp	r3, #2
 8002012:	d901      	bls.n	8002018 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002014:	2303      	movs	r3, #3
 8002016:	e03d      	b.n	8002094 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002018:	4b11      	ldr	r3, [pc, #68]	; (8002060 <HAL_RCC_OscConfig+0x4c4>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002020:	2b00      	cmp	r3, #0
 8002022:	d0f0      	beq.n	8002006 <HAL_RCC_OscConfig+0x46a>
 8002024:	e035      	b.n	8002092 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002026:	4b10      	ldr	r3, [pc, #64]	; (8002068 <HAL_RCC_OscConfig+0x4cc>)
 8002028:	2200      	movs	r2, #0
 800202a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800202c:	f7ff faea 	bl	8001604 <HAL_GetTick>
 8002030:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002032:	e008      	b.n	8002046 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002034:	f7ff fae6 	bl	8001604 <HAL_GetTick>
 8002038:	4602      	mov	r2, r0
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	2b02      	cmp	r3, #2
 8002040:	d901      	bls.n	8002046 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002042:	2303      	movs	r3, #3
 8002044:	e026      	b.n	8002094 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002046:	4b06      	ldr	r3, [pc, #24]	; (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d1f0      	bne.n	8002034 <HAL_RCC_OscConfig+0x498>
 8002052:	e01e      	b.n	8002092 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	69db      	ldr	r3, [r3, #28]
 8002058:	2b01      	cmp	r3, #1
 800205a:	d107      	bne.n	800206c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	e019      	b.n	8002094 <HAL_RCC_OscConfig+0x4f8>
 8002060:	40021000 	.word	0x40021000
 8002064:	40007000 	.word	0x40007000
 8002068:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800206c:	4b0b      	ldr	r3, [pc, #44]	; (800209c <HAL_RCC_OscConfig+0x500>)
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6a1b      	ldr	r3, [r3, #32]
 800207c:	429a      	cmp	r2, r3
 800207e:	d106      	bne.n	800208e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800208a:	429a      	cmp	r2, r3
 800208c:	d001      	beq.n	8002092 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e000      	b.n	8002094 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002092:	2300      	movs	r3, #0
}
 8002094:	4618      	mov	r0, r3
 8002096:	3718      	adds	r7, #24
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	40021000 	.word	0x40021000

080020a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d101      	bne.n	80020b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e0d0      	b.n	8002256 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020b4:	4b6a      	ldr	r3, [pc, #424]	; (8002260 <HAL_RCC_ClockConfig+0x1c0>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 0307 	and.w	r3, r3, #7
 80020bc:	683a      	ldr	r2, [r7, #0]
 80020be:	429a      	cmp	r2, r3
 80020c0:	d910      	bls.n	80020e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020c2:	4b67      	ldr	r3, [pc, #412]	; (8002260 <HAL_RCC_ClockConfig+0x1c0>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f023 0207 	bic.w	r2, r3, #7
 80020ca:	4965      	ldr	r1, [pc, #404]	; (8002260 <HAL_RCC_ClockConfig+0x1c0>)
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020d2:	4b63      	ldr	r3, [pc, #396]	; (8002260 <HAL_RCC_ClockConfig+0x1c0>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0307 	and.w	r3, r3, #7
 80020da:	683a      	ldr	r2, [r7, #0]
 80020dc:	429a      	cmp	r2, r3
 80020de:	d001      	beq.n	80020e4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	e0b8      	b.n	8002256 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0302 	and.w	r3, r3, #2
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d020      	beq.n	8002132 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0304 	and.w	r3, r3, #4
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d005      	beq.n	8002108 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020fc:	4b59      	ldr	r3, [pc, #356]	; (8002264 <HAL_RCC_ClockConfig+0x1c4>)
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	4a58      	ldr	r2, [pc, #352]	; (8002264 <HAL_RCC_ClockConfig+0x1c4>)
 8002102:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002106:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0308 	and.w	r3, r3, #8
 8002110:	2b00      	cmp	r3, #0
 8002112:	d005      	beq.n	8002120 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002114:	4b53      	ldr	r3, [pc, #332]	; (8002264 <HAL_RCC_ClockConfig+0x1c4>)
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	4a52      	ldr	r2, [pc, #328]	; (8002264 <HAL_RCC_ClockConfig+0x1c4>)
 800211a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800211e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002120:	4b50      	ldr	r3, [pc, #320]	; (8002264 <HAL_RCC_ClockConfig+0x1c4>)
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	494d      	ldr	r1, [pc, #308]	; (8002264 <HAL_RCC_ClockConfig+0x1c4>)
 800212e:	4313      	orrs	r3, r2
 8002130:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0301 	and.w	r3, r3, #1
 800213a:	2b00      	cmp	r3, #0
 800213c:	d040      	beq.n	80021c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	2b01      	cmp	r3, #1
 8002144:	d107      	bne.n	8002156 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002146:	4b47      	ldr	r3, [pc, #284]	; (8002264 <HAL_RCC_ClockConfig+0x1c4>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d115      	bne.n	800217e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e07f      	b.n	8002256 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	2b02      	cmp	r3, #2
 800215c:	d107      	bne.n	800216e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800215e:	4b41      	ldr	r3, [pc, #260]	; (8002264 <HAL_RCC_ClockConfig+0x1c4>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d109      	bne.n	800217e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e073      	b.n	8002256 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800216e:	4b3d      	ldr	r3, [pc, #244]	; (8002264 <HAL_RCC_ClockConfig+0x1c4>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0302 	and.w	r3, r3, #2
 8002176:	2b00      	cmp	r3, #0
 8002178:	d101      	bne.n	800217e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e06b      	b.n	8002256 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800217e:	4b39      	ldr	r3, [pc, #228]	; (8002264 <HAL_RCC_ClockConfig+0x1c4>)
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	f023 0203 	bic.w	r2, r3, #3
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	4936      	ldr	r1, [pc, #216]	; (8002264 <HAL_RCC_ClockConfig+0x1c4>)
 800218c:	4313      	orrs	r3, r2
 800218e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002190:	f7ff fa38 	bl	8001604 <HAL_GetTick>
 8002194:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002196:	e00a      	b.n	80021ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002198:	f7ff fa34 	bl	8001604 <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d901      	bls.n	80021ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e053      	b.n	8002256 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021ae:	4b2d      	ldr	r3, [pc, #180]	; (8002264 <HAL_RCC_ClockConfig+0x1c4>)
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	f003 020c 	and.w	r2, r3, #12
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	429a      	cmp	r2, r3
 80021be:	d1eb      	bne.n	8002198 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021c0:	4b27      	ldr	r3, [pc, #156]	; (8002260 <HAL_RCC_ClockConfig+0x1c0>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0307 	and.w	r3, r3, #7
 80021c8:	683a      	ldr	r2, [r7, #0]
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d210      	bcs.n	80021f0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ce:	4b24      	ldr	r3, [pc, #144]	; (8002260 <HAL_RCC_ClockConfig+0x1c0>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f023 0207 	bic.w	r2, r3, #7
 80021d6:	4922      	ldr	r1, [pc, #136]	; (8002260 <HAL_RCC_ClockConfig+0x1c0>)
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	4313      	orrs	r3, r2
 80021dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021de:	4b20      	ldr	r3, [pc, #128]	; (8002260 <HAL_RCC_ClockConfig+0x1c0>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0307 	and.w	r3, r3, #7
 80021e6:	683a      	ldr	r2, [r7, #0]
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d001      	beq.n	80021f0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e032      	b.n	8002256 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0304 	and.w	r3, r3, #4
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d008      	beq.n	800220e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021fc:	4b19      	ldr	r3, [pc, #100]	; (8002264 <HAL_RCC_ClockConfig+0x1c4>)
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	4916      	ldr	r1, [pc, #88]	; (8002264 <HAL_RCC_ClockConfig+0x1c4>)
 800220a:	4313      	orrs	r3, r2
 800220c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 0308 	and.w	r3, r3, #8
 8002216:	2b00      	cmp	r3, #0
 8002218:	d009      	beq.n	800222e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800221a:	4b12      	ldr	r3, [pc, #72]	; (8002264 <HAL_RCC_ClockConfig+0x1c4>)
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	691b      	ldr	r3, [r3, #16]
 8002226:	00db      	lsls	r3, r3, #3
 8002228:	490e      	ldr	r1, [pc, #56]	; (8002264 <HAL_RCC_ClockConfig+0x1c4>)
 800222a:	4313      	orrs	r3, r2
 800222c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800222e:	f000 f821 	bl	8002274 <HAL_RCC_GetSysClockFreq>
 8002232:	4602      	mov	r2, r0
 8002234:	4b0b      	ldr	r3, [pc, #44]	; (8002264 <HAL_RCC_ClockConfig+0x1c4>)
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	091b      	lsrs	r3, r3, #4
 800223a:	f003 030f 	and.w	r3, r3, #15
 800223e:	490a      	ldr	r1, [pc, #40]	; (8002268 <HAL_RCC_ClockConfig+0x1c8>)
 8002240:	5ccb      	ldrb	r3, [r1, r3]
 8002242:	fa22 f303 	lsr.w	r3, r2, r3
 8002246:	4a09      	ldr	r2, [pc, #36]	; (800226c <HAL_RCC_ClockConfig+0x1cc>)
 8002248:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800224a:	4b09      	ldr	r3, [pc, #36]	; (8002270 <HAL_RCC_ClockConfig+0x1d0>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4618      	mov	r0, r3
 8002250:	f7ff f996 	bl	8001580 <HAL_InitTick>

  return HAL_OK;
 8002254:	2300      	movs	r3, #0
}
 8002256:	4618      	mov	r0, r3
 8002258:	3710      	adds	r7, #16
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	40022000 	.word	0x40022000
 8002264:	40021000 	.word	0x40021000
 8002268:	08003294 	.word	0x08003294
 800226c:	20000038 	.word	0x20000038
 8002270:	20000040 	.word	0x20000040

08002274 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002274:	b480      	push	{r7}
 8002276:	b087      	sub	sp, #28
 8002278:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800227a:	2300      	movs	r3, #0
 800227c:	60fb      	str	r3, [r7, #12]
 800227e:	2300      	movs	r3, #0
 8002280:	60bb      	str	r3, [r7, #8]
 8002282:	2300      	movs	r3, #0
 8002284:	617b      	str	r3, [r7, #20]
 8002286:	2300      	movs	r3, #0
 8002288:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800228a:	2300      	movs	r3, #0
 800228c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800228e:	4b1e      	ldr	r3, [pc, #120]	; (8002308 <HAL_RCC_GetSysClockFreq+0x94>)
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	f003 030c 	and.w	r3, r3, #12
 800229a:	2b04      	cmp	r3, #4
 800229c:	d002      	beq.n	80022a4 <HAL_RCC_GetSysClockFreq+0x30>
 800229e:	2b08      	cmp	r3, #8
 80022a0:	d003      	beq.n	80022aa <HAL_RCC_GetSysClockFreq+0x36>
 80022a2:	e027      	b.n	80022f4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022a4:	4b19      	ldr	r3, [pc, #100]	; (800230c <HAL_RCC_GetSysClockFreq+0x98>)
 80022a6:	613b      	str	r3, [r7, #16]
      break;
 80022a8:	e027      	b.n	80022fa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	0c9b      	lsrs	r3, r3, #18
 80022ae:	f003 030f 	and.w	r3, r3, #15
 80022b2:	4a17      	ldr	r2, [pc, #92]	; (8002310 <HAL_RCC_GetSysClockFreq+0x9c>)
 80022b4:	5cd3      	ldrb	r3, [r2, r3]
 80022b6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d010      	beq.n	80022e4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80022c2:	4b11      	ldr	r3, [pc, #68]	; (8002308 <HAL_RCC_GetSysClockFreq+0x94>)
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	0c5b      	lsrs	r3, r3, #17
 80022c8:	f003 0301 	and.w	r3, r3, #1
 80022cc:	4a11      	ldr	r2, [pc, #68]	; (8002314 <HAL_RCC_GetSysClockFreq+0xa0>)
 80022ce:	5cd3      	ldrb	r3, [r2, r3]
 80022d0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4a0d      	ldr	r2, [pc, #52]	; (800230c <HAL_RCC_GetSysClockFreq+0x98>)
 80022d6:	fb03 f202 	mul.w	r2, r3, r2
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80022e0:	617b      	str	r3, [r7, #20]
 80022e2:	e004      	b.n	80022ee <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	4a0c      	ldr	r2, [pc, #48]	; (8002318 <HAL_RCC_GetSysClockFreq+0xa4>)
 80022e8:	fb02 f303 	mul.w	r3, r2, r3
 80022ec:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	613b      	str	r3, [r7, #16]
      break;
 80022f2:	e002      	b.n	80022fa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80022f4:	4b05      	ldr	r3, [pc, #20]	; (800230c <HAL_RCC_GetSysClockFreq+0x98>)
 80022f6:	613b      	str	r3, [r7, #16]
      break;
 80022f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022fa:	693b      	ldr	r3, [r7, #16]
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	371c      	adds	r7, #28
 8002300:	46bd      	mov	sp, r7
 8002302:	bc80      	pop	{r7}
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	40021000 	.word	0x40021000
 800230c:	007a1200 	.word	0x007a1200
 8002310:	080032a4 	.word	0x080032a4
 8002314:	080032b4 	.word	0x080032b4
 8002318:	003d0900 	.word	0x003d0900

0800231c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800231c:	b480      	push	{r7}
 800231e:	b085      	sub	sp, #20
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002324:	4b0a      	ldr	r3, [pc, #40]	; (8002350 <RCC_Delay+0x34>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a0a      	ldr	r2, [pc, #40]	; (8002354 <RCC_Delay+0x38>)
 800232a:	fba2 2303 	umull	r2, r3, r2, r3
 800232e:	0a5b      	lsrs	r3, r3, #9
 8002330:	687a      	ldr	r2, [r7, #4]
 8002332:	fb02 f303 	mul.w	r3, r2, r3
 8002336:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002338:	bf00      	nop
  }
  while (Delay --);
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	1e5a      	subs	r2, r3, #1
 800233e:	60fa      	str	r2, [r7, #12]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d1f9      	bne.n	8002338 <RCC_Delay+0x1c>
}
 8002344:	bf00      	nop
 8002346:	bf00      	nop
 8002348:	3714      	adds	r7, #20
 800234a:	46bd      	mov	sp, r7
 800234c:	bc80      	pop	{r7}
 800234e:	4770      	bx	lr
 8002350:	20000038 	.word	0x20000038
 8002354:	10624dd3 	.word	0x10624dd3

08002358 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d101      	bne.n	800236a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e041      	b.n	80023ee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002370:	b2db      	uxtb	r3, r3
 8002372:	2b00      	cmp	r3, #0
 8002374:	d106      	bne.n	8002384 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2200      	movs	r2, #0
 800237a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f7fe ff14 	bl	80011ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2202      	movs	r2, #2
 8002388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	3304      	adds	r3, #4
 8002394:	4619      	mov	r1, r3
 8002396:	4610      	mov	r0, r2
 8002398:	f000 fc30 	bl	8002bfc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2201      	movs	r2, #1
 80023a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2201      	movs	r2, #1
 80023a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2201      	movs	r2, #1
 80023b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2201      	movs	r2, #1
 80023b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2201      	movs	r2, #1
 80023c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2201      	movs	r2, #1
 80023c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2201      	movs	r2, #1
 80023d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2201      	movs	r2, #1
 80023d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2201      	movs	r2, #1
 80023e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2201      	movs	r2, #1
 80023e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80023ec:	2300      	movs	r3, #0
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3708      	adds	r7, #8
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
	...

080023f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b085      	sub	sp, #20
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002406:	b2db      	uxtb	r3, r3
 8002408:	2b01      	cmp	r3, #1
 800240a:	d001      	beq.n	8002410 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	e03a      	b.n	8002486 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2202      	movs	r2, #2
 8002414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	68da      	ldr	r2, [r3, #12]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f042 0201 	orr.w	r2, r2, #1
 8002426:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a18      	ldr	r2, [pc, #96]	; (8002490 <HAL_TIM_Base_Start_IT+0x98>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d00e      	beq.n	8002450 <HAL_TIM_Base_Start_IT+0x58>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800243a:	d009      	beq.n	8002450 <HAL_TIM_Base_Start_IT+0x58>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a14      	ldr	r2, [pc, #80]	; (8002494 <HAL_TIM_Base_Start_IT+0x9c>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d004      	beq.n	8002450 <HAL_TIM_Base_Start_IT+0x58>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a13      	ldr	r2, [pc, #76]	; (8002498 <HAL_TIM_Base_Start_IT+0xa0>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d111      	bne.n	8002474 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	f003 0307 	and.w	r3, r3, #7
 800245a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2b06      	cmp	r3, #6
 8002460:	d010      	beq.n	8002484 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f042 0201 	orr.w	r2, r2, #1
 8002470:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002472:	e007      	b.n	8002484 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f042 0201 	orr.w	r2, r2, #1
 8002482:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002484:	2300      	movs	r3, #0
}
 8002486:	4618      	mov	r0, r3
 8002488:	3714      	adds	r7, #20
 800248a:	46bd      	mov	sp, r7
 800248c:	bc80      	pop	{r7}
 800248e:	4770      	bx	lr
 8002490:	40012c00 	.word	0x40012c00
 8002494:	40000400 	.word	0x40000400
 8002498:	40000800 	.word	0x40000800

0800249c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d101      	bne.n	80024ae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e041      	b.n	8002532 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d106      	bne.n	80024c8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2200      	movs	r2, #0
 80024be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f000 f839 	bl	800253a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2202      	movs	r2, #2
 80024cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	3304      	adds	r3, #4
 80024d8:	4619      	mov	r1, r3
 80024da:	4610      	mov	r0, r2
 80024dc:	f000 fb8e 	bl	8002bfc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2201      	movs	r2, #1
 80024e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2201      	movs	r2, #1
 80024ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2201      	movs	r2, #1
 80024f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2201      	movs	r2, #1
 80024fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2201      	movs	r2, #1
 8002504:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2201      	movs	r2, #1
 800250c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2201      	movs	r2, #1
 8002514:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2201      	movs	r2, #1
 800251c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2201      	movs	r2, #1
 8002524:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2201      	movs	r2, #1
 800252c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002530:	2300      	movs	r3, #0
}
 8002532:	4618      	mov	r0, r3
 8002534:	3708      	adds	r7, #8
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}

0800253a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800253a:	b480      	push	{r7}
 800253c:	b083      	sub	sp, #12
 800253e:	af00      	add	r7, sp, #0
 8002540:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002542:	bf00      	nop
 8002544:	370c      	adds	r7, #12
 8002546:	46bd      	mov	sp, r7
 8002548:	bc80      	pop	{r7}
 800254a:	4770      	bx	lr

0800254c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b084      	sub	sp, #16
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d109      	bne.n	8002570 <HAL_TIM_PWM_Start+0x24>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002562:	b2db      	uxtb	r3, r3
 8002564:	2b01      	cmp	r3, #1
 8002566:	bf14      	ite	ne
 8002568:	2301      	movne	r3, #1
 800256a:	2300      	moveq	r3, #0
 800256c:	b2db      	uxtb	r3, r3
 800256e:	e022      	b.n	80025b6 <HAL_TIM_PWM_Start+0x6a>
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	2b04      	cmp	r3, #4
 8002574:	d109      	bne.n	800258a <HAL_TIM_PWM_Start+0x3e>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800257c:	b2db      	uxtb	r3, r3
 800257e:	2b01      	cmp	r3, #1
 8002580:	bf14      	ite	ne
 8002582:	2301      	movne	r3, #1
 8002584:	2300      	moveq	r3, #0
 8002586:	b2db      	uxtb	r3, r3
 8002588:	e015      	b.n	80025b6 <HAL_TIM_PWM_Start+0x6a>
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	2b08      	cmp	r3, #8
 800258e:	d109      	bne.n	80025a4 <HAL_TIM_PWM_Start+0x58>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002596:	b2db      	uxtb	r3, r3
 8002598:	2b01      	cmp	r3, #1
 800259a:	bf14      	ite	ne
 800259c:	2301      	movne	r3, #1
 800259e:	2300      	moveq	r3, #0
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	e008      	b.n	80025b6 <HAL_TIM_PWM_Start+0x6a>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	bf14      	ite	ne
 80025b0:	2301      	movne	r3, #1
 80025b2:	2300      	moveq	r3, #0
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d001      	beq.n	80025be <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e05e      	b.n	800267c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d104      	bne.n	80025ce <HAL_TIM_PWM_Start+0x82>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2202      	movs	r2, #2
 80025c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80025cc:	e013      	b.n	80025f6 <HAL_TIM_PWM_Start+0xaa>
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	2b04      	cmp	r3, #4
 80025d2:	d104      	bne.n	80025de <HAL_TIM_PWM_Start+0x92>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2202      	movs	r2, #2
 80025d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80025dc:	e00b      	b.n	80025f6 <HAL_TIM_PWM_Start+0xaa>
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	2b08      	cmp	r3, #8
 80025e2:	d104      	bne.n	80025ee <HAL_TIM_PWM_Start+0xa2>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2202      	movs	r2, #2
 80025e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80025ec:	e003      	b.n	80025f6 <HAL_TIM_PWM_Start+0xaa>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2202      	movs	r2, #2
 80025f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	2201      	movs	r2, #1
 80025fc:	6839      	ldr	r1, [r7, #0]
 80025fe:	4618      	mov	r0, r3
 8002600:	f000 fd7c 	bl	80030fc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a1e      	ldr	r2, [pc, #120]	; (8002684 <HAL_TIM_PWM_Start+0x138>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d107      	bne.n	800261e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800261c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a18      	ldr	r2, [pc, #96]	; (8002684 <HAL_TIM_PWM_Start+0x138>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d00e      	beq.n	8002646 <HAL_TIM_PWM_Start+0xfa>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002630:	d009      	beq.n	8002646 <HAL_TIM_PWM_Start+0xfa>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a14      	ldr	r2, [pc, #80]	; (8002688 <HAL_TIM_PWM_Start+0x13c>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d004      	beq.n	8002646 <HAL_TIM_PWM_Start+0xfa>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a12      	ldr	r2, [pc, #72]	; (800268c <HAL_TIM_PWM_Start+0x140>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d111      	bne.n	800266a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	f003 0307 	and.w	r3, r3, #7
 8002650:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2b06      	cmp	r3, #6
 8002656:	d010      	beq.n	800267a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f042 0201 	orr.w	r2, r2, #1
 8002666:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002668:	e007      	b.n	800267a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f042 0201 	orr.w	r2, r2, #1
 8002678:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800267a:	2300      	movs	r3, #0
}
 800267c:	4618      	mov	r0, r3
 800267e:	3710      	adds	r7, #16
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	40012c00 	.word	0x40012c00
 8002688:	40000400 	.word	0x40000400
 800268c:	40000800 	.word	0x40000800

08002690 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	691b      	ldr	r3, [r3, #16]
 800269e:	f003 0302 	and.w	r3, r3, #2
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d122      	bne.n	80026ec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	f003 0302 	and.w	r3, r3, #2
 80026b0:	2b02      	cmp	r3, #2
 80026b2:	d11b      	bne.n	80026ec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f06f 0202 	mvn.w	r2, #2
 80026bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2201      	movs	r2, #1
 80026c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	699b      	ldr	r3, [r3, #24]
 80026ca:	f003 0303 	and.w	r3, r3, #3
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d003      	beq.n	80026da <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f000 fa76 	bl	8002bc4 <HAL_TIM_IC_CaptureCallback>
 80026d8:	e005      	b.n	80026e6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f000 fa69 	bl	8002bb2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	f000 fa78 	bl	8002bd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2200      	movs	r2, #0
 80026ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	691b      	ldr	r3, [r3, #16]
 80026f2:	f003 0304 	and.w	r3, r3, #4
 80026f6:	2b04      	cmp	r3, #4
 80026f8:	d122      	bne.n	8002740 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	f003 0304 	and.w	r3, r3, #4
 8002704:	2b04      	cmp	r3, #4
 8002706:	d11b      	bne.n	8002740 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f06f 0204 	mvn.w	r2, #4
 8002710:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2202      	movs	r2, #2
 8002716:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	699b      	ldr	r3, [r3, #24]
 800271e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002722:	2b00      	cmp	r3, #0
 8002724:	d003      	beq.n	800272e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f000 fa4c 	bl	8002bc4 <HAL_TIM_IC_CaptureCallback>
 800272c:	e005      	b.n	800273a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f000 fa3f 	bl	8002bb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	f000 fa4e 	bl	8002bd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2200      	movs	r2, #0
 800273e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	691b      	ldr	r3, [r3, #16]
 8002746:	f003 0308 	and.w	r3, r3, #8
 800274a:	2b08      	cmp	r3, #8
 800274c:	d122      	bne.n	8002794 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	f003 0308 	and.w	r3, r3, #8
 8002758:	2b08      	cmp	r3, #8
 800275a:	d11b      	bne.n	8002794 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f06f 0208 	mvn.w	r2, #8
 8002764:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2204      	movs	r2, #4
 800276a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	69db      	ldr	r3, [r3, #28]
 8002772:	f003 0303 	and.w	r3, r3, #3
 8002776:	2b00      	cmp	r3, #0
 8002778:	d003      	beq.n	8002782 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f000 fa22 	bl	8002bc4 <HAL_TIM_IC_CaptureCallback>
 8002780:	e005      	b.n	800278e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f000 fa15 	bl	8002bb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002788:	6878      	ldr	r0, [r7, #4]
 800278a:	f000 fa24 	bl	8002bd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2200      	movs	r2, #0
 8002792:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	691b      	ldr	r3, [r3, #16]
 800279a:	f003 0310 	and.w	r3, r3, #16
 800279e:	2b10      	cmp	r3, #16
 80027a0:	d122      	bne.n	80027e8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	f003 0310 	and.w	r3, r3, #16
 80027ac:	2b10      	cmp	r3, #16
 80027ae:	d11b      	bne.n	80027e8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f06f 0210 	mvn.w	r2, #16
 80027b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2208      	movs	r2, #8
 80027be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	69db      	ldr	r3, [r3, #28]
 80027c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d003      	beq.n	80027d6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f000 f9f8 	bl	8002bc4 <HAL_TIM_IC_CaptureCallback>
 80027d4:	e005      	b.n	80027e2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f000 f9eb 	bl	8002bb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027dc:	6878      	ldr	r0, [r7, #4]
 80027de:	f000 f9fa 	bl	8002bd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2200      	movs	r2, #0
 80027e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	691b      	ldr	r3, [r3, #16]
 80027ee:	f003 0301 	and.w	r3, r3, #1
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d10e      	bne.n	8002814 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	f003 0301 	and.w	r3, r3, #1
 8002800:	2b01      	cmp	r3, #1
 8002802:	d107      	bne.n	8002814 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f06f 0201 	mvn.w	r2, #1
 800280c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f7fe fc88 	bl	8001124 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	691b      	ldr	r3, [r3, #16]
 800281a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800281e:	2b80      	cmp	r3, #128	; 0x80
 8002820:	d10e      	bne.n	8002840 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800282c:	2b80      	cmp	r3, #128	; 0x80
 800282e:	d107      	bne.n	8002840 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002838:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f000 fce9 	bl	8003212 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	691b      	ldr	r3, [r3, #16]
 8002846:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800284a:	2b40      	cmp	r3, #64	; 0x40
 800284c:	d10e      	bne.n	800286c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002858:	2b40      	cmp	r3, #64	; 0x40
 800285a:	d107      	bne.n	800286c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002864:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f000 f9be 	bl	8002be8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	691b      	ldr	r3, [r3, #16]
 8002872:	f003 0320 	and.w	r3, r3, #32
 8002876:	2b20      	cmp	r3, #32
 8002878:	d10e      	bne.n	8002898 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	f003 0320 	and.w	r3, r3, #32
 8002884:	2b20      	cmp	r3, #32
 8002886:	d107      	bne.n	8002898 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f06f 0220 	mvn.w	r2, #32
 8002890:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f000 fcb4 	bl	8003200 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002898:	bf00      	nop
 800289a:	3708      	adds	r7, #8
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}

080028a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b086      	sub	sp, #24
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	60f8      	str	r0, [r7, #12]
 80028a8:	60b9      	str	r1, [r7, #8]
 80028aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028ac:	2300      	movs	r3, #0
 80028ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d101      	bne.n	80028be <HAL_TIM_PWM_ConfigChannel+0x1e>
 80028ba:	2302      	movs	r3, #2
 80028bc:	e0ae      	b.n	8002a1c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2201      	movs	r2, #1
 80028c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2b0c      	cmp	r3, #12
 80028ca:	f200 809f 	bhi.w	8002a0c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80028ce:	a201      	add	r2, pc, #4	; (adr r2, 80028d4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80028d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028d4:	08002909 	.word	0x08002909
 80028d8:	08002a0d 	.word	0x08002a0d
 80028dc:	08002a0d 	.word	0x08002a0d
 80028e0:	08002a0d 	.word	0x08002a0d
 80028e4:	08002949 	.word	0x08002949
 80028e8:	08002a0d 	.word	0x08002a0d
 80028ec:	08002a0d 	.word	0x08002a0d
 80028f0:	08002a0d 	.word	0x08002a0d
 80028f4:	0800298b 	.word	0x0800298b
 80028f8:	08002a0d 	.word	0x08002a0d
 80028fc:	08002a0d 	.word	0x08002a0d
 8002900:	08002a0d 	.word	0x08002a0d
 8002904:	080029cb 	.word	0x080029cb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	68b9      	ldr	r1, [r7, #8]
 800290e:	4618      	mov	r0, r3
 8002910:	f000 f9d6 	bl	8002cc0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	699a      	ldr	r2, [r3, #24]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f042 0208 	orr.w	r2, r2, #8
 8002922:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	699a      	ldr	r2, [r3, #24]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f022 0204 	bic.w	r2, r2, #4
 8002932:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	6999      	ldr	r1, [r3, #24]
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	691a      	ldr	r2, [r3, #16]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	430a      	orrs	r2, r1
 8002944:	619a      	str	r2, [r3, #24]
      break;
 8002946:	e064      	b.n	8002a12 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	68b9      	ldr	r1, [r7, #8]
 800294e:	4618      	mov	r0, r3
 8002950:	f000 fa1c 	bl	8002d8c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	699a      	ldr	r2, [r3, #24]
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002962:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	699a      	ldr	r2, [r3, #24]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002972:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	6999      	ldr	r1, [r3, #24]
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	691b      	ldr	r3, [r3, #16]
 800297e:	021a      	lsls	r2, r3, #8
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	430a      	orrs	r2, r1
 8002986:	619a      	str	r2, [r3, #24]
      break;
 8002988:	e043      	b.n	8002a12 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	68b9      	ldr	r1, [r7, #8]
 8002990:	4618      	mov	r0, r3
 8002992:	f000 fa65 	bl	8002e60 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	69da      	ldr	r2, [r3, #28]
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f042 0208 	orr.w	r2, r2, #8
 80029a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	69da      	ldr	r2, [r3, #28]
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f022 0204 	bic.w	r2, r2, #4
 80029b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	69d9      	ldr	r1, [r3, #28]
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	691a      	ldr	r2, [r3, #16]
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	430a      	orrs	r2, r1
 80029c6:	61da      	str	r2, [r3, #28]
      break;
 80029c8:	e023      	b.n	8002a12 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	68b9      	ldr	r1, [r7, #8]
 80029d0:	4618      	mov	r0, r3
 80029d2:	f000 faaf 	bl	8002f34 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	69da      	ldr	r2, [r3, #28]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	69da      	ldr	r2, [r3, #28]
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	69d9      	ldr	r1, [r3, #28]
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	691b      	ldr	r3, [r3, #16]
 8002a00:	021a      	lsls	r2, r3, #8
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	430a      	orrs	r2, r1
 8002a08:	61da      	str	r2, [r3, #28]
      break;
 8002a0a:	e002      	b.n	8002a12 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	75fb      	strb	r3, [r7, #23]
      break;
 8002a10:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2200      	movs	r2, #0
 8002a16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002a1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3718      	adds	r7, #24
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b084      	sub	sp, #16
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d101      	bne.n	8002a40 <HAL_TIM_ConfigClockSource+0x1c>
 8002a3c:	2302      	movs	r3, #2
 8002a3e:	e0b4      	b.n	8002baa <HAL_TIM_ConfigClockSource+0x186>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2201      	movs	r2, #1
 8002a44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2202      	movs	r2, #2
 8002a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002a5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a66:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	68ba      	ldr	r2, [r7, #8]
 8002a6e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a78:	d03e      	beq.n	8002af8 <HAL_TIM_ConfigClockSource+0xd4>
 8002a7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a7e:	f200 8087 	bhi.w	8002b90 <HAL_TIM_ConfigClockSource+0x16c>
 8002a82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a86:	f000 8086 	beq.w	8002b96 <HAL_TIM_ConfigClockSource+0x172>
 8002a8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a8e:	d87f      	bhi.n	8002b90 <HAL_TIM_ConfigClockSource+0x16c>
 8002a90:	2b70      	cmp	r3, #112	; 0x70
 8002a92:	d01a      	beq.n	8002aca <HAL_TIM_ConfigClockSource+0xa6>
 8002a94:	2b70      	cmp	r3, #112	; 0x70
 8002a96:	d87b      	bhi.n	8002b90 <HAL_TIM_ConfigClockSource+0x16c>
 8002a98:	2b60      	cmp	r3, #96	; 0x60
 8002a9a:	d050      	beq.n	8002b3e <HAL_TIM_ConfigClockSource+0x11a>
 8002a9c:	2b60      	cmp	r3, #96	; 0x60
 8002a9e:	d877      	bhi.n	8002b90 <HAL_TIM_ConfigClockSource+0x16c>
 8002aa0:	2b50      	cmp	r3, #80	; 0x50
 8002aa2:	d03c      	beq.n	8002b1e <HAL_TIM_ConfigClockSource+0xfa>
 8002aa4:	2b50      	cmp	r3, #80	; 0x50
 8002aa6:	d873      	bhi.n	8002b90 <HAL_TIM_ConfigClockSource+0x16c>
 8002aa8:	2b40      	cmp	r3, #64	; 0x40
 8002aaa:	d058      	beq.n	8002b5e <HAL_TIM_ConfigClockSource+0x13a>
 8002aac:	2b40      	cmp	r3, #64	; 0x40
 8002aae:	d86f      	bhi.n	8002b90 <HAL_TIM_ConfigClockSource+0x16c>
 8002ab0:	2b30      	cmp	r3, #48	; 0x30
 8002ab2:	d064      	beq.n	8002b7e <HAL_TIM_ConfigClockSource+0x15a>
 8002ab4:	2b30      	cmp	r3, #48	; 0x30
 8002ab6:	d86b      	bhi.n	8002b90 <HAL_TIM_ConfigClockSource+0x16c>
 8002ab8:	2b20      	cmp	r3, #32
 8002aba:	d060      	beq.n	8002b7e <HAL_TIM_ConfigClockSource+0x15a>
 8002abc:	2b20      	cmp	r3, #32
 8002abe:	d867      	bhi.n	8002b90 <HAL_TIM_ConfigClockSource+0x16c>
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d05c      	beq.n	8002b7e <HAL_TIM_ConfigClockSource+0x15a>
 8002ac4:	2b10      	cmp	r3, #16
 8002ac6:	d05a      	beq.n	8002b7e <HAL_TIM_ConfigClockSource+0x15a>
 8002ac8:	e062      	b.n	8002b90 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002ada:	f000 faf0 	bl	80030be <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002aec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	68ba      	ldr	r2, [r7, #8]
 8002af4:	609a      	str	r2, [r3, #8]
      break;
 8002af6:	e04f      	b.n	8002b98 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002b08:	f000 fad9 	bl	80030be <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	689a      	ldr	r2, [r3, #8]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b1a:	609a      	str	r2, [r3, #8]
      break;
 8002b1c:	e03c      	b.n	8002b98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	f000 fa50 	bl	8002fd0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	2150      	movs	r1, #80	; 0x50
 8002b36:	4618      	mov	r0, r3
 8002b38:	f000 faa7 	bl	800308a <TIM_ITRx_SetConfig>
      break;
 8002b3c:	e02c      	b.n	8002b98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b4a:	461a      	mov	r2, r3
 8002b4c:	f000 fa6e 	bl	800302c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2160      	movs	r1, #96	; 0x60
 8002b56:	4618      	mov	r0, r3
 8002b58:	f000 fa97 	bl	800308a <TIM_ITRx_SetConfig>
      break;
 8002b5c:	e01c      	b.n	8002b98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	f000 fa30 	bl	8002fd0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	2140      	movs	r1, #64	; 0x40
 8002b76:	4618      	mov	r0, r3
 8002b78:	f000 fa87 	bl	800308a <TIM_ITRx_SetConfig>
      break;
 8002b7c:	e00c      	b.n	8002b98 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4619      	mov	r1, r3
 8002b88:	4610      	mov	r0, r2
 8002b8a:	f000 fa7e 	bl	800308a <TIM_ITRx_SetConfig>
      break;
 8002b8e:	e003      	b.n	8002b98 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	73fb      	strb	r3, [r7, #15]
      break;
 8002b94:	e000      	b.n	8002b98 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002b96:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002ba8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3710      	adds	r7, #16
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}

08002bb2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002bb2:	b480      	push	{r7}
 8002bb4:	b083      	sub	sp, #12
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002bba:	bf00      	nop
 8002bbc:	370c      	adds	r7, #12
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bc80      	pop	{r7}
 8002bc2:	4770      	bx	lr

08002bc4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002bcc:	bf00      	nop
 8002bce:	370c      	adds	r7, #12
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bc80      	pop	{r7}
 8002bd4:	4770      	bx	lr

08002bd6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002bd6:	b480      	push	{r7}
 8002bd8:	b083      	sub	sp, #12
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002bde:	bf00      	nop
 8002be0:	370c      	adds	r7, #12
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bc80      	pop	{r7}
 8002be6:	4770      	bx	lr

08002be8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002bf0:	bf00      	nop
 8002bf2:	370c      	adds	r7, #12
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bc80      	pop	{r7}
 8002bf8:	4770      	bx	lr
	...

08002bfc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b085      	sub	sp, #20
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
 8002c04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	4a29      	ldr	r2, [pc, #164]	; (8002cb4 <TIM_Base_SetConfig+0xb8>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d00b      	beq.n	8002c2c <TIM_Base_SetConfig+0x30>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c1a:	d007      	beq.n	8002c2c <TIM_Base_SetConfig+0x30>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	4a26      	ldr	r2, [pc, #152]	; (8002cb8 <TIM_Base_SetConfig+0xbc>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d003      	beq.n	8002c2c <TIM_Base_SetConfig+0x30>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	4a25      	ldr	r2, [pc, #148]	; (8002cbc <TIM_Base_SetConfig+0xc0>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d108      	bne.n	8002c3e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	68fa      	ldr	r2, [r7, #12]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4a1c      	ldr	r2, [pc, #112]	; (8002cb4 <TIM_Base_SetConfig+0xb8>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d00b      	beq.n	8002c5e <TIM_Base_SetConfig+0x62>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c4c:	d007      	beq.n	8002c5e <TIM_Base_SetConfig+0x62>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4a19      	ldr	r2, [pc, #100]	; (8002cb8 <TIM_Base_SetConfig+0xbc>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d003      	beq.n	8002c5e <TIM_Base_SetConfig+0x62>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4a18      	ldr	r2, [pc, #96]	; (8002cbc <TIM_Base_SetConfig+0xc0>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d108      	bne.n	8002c70 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	68db      	ldr	r3, [r3, #12]
 8002c6a:	68fa      	ldr	r2, [r7, #12]
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	695b      	ldr	r3, [r3, #20]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	68fa      	ldr	r2, [r7, #12]
 8002c82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	689a      	ldr	r2, [r3, #8]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	4a07      	ldr	r2, [pc, #28]	; (8002cb4 <TIM_Base_SetConfig+0xb8>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d103      	bne.n	8002ca4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	691a      	ldr	r2, [r3, #16]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	615a      	str	r2, [r3, #20]
}
 8002caa:	bf00      	nop
 8002cac:	3714      	adds	r7, #20
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bc80      	pop	{r7}
 8002cb2:	4770      	bx	lr
 8002cb4:	40012c00 	.word	0x40012c00
 8002cb8:	40000400 	.word	0x40000400
 8002cbc:	40000800 	.word	0x40000800

08002cc0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b087      	sub	sp, #28
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
 8002cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6a1b      	ldr	r3, [r3, #32]
 8002cce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6a1b      	ldr	r3, [r3, #32]
 8002cd4:	f023 0201 	bic.w	r2, r3, #1
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	699b      	ldr	r3, [r3, #24]
 8002ce6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f023 0303 	bic.w	r3, r3, #3
 8002cf6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	68fa      	ldr	r2, [r7, #12]
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	f023 0302 	bic.w	r3, r3, #2
 8002d08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	697a      	ldr	r2, [r7, #20]
 8002d10:	4313      	orrs	r3, r2
 8002d12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	4a1c      	ldr	r2, [pc, #112]	; (8002d88 <TIM_OC1_SetConfig+0xc8>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d10c      	bne.n	8002d36 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	f023 0308 	bic.w	r3, r3, #8
 8002d22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	697a      	ldr	r2, [r7, #20]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	f023 0304 	bic.w	r3, r3, #4
 8002d34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4a13      	ldr	r2, [pc, #76]	; (8002d88 <TIM_OC1_SetConfig+0xc8>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d111      	bne.n	8002d62 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002d4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	695b      	ldr	r3, [r3, #20]
 8002d52:	693a      	ldr	r2, [r7, #16]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	699b      	ldr	r3, [r3, #24]
 8002d5c:	693a      	ldr	r2, [r7, #16]
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	693a      	ldr	r2, [r7, #16]
 8002d66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	68fa      	ldr	r2, [r7, #12]
 8002d6c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	685a      	ldr	r2, [r3, #4]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	697a      	ldr	r2, [r7, #20]
 8002d7a:	621a      	str	r2, [r3, #32]
}
 8002d7c:	bf00      	nop
 8002d7e:	371c      	adds	r7, #28
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bc80      	pop	{r7}
 8002d84:	4770      	bx	lr
 8002d86:	bf00      	nop
 8002d88:	40012c00 	.word	0x40012c00

08002d8c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b087      	sub	sp, #28
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6a1b      	ldr	r3, [r3, #32]
 8002d9a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6a1b      	ldr	r3, [r3, #32]
 8002da0:	f023 0210 	bic.w	r2, r3, #16
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	699b      	ldr	r3, [r3, #24]
 8002db2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002dba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dc2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	021b      	lsls	r3, r3, #8
 8002dca:	68fa      	ldr	r2, [r7, #12]
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	f023 0320 	bic.w	r3, r3, #32
 8002dd6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	011b      	lsls	r3, r3, #4
 8002dde:	697a      	ldr	r2, [r7, #20]
 8002de0:	4313      	orrs	r3, r2
 8002de2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	4a1d      	ldr	r2, [pc, #116]	; (8002e5c <TIM_OC2_SetConfig+0xd0>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d10d      	bne.n	8002e08 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002df2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	011b      	lsls	r3, r3, #4
 8002dfa:	697a      	ldr	r2, [r7, #20]
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e06:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	4a14      	ldr	r2, [pc, #80]	; (8002e5c <TIM_OC2_SetConfig+0xd0>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d113      	bne.n	8002e38 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002e16:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002e1e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	695b      	ldr	r3, [r3, #20]
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	693a      	ldr	r2, [r7, #16]
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	699b      	ldr	r3, [r3, #24]
 8002e30:	009b      	lsls	r3, r3, #2
 8002e32:	693a      	ldr	r2, [r7, #16]
 8002e34:	4313      	orrs	r3, r2
 8002e36:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	693a      	ldr	r2, [r7, #16]
 8002e3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	68fa      	ldr	r2, [r7, #12]
 8002e42:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	685a      	ldr	r2, [r3, #4]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	697a      	ldr	r2, [r7, #20]
 8002e50:	621a      	str	r2, [r3, #32]
}
 8002e52:	bf00      	nop
 8002e54:	371c      	adds	r7, #28
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bc80      	pop	{r7}
 8002e5a:	4770      	bx	lr
 8002e5c:	40012c00 	.word	0x40012c00

08002e60 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b087      	sub	sp, #28
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6a1b      	ldr	r3, [r3, #32]
 8002e6e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6a1b      	ldr	r3, [r3, #32]
 8002e74:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	69db      	ldr	r3, [r3, #28]
 8002e86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f023 0303 	bic.w	r3, r3, #3
 8002e96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	68fa      	ldr	r2, [r7, #12]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002ea8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	021b      	lsls	r3, r3, #8
 8002eb0:	697a      	ldr	r2, [r7, #20]
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	4a1d      	ldr	r2, [pc, #116]	; (8002f30 <TIM_OC3_SetConfig+0xd0>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d10d      	bne.n	8002eda <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002ec4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	68db      	ldr	r3, [r3, #12]
 8002eca:	021b      	lsls	r3, r3, #8
 8002ecc:	697a      	ldr	r2, [r7, #20]
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002ed8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4a14      	ldr	r2, [pc, #80]	; (8002f30 <TIM_OC3_SetConfig+0xd0>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d113      	bne.n	8002f0a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002ee8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002ef0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	695b      	ldr	r3, [r3, #20]
 8002ef6:	011b      	lsls	r3, r3, #4
 8002ef8:	693a      	ldr	r2, [r7, #16]
 8002efa:	4313      	orrs	r3, r2
 8002efc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	699b      	ldr	r3, [r3, #24]
 8002f02:	011b      	lsls	r3, r3, #4
 8002f04:	693a      	ldr	r2, [r7, #16]
 8002f06:	4313      	orrs	r3, r2
 8002f08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	693a      	ldr	r2, [r7, #16]
 8002f0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	68fa      	ldr	r2, [r7, #12]
 8002f14:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	685a      	ldr	r2, [r3, #4]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	697a      	ldr	r2, [r7, #20]
 8002f22:	621a      	str	r2, [r3, #32]
}
 8002f24:	bf00      	nop
 8002f26:	371c      	adds	r7, #28
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bc80      	pop	{r7}
 8002f2c:	4770      	bx	lr
 8002f2e:	bf00      	nop
 8002f30:	40012c00 	.word	0x40012c00

08002f34 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b087      	sub	sp, #28
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
 8002f3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6a1b      	ldr	r3, [r3, #32]
 8002f42:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6a1b      	ldr	r3, [r3, #32]
 8002f48:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	69db      	ldr	r3, [r3, #28]
 8002f5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	021b      	lsls	r3, r3, #8
 8002f72:	68fa      	ldr	r2, [r7, #12]
 8002f74:	4313      	orrs	r3, r2
 8002f76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002f7e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	031b      	lsls	r3, r3, #12
 8002f86:	693a      	ldr	r2, [r7, #16]
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	4a0f      	ldr	r2, [pc, #60]	; (8002fcc <TIM_OC4_SetConfig+0x98>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d109      	bne.n	8002fa8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f9a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	695b      	ldr	r3, [r3, #20]
 8002fa0:	019b      	lsls	r3, r3, #6
 8002fa2:	697a      	ldr	r2, [r7, #20]
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	697a      	ldr	r2, [r7, #20]
 8002fac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	68fa      	ldr	r2, [r7, #12]
 8002fb2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	685a      	ldr	r2, [r3, #4]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	693a      	ldr	r2, [r7, #16]
 8002fc0:	621a      	str	r2, [r3, #32]
}
 8002fc2:	bf00      	nop
 8002fc4:	371c      	adds	r7, #28
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bc80      	pop	{r7}
 8002fca:	4770      	bx	lr
 8002fcc:	40012c00 	.word	0x40012c00

08002fd0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b087      	sub	sp, #28
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	60f8      	str	r0, [r7, #12]
 8002fd8:	60b9      	str	r1, [r7, #8]
 8002fda:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	6a1b      	ldr	r3, [r3, #32]
 8002fe0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	6a1b      	ldr	r3, [r3, #32]
 8002fe6:	f023 0201 	bic.w	r2, r3, #1
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	699b      	ldr	r3, [r3, #24]
 8002ff2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ffa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	011b      	lsls	r3, r3, #4
 8003000:	693a      	ldr	r2, [r7, #16]
 8003002:	4313      	orrs	r3, r2
 8003004:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	f023 030a 	bic.w	r3, r3, #10
 800300c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800300e:	697a      	ldr	r2, [r7, #20]
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	4313      	orrs	r3, r2
 8003014:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	693a      	ldr	r2, [r7, #16]
 800301a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	697a      	ldr	r2, [r7, #20]
 8003020:	621a      	str	r2, [r3, #32]
}
 8003022:	bf00      	nop
 8003024:	371c      	adds	r7, #28
 8003026:	46bd      	mov	sp, r7
 8003028:	bc80      	pop	{r7}
 800302a:	4770      	bx	lr

0800302c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800302c:	b480      	push	{r7}
 800302e:	b087      	sub	sp, #28
 8003030:	af00      	add	r7, sp, #0
 8003032:	60f8      	str	r0, [r7, #12]
 8003034:	60b9      	str	r1, [r7, #8]
 8003036:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	6a1b      	ldr	r3, [r3, #32]
 800303c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	6a1b      	ldr	r3, [r3, #32]
 8003042:	f023 0210 	bic.w	r2, r3, #16
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	699b      	ldr	r3, [r3, #24]
 800304e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003056:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	031b      	lsls	r3, r3, #12
 800305c:	693a      	ldr	r2, [r7, #16]
 800305e:	4313      	orrs	r3, r2
 8003060:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003068:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	011b      	lsls	r3, r3, #4
 800306e:	697a      	ldr	r2, [r7, #20]
 8003070:	4313      	orrs	r3, r2
 8003072:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	693a      	ldr	r2, [r7, #16]
 8003078:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	697a      	ldr	r2, [r7, #20]
 800307e:	621a      	str	r2, [r3, #32]
}
 8003080:	bf00      	nop
 8003082:	371c      	adds	r7, #28
 8003084:	46bd      	mov	sp, r7
 8003086:	bc80      	pop	{r7}
 8003088:	4770      	bx	lr

0800308a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800308a:	b480      	push	{r7}
 800308c:	b085      	sub	sp, #20
 800308e:	af00      	add	r7, sp, #0
 8003090:	6078      	str	r0, [r7, #4]
 8003092:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80030a2:	683a      	ldr	r2, [r7, #0]
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	f043 0307 	orr.w	r3, r3, #7
 80030ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	68fa      	ldr	r2, [r7, #12]
 80030b2:	609a      	str	r2, [r3, #8]
}
 80030b4:	bf00      	nop
 80030b6:	3714      	adds	r7, #20
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bc80      	pop	{r7}
 80030bc:	4770      	bx	lr

080030be <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80030be:	b480      	push	{r7}
 80030c0:	b087      	sub	sp, #28
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	60f8      	str	r0, [r7, #12]
 80030c6:	60b9      	str	r1, [r7, #8]
 80030c8:	607a      	str	r2, [r7, #4]
 80030ca:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80030d8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	021a      	lsls	r2, r3, #8
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	431a      	orrs	r2, r3
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	4313      	orrs	r3, r2
 80030e6:	697a      	ldr	r2, [r7, #20]
 80030e8:	4313      	orrs	r3, r2
 80030ea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	697a      	ldr	r2, [r7, #20]
 80030f0:	609a      	str	r2, [r3, #8]
}
 80030f2:	bf00      	nop
 80030f4:	371c      	adds	r7, #28
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bc80      	pop	{r7}
 80030fa:	4770      	bx	lr

080030fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b087      	sub	sp, #28
 8003100:	af00      	add	r7, sp, #0
 8003102:	60f8      	str	r0, [r7, #12]
 8003104:	60b9      	str	r1, [r7, #8]
 8003106:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	f003 031f 	and.w	r3, r3, #31
 800310e:	2201      	movs	r2, #1
 8003110:	fa02 f303 	lsl.w	r3, r2, r3
 8003114:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	6a1a      	ldr	r2, [r3, #32]
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	43db      	mvns	r3, r3
 800311e:	401a      	ands	r2, r3
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	6a1a      	ldr	r2, [r3, #32]
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	f003 031f 	and.w	r3, r3, #31
 800312e:	6879      	ldr	r1, [r7, #4]
 8003130:	fa01 f303 	lsl.w	r3, r1, r3
 8003134:	431a      	orrs	r2, r3
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	621a      	str	r2, [r3, #32]
}
 800313a:	bf00      	nop
 800313c:	371c      	adds	r7, #28
 800313e:	46bd      	mov	sp, r7
 8003140:	bc80      	pop	{r7}
 8003142:	4770      	bx	lr

08003144 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003144:	b480      	push	{r7}
 8003146:	b085      	sub	sp, #20
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
 800314c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003154:	2b01      	cmp	r3, #1
 8003156:	d101      	bne.n	800315c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003158:	2302      	movs	r3, #2
 800315a:	e046      	b.n	80031ea <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2201      	movs	r2, #1
 8003160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2202      	movs	r2, #2
 8003168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003182:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	68fa      	ldr	r2, [r7, #12]
 800318a:	4313      	orrs	r3, r2
 800318c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	68fa      	ldr	r2, [r7, #12]
 8003194:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a16      	ldr	r2, [pc, #88]	; (80031f4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d00e      	beq.n	80031be <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031a8:	d009      	beq.n	80031be <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a12      	ldr	r2, [pc, #72]	; (80031f8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d004      	beq.n	80031be <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a10      	ldr	r2, [pc, #64]	; (80031fc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d10c      	bne.n	80031d8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	68ba      	ldr	r2, [r7, #8]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	68ba      	ldr	r2, [r7, #8]
 80031d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2201      	movs	r2, #1
 80031dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2200      	movs	r2, #0
 80031e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80031e8:	2300      	movs	r3, #0
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3714      	adds	r7, #20
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bc80      	pop	{r7}
 80031f2:	4770      	bx	lr
 80031f4:	40012c00 	.word	0x40012c00
 80031f8:	40000400 	.word	0x40000400
 80031fc:	40000800 	.word	0x40000800

08003200 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003200:	b480      	push	{r7}
 8003202:	b083      	sub	sp, #12
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003208:	bf00      	nop
 800320a:	370c      	adds	r7, #12
 800320c:	46bd      	mov	sp, r7
 800320e:	bc80      	pop	{r7}
 8003210:	4770      	bx	lr

08003212 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003212:	b480      	push	{r7}
 8003214:	b083      	sub	sp, #12
 8003216:	af00      	add	r7, sp, #0
 8003218:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800321a:	bf00      	nop
 800321c:	370c      	adds	r7, #12
 800321e:	46bd      	mov	sp, r7
 8003220:	bc80      	pop	{r7}
 8003222:	4770      	bx	lr

08003224 <memset>:
 8003224:	4603      	mov	r3, r0
 8003226:	4402      	add	r2, r0
 8003228:	4293      	cmp	r3, r2
 800322a:	d100      	bne.n	800322e <memset+0xa>
 800322c:	4770      	bx	lr
 800322e:	f803 1b01 	strb.w	r1, [r3], #1
 8003232:	e7f9      	b.n	8003228 <memset+0x4>

08003234 <__libc_init_array>:
 8003234:	b570      	push	{r4, r5, r6, lr}
 8003236:	2600      	movs	r6, #0
 8003238:	4d0c      	ldr	r5, [pc, #48]	; (800326c <__libc_init_array+0x38>)
 800323a:	4c0d      	ldr	r4, [pc, #52]	; (8003270 <__libc_init_array+0x3c>)
 800323c:	1b64      	subs	r4, r4, r5
 800323e:	10a4      	asrs	r4, r4, #2
 8003240:	42a6      	cmp	r6, r4
 8003242:	d109      	bne.n	8003258 <__libc_init_array+0x24>
 8003244:	f000 f81a 	bl	800327c <_init>
 8003248:	2600      	movs	r6, #0
 800324a:	4d0a      	ldr	r5, [pc, #40]	; (8003274 <__libc_init_array+0x40>)
 800324c:	4c0a      	ldr	r4, [pc, #40]	; (8003278 <__libc_init_array+0x44>)
 800324e:	1b64      	subs	r4, r4, r5
 8003250:	10a4      	asrs	r4, r4, #2
 8003252:	42a6      	cmp	r6, r4
 8003254:	d105      	bne.n	8003262 <__libc_init_array+0x2e>
 8003256:	bd70      	pop	{r4, r5, r6, pc}
 8003258:	f855 3b04 	ldr.w	r3, [r5], #4
 800325c:	4798      	blx	r3
 800325e:	3601      	adds	r6, #1
 8003260:	e7ee      	b.n	8003240 <__libc_init_array+0xc>
 8003262:	f855 3b04 	ldr.w	r3, [r5], #4
 8003266:	4798      	blx	r3
 8003268:	3601      	adds	r6, #1
 800326a:	e7f2      	b.n	8003252 <__libc_init_array+0x1e>
 800326c:	080032b8 	.word	0x080032b8
 8003270:	080032b8 	.word	0x080032b8
 8003274:	080032b8 	.word	0x080032b8
 8003278:	080032bc 	.word	0x080032bc

0800327c <_init>:
 800327c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800327e:	bf00      	nop
 8003280:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003282:	bc08      	pop	{r3}
 8003284:	469e      	mov	lr, r3
 8003286:	4770      	bx	lr

08003288 <_fini>:
 8003288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800328a:	bf00      	nop
 800328c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800328e:	bc08      	pop	{r3}
 8003290:	469e      	mov	lr, r3
 8003292:	4770      	bx	lr
